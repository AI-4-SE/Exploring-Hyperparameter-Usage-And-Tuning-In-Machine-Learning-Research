{
    "examples/associative_memory.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_279": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_315": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_389": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PatternDataset(original_pattern, delayed_target, filtered_target, length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_413": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PatternDataset(original_pattern, delayed_target, filtered_target, length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_438": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_base_name + str(j))",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_base_name + str(j))",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_base_name + str(best_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_319": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_343": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_345": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_421": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_base_name + str(j))",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_base_name + str(j))",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_base_name + str(best_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_445": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_183": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiStepLR_372": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_class(params, learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "scheduler_config[scheduler_choice][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "scheduler_config[scheduler_choice][2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CosineAnnealingWarmRestarts_375": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_class(params, learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_0": {
                    "value": "scheduler_config[scheduler_choice][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CyclicLR_378": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_class(params, learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "base_lr": {
                    "value": "scheduler_config[scheduler_choice][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_lr": {
                    "value": "scheduler_config[scheduler_choice][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step_size_up": {
                    "value": "scheduler_config[scheduler_choice][3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_403": {
                "obj": {
                    "value": "{'epoch': j, 'snn_state_dict': snn.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': train_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_base_name + str(j))",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_base_name + str(j))",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_base_name + str(best_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "OneCycleLR_382": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_class(params, learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "scheduler_config[scheduler_choice][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "total_steps": {
                    "value": "scheduler_config[scheduler_choice][2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "epochs": {
                    "value": "scheduler_config[scheduler_choice][3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/snn_mlp_1.py": {
        "torch": {
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "conf['pytorch_seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_153": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_202": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_241": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNISTDataset(mnist_trainset, max_rate=1, length=length, flatten=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_conf['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_244": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNISTDataset(mnist_testset, max_rate=1, length=length, flatten=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_conf['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_122": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_123": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_spike",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_train)",
                            "Call"
                        ],
                        [
                            "model(x_test)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_172": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_211": {
                "variable": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_spike",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_train)",
                            "Call"
                        ],
                        [
                            "model(x_test)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_216": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_302": {
                "variable": {
                    "value": "test_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf['test_checkpoint_path']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_175": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_178": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_219": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_222": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "{'epoch': j, 'snn_state_dict': snn.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': train_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/snn_mlp_1_poisson_input.py": {
        "torch": {
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "conf['pytorch_seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_154": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_202": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_240": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNISTDataset_Poisson_Spike(mnist_trainset, max_rate=1, length=length, flatten=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_conf['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_243": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNISTDataset_Poisson_Spike(mnist_testset, max_rate=1, length=length, flatten=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_conf['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_123": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_124": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_spike",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_train)",
                            "Call"
                        ],
                        [
                            "model(x_test)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_172": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_spike",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_train)",
                            "Call"
                        ],
                        [
                            "model(x_test)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_215": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_301": {
                "variable": {
                    "value": "test_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf['test_checkpoint_path']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_175": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_178": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_218": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_221": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_268": {
                "obj": {
                    "value": "{'epoch': j, 'snn_state_dict': snn.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': train_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/snn_mlp_2.py": {
        "torch": {
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "conf['pytorch_seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_152": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_201": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_240": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNISTDataset(mnist_trainset, max_rate=1, length=length, flatten=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_conf['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_243": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNISTDataset(mnist_testset, max_rate=1, length=length, flatten=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_conf['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_121": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_122": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_163": {
                "variable": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_spike",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_train)",
                            "Call"
                        ],
                        [
                            "model(x_test)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_171": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_spike",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_train)",
                            "Call"
                        ],
                        [
                            "model(x_test)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_215": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_301": {
                "variable": {
                    "value": "test_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf['test_checkpoint_path']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_174": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_177": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_218": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_221": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_268": {
                "obj": {
                    "value": "{'epoch': j, 'snn_state_dict': snn.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': train_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/snn_mlp_2_poisson_input.py": {
        "torch": {
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_60": {
                "seed": {
                    "value": "conf['pytorch_seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_154": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_202": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_241": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNISTDataset_Poisson_Spike(mnist_trainset, max_rate=1, length=length, flatten=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_conf['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_244": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNISTDataset_Poisson_Spike(mnist_testset, max_rate=1, length=length, flatten=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyperparam_conf['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_123": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_124": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_spike",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_train)",
                            "Call"
                        ],
                        [
                            "model(x_test)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_172": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_spike",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_train)",
                            "Call"
                        ],
                        [
                            "model(x_test)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_215": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "spike_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(out_spike, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_302": {
                "variable": {
                    "value": "test_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "test_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf['test_checkpoint_path']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_175": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_178": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_218": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_221": {
                "condition": {
                    "value": "idx != target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "{'epoch': j, 'snn_state_dict': snn.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': train_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_base_path, checkpoint_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "snn_lib/data_loaders.py": {
        "torch": {
            "is_tensor_37": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_86": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "snn_lib/optimizers.py": {
        "torch": {
            "Adam_22": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_conf['Adam']['lr']",
                            "Subscript"
                        ],
                        [
                            "optimizer_conf['AdamW']['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "AdamW_26": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_conf['Adam']['lr']",
                            "Subscript"
                        ],
                        [
                            "optimizer_conf['AdamW']['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_30": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer_conf['Adam']['lr']",
                            "Subscript"
                        ],
                        [
                            "optimizer_conf['AdamW']['lr']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "snn_lib/schedulers.py": {
        "torch": {
            "MultiStepLR_24": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milesones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(scheduler_conf[scheduler_choice]['milestones'])",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scheduler_conf[scheduler_choice]['gamma']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "MultiStepLR_26": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milesones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(scheduler_conf[scheduler_choice]['milestones'])",
                            "Call"
                        ]
                    ]
                }
            },
            "CosineAnnealingWarmRestarts_31": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_0": {
                    "value": "T_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scheduler_conf[scheduler_choice]['T_0']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CyclicLR_39": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "base_lr": {
                    "value": "base_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scheduler_conf[scheduler_choice]['base_lr']",
                            "Subscript"
                        ]
                    ]
                },
                "max_lr": {
                    "value": "max_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scheduler_conf[scheduler_choice]['max_lr']",
                            "Subscript"
                        ]
                    ]
                },
                "step_size_up": {
                    "value": "step_size_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scheduler_conf[scheduler_choice]['step_size_up']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "snn_lib/snn_layers.py": {
        "torch": {
            "max_29": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(0.0, device=output.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_42": {
                "variable": {
                    "value": "exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exponent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.pow(1 - input, 2) / (2.0 * sigma ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "self.filter_tau_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "filter_tau_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_tau_s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "self.filter_tau_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "filter_tau_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_tau_m",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "filter_eta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "filter_tau_m / filter_tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.filter_v0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.pow(filter_eta, filter_eta / (filter_eta - 1)) / (filter_eta - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.filter_decay_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.exp(torch.tensor(-1 / filter_tau_m))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.filter_decay_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.exp(torch.tensor(-1 / filter_tau_s))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_92": {
                "variable": {
                    "value": "filter_state_s",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_93": {
                "variable": {
                    "value": "filter_state_m",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_133": {
                "variable": {
                    "value": "filter_state",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_172": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_173": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_175": {
                "variable": {
                    "value": "s_t_minus_1",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_176": {
                "variable": {
                    "value": "b_t_minus_1",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_212": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "neuron_number",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neuron_number",
                            "Method Argument"
                        ],
                        [
                            "neuron_number",
                            "Method Argument"
                        ],
                        [
                            "neuron_number",
                            "Method Argument"
                        ],
                        [
                            "neuron_number",
                            "Method Argument"
                        ],
                        [
                            "neuron_number",
                            "Method Argument"
                        ],
                        [
                            "neuron_number",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_213": {
                "variable": {
                    "value": "self.tau_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "tau_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_214": {
                "variable": {
                    "value": "self.tau_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "tau_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_219": {
                "variable": {
                    "value": "self.reset_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(-1.0 / tau_m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_220": {
                "variable": {
                    "value": "self.reset_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.neuron_number,), self.reset_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_223": {
                "variable": {
                    "value": "self.reset_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.neuron_number,), 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tau_m / tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_228": {
                "variable": {
                    "value": "self.v_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.pow(eta, eta / (eta - 1)) / (eta - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_231": {
                "variable": {
                    "value": "self.decay_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(torch.exp(-1 / self.tau_m))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_234": {
                "variable": {
                    "value": "self.decay_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(torch.exp(-1 / self.tau_s))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_237": {
                "variable": {
                    "value": "self.decay_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(-1 / tau_m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_238": {
                "variable": {
                    "value": "self.decay_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.neuron_number,), self.decay_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_324": {
                "variable": {
                    "value": "init_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.neuron_number",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_325": {
                "variable": {
                    "value": "init_reset_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.neuron_number",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_326": {
                "variable": {
                    "value": "init_psp_m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_327": {
                "variable": {
                    "value": "init_psp_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_356": {
                "variable": {
                    "value": "self.tau_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "tau_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_357": {
                "variable": {
                    "value": "self.tau_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "tau_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_360": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tau_m / tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_361": {
                "variable": {
                    "value": "self.v_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.pow(eta, eta / (eta - 1)) / (eta - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_364": {
                "variable": {
                    "value": "self.decay_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.exp(-1 / self.tau_m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_367": {
                "variable": {
                    "value": "self.decay_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.exp(-1 / self.tau_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_442": {
                "variable": {
                    "value": "init_psp_m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.input_size, self.output_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_443": {
                "variable": {
                    "value": "init_psp_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.input_size, self.output_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_468": {
                "variable": {
                    "value": "self.tau_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "tau_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_469": {
                "variable": {
                    "value": "self.tau_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "tau_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_472": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tau_m / tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_473": {
                "variable": {
                    "value": "self.v_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.pow(eta, eta / (eta - 1)) / (eta - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_476": {
                "variable": {
                    "value": "self.alpha_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.exp(-1 / self.tau_m) + torch.exp(-1 / self.tau_s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_479": {
                "variable": {
                    "value": "self.alpha_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-torch.exp(-(self.tau_m + self.tau_s) / (self.tau_m * self.tau_s))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_482": {
                "variable": {
                    "value": "self.beta_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.exp(-1 / self.tau_m) - torch.exp(-1 / self.tau_s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_545": {
                "variable": {
                    "value": "prev_t_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_546": {
                "variable": {
                    "value": "prev_t_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_570": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ],
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_572": {
                "variable": {
                    "value": "self.alpha_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.exp(-1 / self.tau)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_629": {
                "variable": {
                    "value": "prev_t_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_655": {
                "variable": {
                    "value": "self.tau_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "tau_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_656": {
                "variable": {
                    "value": "self.tau_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "tau_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ],
                        [
                            "tau_s",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_659": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tau_m / tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_660": {
                "variable": {
                    "value": "self.v_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.pow(eta, eta / (eta - 1)) / (eta - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_663": {
                "variable": {
                    "value": "self.decay_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.exp(-1 / self.tau_m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_666": {
                "variable": {
                    "value": "self.decay_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.exp(-1 / self.tau_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_733": {
                "variable": {
                    "value": "init_psp_m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_734": {
                "variable": {
                    "value": "init_psp_s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_776": {
                "variable": {
                    "value": "self.tau_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(neuron_number,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "tau_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_778": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_781": {
                "variable": {
                    "value": "self.reset_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(-1.0 / tau_m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_782": {
                "variable": {
                    "value": "self.reset_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.neuron_number,), self.reset_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_785": {
                "variable": {
                    "value": "self.reset_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.neuron_number,), reset_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_788": {
                "variable": {
                    "value": "self.decay_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(-1 / tau_m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_789": {
                "variable": {
                    "value": "self.decay_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.neuron_number,), self.decay_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_867": {
                "variable": {
                    "value": "init_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.neuron_number",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_868": {
                "variable": {
                    "value": "init_reset_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.neuron_number",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_911": {
                "variable": {
                    "value": "self.tau_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "tau_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ],
                        [
                            "tau_m",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_913": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_916": {
                "variable": {
                    "value": "self.reset_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(-1.0 / tau_m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_917": {
                "variable": {
                    "value": "self.reset_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.neuron_number,), self.reset_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_920": {
                "variable": {
                    "value": "self.reset_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.neuron_number,), 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_923": {
                "variable": {
                    "value": "self.decay_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(-1 / tau_m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_924": {
                "variable": {
                    "value": "self.decay_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full((self.neuron_number,), self.decay_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1005": {
                "variable": {
                    "value": "init_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.neuron_number",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1006": {
                "variable": {
                    "value": "init_reset_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.neuron_number",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_1032": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "train_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_bias",
                            "Method Argument"
                        ],
                        [
                            "train_bias",
                            "Method Argument"
                        ],
                        [
                            "train_bias",
                            "Method Argument"
                        ],
                        [
                            "train_bias",
                            "Method Argument"
                        ],
                        [
                            "train_bias",
                            "Method Argument"
                        ],
                        [
                            "train_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_1040": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_1043": {
                "variable": {
                    "value": "self.reset_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(-1.0 / tau_m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1044": {
                "variable": {
                    "value": "self.reset_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full(self.output_shape, self.reset_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1047": {
                "variable": {
                    "value": "self.reset_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full(self.output_shape, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_1050": {
                "variable": {
                    "value": "self.decay_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(-1 / tau_m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_1051": {
                "variable": {
                    "value": "self.decay_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.full(self.output_shape, self.decay_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1129": {
                "variable": {
                    "value": "init_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.output_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1130": {
                "variable": {
                    "value": "init_reset_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.output_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_1159": {
                "variable": {
                    "value": "self.maxpooling2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_104": {
                "tensors": {
                    "value": "filter_output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "filter_output_list + [s]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_141": {
                "tensors": {
                    "value": "filter_output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "filter_output_list + [s]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_196": {
                "tensors": {
                    "value": "filter_output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "filter_output_list + [s]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_770": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[input_size, neuron_number]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_773": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty([input_size, neuron_number])",
                            "Call"
                        ],
                        [
                            "torch.empty([input_size, neuron_number])",
                            "Call"
                        ],
                        [
                            "torch.empty([1, neuron_number])",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_775": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "neuron_number",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neuron_number",
                            "Method Argument"
                        ],
                        [
                            "neuron_number",
                            "Method Argument"
                        ],
                        [
                            "neuron_number",
                            "Method Argument"
                        ],
                        [
                            "neuron_number",
                            "Method Argument"
                        ],
                        [
                            "neuron_number",
                            "Method Argument"
                        ],
                        [
                            "neuron_number",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "train_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_bias",
                            "Method Argument"
                        ],
                        [
                            "train_bias",
                            "Method Argument"
                        ],
                        [
                            "train_bias",
                            "Method Argument"
                        ],
                        [
                            "train_bias",
                            "Method Argument"
                        ],
                        [
                            "train_bias",
                            "Method Argument"
                        ],
                        [
                            "train_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_902": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[input_size, neuron_number]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_905": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty([input_size, neuron_number])",
                            "Call"
                        ],
                        [
                            "torch.empty([input_size, neuron_number])",
                            "Call"
                        ],
                        [
                            "torch.empty([1, neuron_number])",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_907": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, neuron_number]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_909": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty([input_size, neuron_number])",
                            "Call"
                        ],
                        [
                            "torch.empty([input_size, neuron_number])",
                            "Call"
                        ],
                        [
                            "torch.empty([1, neuron_number])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1177": {
                "tensors": {
                    "value": "pooled_psp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pooled_psp + [psp]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_29": {
                "input": {
                    "value": "output - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_76": {
                "input": {
                    "value": "torch.tensor(-1 / filter_tau_m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_78": {
                "input": {
                    "value": "torch.tensor(-1 / filter_tau_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "data": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "data": {
                    "value": "-1.0 / tau_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_220": {
                "size": {
                    "value": "(self.neuron_number,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.reset_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_223": {
                "size": {
                    "value": "(self.neuron_number,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "data": {
                    "value": "torch.exp(-1 / self.tau_m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "data": {
                    "value": "torch.exp(-1 / self.tau_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "data": {
                    "value": "-1 / tau_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_238": {
                "size": {
                    "value": "(self.neuron_number,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.decay_v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_315": {
                "tensors": {
                    "value": "spikes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "spikes + [spike]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_364": {
                "input": {
                    "value": "-1 / self.tau_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_367": {
                "input": {
                    "value": "-1 / self.tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_437": {
                "tensors": {
                    "value": "spikes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "spikes + [spike]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_540": {
                "tensors": {
                    "value": "spikes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "spikes + [spike]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_572": {
                "input": {
                    "value": "-1 / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_625": {
                "tensors": {
                    "value": "spikes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "spikes + [spike]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_663": {
                "input": {
                    "value": "-1 / self.tau_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_666": {
                "input": {
                    "value": "-1 / self.tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_728": {
                "tensors": {
                    "value": "spikes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "spikes + [spike]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_778": {
                "data": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_781": {
                "data": {
                    "value": "-1.0 / tau_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_782": {
                "size": {
                    "value": "(self.neuron_number,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.reset_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_785": {
                "size": {
                    "value": "(self.neuron_number,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "reset_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_788": {
                "data": {
                    "value": "-1 / tau_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_789": {
                "size": {
                    "value": "(self.neuron_number,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.decay_v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_862": {
                "tensors": {
                    "value": "spikes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "spikes + [spike]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_913": {
                "data": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_916": {
                "data": {
                    "value": "-1.0 / tau_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_917": {
                "size": {
                    "value": "(self.neuron_number,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.reset_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_920": {
                "size": {
                    "value": "(self.neuron_number,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_923": {
                "data": {
                    "value": "-1 / tau_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_924": {
                "size": {
                    "value": "(self.neuron_number,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.decay_v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1000": {
                "tensors": {
                    "value": "spikes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "spikes + [spike]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_1040": {
                "data": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_1043": {
                "data": {
                    "value": "-1.0 / tau_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_1044": {
                "size": {
                    "value": "self.output_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.reset_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_1047": {
                "size": {
                    "value": "self.output_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_1050": {
                "data": {
                    "value": "-1 / tau_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_1051": {
                "size": {
                    "value": "self.output_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.decay_v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1123": {
                "tensors": {
                    "value": "spikes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "spikes + [spike]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_41": {
                "input": {
                    "value": "1 - input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_73": {
                "input": {
                    "value": "filter_eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(filter_tau_m / filter_tau_s)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "filter_eta / (filter_eta - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "-1 / filter_tau_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "-1 / filter_tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_228": {
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "eta / (eta - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_231": {
                "input": {
                    "value": "-1 / self.tau_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_234": {
                "input": {
                    "value": "-1 / self.tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_361": {
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "eta / (eta - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_473": {
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "eta / (eta - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_476": {
                "input": {
                    "value": "-1 / self.tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_479": {
                "input": {
                    "value": "-(self.tau_m + self.tau_s) / (self.tau_m * self.tau_s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_482": {
                "input": {
                    "value": "-1 / self.tau_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_660": {
                "input": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tau_m / tau_s)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "eta / (eta - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "snn_lib/utilities.py": {
        "torch": {
            "zeros_212": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, snn_model.neuron_number, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_213": {
                "variable": {
                    "value": "self.spike",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, snn_model.neuron_number, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "self.filtered_spike",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, snn_model.neuron_number, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_215": {
                "variable": {
                    "value": "self.reset_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, snn_model.neuron_number, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_198": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}