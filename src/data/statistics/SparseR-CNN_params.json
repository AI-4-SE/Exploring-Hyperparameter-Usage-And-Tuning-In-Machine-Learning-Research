{
    "demo/predictor.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "self.cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_32": {
                "variable": {
                    "value": "num_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "demo_d2/predictor.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "self.cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_32": {
                "variable": {
                    "value": "num_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/checkpoint/c2_model_loading.py": {
        "torch": {
            "as_tensor_248": {
                "variable": {
                    "value": "match_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "match_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(j) if match(i, j) else 0 for i in model_keys for j in ckpt_keys]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(match_matrix).view(len(model_keys), len(ckpt_keys))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_202": {
                "variable": {
                    "value": "new_weights[renamed]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weights[orig][1:], weights[orig][:1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/data/build.py": {
        "torch": {}
    },
    "detectron2/data/common.py": {
        "torch": {}
    },
    "detectron2/data/dataset_mapper.py": {
        "torch": {
            "as_tensor_142": {
                "variable": {
                    "value": "dataset_dict[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.ascontiguousarray(image.transpose(2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_144": {
                "variable": {
                    "value": "dataset_dict[sem_seg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "sem_seg_gt.astype('long')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/data/detection_utils.py": {
        "torch": {
            "tensor_382": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(obj['category_id']) for obj in annos]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "[obj['category_id'] for obj in annos]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_449": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(obj['category_id']) for obj in annos]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "[obj['category_id'] for obj in annos]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_240": {
                "variable": {
                    "value": "objectness_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset_dict.pop('proposal_objectness_logits').astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_415": {
                "tensors": {
                    "value": "[torch.from_numpy(np.ascontiguousarray(x)) for x in masks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_415": {
                "ndarray": {
                    "value": "np.ascontiguousarray(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/data/samplers/distributed_sampler.py": {
        "torch": {
            "Generator_48": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trunc_82": {
                "variable": {
                    "value": "self._int_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "repeat_factors",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_147": {
                "variable": {
                    "value": "rands",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self._frac_part)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Generator_160": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "rep_factors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._int_part + (rands < self._frac_part).float()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._get_epoch_indices(g)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_167": {
                "variable": {
                    "value": "randperm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_52": {
                "n": {
                    "value": "self._size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_54": {
                "start": {
                    "value": "self._size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/data/samplers/grouped_batch_sampler.py": {
        "torch": {}
    },
    "detectron2/data/transforms/transform.py": {
        "torch": {
            "from_numpy_130": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "img.view(shape_4d).permute(2, 3, 0, 1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, (self.new_h, self.new_w), mode=mode, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_141": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "img.view(shape_4d).permute(2, 3, 0, 1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, (self.new_h, self.new_w), mode=mode, align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "Image.fromarray(img)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.new_h, self.new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_PIL_RESIZE_TO_INTERPOLATE_MODE[interp_method]",
                            "Subscript"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if mode == 'nearest' else False",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/engine/defaults.py": {
        "torch": {
            "as_tensor_220": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image.astype('float32').transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_288": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_model(cfg)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[comm.get_local_rank()], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "build_model(cfg)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[comm.get_local_rank()]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/engine/hooks.py": {
        "torch": {
            "profile_281": {
                "variable": {
                    "value": "self._profiler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_cuda": {
                    "value": "self._use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/engine/launch.py": {
        "torch": {
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_83": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/engine/train_loop.py": {
        "torch": {
            "GradScaler_311": {
                "variable": {
                    "value": "grad_scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Stream_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/cityscapes_evaluation.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "self._cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/coco_evaluation.py": {
        "torch": {
            "sort_512": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0) if len(gt_overlaps) else torch.zeros(0, dtype=torch.float32)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_517": {
                "variable": {
                    "value": "recalls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_99": {
                "variable": {
                    "value": "self._cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_469": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[BoxMode.convert(obj['bbox'], BoxMode.XYWH_ABS, BoxMode.XYXY_ABS) for obj in anno if obj['iscrowd'] == 0]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "Boxes(gt_boxes)",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_469": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_471": {
                "variable": {
                    "value": "gt_areas",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno if obj['iscrowd'] == 0]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_489": {
                "variable": {
                    "value": "_gt_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_516": {
                "variable": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_510": {
                "tensors": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0) if len(gt_overlaps) else torch.zeros(0, dtype=torch.float32)",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_510": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction_dict['proposals']",
                            "Subscript"
                        ],
                        [
                            "predictions[inds]",
                            "Subscript"
                        ],
                        [
                            "predictions[:limit]",
                            "Subscript"
                        ],
                        [
                            "comm.gather(self._predictions, dst=0)",
                            "Call"
                        ],
                        [
                            "list(itertools.chain(*predictions))",
                            "Call"
                        ],
                        [
                            "self._predictions",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/evaluator.py": {
        "torch": {
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/lvis_evaluation.py": {
        "torch": {
            "sort_288": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0) if len(gt_overlaps) else torch.zeros(0, dtype=torch.float32)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_293": {
                "variable": {
                    "value": "recalls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_44": {
                "variable": {
                    "value": "self._cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_245": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[BoxMode.convert(obj['bbox'], BoxMode.XYWH_ABS, BoxMode.XYXY_ABS) for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "Boxes(gt_boxes)",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_245": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_247": {
                "variable": {
                    "value": "gt_areas",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_265": {
                "variable": {
                    "value": "_gt_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_292": {
                "variable": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_286": {
                "tensors": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0) if len(gt_overlaps) else torch.zeros(0, dtype=torch.float32)",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_286": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_105": {
                "obj": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction_dict['proposals']",
                            "Subscript"
                        ],
                        [
                            "predictions[inds]",
                            "Subscript"
                        ],
                        [
                            "predictions[:limit]",
                            "Subscript"
                        ],
                        [
                            "comm.gather(self._predictions, dst=0)",
                            "Call"
                        ],
                        [
                            "list(itertools.chain(*predictions))",
                            "Call"
                        ],
                        [
                            "self._predictions",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/pascal_voc_evaluation.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "self._cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/rotated_coco_evaluation.py": {
        "torch": {
            "from_numpy_36": {
                "variable": {
                    "value": "box_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxlist",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "(0, output_box_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/evaluation/sem_seg_evaluation.py": {
        "torch": {
            "device_48": {
                "variable": {
                    "value": "self._cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/export/api.py": {
        "torch": {
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trace_143": {
                "input": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/export/c10.py": {
        "torch": {
            "softmax_374": {
                "variable": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_377": {
                "variable": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_380": {
                "variable": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(class_prob, torch.zeros(class_prob.shape[0], 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_393": {
                "variable": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_403": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_ids, rois.tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_449": {
                "size": {
                    "value": "(b, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_rois_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pooler_fmt_boxes.device",
                            "Attribute"
                        ],
                        [
                            "output.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_380": {
                "*size": {
                    "value": "class_prob.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_398": {
                "size": {
                    "value": "(b, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_rois_list[0].device",
                            "Attribute"
                        ],
                        [
                            "pooler_fmt_boxes.device",
                            "Attribute"
                        ],
                        [
                            "output.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tensor_172": {}
        }
    },
    "detectron2/export/caffe2_export.py": {
        "torch": {
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/export/caffe2_inference.py": {
        "torch": {}
    },
    "detectron2/export/caffe2_modeling.py": {
        "torch": {
            "Tensor_133": {
                "variable": {
                    "value": "im_info",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_72": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_probs_pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "class_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_461": {
                "variable": {
                    "value": "self.anchor_generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "serialized_anchor_generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO(get_pb_arg_vals(predict_net, 'serialized_anchor_generator', None))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "result.pred_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_449": {
                "obj": {
                    "value": "self._wrapped_model.anchor_generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "serialized_anchor_generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO(get_pb_arg_vals(predict_net, 'serialized_anchor_generator', None))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/export/caffe2_patch.py": {
        "torch": {}
    },
    "detectron2/export/shared.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_str",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv_transpose2d_68": {
                "variable": {
                    "value": "tensor_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_in",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "to_device(torch.Tensor(kernel), tensor_in.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "int(up_scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(up_scale / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/export/torchscript.py": {
        "torch": {
            "script_56": {
                "variable": {
                    "value": "scripted_model",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/export/torchscript_patch.py": {
        "torch": {
            "ModuleList_321": {
                "variable": {
                    "value": "ret.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "ret.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_330": {
                "variable": {
                    "value": "ret.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "ret.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_331": {
                "variable": {
                    "value": "ret.output_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "ret.output_convs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "script_86": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "new_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, cls_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/layers/aspp.py": {
        "torch": {
            "ModuleList_56": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_121": {
                "variable": {
                    "value": "res[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "res[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=1)",
                            "Call"
                        ],
                        [
                            "self.project(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(res, self.dropout, training=self.training) if self.dropout > 0 else res",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "image_pooling",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "image_pooling",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=pool_kernel_size, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_124": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=1)",
                            "Call"
                        ],
                        [
                            "self.project(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(res, self.dropout, training=self.training) if self.dropout > 0 else res",
                            "IfExp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_89": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_94": {
                "kernel_size": {
                    "value": "pool_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/layers/batch_norm.py": {
        "torch": {
            "stack_162": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros_like(input) for k in range(dist.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_210": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_211": {
                "variable": {
                    "value": "meansqr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input * input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rsqrt_235": {
                "variable": {
                    "value": "invstd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(input_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mean, meansqr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_217": {
                "variable": {
                    "value": "(mean, meansqr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([mean, meansqr], dim=0)",
                            "Call"
                        ],
                        [
                            "AllReduce.apply(vec) * (1.0 / dist.get_world_size())",
                            "BinOp"
                        ],
                        [
                            "torch.zeros([2 * C + 1], device=mean.device, dtype=mean.dtype)",
                            "Call"
                        ],
                        [
                            "vec + input.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.cat([mean, meansqr, torch.ones([1], device=mean.device, dtype=mean.dtype)], dim=0)",
                            "Call"
                        ],
                        [
                            "AllReduce.apply(vec * B)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_231": {
                "variable": {
                    "value": "total_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec[-1].detach()",
                            "Call"
                        ],
                        [
                            "torch.max(total_batch, torch.ones_like(total_batch))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_232": {
                "variable": {
                    "value": "(mean, meansqr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vec / total_batch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_norm_58": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "state_dict[prefix + running_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_79": {
                "variable": {
                    "value": "state_dict[prefix + running_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_159": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2 * C + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mean.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mean.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mean, meansqr, torch.ones([1], device=mean.device, dtype=mean.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_43": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_231": {
                "input": {
                    "value": "total_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec[-1].detach()",
                            "Call"
                        ],
                        [
                            "torch.max(total_batch, torch.ones_like(total_batch))",
                            "Call"
                        ]
                    ]
                }
            },
            "GroupNorm_148": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_225": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "mean.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mean.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/layers/blocks.py": {
        "torch": {}
    },
    "detectron2/layers/deform_conv.py": {
        "torch": {
            "zeros_like_249": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_250": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_251": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_252": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_253": {
                "variable": {
                    "value": "grad_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_361": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_450": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_454": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_96": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_97": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_120": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/layers/mask_ops.py": {
        "torch": {
            "split_49": {
                "variable": {
                    "value": "(x0, y0, x1, y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.tensor",
                            "Attribute"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gx, gy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_66": {
                "variable": {
                    "value": "img_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.float()",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid.to(masks.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_127": {
                "variable": {
                    "value": "chunks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(N, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "num_chunks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N",
                            "Name"
                        ],
                        [
                            "int(np.ceil(N * int(img_h) * int(img_w) * BYTES_PER_FLOAT / GPU_MEM_LIMIT))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "img_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.shape[0]",
                            "Subscript"
                        ],
                        [
                            "len(masks)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "img_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool if threshold >= 0 else torch.uint8",
                    "type": "IfExp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "im_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(img_h, img_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_255": {
                "variable": {
                    "value": "scaled_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.tensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "(x0_int, y0_int)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes.min(dim=0).values.floor()[:2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_44": {
                "variable": {
                    "value": "x1_int",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, 2].max().ceil() + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "img_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_45": {
                "variable": {
                    "value": "y1_int",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, 3].max().ceil() + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "img_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_192": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.fromarray(mask.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "mask.resize((samples_w, samples_h), resample=Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "np.array(mask, copy=False)",
                            "Call"
                        ],
                        [
                            "np.array(mask > threshold, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask * 255).to(torch.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_196": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_53": {
                "start": {
                    "value": "y0_int",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "y1_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(boxes[:, 3].max().ceil() + 1, max=img_h).to(dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_54": {
                "start": {
                    "value": "x0_int",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "x1_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(boxes[:, 2].max().ceil() + 1, max=img_w).to(dtype=torch.int32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_127": {
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.shape[0]",
                            "Subscript"
                        ],
                        [
                            "len(masks)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/layers/nms.py": {
        "torch": {
            "annotate_24": {
                "the_type": {
                    "value": "List[int]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "the_value": {
                    "value": "torch.unique(idxs).cpu().tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_24": {
                "input": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_130": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_142": {
                "input": {
                    "value": "boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_145": {
                "input": {
                    "value": "boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_145": {
                "input": {
                    "value": "boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/layers/roi_align.py": {
        "torch": {}
    },
    "detectron2/layers/roi_align_rotated.py": {
        "torch": {}
    },
    "detectron2/layers/wrappers.py": {
        "torch": {
            "cat_25": {
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/model_zoo/model_zoo.py": {
        "torch": {
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/anchor_generator.py": {
        "torch": {
            "arange_39": {
                "variable": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "offset * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_width * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_42": {
                "variable": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "offset * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_height * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_46": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(offset * stride, grid_height * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(offset * stride, grid_width * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_169": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "data": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_like_316": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shift_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shift_x.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_317": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, zeros, zeros, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "data": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/modeling/backbone/backbone.py": {
        "torch": {}
    },
    "detectron2/modeling/backbone/fpn.py": {
        "torch": {
            "Conv2d_198": {
                "variable": {
                    "value": "self.p6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "self.p7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.FPN.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_137": {
                "variable": {
                    "value": "top_down_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lateral_convs[0](bottom_up_features[self.in_features[-1]])",
                            "Call"
                        ],
                        [
                            "lateral_features + top_down_features",
                            "BinOp"
                        ],
                        [
                            "prev_features / 2",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_185": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_205": {
                "input": {
                    "value": "p6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p6(c5)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/modeling/backbone/resnet.py": {
        "torch": {
            "relu__88": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__97": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__197": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__200": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__210": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__306": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__317": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__327": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, offset)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__357": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_358": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_310": {
                "variable": {
                    "value": "(offset_x, offset_y, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "offset_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2_offset(out)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(offset_x, offset_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_394": {
                "variable": {
                    "value": "stage",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_407": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_408": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "curr_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_443": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "stage(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/box_regression.py": {
        "torch": {
            "stack_69": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dx, dy, dw, dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_98": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2::5] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.scale_clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_99": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3::5] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.scale_clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_106": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((dx, dy, dw, dh), dim=1)",
                            "Call"
                        ],
                        [
                            "deltas.float()",
                            "Call"
                        ],
                        [
                            "torch.stack((dx, dy, dw, dh, da), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_155": {
                "variable": {
                    "value": "(src_ctr_x, src_ctr_y, src_widths, src_heights, src_angles)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_157": {
                "variable": {
                    "value": "(target_ctr_x, target_ctr_y, target_widths, target_heights, target_angles)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_172": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dx, dy, dw, dh, da)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_206": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2::5] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.scale_clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_207": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3::5] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.scale_clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_209": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((dx, dy, dw, dh), dim=1)",
                            "Call"
                        ],
                        [
                            "deltas.float()",
                            "Call"
                        ],
                        [
                            "torch.stack((dx, dy, dw, dh, da), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_66": {
                "input": {
                    "value": "target_widths / src_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "target_heights / src_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_103": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2::5] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_104": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3::5] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_164": {
                "input": {
                    "value": "target_widths / src_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_165": {
                "input": {
                    "value": "target_heights / src_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_212": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "ww * torch.log(target_widths / src_widths)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 2::5] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_213": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ],
                        [
                            "wh * torch.log(target_heights / src_heights)",
                            "BinOp"
                        ],
                        [
                            "deltas[:, 3::5] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/modeling/matcher.py": {
        "torch": {
            "all_88": {
                "input": {
                    "value": "match_quality_matrix >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/meta_arch/build.py": {
        "torch": {
            "device_22": {
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/meta_arch/panoptic_fpn.py": {
        "torch": {
            "zeros_like_155": {
                "variable": {
                    "value": "panoptic_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "semantic_results",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_158": {
                "variable": {
                    "value": "sorted_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-instance_results.scores",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_198": {
                "variable": {
                    "value": "semantic_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "semantic_results",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/meta_arch/rcnn.py": {
        "torch": {}
    },
    "detectron2/modeling/meta_arch/retinanet.py": {
        "torch": {
            "stack_305": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(gt_labels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_308": {
                "variable": {
                    "value": "gt_anchor_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_anchor_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.box2box_transform.get_deltas(anchors, k) for k in gt_boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(gt_anchor_deltas)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_557": {
                "variable": {
                    "value": "self.cls_subnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cls_subnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_558": {
                "variable": {
                    "value": "self.bbox_subnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*bbox_subnet",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_559": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_562": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_319": {
                "tensor": {
                    "value": "gt_labels[valid_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_391": {
                "variable": {
                    "value": "matched_gt_boxes_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_545": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_549": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_551": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_555": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_392": {
                "input": {
                    "value": "matched_idxs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_343": {
                "tensors": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/meta_arch/semantic_seg.py": {
        "torch": {
            "interpolate_181": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(predictions, scale_factor=self.common_stride, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.common_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_184": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions.float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(predictions, scale_factor=self.common_stride, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x['sem_seg'].to(self.device) for x in batched_inputs]",
                            "ListComp"
                        ],
                        [
                            "ImageList.from_tensors(targets, self.backbone.size_divisibility, self.sem_seg_head.ignore_value).tensor",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_165": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(features)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=self.common_stride, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.predictor(x)",
                            "Call"
                        ],
                        [
                            "self.scale_heads[i](features[f])",
                            "Call"
                        ],
                        [
                            "x + self.scale_heads[i](features[f])",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.common_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "*head_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "GroupNorm_133": {
                "num_groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "conv_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEM_SEG_HEAD.CONVS_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Upsample_148": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/poolers.py": {
        "torch": {
            "sqrt_50": {
                "variable": {
                    "value": "box_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cat([boxes.area() for boxes in box_lists])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_52": {
                "variable": {
                    "value": "level_assignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "canonical_level + torch.log2(box_sizes / canonical_box_size + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_57": {
                "variable": {
                    "value": "level_assignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "level_assignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(canonical_level + torch.log2(box_sizes / canonical_box_size + 1e-08))",
                            "Call"
                        ],
                        [
                            "torch.clamp(level_assignments, min=min_level, max=max_level)",
                            "Call"
                        ],
                        [
                            "assign_boxes_to_levels(box_lists, self.min_level, self.max_level, self.canonical_box_size, self.canonical_level)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "min_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-math.log2(scales[0])",
                            "UnaryOp"
                        ]
                    ]
                },
                "max": {
                    "value": "max_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-math.log2(scales[-1])",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "full_like_62": {
                "variable": {
                    "value": "repeated_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_tensor[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "box_tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "box_tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_boxes, num_channels, output_size, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.level_poolers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(ROIAlign(output_size, spatial_scale=scale, sampling_ratio=sampling_ratio, aligned=False) for scale in scales)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "log2_53": {
                "input": {
                    "value": "box_sizes / canonical_box_size + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_155": {
                "variable": {
                    "value": "self.level_poolers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(ROIAlign(output_size, spatial_scale=scale, sampling_ratio=sampling_ratio, aligned=True) for scale in scales)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "*size": {
                    "value": "(0, x[0].shape[1]) + self.output_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "x[0].device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_162": {
                "variable": {
                    "value": "self.level_poolers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(RoIPool(output_size, spatial_scale=scale) for scale in scales)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "ModuleList_166": {
                "variable": {
                    "value": "self.level_poolers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(ROIAlignRotated(output_size, spatial_scale=scale, sampling_ratio=sampling_ratio) for scale in scales)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/postprocessing.py": {
        "torch": {
            "stack_38": {
                "variable": {
                    "value": "new_size",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output_height, output_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_98": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result[:, :img_size[0], :img_size[1]].expand(1, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(result, size=(output_height, output_width), mode='bilinear', align_corners=False)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(output_height, output_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/proposal_generator/proposal_utils.py": {
        "torch": {
            "arange_58": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(image_sizes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].device",
                            "Attribute"
                        ],
                        [
                            "proposals.objectness_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_162": {
                "*size": {
                    "value": "len(gt_boxes)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].device",
                            "Attribute"
                        ],
                        [
                            "proposals.objectness_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_74": {
                "size": {
                    "value": "(num_proposals_i,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "level_id",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].device",
                            "Attribute"
                        ],
                        [
                            "proposals.objectness_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "isfinite_88": {
                "input": {
                    "value": "scores_per_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk_scores[n]",
                            "Subscript"
                        ],
                        [
                            "scores_per_img[valid_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_88": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/proposal_generator/rpn.py": {
        "torch": {
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.channels for s in input_shape]",
                            "ListComp"
                        ],
                        [
                            "in_channels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.channels for s in input_shape]",
                            "ListComp"
                        ],
                        [
                            "in_channels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.objectness_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.channels for s in input_shape]",
                            "ListComp"
                        ],
                        [
                            "in_channels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_generator.num_anchors",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.anchor_deltas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s.channels for s in input_shape]",
                            "ListComp"
                        ],
                        [
                            "in_channels[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors * box_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_357": {
                "variable": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gt_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_389": {
                "variable": {
                    "value": "objectness_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cat(pred_objectness_logits, dim=1)[valid_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_labels[valid_mask].to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_370": {
                "variable": {
                    "value": "gt_anchor_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_anchor_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.box2box_transform.get_deltas(anchors, k) for k in gt_boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(gt_anchor_deltas)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_318": {
                "variable": {
                    "value": "matched_gt_boxes_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/proposal_generator/rrpn.py": {
        "torch": {
            "arange_64": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(image_sizes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_82": {
                "size": {
                    "value": "(num_proposals_i,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "level_id",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "isfinite_94": {
                "input": {
                    "value": "scores_per_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk_scores[n]",
                            "Subscript"
                        ],
                        [
                            "scores_per_img[valid_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_94": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_175": {
                "variable": {
                    "value": "matched_gt_boxes_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/box_head.py": {
        "torch": {
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/cascade_rcnn.py": {
        "torch": {
            "ModuleList_67": {
                "variable": {
                    "value": "box_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "box_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ModuleList(box_heads)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_68": {
                "variable": {
                    "value": "box_predictors",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "box_predictors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ModuleList(box_predictors)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_236": {
                "input": {
                    "value": "matched_idxs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/fast_rcnn.py": {
        "torch": {
            "softmax_346": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred_class_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_591": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[valid_mask]",
                            "Subscript"
                        ],
                        [
                            "scores[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scores[filter_mask]",
                            "Subscript"
                        ],
                        [
                            "self.predict_probs()",
                            "Call"
                        ],
                        [
                            "self.cls_score(x)",
                            "Call"
                        ],
                        [
                            "self.predict_probs(predictions, proposals)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isfinite_107": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[valid_mask]",
                            "Subscript"
                        ],
                        [
                            "scores[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scores[filter_mask]",
                            "Subscript"
                        ],
                        [
                            "self.predict_probs()",
                            "Call"
                        ],
                        [
                            "self.cls_score(x)",
                            "Call"
                        ],
                        [
                            "self.predict_probs(predictions, proposals)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_107": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_270": {
                "variable": {
                    "value": "gt_class_cols",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "box_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_boxes.tensor.size(1)",
                            "Call"
                        ],
                        [
                            "len(box2box_transform.weights)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pred_proposal_deltas.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "flatten_460": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_536": {
                "variable": {
                    "value": "gt_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p.gt_classes for p in proposals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_243": {
                "input": {
                    "value": "self.pred_class_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "self.gt_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.pred_proposal_deltas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_277": {
                "start": {
                    "value": "box_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_boxes.tensor.size(1)",
                            "Call"
                        ],
                        [
                            "len(box2box_transform.weights)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pred_proposal_deltas.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_542": {
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "predict_boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/keypoint_head.py": {
        "torch": {
            "cross_entropy_87": {
                "variable": {
                    "value": "keypoint_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_keypoint_logits[valid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "keypoint_targets[valid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_73": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat(valid, dim=0).to(dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(valid).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/mask_head.py": {
        "torch": {
            "binary_cross_entropy_with_logits_110": {
                "variable": {
                    "value": "mask_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_mask_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_mask_logits[:, 0]",
                            "Subscript"
                        ],
                        [
                            "pred_mask_logits[indices, gt_classes]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cat(gt_masks, dim=0)",
                            "Call"
                        ],
                        [
                            "gt_masks.to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_78": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "total_num_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_mask_logits.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_104": {
                "variable": {
                    "value": "vis_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_masks, gt_masks]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_144": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_mask_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "class_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "vis_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vis_mask] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/roi_heads.py": {
        "torch": {
            "cat_216": {
                "variable": {
                    "value": "sampled_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_fg_idxs, sampled_bg_idxs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_408": {
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_like_210": {
                "input": {
                    "value": "matched_idxs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_442": {
                "tensors": {
                    "value": "fg_selection_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_757": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/roi_heads/rotated_fast_rcnn.py": {
        "torch": {
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_97": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[valid_mask]",
                            "Subscript"
                        ],
                        [
                            "scores[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scores[filter_mask]",
                            "Subscript"
                        ],
                        [
                            "self.predict_probs(predictions, proposals)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_97": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/sampling.py": {
        "torch": {
            "randperm_49": {
                "n": {
                    "value": "positive.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "positive.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_50": {
                "n": {
                    "value": "negative.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "negative.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/modeling/test_time_augmentation.py": {
        "torch": {
            "cat_243": {
                "variable": {
                    "value": "all_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_boxes, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "all_scores_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(all_boxes)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "all_boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_289": {
                "variable": {
                    "value": "all_pred_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.pred_masks for o in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_290": {
                "variable": {
                    "value": "avg_pred_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_pred_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([o.pred_masks for o in outputs], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "torch_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(new_image.transpose(2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_271": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tfm.apply_box(pred_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(image.transpose(2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_239": {
                "ndarray": {
                    "value": "original_pred_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfm.inverse().apply_box(pred_boxes.cpu().numpy())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/solver/build.py": {
        "torch": {
            "clip_grad_norm__28": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "cfg.CLIP_VALUE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "cfg.NORM_TYPE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_value__31": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value": {
                    "value": "cfg.CLIP_VALUE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/solver/lr_scheduler.py": {
        "torch": {}
    },
    "detectron2/structures/boxes.py": {
        "torch": {
            "where_363": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "inter > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "inter / (area1[:, None] + area2 - inter)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros(1, dtype=inter.dtype, device=inter.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_385": {
                "variable": {
                    "value": "ioa",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "inter > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "inter / area2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros(1, dtype=inter.dtype, device=inter.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_411": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_412": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_151": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(tensor, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "tensor.reshape((0, 4)).to(dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.device if isinstance(tensor, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "abs_90": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cos(a * math.pi / 180.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_91": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sin(a * math.pi / 180.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isfinite_194": {
                "input": {
                    "value": "self.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_335": {
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_335": {
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inter.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inter.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_386": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inter.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inter.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(box)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_68": {
                "variable": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(arr.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "arr.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(arr, angles)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_150": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_305": {
                "tensors": {
                    "value": "[b.tensor for b in boxes_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tensor",
                            "Attribute"
                        ],
                        [
                            "self.tensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cos_90": {
                "input": {
                    "value": "a * math.pi / 180.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_91": {
                "input": {
                    "value": "a * math.pi / 180.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_301": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/structures/image_list.py": {
        "torch": {
            "pad_121": {
                "variable": {
                    "value": "batched_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, max_size[-1] - image_size[1], 0, max_size[-2] - image_size[0]]",
                            "List"
                        ]
                    ]
                },
                "value": {
                    "value": "pad_value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_107": {
                "variable": {
                    "value": "max_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[max(s) for s in zip(*[img.shape[-2:] for img in tensors])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_85": {
                "tensors": {
                    "value": "[torch.as_tensor(x) for x in image_sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_85": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_98": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_102": {
                "tensors": {
                    "value": "image_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(im.shape[-2], im.shape[-1]) for im in tensors]",
                            "ListComp"
                        ],
                        [
                            "[torch.stack(x) for x in image_sizes]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "max_102": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_85": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/structures/instances.py": {
        "torch": {
            "cat_173": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i.get(k) for i in instance_lists]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(values, dim=0)",
                            "Call"
                        ],
                        [
                            "list(itertools.chain(*values))",
                            "Call"
                        ],
                        [
                            "type(v0).cat(values)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/structures/keypoints.py": {
        "torch": {
            "arange_179": {
                "variable": {
                    "value": "keypoints_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "maps.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_28": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keypoints.device if isinstance(keypoints, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "interpolate_183": {
                "variable": {
                    "value": "roi_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maps[[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "outsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(heights_ceil[i]), int(widths_ceil[i]))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_183": {
                "variable": {
                    "value": "roi_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_27": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/structures/masks.py": {
        "torch": {
            "from_numpy_80": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "polygons_to_bitmask(polygons, mask_size, mask_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_99": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(tensor, dtype=torch.bool, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.device if isinstance(tensor, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "self.tensor.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_190": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_inds, boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.tensor.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_209": {
                "variable": {
                    "value": "x_any",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "any_210": {
                "variable": {
                    "value": "y_any",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.polygons)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_293": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_302": {
                "variable": {
                    "value": "minxy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[float('inf'), float('inf')]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_303": {
                "variable": {
                    "value": "maxxy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_321": {
                "ndarray": {
                    "value": "np.asarray(keep, dtype=np.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_399": {
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rasterize_polygons_within_box(poly, box.numpy(), mask_size) for (poly, box) in zip(self.polygons, boxes)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_418": {
                "data": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "device_98": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_167": {
                "tensors": {
                    "value": "[torch.from_numpy(x) for x in masks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_189": {
                "start": {
                    "value": "len(boxes)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.device if isinstance(tensor, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "self.tensor.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_215": {
                "variable": {
                    "value": "boxes[idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[x[0], y[0], x[-1] + 1, y[-1] + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_235": {
                "tensors": {
                    "value": "[bm.tensor for bm in bitmasks_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_305": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "polygon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "polygons_per_instance",
                            "Name"
                        ],
                        [
                            "polygons_per_instance",
                            "Name"
                        ]
                    ]
                }
            },
            "min_306": {
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(polygon).view(-1, 2).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_307": {
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(polygon).view(-1, 2).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_387": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_398": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "mask_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.device if isinstance(tensor, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "self.tensor.device",
                            "Attribute"
                        ],
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "where_212": {
                "condition": {
                    "value": "x_any[idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_213": {
                "condition": {
                    "value": "y_any[idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(x_any[idx, :])[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/structures/rotated_boxes.py": {
        "torch": {
            "as_tensor_214": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(tensor, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "tensor.reshape((0, 5)).to(dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.device if isinstance(tensor, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_299": {
                "variable": {
                    "value": "self.tensor[idx, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tensor[idx, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_300": {
                "variable": {
                    "value": "self.tensor[idx, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.tensor[idx, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_368": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cos(a * math.pi / 180.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_369": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sin(a * math.pi / 180.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_402": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tensor[:, 4] * math.pi / 180.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_403": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tensor[:, 4] * math.pi / 180.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_431": {
                "input": {
                    "value": "(scale_x * c) ** 2 + (scale_y * s) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_441": {
                "input": {
                    "value": "(scale_x * s) ** 2 + (scale_y * c) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_213": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_281": {
                "condition": {
                    "value": "torch.abs(self.tensor[:, 4]) <= clip_angle_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cos_368": {
                "input": {
                    "value": "a * math.pi / 180.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_369": {
                "input": {
                    "value": "a * math.pi / 180.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_453": {
                "input": {
                    "value": "scale_x * s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "scale_y * c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_281": {
                "input": {
                    "value": "self.tensor[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/utils/analysis.py": {
        "torch": {
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/utils/collect_env.py": {
        "torch": {
            "is_available_56": {
                "variable": {
                    "value": "has_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_device_name_127": {
                "device": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ],
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            },
            "get_device_capability_126": {
                "device": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ],
                        [
                            "range(torch.cuda.device_count())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detectron2/utils/comm.py": {
        "torch": {
            "device_97": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if backend == gloo else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_165": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_208": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ],
                        [
                            "[torch.empty((max_size,), dtype=torch.uint8, device=tensor.device) for _ in size_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dst": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_216": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ByteTensor(storage).to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, padding), dim=0)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ],
                        [
                            "_serialize_to_tensor(data, group)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dst": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "group": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "_get_global_gloo_group()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_206": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/utils/env.py": {
        "torch": {
            "set_rng_state_37": {
                "new_state": {
                    "value": "torch.manual_seed(seed).get_state()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.getpid() + int(datetime.now().strftime('%S%f')) + int.from_bytes(os.urandom(2), 'big')",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_15": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/utils/events.py": {
        "torch": {
            "SummaryWriter_146": {
                "variable": {
                    "value": "self._writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histc_349": {
                "variable": {
                    "value": "hist_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hist_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "bins": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_350": {
                "variable": {
                    "value": "hist_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "ht_min",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "ht_max",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_359": {
                "input": {
                    "value": "hist_tensor ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/utils/memory.py": {
        "torch": {
            "empty_cache_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/utils/testing.py": {
        "torch": {
            "from_numpy_59": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(ret.transpose(2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_31": {
                "*size": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "allclose_83": {
                "input": {
                    "value": "val1.tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "val2.tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "atol": {
                    "value": "100 * rtol",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_88": {
                "variable": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_88": {
                "variable": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_89": {
                "input": {
                    "value": "val1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "val2",
                    "type": "variable",
                    "possible_values": []
                },
                "atol": {
                    "value": "mag * rtol",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_93": {
                "input": {
                    "value": "val1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "val2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "detectron2/utils/visualizer.py": {
        "torch": {
            "unique_180": {
                "variable": {
                    "value": "(segment_ids, areas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "panoptic_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_351": {
                "variable": {
                    "value": "self.cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_573": {
                "variable": {
                    "value": "pan_seg",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "docs/conf.py": {
        "torch": {}
    },
    "projects/SparseRCNN/sparsercnn/dataset_mapper.py": {
        "torch": {
            "as_tensor_103": {
                "variable": {
                    "value": "dataset_dict[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.ascontiguousarray(image.transpose(2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "projects/SparseRCNN/sparsercnn/detector.py": {
        "torch": {
            "device_43": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_56": {
                "variable": {
                    "value": "self.init_proposal_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_proposals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "self.init_proposal_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_proposals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_95": {
                "variable": {
                    "value": "pixel_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_96": {
                "variable": {
                    "value": "pixel_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_248": {
                "variable": {
                    "value": "images_whwh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images_whwh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "torch.stack(images_whwh)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_172": {
                "variable": {
                    "value": "image_size_xyxy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[w, h, w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_204": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output['pred_logits']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_205": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_205": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_205": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_224": {
                "variable": {
                    "value": "(scores, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "data": {
                    "value": "[w, h, w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_224": {
                "input": {
                    "value": "box_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output['pred_logits']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "projects/SparseRCNN/sparsercnn/head.py": {
        "torch": {
            "MultiheadAttention_126": {
                "variable": {
                    "value": "self.self_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.NHEADS",
                            "Attribute"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.DROPOUT",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.DIM_FEEDFORWARD",
                            "Attribute"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_130": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.DROPOUT",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.DIM_FEEDFORWARD",
                            "Attribute"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "LayerNorm_133": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "LayerNorm_134": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "LayerNorm_135": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_136": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.DROPOUT",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_137": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.DROPOUT",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_138": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.DROPOUT",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_149": {
                "variable": {
                    "value": "self.cls_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cls_module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_158": {
                "variable": {
                    "value": "self.reg_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "reg_module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.bboxes_delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_241": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.scale_clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_242": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.scale_clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_249": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.dynamic_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_dynamic * self.num_params",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_269": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim_dynamic",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_270": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_272": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_276": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden_dim * pooler_resolution ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_277": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_290": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roi_features.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(features, param1)",
                            "Call"
                        ],
                        [
                            "self.norm1(features)",
                            "Call"
                        ],
                        [
                            "self.activation(features)",
                            "Call"
                        ],
                        [
                            "torch.bmm(features, param2)",
                            "Call"
                        ],
                        [
                            "self.norm2(features)",
                            "Call"
                        ],
                        [
                            "self.activation(features)",
                            "Call"
                        ],
                        [
                            "features.flatten(1)",
                            "Call"
                        ],
                        [
                            "self.out_layer(features)",
                            "Call"
                        ],
                        [
                            "self.norm3(features)",
                            "Call"
                        ],
                        [
                            "self.activation(features)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "param1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameters[:, :, :self.num_params].view(-1, self.hidden_dim, self.dim_dynamic)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_294": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roi_features.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(features, param1)",
                            "Call"
                        ],
                        [
                            "self.norm1(features)",
                            "Call"
                        ],
                        [
                            "self.activation(features)",
                            "Call"
                        ],
                        [
                            "torch.bmm(features, param2)",
                            "Call"
                        ],
                        [
                            "self.norm2(features)",
                            "Call"
                        ],
                        [
                            "self.activation(features)",
                            "Call"
                        ],
                        [
                            "features.flatten(1)",
                            "Call"
                        ],
                        [
                            "self.out_layer(features)",
                            "Call"
                        ],
                        [
                            "self.norm3(features)",
                            "Call"
                        ],
                        [
                            "self.activation(features)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameters[:, :, self.num_params:].view(-1, self.dim_dynamic, self.hidden_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_307": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.class_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.class_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_246": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_247": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.scale_clamp)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_112": {
                "tensors": {
                    "value": "inter_pred_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_147": {
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_148": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_156": {
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SparseRCNN.HIDDEN_DIM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_157": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "projects/SparseRCNN/sparsercnn/loss.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "target_classes_o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['labels'][J] for (t, (_, J)) in zip(targets, indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_63": {
                "variable": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "src_logits.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['boxes_xyxy'][i] for (t, (_, i)) in zip(targets, indices)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "image_size",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['image_size_xyxy_tgt'] for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "l1_loss_111": {
                "variable": {
                    "value": "loss_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_boxes_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_boxes / image_size",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target_boxes_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_boxes / image_size",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full_like(src, i) for (i, (src, _)) in enumerate(indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "src_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src for (src, _) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full_like(tgt, i) for (i, (_, tgt)) in enumerate(indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "tgt_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt for (_, tgt) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_151": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[num_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(iter(outputs.values())).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_154": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_boxes / get_world_size()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "tgt_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['labels'] for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "tgt_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['boxes_xyxy'] for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "image_size_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['image_size_xyxy'].unsqueeze(0) for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "image_size_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['image_size_xyxy_tgt'] for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cdist_262": {
                "variable": {
                    "value": "cost_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "out_bbox_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_bbox / image_size_out",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "tgt_bbox_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tgt_bbox / image_size_tgt",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_50": {
                "variable": {
                    "value": "empty_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_72": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_logits']",
                            "Subscript"
                        ],
                        [
                            "src_logits.flatten(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_84": {
                "variable": {
                    "value": "loss_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_logits.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full(src_logits.shape[:2], self.num_classes, dtype=torch.int64, device=src_logits.device)",
                            "Call"
                        ],
                        [
                            "target_classes.flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.empty_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_104": {
                "input": {
                    "value": "box_ops.generalized_box_iou(src_boxes, target_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_71": {
                "input": {
                    "value": "target_classes != self.num_classes",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_like_119": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_like_125": {
                "input": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_274": {
                "data": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "projects/SparseRCNN/sparsercnn/test_time_augmentation.py": {
        "torch": {
            "zeros_130": {
                "variable": {
                    "value": "all_scores_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(all_boxes)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "all_boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "all_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(all_scores).to(all_boxes.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "all_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "all_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(all_classes).to(all_boxes.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_194": {
                "variable": {
                    "value": "det",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes, scores.reshape(-1, 1), labels.reshape(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "vote_results",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "det.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "variable": {
                    "value": "det_accu_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "vote_det.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "variable": {
                    "value": "det_accu_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "vote_det.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_206": {
                "variable": {
                    "value": "xx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det[0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_207": {
                "variable": {
                    "value": "yy1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det[0, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_208": {
                "variable": {
                    "value": "xx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det[0, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_209": {
                "variable": {
                    "value": "yy2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det[0, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_210": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx2 - xx1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_211": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy2 - yy1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "det_accu_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(det_accu_sum, soft_vote_det)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "vote_results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vote_results, vote_det)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "vote_results",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vote_results, det_accu_sum)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_240": {
                "input": {
                    "value": "vote_det[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_251": {
                "condition": {
                    "value": "soft_vote_det[:, 4] >= INFERENCE_TH",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_257": {
                "input": {
                    "value": "vote_det[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_216": {
                "condition": {
                    "value": "iou >= vote_thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "projects/SparseRCNN/sparsercnn/util/box_ops.py": {
        "torch": {
            "max_28": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_29": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_55": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_56": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_76": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_78": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, h, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, w, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_13": {
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_c - 0.5 * w, y_c - 0.5 * h, x_c + 0.5 * w, y_c + 0.5 * h]",
                            "List"
                        ],
                        [
                            "[(x0 + x1) / 2, (y0 + y1) / 2, x1 - x0, y1 - y0]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_20": {
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_c - 0.5 * w, y_c - 0.5 * h, x_c + 0.5 * w, y_c + 0.5 * h]",
                            "List"
                        ],
                        [
                            "[(x0 + x1) / 2, (y0 + y1) / 2, x1 - x0, y1 - y0]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_88": {
                "tensors": {
                    "value": "[x_min, y_min, x_max, y_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "masks.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "projects/SparseRCNN/sparsercnn/util/misc.py": {
        "torch": {
            "tensor_106": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_356": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_357": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_119": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(tensor_list)] + max_size",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_322": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_337": {
                "variable": {
                    "value": "max_size_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([img.shape[i] for img in tensor_list]).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_349": {
                "variable": {
                    "value": "padded_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list",
                            "Name"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding[2], 0, padding[1], 0, padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_352": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_353": {
                "variable": {
                    "value": "padded_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(img[0], dtype=torch.int, device=img.device)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding[2], 0, padding[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_421": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_403": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_117": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_435": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_459": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_413": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_337": {
                "tensors": {
                    "value": "[img.shape[i] for img in tensor_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_memory_allocated_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/SparseRCNN/sparsercnn/util/plot_utils.py": {
        "torch": {
            "load_86": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "projects/SparseRCNN/train_net.py": {
        "torch": {
            "clip_grad_norm__83": {
                "parameters": {
                    "value": "all_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "itertools.chain(*[x['params'] for x in self.param_groups])",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "clip_norm_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.SOLVER.CLIP_GRADIENTS.CLIP_VALUE",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "split_14": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/data/test_sampler.py": {
        "torch": {
            "SequentialSampler_10": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "list(range(100))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SequentialSampler_18": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "list(range(100))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layers/test_mask_ops.py": {
        "torch": {
            "meshgrid_46": {
                "variable": {
                    "value": "(gy, gx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(mask_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.from_numpy(mask_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_47": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gx, gy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "full_image_bit_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "full_image_bit_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(full_image_bit_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_50": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "full_image_bit_mask[None, None, :, :].to(dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "ind[None, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_161": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_164": {
                "variable": {
                    "value": "wh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(N, 2) * 40 + 200",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_165": {
                "variable": {
                    "value": "x0y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "center - wh * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_166": {
                "variable": {
                    "value": "x1y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "center + wh * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "800",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "torch_gt_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BoxMode.convert(ann['bbox'], BoxMode.XYWH_ABS, BoxMode.XYXY_ABS)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "torch_gt_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_160": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(0.0, mask_size) + 0.5",
                            "BinOp"
                        ],
                        [
                            "mask_x / mask_size * (x1 - x0) + x0",
                            "BinOp"
                        ],
                        [
                            "(mask_x - 0.5) / (img_w - 1) * 2 + -1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "[x0y0, x1y1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_163": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_181": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_164": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_183": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "ndarray": {
                    "value": "gt_bit_mask[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layers/test_nms_rotated.py": {
        "torch": {
            "equal_19": {
                "input": {
                    "value": "keep1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "keep2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_72": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "randint_79": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "rotated_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_102": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ],
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "rotated_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "rotated_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "rotated_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "rotated_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "rotated_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_63": {
                "data": {
                    "value": "picked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_66": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_89": {
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(N, 4) * 100",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "backup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ],
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_92": {
                "input": {
                    "value": "rotated_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "backup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ],
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_147": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_162": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "2000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_112": {
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(N, 4) * 100",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "backup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ],
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_116": {
                "input": {
                    "value": "rotated_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ],
                        [
                            "torch.zeros(N, 5)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "backup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ],
                        [
                            "boxes.clone()",
                            "Call"
                        ],
                        [
                            "rotated_boxes.clone()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/layers/test_roi_align.py": {
        "torch": {
            "from_numpy_69": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img[None, None, :, :].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(rois)[None, :].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img[None, None, :, :].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(rois)[None, :].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_123": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(boxes, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([batch_idx, boxes], axis=1)",
                            "Call"
                        ],
                        [
                            "boxes.cuda()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_idx, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_idx, boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "mean_box",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_76": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._simple_roialign(input, [1, 1, 3, 3], (4, 4), aligned=False)",
                            "Call"
                        ],
                        [
                            "self._simple_roialign(input, box, (5, 5), aligned=True)",
                            "Call"
                        ],
                        [
                            "op.forward(input, rois)",
                            "Call"
                        ],
                        [
                            "op.forward(input, rois)",
                            "Call"
                        ],
                        [
                            "op.forward(input, rois)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_cuda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op.forward(input.cuda(), rois.cuda()).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_102": {
                "type": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "allclose_104": {
                "input": {
                    "value": "input.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_118": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_104": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(N, C, H, W)",
                            "Call"
                        ],
                        [
                            "input.cuda()",
                            "Call"
                        ],
                        [
                            "np.arange(25).reshape(5, 5).astype('float32')",
                            "Call"
                        ],
                        [
                            "np.random.rand(H, W).astype('float32') * 100",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(img[None, None, :, :].astype('float32'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img[None, None, :, :].astype('float32'))",
                            "Call"
                        ],
                        [
                            "input.to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 3, 10, 10, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "*size": {
                    "value": "nboxes_per_img",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/layers/test_roi_align_rotated.py": {
        "torch": {
            "from_numpy_81": {
                "variable": {
                    "value": "input2x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input2x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(input.numpy(), (W // 2, H // 2), interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input2x)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_103": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 4.5, 4.5, 9, 9, 0], [0, 2, 7, 4, 4, 0], [0, 7, 7, 4, 4, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_135": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_146": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "rois_rotated",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 4.5, 4.5, 9, 9, 0], [0, 2, 7, 4, 4, 0], [0, 7, 7, 4, 4, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_162": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 9, 9], [0, 0, 5, 4, 9], [0, 5, 5, 9, 9]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ],
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_33": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "result_expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[4.5, 5.0, 5.5, 6.0], [7.0, 7.5, 8.0, 8.5], [9.5, 10.0, 10.5, 11.0], [12.0, 12.5, 13.0, 13.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_85": {
                "input": {
                    "value": "output2x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._simple_roi_align_rotated(img=input2x, box=rotated_box2x, resolution=(5, 5))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._simple_roi_align_rotated(img=input, box=rotated_box, resolution=(5, 5))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradcheck_124": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(x,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradcheck_125": {
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(x.transpose(2, 3),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "allclose_170": {
                "input": {
                    "value": "x.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x_rotated.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_71": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._simple_roi_align_rotated(img=img, box=rotated_box, resolution=(4, 4))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "result_expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[4.5, 5.0, 5.5, 6.0], [7.0, 7.5, 8.0, 8.5], [9.5, 10.0, 10.5, 11.0], [12.0, 12.5, 13.0, 13.5]])",
                            "Call"
                        ],
                        [
                            "self._rot90(result_expected, -i)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_75": {
                "*size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] + list(box)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(rois, dtype=torch.float32)[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor([[0, 4.5, 4.5, 9, 9, 0], [0, 2, 7, 4, 4, 0], [0, 7, 7, 4, 4, 0]], dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0, 0, 0, 9, 9], [0, 0, 5, 4, 9], [0, 5, 5, 9, 9]], dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_99": {
                "input": {
                    "value": "result_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op.forward(input, rois)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "result_cuda.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/modeling/test_anchor_generator.py": {
        "torch": {
            "tensor_26": {
                "variable": {
                    "value": "expected_anchor_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-32.0, -8.0, 32.0, 8.0], [-16.0, -16.0, 16.0, 16.0], [-8.0, -32.0, 8.0, 32.0], [-64.0, -16.0, 64.0, 16.0], [-32.0, -32.0, 32.0, 32.0], [-16.0, -64.0, 16.0, 64.0], [-28.0, -8.0, 36.0, 8.0], [-12.0, -16.0, 20.0, 16.0], [-4.0, -32.0, 12.0, 32.0], [-60.0, -16.0, 68.0, 16.0], [-28.0, -32.0, 36.0, 32.0], [-12.0, -64.0, 20.0, 64.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "expected_anchor_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-30.0, -6.0, 34.0, 10.0], [-14.0, -14.0, 18.0, 18.0], [-6.0, -30.0, 10.0, 34.0], [-62.0, -14.0, 66.0, 18.0], [-30.0, -30.0, 34.0, 34.0], [-14.0, -62.0, 18.0, 66.0], [-26.0, -6.0, 38.0, 10.0], [-10.0, -14.0, 22.0, 18.0], [-2.0, -30.0, 14.0, 34.0], [-58.0, -14.0, 70.0, 18.0], [-26.0, -30.0, 38.0, 34.0], [-10.0, -62.0, 22.0, 66.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "expected_anchor_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 64.0, 16.0, 0.0], [0.0, 0.0, 64.0, 16.0, 45.0], [0.0, 0.0, 32.0, 32.0, 0.0], [0.0, 0.0, 32.0, 32.0, 45.0], [0.0, 0.0, 16.0, 64.0, 0.0], [0.0, 0.0, 16.0, 64.0, 45.0], [0.0, 0.0, 128.0, 32.0, 0.0], [0.0, 0.0, 128.0, 32.0, 45.0], [0.0, 0.0, 64.0, 64.0, 0.0], [0.0, 0.0, 64.0, 64.0, 45.0], [0.0, 0.0, 32.0, 128.0, 0.0], [0.0, 0.0, 32.0, 128.0, 45.0], [4.0, 0.0, 64.0, 16.0, 0.0], [4.0, 0.0, 64.0, 16.0, 45.0], [4.0, 0.0, 32.0, 32.0, 0.0], [4.0, 0.0, 32.0, 32.0, 45.0], [4.0, 0.0, 16.0, 64.0, 0.0], [4.0, 0.0, 16.0, 64.0, 45.0], [4.0, 0.0, 128.0, 32.0, 0.0], [4.0, 0.0, 128.0, 32.0, 45.0], [4.0, 0.0, 64.0, 64.0, 0.0], [4.0, 0.0, 64.0, 64.0, 45.0], [4.0, 0.0, 32.0, 128.0, 0.0], [4.0, 0.0, 32.0, 128.0, 45.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_43": {
                "input": {
                    "value": "anchors[0].tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_anchor_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-32.0, -8.0, 32.0, 8.0], [-16.0, -16.0, 16.0, 16.0], [-8.0, -32.0, 8.0, 32.0], [-64.0, -16.0, 64.0, 16.0], [-32.0, -32.0, 32.0, 32.0], [-16.0, -64.0, 16.0, 64.0], [-28.0, -8.0, 36.0, 8.0], [-12.0, -16.0, 20.0, 16.0], [-4.0, -32.0, 12.0, 32.0], [-60.0, -16.0, 68.0, 16.0], [-28.0, -32.0, 36.0, 32.0], [-12.0, -64.0, 20.0, 64.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-30.0, -6.0, 34.0, 10.0], [-14.0, -14.0, 18.0, 18.0], [-6.0, -30.0, 10.0, 34.0], [-62.0, -14.0, 66.0, 18.0], [-30.0, -30.0, 34.0, 34.0], [-14.0, -62.0, 18.0, 66.0], [-26.0, -6.0, 38.0, 10.0], [-10.0, -14.0, 22.0, 18.0], [-2.0, -30.0, 14.0, 34.0], [-58.0, -14.0, 70.0, 18.0], [-26.0, -30.0, 38.0, 34.0], [-10.0, -62.0, 22.0, 66.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.0, 0.0, 64.0, 16.0, 0.0], [0.0, 0.0, 64.0, 16.0, 45.0], [0.0, 0.0, 32.0, 32.0, 0.0], [0.0, 0.0, 32.0, 32.0, 45.0], [0.0, 0.0, 16.0, 64.0, 0.0], [0.0, 0.0, 16.0, 64.0, 45.0], [0.0, 0.0, 128.0, 32.0, 0.0], [0.0, 0.0, 128.0, 32.0, 45.0], [0.0, 0.0, 64.0, 64.0, 0.0], [0.0, 0.0, 64.0, 64.0, 45.0], [0.0, 0.0, 32.0, 128.0, 0.0], [0.0, 0.0, 32.0, 128.0, 45.0], [4.0, 0.0, 64.0, 16.0, 0.0], [4.0, 0.0, 64.0, 16.0, 45.0], [4.0, 0.0, 32.0, 32.0, 0.0], [4.0, 0.0, 32.0, 32.0, 45.0], [4.0, 0.0, 16.0, 64.0, 0.0], [4.0, 0.0, 16.0, 64.0, 45.0], [4.0, 0.0, 128.0, 32.0, 0.0], [4.0, 0.0, 128.0, 32.0, 45.0], [4.0, 0.0, 64.0, 64.0, 0.0], [4.0, 0.0, 64.0, 64.0, 45.0], [4.0, 0.0, 32.0, 128.0, 0.0], [4.0, 0.0, 32.0, 128.0, 45.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_72": {
                "input": {
                    "value": "anchors[0].tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_anchor_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-32.0, -8.0, 32.0, 8.0], [-16.0, -16.0, 16.0, 16.0], [-8.0, -32.0, 8.0, 32.0], [-64.0, -16.0, 64.0, 16.0], [-32.0, -32.0, 32.0, 32.0], [-16.0, -64.0, 16.0, 64.0], [-28.0, -8.0, 36.0, 8.0], [-12.0, -16.0, 20.0, 16.0], [-4.0, -32.0, 12.0, 32.0], [-60.0, -16.0, 68.0, 16.0], [-28.0, -32.0, 36.0, 32.0], [-12.0, -64.0, 20.0, 64.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-30.0, -6.0, 34.0, 10.0], [-14.0, -14.0, 18.0, 18.0], [-6.0, -30.0, 10.0, 34.0], [-62.0, -14.0, 66.0, 18.0], [-30.0, -30.0, 34.0, 34.0], [-14.0, -62.0, 18.0, 66.0], [-26.0, -6.0, 38.0, 10.0], [-10.0, -14.0, 22.0, 18.0], [-2.0, -30.0, 14.0, 34.0], [-58.0, -14.0, 70.0, 18.0], [-26.0, -30.0, 38.0, 34.0], [-10.0, -62.0, 22.0, 66.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.0, 0.0, 64.0, 16.0, 0.0], [0.0, 0.0, 64.0, 16.0, 45.0], [0.0, 0.0, 32.0, 32.0, 0.0], [0.0, 0.0, 32.0, 32.0, 45.0], [0.0, 0.0, 16.0, 64.0, 0.0], [0.0, 0.0, 16.0, 64.0, 45.0], [0.0, 0.0, 128.0, 32.0, 0.0], [0.0, 0.0, 128.0, 32.0, 45.0], [0.0, 0.0, 64.0, 64.0, 0.0], [0.0, 0.0, 64.0, 64.0, 45.0], [0.0, 0.0, 32.0, 128.0, 0.0], [0.0, 0.0, 32.0, 128.0, 45.0], [4.0, 0.0, 64.0, 16.0, 0.0], [4.0, 0.0, 64.0, 16.0, 45.0], [4.0, 0.0, 32.0, 32.0, 0.0], [4.0, 0.0, 32.0, 32.0, 45.0], [4.0, 0.0, 16.0, 64.0, 0.0], [4.0, 0.0, 16.0, 64.0, 45.0], [4.0, 0.0, 128.0, 32.0, 0.0], [4.0, 0.0, 128.0, 32.0, 45.0], [4.0, 0.0, 64.0, 64.0, 0.0], [4.0, 0.0, 64.0, 64.0, 45.0], [4.0, 0.0, 32.0, 128.0, 0.0], [4.0, 0.0, 32.0, 128.0, 45.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_118": {
                "input": {
                    "value": "anchors[0].tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_anchor_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-32.0, -8.0, 32.0, 8.0], [-16.0, -16.0, 16.0, 16.0], [-8.0, -32.0, 8.0, 32.0], [-64.0, -16.0, 64.0, 16.0], [-32.0, -32.0, 32.0, 32.0], [-16.0, -64.0, 16.0, 64.0], [-28.0, -8.0, 36.0, 8.0], [-12.0, -16.0, 20.0, 16.0], [-4.0, -32.0, 12.0, 32.0], [-60.0, -16.0, 68.0, 16.0], [-28.0, -32.0, 36.0, 32.0], [-12.0, -64.0, 20.0, 64.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-30.0, -6.0, 34.0, 10.0], [-14.0, -14.0, 18.0, 18.0], [-6.0, -30.0, 10.0, 34.0], [-62.0, -14.0, 66.0, 18.0], [-30.0, -30.0, 34.0, 34.0], [-14.0, -62.0, 18.0, 66.0], [-26.0, -6.0, 38.0, 10.0], [-10.0, -14.0, 22.0, 18.0], [-2.0, -30.0, 14.0, 34.0], [-58.0, -14.0, 70.0, 18.0], [-26.0, -30.0, 38.0, 34.0], [-10.0, -62.0, 22.0, 66.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.0, 0.0, 64.0, 16.0, 0.0], [0.0, 0.0, 64.0, 16.0, 45.0], [0.0, 0.0, 32.0, 32.0, 0.0], [0.0, 0.0, 32.0, 32.0, 45.0], [0.0, 0.0, 16.0, 64.0, 0.0], [0.0, 0.0, 16.0, 64.0, 45.0], [0.0, 0.0, 128.0, 32.0, 0.0], [0.0, 0.0, 128.0, 32.0, 45.0], [0.0, 0.0, 64.0, 64.0, 0.0], [0.0, 0.0, 64.0, 64.0, 45.0], [0.0, 0.0, 32.0, 128.0, 0.0], [0.0, 0.0, 32.0, 128.0, 45.0], [4.0, 0.0, 64.0, 16.0, 0.0], [4.0, 0.0, 64.0, 16.0, 45.0], [4.0, 0.0, 32.0, 32.0, 0.0], [4.0, 0.0, 32.0, 32.0, 45.0], [4.0, 0.0, 16.0, 64.0, 0.0], [4.0, 0.0, 16.0, 64.0, 45.0], [4.0, 0.0, 128.0, 32.0, 0.0], [4.0, 0.0, 128.0, 32.0, 45.0], [4.0, 0.0, 64.0, 64.0, 0.0], [4.0, 0.0, 64.0, 64.0, 45.0], [4.0, 0.0, 32.0, 128.0, 0.0], [4.0, 0.0, 32.0, 128.0, 45.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_24": {
                "*size": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_53": {
                "*size": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_76": {
                "input": {
                    "value": "anchors[0].tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_anchor_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-32.0, -8.0, 32.0, 8.0], [-16.0, -16.0, 16.0, 16.0], [-8.0, -32.0, 8.0, 32.0], [-64.0, -16.0, 64.0, 16.0], [-32.0, -32.0, 32.0, 32.0], [-16.0, -64.0, 16.0, 64.0], [-28.0, -8.0, 36.0, 8.0], [-12.0, -16.0, 20.0, 16.0], [-4.0, -32.0, 12.0, 32.0], [-60.0, -16.0, 68.0, 16.0], [-28.0, -32.0, 36.0, 32.0], [-12.0, -64.0, 20.0, 64.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-30.0, -6.0, 34.0, 10.0], [-14.0, -14.0, 18.0, 18.0], [-6.0, -30.0, 10.0, 34.0], [-62.0, -14.0, 66.0, 18.0], [-30.0, -30.0, 34.0, 34.0], [-14.0, -62.0, 18.0, 66.0], [-26.0, -6.0, 38.0, 10.0], [-10.0, -14.0, 22.0, 18.0], [-2.0, -30.0, 14.0, 34.0], [-58.0, -14.0, 70.0, 18.0], [-26.0, -30.0, 38.0, 34.0], [-10.0, -62.0, 22.0, 66.0]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.0, 0.0, 64.0, 16.0, 0.0], [0.0, 0.0, 64.0, 16.0, 45.0], [0.0, 0.0, 32.0, 32.0, 0.0], [0.0, 0.0, 32.0, 32.0, 45.0], [0.0, 0.0, 16.0, 64.0, 0.0], [0.0, 0.0, 16.0, 64.0, 45.0], [0.0, 0.0, 128.0, 32.0, 0.0], [0.0, 0.0, 128.0, 32.0, 45.0], [0.0, 0.0, 64.0, 64.0, 0.0], [0.0, 0.0, 64.0, 64.0, 45.0], [0.0, 0.0, 32.0, 128.0, 0.0], [0.0, 0.0, 32.0, 128.0, 45.0], [4.0, 0.0, 64.0, 16.0, 0.0], [4.0, 0.0, 64.0, 16.0, 45.0], [4.0, 0.0, 32.0, 32.0, 0.0], [4.0, 0.0, 32.0, 32.0, 45.0], [4.0, 0.0, 16.0, 64.0, 0.0], [4.0, 0.0, 16.0, 64.0, 45.0], [4.0, 0.0, 128.0, 32.0, 0.0], [4.0, 0.0, 128.0, 32.0, 45.0], [4.0, 0.0, 64.0, 64.0, 0.0], [4.0, 0.0, 64.0, 64.0, 45.0], [4.0, 0.0, 32.0, 128.0, 0.0], [4.0, 0.0, 32.0, 128.0, 45.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_87": {
                "*size": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "script_75": {
                "obj": {
                    "value": "anchor_generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DefaultAnchorGenerator(cfg, [ShapeSpec(stride=4)])",
                            "Call"
                        ],
                        [
                            "DefaultAnchorGenerator(sizes=[32, 64], aspect_ratios=[0.25, 1, 4], strides=[4])",
                            "Call"
                        ],
                        [
                            "RotatedAnchorGenerator(cfg, [ShapeSpec(stride=4)])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/modeling/test_box2box_transform.py": {
        "torch": {
            "tensor_12": {
                "data": {
                    "value": "mean_box",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "[torch.rand(N, 4) * std_length, torch.rand(N, 1) * std_angle]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "mean_box",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_12": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_22": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "allclose_30": {
                "input": {
                    "value": "dst_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_boxes([10, 10, 20, 20], 1, 10)",
                            "Call"
                        ],
                        [
                            "dst_boxes.to(device=device)",
                            "Call"
                        ],
                        [
                            "random_rotated_boxes([10, 10, 20, 20, -30], 5, 60.0, 10)",
                            "Call"
                        ],
                        [
                            "dst_boxes.to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dst_boxes_reconstructed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b2b_tfm.apply_deltas(deltas, src_boxes)",
                            "Call"
                        ],
                        [
                            "b2b_transform.apply_deltas(deltas, src_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_46": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "allclose_54": {
                "input": {
                    "value": "dst_boxes[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "dst_boxes_reconstructed[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_56": {
                "input": {
                    "value": "(dst_boxes[:, 4] - dst_boxes_reconstructed[:, 4] + 180.0) % 360.0 - 180.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(dst_boxes[:, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_24": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_48": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_58": {
                "input": {
                    "value": "dst_boxes[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modeling/test_fast_rcnn.py": {
        "torch": {
            "rand_27": {
                "variable": {
                    "value": "feature_pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "box_head_output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.8, 1.1, 3.2, 2.8], [2.3, 2.5, 7, 8]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 3, 3], [2, 2, 6, 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "proposal.gt_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_55": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_79": {
                "variable": {
                    "value": "feature_pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "box_head_output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "proposal_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 1.95, 2.4, 1.7, 0], [4.65, 5.25, 4.7, 5.5, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 2, 2, 2, 0], [4, 4, 4, 4, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "proposal.gt_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "132",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "132",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "1.7951188087",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "4.0357131958",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_45": {
                "input": {
                    "value": "losses[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_losses[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "1.7920907736",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "4.0410838127",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_102": {
                "input": {
                    "value": "losses[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_losses[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "allclose_58": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.values()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_68": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_58": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses.values()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/modeling/test_matcher.py": {
        "torch": {
            "tensor_18": {
                "variable": {
                    "value": "match_quality_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.15, 0.45, 0.2, 0.6], [0.3, 0.65, 0.05, 0.1], [0.05, 0.4, 0.25, 0.4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "variable": {
                    "value": "expected_matches",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "expected_match_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1, 1, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "script_32": {
                "variable": {
                    "value": "scripted_matcher",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "Matcher",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "allclose_25": {
                "input": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 2, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_26": {
                "input": {
                    "value": "match_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_match_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([-1, 1, 0, 1], dtype=torch.int8)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_37": {
                "input": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([1, 1, 2, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_38": {
                "input": {
                    "value": "match_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_match_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([-1, 1, 0, 1], dtype=torch.int8)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/modeling/test_model_e2e.py": {
        "torch": {
            "tensor_37": {
                "variable": {
                    "value": "inst.gt_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "inst.gt_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_36": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_38": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_44": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "43",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "self.model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "props[0].objectness_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "props[0].objectness_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_47": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "self.model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_57": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "s[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_64": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "s[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_89": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "s[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "s[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isfinite_157": {
                "input": {
                    "value": "det[0].pred_boxes.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/modeling/test_roi_heads.py": {
        "torch": {
            "rand_32": {
                "variable": {
                    "value": "images_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "gt_boxes0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 3, 3], [2, 2, 6, 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "gt_instance0.gt_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "gt_boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 5, 2, 8], [7, 3, 10, 5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "gt_instance1.gt_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_91": {
                "variable": {
                    "value": "images_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "gt_boxes0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 2, 2, 2, 30], [4, 4, 4, 4, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "gt_instance0.gt_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "gt_boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.5, 5.5, 1, 3, 0], [8.5, 4, 3, 2, -50]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "gt_instance1.gt_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "121",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "121",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_36": {
                "*size": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_95": {
                "*size": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_44": {
                "*size": {
                    "value": "(2,) + image_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_49": {
                "*size": {
                    "value": "(2,) + image_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "allclose_68": {
                "input": {
                    "value": "detector_losses[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(expected_losses.get(name, 0.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_124": {
                "input": {
                    "value": "detector_losses[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(expected_losses.get(name, 0.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "expected_losses.get(name, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "expected_losses.get(name, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modeling/test_roi_pooler.py": {
        "torch": {
            "rand_14": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_20": {
                "variable": {
                    "value": "boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "coords[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_21": {
                "variable": {
                    "value": "boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "coords[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_22": {
                "variable": {
                    "value": "boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "coords[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_23": {
                "variable": {
                    "value": "boxes[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "coords[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "rotated_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_74": {
                "input": {
                    "value": "roialignv2_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roialignv2_pooler(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "roialignrotated_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roialignrotated_pooler(features, rois_rotated)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_37": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modeling/test_rpn.py": {
        "torch": {
            "rand_26": {
                "variable": {
                    "value": "images_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 3, 3], [2, 2, 6, 6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_93": {
                "variable": {
                    "value": "images_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2, 2, 2, 2, 0], [4, 4, 4, 4, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "121",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "121",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_printoptions_195": {
                "precision": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "sci_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_31": {
                "*size": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "0.0804563984",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "0.0990132466",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[0.1225359365, -0.0133192837]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[0.1415634006, 0.0989848152, 0.0565387346, -0.0072308783, -0.0428492837]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_98": {
                "*size": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ],
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "data": {
                    "value": "0.043263837695121765",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "0.14432406425476074",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "data": {
                    "value": "[0.10111768, 0.09112845, 0.08466332, 0.07589971, 0.06650183, 0.06350251, 0.04299347, 0.01864817, 0.00986163, 0.00078543, -0.0457363, -0.0479923]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "[0.11373727, 0.09377633, 0.05281663, 0.05143715, 0.04040275, 0.03250912, 0.01307789, 0.01177734, 0.00038105, -0.00540255, -0.01194804, -0.01461012, -0.03061717, -0.03599222]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_226": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Hi * Wi * A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_227": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Hi * Wi * A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "allclose_48": {
                "input": {
                    "value": "proposal_losses[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_losses[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "[[0, 0, 10, 10], [7.3365392685, 0, 10, 10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "[[0, 0, 30, 20], [0, 0, 16.786277771, 13.1362524033], [0, 0, 30, 13.3173446655], [0, 0, 10.8602609634, 20], [7.7165775299, 0, 27.3875980377, 20]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_76": {
                "input": {
                    "value": "proposal.proposal_boxes.tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_proposal_box.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_78": {
                "input": {
                    "value": "proposal.objectness_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_objectness_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "allclose_115": {
                "input": {
                    "value": "proposal_losses[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_losses[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "[[0.60189795, 1.24095452, 61.98131943, 18.03621292, -4.07244873], [15.64940453, 1.69624567, 59.59749603, 16.34339333, 2.62692475], [-3.02982378, -2.69752932, 67.90952301, 59.6245575, 59.9701004], [16.71863365, 1.98309708, 35.61507797, 32.81484985, 62.92267227], [0.49432933, -7.92979717, 67.77606201, 62.9309845, -1.85656738], [8.00880814, 1.36017394, 121.81007385, 32.74150467, 50.44297409], [16.44299889, -4.82221127, 63.39775848, 61.22503662, 54.12270737], [5.0, 5.0, 10.0, 10.0, -0.7694397], [17.64130402, -0.98095351, 61.40377808, 16.28918839, 55.53118134], [0.13016054, 4.60568953, 35.80157471, 32.30180359, 62.52872086], [-4.26460743, 0.39604485, 124.30079651, 31.8461132, -1.58203125], [7.52815342, -0.91636634, 62.39784622, 15.45565224, 60.79549789]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "[[0.07734215, 0.81635046, 65.3351059, 17.34688377, -1.51821899], [-3.41833067, -3.11320257, 64.17595673, 60.55617905, 58.27033234], [20.67383385, -6.16561556, 63.60531998, 62.52315903, 54.85546494], [15.0, 10.0, 30.0, 20.0, -0.18218994], [9.22646523, -6.84775209, 62.09895706, 65.46472931, -2.74307251], [15.0, 4.93451595, 30.0, 9.86903191, -0.60272217], [8.88342094, 2.65560246, 120.95362854, 32.45022202, 55.75970078], [16.39088631, 2.33887148, 34.78761292, 35.6149292, 60.81977463], [9.78298569, 10.0, 19.56597137, 20.0, -0.86660767], [1.2857666, 5.49873352, 34.93610382, 33.22600174, 60.51599884], [17.58912468, -1.63270092, 62.96052551, 16.45713997, 52.9124527], [5.64749718, -1.9042846, 62.37649155, 16.19474792, 61.09543991], [0.82255805, 2.34931135, 118.83985901, 32.83671188, 56.50753784], [-5.33874989, 1.64404404, 125.28501892, 33.35424042, -2.80731201]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_210": {
                "input": {
                    "value": "proposal.proposal_boxes.tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_proposal_box.tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_220": {
                "input": {
                    "value": "proposal.objectness_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_objectness_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tests/structures/test_boxes.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10, 10], [1, 1, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10, 10], [1, 1, 2, 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 0.5, 1.0], [0.0, 0.0, 1.0, 0.5], [0.0, 0.0, 0.5, 0.5], [0.5, 0.5, 1.0, 1.0], [0.5, 0.5, 1.5, 1.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "script_188": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[50, 50, 30, 20, 0], [50, 50, 30, 20, 90], [1, 1, math.sqrt(2), math.sqrt(2), -45]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ],
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[35, 40, 65, 60], [40, 35, 60, 65], [0, 0, 2, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ],
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[30, 40, 70, 60], [30, 40, 60, 70], [-1, -1, 2, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ],
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[65, 70, 70, 60, 0], [60, 75, 60, 70, 0], [0, 0, 2, 2, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ],
                        [
                            "[np.float64, np.float32]",
                            "List"
                        ],
                        [
                            "[torch.float32, torch.float64]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_173": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou(Boxes(boxes1), Boxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]])",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_189": {
                "*size": {
                    "value": "(3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "allclose_100": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "output.numpy()",
                            "Call"
                        ],
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "output.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self._convert_xywha_to_xyxy(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywha_to_xyxy(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywha_to_xyxy(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywh_to_xywha(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywh_to_xywha(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywh_to_xywha(box)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([[35, 40, 65, 60], [40, 35, 60, 65], [0, 0, 2, 2]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[35, 40, 65, 60], [40, 35, 60, 65], [0, 0, 2, 2]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "np.asarray([[65, 70, 70, 60, 0], [60, 75, 60, 70, 0], [0, 0, 2, 2, 0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[65, 70, 70, 60, 0], [60, 75, 60, 70, 0], [0, 0, 2, 2, 0]], dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_131": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "output.numpy()",
                            "Call"
                        ],
                        [
                            "self._convert_xy_to_wh(box)",
                            "Call"
                        ],
                        [
                            "output.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self._convert_xywha_to_xyxy(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywha_to_xyxy(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywha_to_xyxy(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywh_to_xywha(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywh_to_xywha(box)",
                            "Call"
                        ],
                        [
                            "self._convert_xywh_to_xywha(box)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([[35, 40, 65, 60], [40, 35, 60, 65], [0, 0, 2, 2]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[35, 40, 65, 60], [40, 35, 60, 65], [0, 0, 2, 2]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "np.asarray([[65, 70, 70, 60, 0], [60, 75, 60, 70, 0], [0, 0, 2, 2, 0]], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[65, 70, 70, 60, 0], [60, 75, 60, 70, 0], [0, 0, 2, 2, 0]], dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tests/structures/test_imagelist.py": {
        "torch": {
            "trace_16": {
                "variable": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TensorToImageList()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_22": {
                "variable": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TensorToImageList()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_19": {
                "*size": {
                    "value": "(3, 15, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_33": {
                "*size": {
                    "value": "(3, 25, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "(3, 10, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "(3, 10, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_26": {
                "*size": {
                    "value": "(3, 16, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "(3, 13, 11)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/structures/test_instances.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "attr1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 1.0], [0.0, 0.0, 0.5], [0.0, 0.0, 1.0], [0.0, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_11": {
                "variable": {
                    "value": "attr2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3, 0.4]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/structures/test_rotated_boxes.py": {
        "torch": {
            "stack_320": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 10, 0], dtype=torch.float32) for i in range(num_boxes1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_326": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0], dtype=torch.float32) for i in range(num_boxes2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "rand_19": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_20": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_25": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_33": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_34": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.25, 0.5, 0.5, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.25, 0.5, 0.5, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "boxes_5d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[565, 565, 10, 10.0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[565, 565, 10, 8.3, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[160.0, 153.0, 230.0, 23.0, -37.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-1.117407639806935e+17, 1.3858420478349148e+18, 1000.0000610351562, 1000.0000610351562, 1612.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "boxes_5d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "boxes_4d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "boxes_5d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0], [0.5, 0.5, 1.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5, 0.5, 1.0, 1.0, 0.0], [0.25, 0.5, 0.5, 1.0, 0.0], [0.5, 0.25, 1.0, 0.5, 0.0], [0.25, 0.25, 0.5, 0.5, 0.0], [0.75, 0.75, 0.5, 0.5, 0.0], [1.0, 1.0, 1.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_209": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, math.sqrt(2), math.sqrt(2), 45], [1, 1, 2 * math.sqrt(2), 2 * math.sqrt(2), -45]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 2, 2, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5], [0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10, 6, 55]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_238": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[5, 5, 10, 6, -35]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_240": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_246": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[299.5, 417.370422, 600.0, 364.259186, 27.1828]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[299.5, 417.370422, 600.0, 364.259155, 27.1828]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_257": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stack_265": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 10, 0], dtype=torch.float32, device=device) for i in range(num_boxes1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_273": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0], dtype=torch.float32, device=device) for i in range(num_boxes2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_283": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_boxes2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "200",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_292": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[3, 3, 8, 2, -45.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_293": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[6, 0, 8, 2, -45.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_295": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_303": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[160.0, 153.0, 230.0, 23.0, -37.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_304": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[190.0, 127.0, 80.0, 21.0, -46.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_307": {
                "variable": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[iou]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "allclose_23": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_29": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_37": {
                "input": {
                    "value": "ious_cuda.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_43": {
                "input": {
                    "value": "ious_cuda.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_50": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_58": {
                "input": {
                    "value": "ious_cuda.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_146": {
                "input": {
                    "value": "areas_diff <= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_152": {
                "input": {
                    "value": "torch.abs(boxes_5d[:, 4][torch.where(areas_diff < 0)]) < clip_angle_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_322": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 10, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_348": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "allclose_67": {
                "input": {
                    "value": "ious.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_119": {
                "input": {
                    "value": "areas_4d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_boxes_4d.area()",
                            "Call"
                        ],
                        [
                            "test_boxes_4d.area()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "areas_5d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_boxes_5d.area()",
                            "Call"
                        ],
                        [
                            "test_boxes_5d.area()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_125": {
                "input": {
                    "value": "areas_4d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_boxes_4d.area()",
                            "Call"
                        ],
                        [
                            "test_boxes_4d.area()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "areas_5d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_boxes_5d.area()",
                            "Call"
                        ],
                        [
                            "test_boxes_5d.area()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "all_168": {
                "input": {
                    "value": "normalized_boxes.tensor[:, 4] >= -180",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_169": {
                "input": {
                    "value": "normalized_boxes.tensor[:, 4] < 180",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "allclose_171": {
                "input": {
                    "value": "boxes_5d[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "normalized_boxes.tensor[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "allclose_175": {
                "input": {
                    "value": "torch.cos(boxes_5d[:, 4] * math.pi / 180)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.cos(normalized_boxes.tensor[:, 4] * math.pi / 180)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_183": {
                "input": {
                    "value": "torch.sin(boxes_5d[:, 4] * math.pi / 180)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sin(normalized_boxes.tensor[:, 4] * math.pi / 180)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_218": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_233": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_242": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_259": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_287": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_298": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_310": {
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou_rotated(boxes1, boxes2)",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ],
                        [
                            "pairwise_iou(RotatedBoxes(boxes1), RotatedBoxes(boxes2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(0, 10, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.zeros(10, 0, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)], [1.0, 0.5, 0.5, 0.25, 0.25, 0.25 / (2 - 0.25)]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5], [0.5]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_boxes1, num_boxes2, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[iou]], dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_350": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_152": {
                "input": {
                    "value": "boxes_5d[:, 4][torch.where(areas_diff < 0)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_176": {
                "input": {
                    "value": "boxes_5d[:, 4] * math.pi / 180",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_177": {
                "input": {
                    "value": "normalized_boxes.tensor[:, 4] * math.pi / 180",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_184": {
                "input": {
                    "value": "boxes_5d[:, 4] * math.pi / 180",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_185": {
                "input": {
                    "value": "normalized_boxes.tensor[:, 4] * math.pi / 180",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_267": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 10, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_275": {
                "data": {
                    "value": "[5 + 20 * i, 5 + 20 * i, 10, 1 + 9 * i / num_boxes2, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ],
                        [
                            "['cpu'] + ['cuda'] if torch.cuda.is_available() else []",
                            "IfExp"
                        ]
                    ]
                }
            },
            "where_152": {
                "condition": {
                    "value": "areas_diff < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_checkpoint.py": {
        "torch": {
            "Module_16": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_17": {
                "variable": {
                    "value": "m.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "m.block1.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "m.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Module_20": {
                "variable": {
                    "value": "m.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "m.res.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_24": {
                "variable": {
                    "value": "state_dict[layer1.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_25": {
                "variable": {
                    "value": "state_dict[layer1.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "state_dict[layer2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_27": {
                "variable": {
                    "value": "state_dict[layer2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "state_dict[res.layer2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "state_dict[res.layer2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_36": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_config.py": {
        "torch": {}
    },
    "tests/test_export_caffe2.py": {
        "torch": {
            "from_numpy_58": {
                "ndarray": {
                    "value": "img.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_model_analysis.py": {
        "torch": {
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_31": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "800",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "800",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_47": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "800",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "800",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_visualizer.py": {
        "torch": {
            "randint_91": {
                "variable": {
                    "value": "inst.pred_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_inst,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_92": {
                "variable": {
                    "value": "inst.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_inst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(boxes)",
                            "Call"
                        ],
                        [
                            "len(boxes)",
                            "Call"
                        ],
                        [
                            "len(boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "inst.pred_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((boxxy, boxxy + H // 2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "inst.pred_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(masks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_103": {
                "variable": {
                    "value": "inst.pred_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_inst,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_104": {
                "variable": {
                    "value": "inst.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_inst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(boxes)",
                            "Call"
                        ],
                        [
                            "len(boxes)",
                            "Call"
                        ],
                        [
                            "len(boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "inst.pred_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((boxxy, boxxy + H // 2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "inst.pred_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros_like(np.asarray(masks))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "boxes_5d",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_138": {
                "variable": {
                    "value": "inst.pred_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_inst,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_139": {
                "variable": {
                    "value": "inst.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_inst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(boxes)",
                            "Call"
                        ],
                        [
                            "len(boxes)",
                            "Call"
                        ],
                        [
                            "len(boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "inst.pred_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((boxxy, boxxy + H // 2), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "inst.pred_masks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(masks)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tools/convert-torchvision-to-d2.py": {
        "torch": {
            "load_35": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sys.argv[1]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_net.py": {
        "torch": {
            "device_count_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}