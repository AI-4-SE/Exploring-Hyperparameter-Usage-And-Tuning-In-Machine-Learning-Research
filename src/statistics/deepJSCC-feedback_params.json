{
    "data/dataset_cifar10.py": {
        "tensorflow": {
            "decode_raw_49": {
                "variable": {
                    "value": "record_vector",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "raw_record",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "possible_values": []
                }
            },
            "cast_53": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "x": {
                    "value": "record_vector[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "depth_major",
                    "possible_values": []
                },
                "tensor": {
                    "value": "record_vector[1:_RECORD_BYTES]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_NUM_CHANNELS, _HEIGHT, _WIDTH]",
                    "possible_values": []
                }
            },
            "cast_62": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(depth_major, [1, 2, 0])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_67": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.cast(tf.transpose(depth_major, [1, 2, 0]), tf.float32)",
                            "Call"
                        ],
                        [
                            "image / 255.0",
                            "BinOp"
                        ],
                        [
                            "tf.cast(image, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                }
            },
            "FixedLengthRecordDataset_29": {
                "filenames": {
                    "value": "filenames",
                    "possible_values": [
                        [
                            "get_filenames(is_training, data_dir)",
                            "Call"
                        ]
                    ]
                },
                "record_bytes": {
                    "value": "_RECORD_BYTES",
                    "possible_values": [
                        [
                            "_DEFAULT_IMAGE_BYTES + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_62": {
                "a": {
                    "value": "depth_major",
                    "possible_values": [
                        [
                            "tf.reshape(record_vector[1:_RECORD_BYTES], [_NUM_CHANNELS, _HEIGHT, _WIDTH])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset_imagenet.py": {
        "tensorflow": {
            "VarLenFeature_76": {
                "variable": {
                    "value": "sparse_float32",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "parse_single_example_84": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example_serialized",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_map",
                    "possible_values": [
                        [
                            "{'image/encoded': tf.FixedLenFeature([], dtype=tf.string, default_value=''), 'image/class/label': tf.FixedLenFeature([], dtype=tf.int64, default_value=-1), 'image/class/text': tf.FixedLenFeature([], dtype=tf.string, default_value='')}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_85": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "x": {
                    "value": "features['image/class/label']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "variable": {
                    "value": "xmin",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/xmin'].values",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_88": {
                "variable": {
                    "value": "ymin",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/ymin'].values",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_89": {
                "variable": {
                    "value": "xmax",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/xmax'].values",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_90": {
                "variable": {
                    "value": "ymax",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/ymax'].values",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_93": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "values": {
                    "value": "[ymin, xmin, ymax, xmax]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_97": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox",
                    "possible_values": [
                        [
                            "tf.concat([ymin, xmin, ymax, xmax], 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "transpose_98": {
                "variable": {
                    "value": "bbox",
                    "possible_values": []
                },
                "a": {
                    "value": "bbox",
                    "possible_values": [
                        [
                            "tf.concat([ymin, xmin, ymax, xmax], 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bbox, 0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(bbox, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "possible_values": []
                }
            },
            "cast_127": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "imgnet_preprocessing.preprocess_image(image_buffer=image_buffer, bbox=bbox, output_height=_DEFAULT_IMAGE_SIZE, output_width=_DEFAULT_IMAGE_SIZE, num_channels=_NUM_CHANNELS, is_training=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                }
            },
            "FixedLenFeature_69": {
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "possible_values": []
                }
            },
            "FixedLenFeature_71": {
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "FixedLenFeature_73": {
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "possible_values": []
                }
            },
            "parallel_interleave_155": {
                "map_func": {
                    "value": "tf.data.TFRecordDataset",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "20",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset_kodak.py": {
        "tensorflow": {
            "reshape_31": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "tensor": {
                    "value": "raw_record",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_HEIGHT, _WIDTH, _NUM_CHANNELS]",
                    "possible_values": []
                }
            },
            "cast_33": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.reshape(raw_record, [_HEIGHT, _WIDTH, _NUM_CHANNELS])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype)",
                            "Call"
                        ],
                        [
                            "tf.divide(image, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, _HEIGHT + 8, _WIDTH + 8)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [_HEIGHT, _WIDTH, _NUM_CHANNELS])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                }
            },
            "divide_34": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.reshape(raw_record, [_HEIGHT, _WIDTH, _NUM_CHANNELS])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype)",
                            "Call"
                        ],
                        [
                            "tf.divide(image, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, _HEIGHT + 8, _WIDTH + 8)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [_HEIGHT, _WIDTH, _NUM_CHANNELS])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "255.0",
                    "possible_values": []
                }
            },
            "per_image_standardization_54": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.reshape(raw_record, [_HEIGHT, _WIDTH, _NUM_CHANNELS])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype)",
                            "Call"
                        ],
                        [
                            "tf.divide(image, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, _HEIGHT + 8, _WIDTH + 8)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [_HEIGHT, _WIDTH, _NUM_CHANNELS])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_48": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.reshape(raw_record, [_HEIGHT, _WIDTH, _NUM_CHANNELS])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype)",
                            "Call"
                        ],
                        [
                            "tf.divide(image, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, _HEIGHT + 8, _WIDTH + 8)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [_HEIGHT, _WIDTH, _NUM_CHANNELS])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[_HEIGHT, _WIDTH, _NUM_CHANNELS]",
                    "possible_values": []
                }
            },
            "random_flip_left_right_51": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.reshape(raw_record, [_HEIGHT, _WIDTH, _NUM_CHANNELS])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype)",
                            "Call"
                        ],
                        [
                            "tf.divide(image, 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, _HEIGHT + 8, _WIDTH + 8)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [_HEIGHT, _WIDTH, _NUM_CHANNELS])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.per_image_standardization(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_png_26": {
                "contents": {
                    "value": "tf.read_file(x)",
                    "possible_values": []
                }
            },
            "read_file_26": {
                "filename": {
                    "value": "x",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset_mnist.py": {
        "tensorflow": {
            "FixedLengthRecordDataset_102": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "filenames": {
                    "value": "images_file",
                    "possible_values": [
                        [
                            "download(directory, images_file)",
                            "Call"
                        ]
                    ]
                },
                "record_bytes": {
                    "value": "28 * 28",
                    "possible_values": []
                },
                "header_bytes": {
                    "value": "16",
                    "possible_values": []
                }
            },
            "FixedLengthRecordDataset_104": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "filenames": {
                    "value": "labels_file",
                    "possible_values": [
                        [
                            "download(directory, labels_file)",
                            "Call"
                        ]
                    ]
                },
                "record_bytes": {
                    "value": "1",
                    "possible_values": []
                },
                "header_bytes": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "Exists_65": {
                "filename": {
                    "value": "filepath",
                    "possible_values": [
                        [
                            "os.path.join(directory, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_92": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.decode_raw(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.uint8",
                    "possible_values": []
                }
            },
            "cast_93": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.decode_raw(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "possible_values": [
                        [
                            "tf.decode_raw(image, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[28, 28, 1]",
                    "possible_values": []
                }
            },
            "decode_raw_98": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "label",
                    "possible_values": [
                        [
                            "tf.decode_raw(label, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [])",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.uint8",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "possible_values": [
                        [
                            "tf.decode_raw(label, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "Exists_67": {
                "filename": {
                    "value": "directory",
                    "possible_values": []
                }
            },
            "MakeDirs_68": {
                "dirname": {
                    "value": "directory",
                    "possible_values": []
                }
            },
            "to_int32_100": {
                "x": {
                    "value": "label",
                    "possible_values": [
                        [
                            "tf.decode_raw(label, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/imagenet_preprocessing.py": {
        "tensorflow": {
            "sample_distorted_bounding_box_76": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.image.extract_jpeg_shape(image_buffer)",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "possible_values": []
                },
                "min_object_covered": {
                    "value": "0.1",
                    "possible_values": []
                },
                "aspect_ratio_range": {
                    "value": "[0.75, 1.33]",
                    "possible_values": []
                },
                "area_range": {
                    "value": "[0.05, 1.0]",
                    "possible_values": []
                },
                "max_attempts": {
                    "value": "100",
                    "possible_values": []
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "unstack_87": {
                "variable": {
                    "value": "(offset_y, offset_x, _)",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "possible_values": []
                }
            },
            "unstack_88": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "crop_window",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_y, offset_x, target_height, target_width]",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_92": {
                "variable": {
                    "value": "cropped",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_buffer",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "num_channels",
                    "possible_values": []
                }
            },
            "random_flip_left_right_96": {
                "variable": {
                    "value": "cropped",
                    "possible_values": []
                },
                "image": {
                    "value": "cropped",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_buffer, crop_window, channels=num_channels)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(cropped)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_111": {
                "variable": {
                    "value": "shape",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "_decode_crop_and_flip(image_buffer, bbox, num_channels)",
                            "Call"
                        ],
                        [
                            "_resize_image(image, output_height, output_width)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=num_channels)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, _RESIZE_MIN)",
                            "Call"
                        ],
                        [
                            "_central_crop(image, output_height, output_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_151": {
                "input": {
                    "value": "means",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(means, 0), 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cast_172": {
                "variable": {
                    "value": "resize_min",
                    "possible_values": []
                },
                "x": {
                    "value": "resize_min",
                    "possible_values": [
                        [
                            "tf.cast(resize_min, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "minimum_177": {
                "variable": {
                    "value": "smaller_dim",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "possible_values": []
                },
                "y": {
                    "value": "width",
                    "possible_values": []
                }
            },
            "cast_181": {
                "variable": {
                    "value": "new_height",
                    "possible_values": []
                },
                "x": {
                    "value": "height * scale_ratio",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "cast_182": {
                "variable": {
                    "value": "new_width",
                    "possible_values": []
                },
                "x": {
                    "value": "width * scale_ratio",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "shape_198": {
                "variable": {
                    "value": "shape",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "_decode_crop_and_flip(image_buffer, bbox, num_channels)",
                            "Call"
                        ],
                        [
                            "_resize_image(image, output_height, output_width)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=num_channels)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, _RESIZE_MIN)",
                            "Call"
                        ],
                        [
                            "_central_crop(image, output_height, output_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_118": {
                "input_": {
                    "value": "image",
                    "possible_values": [
                        [
                            "_decode_crop_and_flip(image_buffer, bbox, num_channels)",
                            "Call"
                        ],
                        [
                            "_resize_image(image, output_height, output_width)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(image_buffer, channels=num_channels)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, _RESIZE_MIN)",
                            "Call"
                        ],
                        [
                            "_central_crop(image, output_height, output_width)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[crop_top, crop_left, 0]",
                    "possible_values": []
                },
                "size": {
                    "value": "[crop_height, crop_width, -1]",
                    "possible_values": []
                }
            },
            "decode_jpeg_254": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_buffer",
                    "possible_values": []
                },
                "channels": {
                    "value": "num_channels",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_77": {
                "contents": {
                    "value": "image_buffer",
                    "possible_values": []
                }
            },
            "cast_175": {
                "x": {
                    "value": "width",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            }
        }
    },
    "jscc.py": {
        "tensorflow": {
            "NBatchLogger_23": {
                "base_class_0": {
                    "value": "tensorflow.keras.callbacks.Callback",
                    "possible_values": []
                },
                "self.display": {
                    "value": "display",
                    "possible_values": []
                }
            },
            "PSNRsVar_66": {
                "base_class_0": {
                    "value": "tensorflow.keras.metrics.Metric",
                    "possible_values": []
                }
            },
            "TargetPSNRsHistogram_109": {
                "base_class_0": {
                    "value": "tensorflow.keras.metrics.Metric",
                    "possible_values": []
                }
            },
            "Encoder_142": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "Decoder_212": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "Channel_347": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.channel_type": {
                    "value": "channel_type",
                    "possible_values": []
                },
                "self.channel_snr": {
                    "value": "channel_snr",
                    "possible_values": [
                        [
                            "args.channel_snr_train",
                            "Attribute"
                        ],
                        [
                            "args.channel_snr_eval",
                            "Attribute"
                        ]
                    ]
                }
            },
            "OutputsCombiner_407": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Conv2D_410": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "filters": {
                        "value": "48",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "strides": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "same",
                        "possible_values": []
                    }
                },
                "PReLU_411": {
                    "variable": {
                        "value": "self.prelu1",
                        "possible_values": []
                    },
                    "shared_axes": {
                        "value": "[1, 2]",
                        "possible_values": []
                    }
                },
                "Conv2D_412": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "filters": {
                        "value": "3",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "strides": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "same",
                        "possible_values": []
                    },
                    "activation": {
                        "value": "tf.nn.sigmoid",
                        "possible_values": []
                    }
                }
            },
            "DeepJSCCF_425": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.refinement_layer": {
                    "value": "refinement_layer",
                    "possible_values": []
                },
                "self.feedback_snr": {
                    "value": "feedback_snr",
                    "possible_values": [
                        [
                            "None if not args.feedback_noise else args.feedback_snr_train",
                            "IfExp"
                        ],
                        [
                            "None if not args.feedback_noise else args.feedback_snr_eval",
                            "IfExp"
                        ]
                    ]
                },
                "self.layer": {
                    "value": "layer_id",
                    "possible_values": []
                },
                "self.target_analysis": {
                    "value": "target_analysis",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normal_291": {
                "variable": {
                    "value": "awgn",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "complex_314": {
                "variable": {
                    "value": "awgn",
                    "possible_values": []
                },
                "real": {
                    "value": "tf.random.normal(tf.shape(x), 0, 1 / np.sqrt(2))",
                    "possible_values": []
                },
                "imag": {
                    "value": "tf.random.normal(tf.shape(x), 0, 1 / np.sqrt(2))",
                    "possible_values": []
                }
            },
            "normal_342": {
                "variable": {
                    "value": "awgn",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev / np.sqrt(2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "Input_545": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 3)",
                    "possible_values": []
                }
            },
            "Options_695": {
                "variable": {
                    "value": "data_options",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "psnr_78": {
                "variable": {
                    "value": "psnrs",
                    "possible_values": []
                },
                "a": {
                    "value": "y_true",
                    "possible_values": []
                },
                "b": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "cast_79": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "x": {
                    "value": "psnrs",
                    "possible_values": [
                        [
                            "tf.image.psnr(y_true, y_pred, max_val=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.psnr(y_true, y_pred, max_val=1.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                }
            },
            "size_80": {
                "variable": {
                    "value": "batch_count",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "possible_values": [
                        [
                            "tf.cast(psnrs, self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_81": {
                "variable": {
                    "value": "batch_count",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_count",
                    "possible_values": [
                        [
                            "tf.size(samples)",
                            "Call"
                        ],
                        [
                            "tf.cast(batch_count, self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "batch_mean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "samples",
                    "possible_values": [
                        [
                            "tf.cast(psnrs, self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_variance_83": {
                "variable": {
                    "value": "batch_var",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "samples",
                    "possible_values": [
                        [
                            "tf.cast(psnrs, self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "psnr_118": {
                "variable": {
                    "value": "psnrs",
                    "possible_values": []
                },
                "a": {
                    "value": "y_true",
                    "possible_values": []
                },
                "b": {
                    "value": "y_pred",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "psnr_139": {
                "a": {
                    "value": "img_in",
                    "possible_values": [
                        [
                            "x_in[0]",
                            "Subscript"
                        ],
                        [
                            "x_in",
                            "Name"
                        ],
                        [
                            "tf.concat([prev_img_out_fb, img], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x_out",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "complex_308": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "real": {
                    "value": "tf.random.normal([tf.shape(x)[0], 1], 0, 1 / np.sqrt(2))",
                    "possible_values": []
                },
                "imag": {
                    "value": "tf.random.normal([tf.shape(x)[0], 1], 0, 1 / np.sqrt(2))",
                    "possible_values": []
                }
            },
            "normal_336": {
                "variable": {
                    "value": "n1",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / np.sqrt(2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "normal_337": {
                "variable": {
                    "value": "n2",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / np.sqrt(2)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "sqrt_339": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(n1) + tf.square(n2)",
                    "possible_values": []
                }
            },
            "shape_355": {
                "variable": {
                    "value": "inter_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded_img",
                    "possible_values": []
                }
            },
            "reshape_400": {
                "variable": {
                    "value": "z_out",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_out",
                    "possible_values": [
                        [
                            "real_awgn(z_in, noise_stddev)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_out, inter_shape)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(z_out), tf.math.imag(z_out)], 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "inter_shape",
                    "possible_values": [
                        [
                            "tf.shape(encoded_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_402": {
                "variable": {
                    "value": "avg_power",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.real(z_in * tf.math.conj(z_in))",
                    "possible_values": []
                }
            },
            "concat_417": {
                "variable": {
                    "value": "reconst",
                    "possible_values": []
                },
                "values": {
                    "value": "[img_prev, residual]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Model_600": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(None, None, 3))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "decoded_img",
                    "possible_values": [
                        [
                            "self.image_combiner((prev_img_out_dec, residual_img))",
                            "Call"
                        ],
                        [
                            "self.decoder(chn_out_exp)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_291": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "sublayer(x)",
                            "Call"
                        ],
                        [
                            "sublayer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_315": {
                "shape": {
                    "value": "tf.shape(x)",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / np.sqrt(2)",
                    "possible_values": []
                }
            },
            "normal_316": {
                "shape": {
                    "value": "tf.shape(x)",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / np.sqrt(2)",
                    "possible_values": []
                }
            },
            "shape_342": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "sublayer(x)",
                            "Call"
                        ],
                        [
                            "sublayer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_370": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "z_in",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.cast(dim_z, dtype=tf.float32)) * tf.nn.l2_normalize(z, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(z[:, :dim_z], z[:, dim_z:])",
                            "Call"
                        ],
                        [
                            "z_in * tf.complex(tf.sqrt(tf.cast(dim_z, dtype=tf.float32) / z_norm), 0.0)",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(tf.cast(dim_z, dtype=tf.float32)) * tf.nn.l2_normalize(z, axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_462": {
                "variable": {
                    "value": "img_in",
                    "possible_values": []
                },
                "values": {
                    "value": "[prev_img_out_fb, img]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_481": {
                "variable": {
                    "value": "chn_out_exp",
                    "possible_values": []
                },
                "values": {
                    "value": "[chn_out, prev_chn_out_dec]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "concat_491": {
                "variable": {
                    "value": "chn_out_exp_fb",
                    "possible_values": []
                },
                "values": {
                    "value": "[chn_out_fb, prev_chn_out_fb]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "exists_534": {
                "path": {
                    "value": "args.model_dir",
                    "possible_values": []
                }
            },
            "rmtree_536": {
                "path": {
                    "value": "args.model_dir",
                    "possible_values": []
                }
            },
            "makedirs_537": {
                "path": {
                    "value": "args.model_dir",
                    "possible_values": []
                }
            },
            "makedirs_540": {
                "path": {
                    "value": "args.model_dir",
                    "possible_values": []
                }
            },
            "PReLU_160": {
                "shared_axes": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "PReLU_171": {
                "shared_axes": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "PReLU_182": {
                "shared_axes": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "PReLU_193": {
                "shared_axes": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "PReLU_230": {
                "shared_axes": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "PReLU_241": {
                "shared_axes": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "PReLU_252": {
                "shared_axes": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "PReLU_263": {
                "shared_axes": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "normal_309": {
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / np.sqrt(2)",
                    "possible_values": []
                }
            },
            "normal_310": {
                "shape": {
                    "value": "[tf.shape(x)[0], 1]",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1 / np.sqrt(2)",
                    "possible_values": []
                }
            },
            "shape_315": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "sublayer(x)",
                            "Call"
                        ],
                        [
                            "sublayer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_316": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "sublayer(x)",
                            "Call"
                        ],
                        [
                            "sublayer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Flatten_357": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "complex_375": {
                "variable": {
                    "value": "z_in",
                    "possible_values": []
                },
                "real": {
                    "value": "z[:, :dim_z]",
                    "possible_values": []
                },
                "imag": {
                    "value": "z[:, dim_z:]",
                    "possible_values": []
                }
            },
            "reduce_sum_377": {
                "variable": {
                    "value": "z_norm",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.real(z_in * tf.math.conj(z_in))",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "concat_385": {
                "variable": {
                    "value": "z_out",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(z_out), tf.math.imag(z_out)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "real_402": {
                "input": {
                    "value": "z_in * tf.math.conj(z_in)",
                    "possible_values": []
                }
            },
            "psnr_503": {
                "a": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(None, None, 3))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "decoded_img",
                    "possible_values": [
                        [
                            "self.image_combiner((prev_img_out_dec, residual_img))",
                            "Call"
                        ],
                        [
                            "self.decoder(chn_out_exp)",
                            "Call"
                        ]
                    ]
                },
                "max_val": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "psnr_508": {
                "a": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(None, None, 3))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "decoded_img_fb",
                    "possible_values": [
                        [
                            "self.image_combiner([prev_img_out_fb, residual_img_fb])",
                            "Call"
                        ],
                        [
                            "self.decoder(chn_out_exp_fb)",
                            "Call"
                        ]
                    ]
                },
                "max_val": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "reduce_mean_513": {
                "input_tensor": {
                    "value": "tf.math.square(img - decoded_img)",
                    "possible_values": []
                }
            },
            "MeanSquaredError_603": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "count_nonzero_122": {
                "input": {
                    "value": "tf.greater_equal(psnrs, bin_label)",
                    "possible_values": []
                }
            },
            "square_339": {
                "x": {
                    "value": "n2",
                    "possible_values": [
                        [
                            "tf.random.normal([tf.shape(x)[0], 1], 0, 1 / np.sqrt(2), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_364": {
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "layers.Flatten()(encoded_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_366": {
                "x": {
                    "value": "tf.cast(dim_z, dtype=tf.float32)",
                    "possible_values": []
                }
            },
            "l2_normalize_366": {
                "x": {
                    "value": "z",
                    "possible_values": [
                        [
                            "layers.Flatten()(encoded_img)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "square_513": {
                "x": {
                    "value": "img - decoded_img",
                    "possible_values": []
                }
            },
            "Adam_610": {
                "learning_rate": {
                    "value": "args.learn_rate",
                    "possible_values": []
                }
            },
            "EarlyStopping_638": {
                "patience": {
                    "value": "train_patience",
                    "possible_values": [
                        [
                            "3 if args.dataset_train != 'imagenet' else 2",
                            "IfExp"
                        ]
                    ]
                },
                "monitor": {
                    "value": "val_psnr_metric",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "0.01",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "possible_values": []
                },
                "restore_best_weights": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "TensorBoard_646": {
                "log_dir": {
                    "value": "args.eval_dir",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_649": {
                "filepath": {
                    "value": "ckpt_file",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'ckpt_layer{}'.format(layer))",
                            "Call"
                        ]
                    ]
                },
                "monitor": {
                    "value": "val_psnr_metric",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "TerminateOnNaN_657": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "greater_equal_122": {
                "x": {
                    "value": "psnrs",
                    "possible_values": [
                        [
                            "tf.image.psnr(y_true, y_pred, max_val=1.0)",
                            "Call"
                        ],
                        [
                            "tf.image.psnr(y_true, y_pred, max_val=1.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bin_label",
                    "possible_values": []
                }
            },
            "shape_336": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "sublayer(x)",
                            "Call"
                        ],
                        [
                            "sublayer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_337": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "sublayer(x)",
                            "Call"
                        ],
                        [
                            "sublayer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_366": {
                "x": {
                    "value": "dim_z",
                    "possible_values": [
                        [
                            "tf.shape(z)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(z)[1] // 2",
                            "BinOp"
                        ],
                        [
                            "tf.shape(z)[1] // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "real_378": {
                "input": {
                    "value": "z_in * tf.math.conj(z_in)",
                    "possible_values": []
                }
            },
            "complex_380": {
                "real": {
                    "value": "tf.sqrt(tf.cast(dim_z, dtype=tf.float32) / z_norm)",
                    "possible_values": []
                },
                "imag": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "conj_402": {
                "x": {
                    "value": "z_in",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.cast(dim_z, dtype=tf.float32)) * tf.nn.l2_normalize(z, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(z[:, :dim_z], z[:, dim_z:])",
                            "Call"
                        ],
                        [
                            "z_in * tf.complex(tf.sqrt(tf.cast(dim_z, dtype=tf.float32) / z_norm), 0.0)",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(tf.cast(dim_z, dtype=tf.float32)) * tf.nn.l2_normalize(z, axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_91": {
                "x": {
                    "value": "self.mean - new_mean",
                    "possible_values": []
                }
            },
            "square_92": {
                "x": {
                    "value": "batch_mean - new_mean",
                    "possible_values": []
                }
            },
            "shape_309": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "sublayer(x)",
                            "Call"
                        ],
                        [
                            "sublayer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_310": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "sublayer(x)",
                            "Call"
                        ],
                        [
                            "sublayer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_373": {
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "layers.Flatten()(encoded_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_381": {
                "x": {
                    "value": "tf.cast(dim_z, dtype=tf.float32) / z_norm",
                    "possible_values": []
                }
            },
            "real_385": {
                "input": {
                    "value": "z_out",
                    "possible_values": [
                        [
                            "real_awgn(z_in, noise_stddev)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_out, inter_shape)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(z_out), tf.math.imag(z_out)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_385": {
                "input": {
                    "value": "z_out",
                    "possible_values": [
                        [
                            "real_awgn(z_in, noise_stddev)",
                            "Call"
                        ],
                        [
                            "tf.reshape(z_out, inter_shape)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(z_out), tf.math.imag(z_out)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_391": {
                "x": {
                    "value": "tf.cast(dim_z, dtype=tf.float32)",
                    "possible_values": []
                }
            },
            "l2_normalize_391": {
                "x": {
                    "value": "z",
                    "possible_values": [
                        [
                            "layers.Flatten()(encoded_img)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conj_378": {
                "x": {
                    "value": "z_in",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.cast(dim_z, dtype=tf.float32)) * tf.nn.l2_normalize(z, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(z[:, :dim_z], z[:, dim_z:])",
                            "Call"
                        ],
                        [
                            "z_in * tf.complex(tf.sqrt(tf.cast(dim_z, dtype=tf.float32) / z_norm), 0.0)",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(tf.cast(dim_z, dtype=tf.float32)) * tf.nn.l2_normalize(z, axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_389": {
                "input": {
                    "value": "z",
                    "possible_values": [
                        [
                            "layers.Flatten()(encoded_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_391": {
                "x": {
                    "value": "dim_z",
                    "possible_values": [
                        [
                            "tf.shape(z)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(z)[1] // 2",
                            "BinOp"
                        ],
                        [
                            "tf.shape(z)[1] // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_381": {
                "x": {
                    "value": "dim_z",
                    "possible_values": [
                        [
                            "tf.shape(z)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(z)[1] // 2",
                            "BinOp"
                        ],
                        [
                            "tf.shape(z)[1] // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            }
        }
    }
}