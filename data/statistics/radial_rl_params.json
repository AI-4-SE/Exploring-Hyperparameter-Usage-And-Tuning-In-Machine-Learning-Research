{
    "A3C/adv_attacks/adv_model.py": {
        "torch": {
            "from_numpy_205": {
                "variable": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaled_data).to(self._device)",
                            "Call"
                        ],
                        [
                            "self._process_input(data).to(self._device)",
                            "Call"
                        ],
                        [
                            "self._process_input(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaled_data).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_281": {
                "variable": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaled_data).to(self._device)",
                            "Call"
                        ],
                        [
                            "self._process_input(data).to(self._device)",
                            "Call"
                        ],
                        [
                            "self._process_input(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaled_data).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_285": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label).to(self._device)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_292": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_179": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_181": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_183": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "A3C/evaluate.py": {
        "torch": {
            "CrossEntropyLoss_141": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_161": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_167": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_299": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cuda:{}'.format(args.gpu_id))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_304": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_123": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_204": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_216": {
                "variable": {
                    "value": "worst_case_action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output + 1000000.0 * impossible",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_233": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_260": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_265": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_110": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_242": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_301": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_163": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_272": {
                "input": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_bounds(curr_model.model, input_x, epsilon=epsilon)",
                            "Call"
                        ],
                        [
                            "upper[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "network_bounds(curr_model.model, input_x, epsilon=epsilon)",
                            "Call"
                        ],
                        [
                            "upper[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_299": {
                "type": {
                    "value": "'cuda:{}'.format(args.gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_304": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_120": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_206": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_214": {
                "input": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_bounds(curr_model.model, input_x, epsilon=epsilon)",
                            "Call"
                        ],
                        [
                            "lower[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "network_bounds(curr_model.model, input_x, epsilon=epsilon)",
                            "Call"
                        ],
                        [
                            "lower[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_235": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_262": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "A3C/ibp.py": {
        "torch": {
            "linear_18": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(prev_upper - prev_lower) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.abs(layer.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_20": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(prev_upper - prev_lower) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.abs(layer.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "layer.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_18": {
                "input": {
                    "value": "layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_20": {
                "input": {
                    "value": "layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "A3C/main.py": {
        "torch": {
            "load_160": {
                "variable": {
                    "value": "saved_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_144": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_149": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "A3C/model.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_inputs, 32, kernel_size=8, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_inputs, 32, 5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_17": {
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "64 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_space.n + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inputs",
                            "Method Argument"
                        ],
                        [
                            "num_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_36": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_39": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_45": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_space.n + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "A3C/player_util.py": {
        "torch": {
            "clamp_30": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(logit, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_31": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logit, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-30",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "-1e-06",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.env.step(action.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.env.step(action[0])",
                            "Call"
                        ],
                        [
                            "self.env.step(action.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ],
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ],
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.env.step(action.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.env.step(action[0])",
                            "Call"
                        ],
                        [
                            "self.env.step(action.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_48": {
                "variable": {
                    "value": "min_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(onehot_action * lower + (1 - onehot_action) * upper, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-30",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "-1e-06",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "variable": {
                    "value": "max_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax((1 - onehot_action) * lower + onehot_action * upper, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-30",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "-1e-06",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_86": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(logit, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_87": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logit, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-30",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "-1e-06",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.env.step(action.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.env.step(action[0])",
                            "Call"
                        ],
                        [
                            "self.env.step(action.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_30": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ],
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ],
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_31": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ],
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ],
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "onehot_action",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "upper.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_100": {
                "variable": {
                    "value": "min_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(onehot_action * lower + (1 - onehot_action) * upper, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-30",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "-1e-06",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_101": {
                "variable": {
                    "value": "max_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax((1 - onehot_action) * lower + onehot_action * upper, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-30",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "-1e-06",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "onehot_action",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "upper.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_48": {
                "input": {
                    "value": "onehot_action * lower + (1 - onehot_action) * upper",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_49": {
                "input": {
                    "value": "(1 - onehot_action) * lower + onehot_action * upper",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_58": {
                "type": {
                    "value": "self.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_77": {
                "type": {
                    "value": "self.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ],
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ],
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_87": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ],
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ],
                        [
                            "self.model(Variable(self.state.unsqueeze(0)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "onehot_action",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "upper.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_43": {
                "type": {
                    "value": "self.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_97": {
                "type": {
                    "value": "self.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_100": {
                "input": {
                    "value": "onehot_action * lower + (1 - onehot_action) * upper",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_101": {
                "input": {
                    "value": "(1 - onehot_action) * lower + onehot_action * upper",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_112": {
                "type": {
                    "value": "self.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "A3C/shared_optim.py": {
        "torch": {
            "zeros_32": {
                "variable": {
                    "value": "state[step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "state[step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_173": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "A3C/test.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "player.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "player.state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "player.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "player.env.reset()",
                            "Call"
                        ],
                        [
                            "player.env.reset()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_49": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "gae",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "player.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "player.env.reset()",
                            "Call"
                        ],
                        [
                            "player.env.reset()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_62": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_86": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_92": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_97": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_152": {
                "obj": {
                    "value": "state_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "player.model.state_dict()",
                            "Call"
                        ],
                        [
                            "player.model.state_dict()",
                            "Call"
                        ],
                        [
                            "player.model.state_dict()",
                            "Call"
                        ],
                        [
                            "player.model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{0}{1}_{2}_best.pt'.format(args.save_model_dir, args.env, start_time)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_169": {
                "obj": {
                    "value": "state_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "player.model.state_dict()",
                            "Call"
                        ],
                        [
                            "player.model.state_dict()",
                            "Call"
                        ],
                        [
                            "player.model.state_dict()",
                            "Call"
                        ],
                        [
                            "player.model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{0}{1}_{2}_last.pt'.format(args.save_model_dir, args.env, start_time)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_176": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_146": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_148": {
                "obj": {
                    "value": "state_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "player.model.state_dict()",
                            "Call"
                        ],
                        [
                            "player.model.state_dict()",
                            "Call"
                        ],
                        [
                            "player.model.state_dict()",
                            "Call"
                        ],
                        [
                            "player.model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{0}{1}_{2}_best.pt'.format(args.save_model_dir, args.env, start_time)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_163": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_165": {
                "obj": {
                    "value": "state_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "player.model.state_dict()",
                            "Call"
                        ],
                        [
                            "player.model.state_dict()",
                            "Call"
                        ],
                        [
                            "player.model.state_dict()",
                            "Call"
                        ],
                        [
                            "player.model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{0}{1}_{2}_last.pt'.format(args.save_model_dir, args.env, start_time)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "A3C/train.py": {
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "player.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "player.state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "player.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "player.state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "gae",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "gae",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSprop_22": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "shared_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_24": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "shared_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "args.amsgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "player.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "player.env.reset()",
                            "Call"
                        ],
                        [
                            "player.env.reset()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_117": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSprop_123": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "shared_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "shared_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "args.amsgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "player.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "player.env.reset()",
                            "Call"
                        ],
                        [
                            "player.env.reset()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_36": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ],
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_119": {
                "seed": {
                    "value": "args.seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_137": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ],
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_43": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ],
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_74": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ],
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_82": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ],
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_144": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ],
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_172": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ],
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_180": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ],
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_65": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ],
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_163": {
                "type": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ],
                        [
                            "args.gpu_ids[rank % len(args.gpu_ids)]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "A3C/utils.py": {
        "torch": {}
    },
    "DQN/adv_attacks/adv_model.py": {
        "torch": {
            "from_numpy_205": {
                "variable": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaled_data).to(self._device)",
                            "Call"
                        ],
                        [
                            "self._process_input(data).to(self._device)",
                            "Call"
                        ],
                        [
                            "self._process_input(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaled_data).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_281": {
                "variable": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scaled_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._process_input(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaled_data).to(self._device)",
                            "Call"
                        ],
                        [
                            "self._process_input(data).to(self._device)",
                            "Call"
                        ],
                        [
                            "self._process_input(data)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaled_data).to(self._device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_285": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([label])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label).to(self._device)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_292": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_179": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_181": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_183": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DQN/evaluate.py": {
        "torch": {
            "CrossEntropyLoss_141": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_161": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_167": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_296": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cuda:{}'.format(args.gpu_id))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_301": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_123": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_204": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_214": {
                "variable": {
                    "value": "worst_case_action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output + 1000000.0 * impossible",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_231": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_258": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_263": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ],
                        [
                            "curr_model.forward(input_x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_110": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_240": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_298": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_163": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_269": {
                "input": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_bounds(curr_model.model, input_x, epsilon=epsilon)",
                            "Call"
                        ],
                        [
                            "network_bounds(curr_model.model, input_x, epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_296": {
                "type": {
                    "value": "'cuda:{}'.format(args.gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_301": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_120": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_206": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_212": {
                "input": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_bounds(curr_model.model, input_x, epsilon=epsilon)",
                            "Call"
                        ],
                        [
                            "network_bounds(curr_model.model, input_x, epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_233": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_260": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DQN/ibp.py": {
        "torch": {
            "linear_18": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(prev_upper - prev_lower) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.abs(layer.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_20": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(prev_upper - prev_lower) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.abs(layer.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "layer.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "layer.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_18": {
                "input": {
                    "value": "layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_20": {
                "input": {
                    "value": "layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DQN/main.py": {
        "torch": {
            "load_174": {
                "variable": {
                    "value": "saved_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "RMSprop_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "curr_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_189": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "curr_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "args.amsgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_159": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_182": {
                "type": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DQN/model.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_channels, 32, kernel_size=8, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_19": {
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "64 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_35": {
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DQN/train.py": {
        "torch": {
            "min_25": {
                "variable": {
                    "value": "standard_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(q_value - expected_q_value.detach()).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "onehot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "upper.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_40": {
                "variable": {
                    "value": "worst_case_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(wc_diff.pow(2), wc_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_40": {
                "variable": {
                    "value": "worst_case_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_59": {
                "variable": {
                    "value": "standard_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(q_value - expected_q_value.detach()).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_99": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_34": {
                "variable": {
                    "value": "wc_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(upper_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_37": {
                "variable": {
                    "value": "wc_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "worst_case - q_values * (1 - onehot_labels) - expected_q_value.detach().unsqueeze(1) * onehot_labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_82": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(args.gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_84": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_107": {
                "variable": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_110": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([reward]).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "state_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_model.state_dict()",
                            "Call"
                        ],
                        [
                            "current_model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}{}_{}_last.pt'.format(args.save_model_dir, args.env, start_time)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_25": {
                "input": {
                    "value": "q_value - expected_q_value.detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_59": {
                "input": {
                    "value": "q_value - expected_q_value.detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_119": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_175": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_178": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_34": {
                "input": {
                    "value": "lower_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lower - q_values * (1 - onehot_labels) - expected_q_value.detach().unsqueeze(1) * onehot_labels",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_123": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "tensors": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.step(action)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.FloatTensor([reward]).to(device), min=-1, max=1)",
                            "Call"
                        ],
                        [
                            "env.step(action)",
                            "Call"
                        ],
                        [
                            "zip(*random.sample(self.buffer, batch_size))",
                            "Call"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "tensors": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.step(action)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([info]).to(device)",
                            "Call"
                        ],
                        [
                            "env.step(action)",
                            "Call"
                        ],
                        [
                            "zip(*random.sample(self.buffer, batch_size))",
                            "Call"
                        ],
                        [
                            "done",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_22": {
                "input": {
                    "value": "next_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_model(next_state)",
                            "Call"
                        ],
                        [
                            "curr_model(next_state)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_40": {
                "input": {
                    "value": "wc_diff.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_56": {
                "input": {
                    "value": "next_q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_model(next_state)",
                            "Call"
                        ],
                        [
                            "curr_model(next_state)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "state_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_model.state_dict()",
                            "Call"
                        ],
                        [
                            "current_model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}{}_{}_best.pt'.format(args.save_model_dir, args.env, start_time)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "DQN/utils.py": {
        "torch": {}
    }
}