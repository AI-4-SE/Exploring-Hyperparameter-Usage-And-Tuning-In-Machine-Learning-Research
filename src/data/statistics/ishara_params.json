{
    "code/model.py": {
        "tensorflow": {
            "shuffle_118": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[x for x in range(len(train_inputs))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "gather_119": {
                "variable": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "train_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(train_inputs, indices)",
                            "Call"
                        ],
                        [
                            "pre.get_data()",
                            "Call"
                        ],
                        [
                            "train_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.shuffle([x for x in range(len(train_inputs))])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_120": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(train_labels, indices)",
                            "Call"
                        ],
                        [
                            "pre.get_data()",
                            "Call"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.shuffle([x for x in range(len(train_inputs))])",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_29": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_36": {
                "variable": {
                    "value": "self.conv_layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.first_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.layers.LeakyReLU(alpha=self.alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_37": {
                "variable": {
                    "value": "self.batch_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_38": {
                "variable": {
                    "value": "self.max_pool_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_41": {
                "variable": {
                    "value": "self.conv_layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.second_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.layers.LeakyReLU(alpha=self.alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_42": {
                "variable": {
                    "value": "self.batch_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2D_43": {
                "variable": {
                    "value": "self.max_pool_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_46": {
                "variable": {
                    "value": "self.conv_layer_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.third_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.layers.LeakyReLU(alpha=self.alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_47": {
                "variable": {
                    "value": "self.batch_norm_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_49": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_50": {
                "variable": {
                    "value": "self.Dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dense_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.keras.layers.LeakyReLU(alpha=self.alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_52": {
                "variable": {
                    "value": "self.Dense_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_101": {
                "variable": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_flip_left_right_123": {
                "variable": {
                    "value": "batched_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "batched_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_inputs[i:i + model.batch_size]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(batched_inputs)",
                            "Call"
                        ],
                        [
                            "test_inputs[i:i + model.batch_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_89": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "input_tensor": {
                    "value": "tf.cast(correct_predictions, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_89": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_101": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_102": {
                "x": {
                    "value": "correct_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_36": {
                "alpha": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "alpha": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_46": {
                "alpha": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_50": {
                "alpha": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/preprocess.py": {
        "tensorflow": {
            "transpose_57": {
                "variable": {
                    "value": "self.testing_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(self.testing_data, (-1, 1, 64, 64))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_58": {
                "variable": {
                    "value": "self.testing_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.testing_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "variable": {
                    "value": "self.training_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(self.training_data, (-1, 1, 64, 64))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_60": {
                "variable": {
                    "value": "self.training_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.training_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "tensor": {
                    "value": "self.testing_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 64, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "self.training_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 64, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}