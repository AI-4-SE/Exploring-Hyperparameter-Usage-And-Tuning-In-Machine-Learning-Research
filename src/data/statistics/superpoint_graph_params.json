{
    "learning/s3dis_dataset.py": {
        "sklearn": {
            "RANSACRegressor_132": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_82": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((13,), dtype='f4')",
                            "Call"
                        ],
                        [
                            "h5py.File(args.S3DIS_PATH + '/parsed/class_count.h5')['class_count'][:].astype('f4')",
                            "Call"
                        ],
                        [
                            "weights[:, [i for i in range(6) if i != args.cvfold - 1]].sum(1)",
                            "Call"
                        ],
                        [
                            "weights.mean() / weights",
                            "BinOp"
                        ],
                        [
                            "np.sqrt(weights)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(weights).cuda() if args.cuda else torch.from_numpy(weights)",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "learning/spg.py": {
        "sklearn": {
            "StandardScaler_54": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_183": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(t) for t in targets if t is not None]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "clouds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(f) for f in clouds if f is not None]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "clouds_global",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(f) for f in clouds_global if f is not None]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "clouds_flag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(f) for f in clouds_flag if f is not None]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_176": {
                "ndarray": {
                    "value": "edgefeats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(edgeattrs['f'])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_188": {
                "ndarray": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h5py.File(fname, 'r')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_189": {
                "ndarray": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h5py.File(fname, 'r')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_190": {
                "ndarray": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h5py.File(fname, 'r')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_183": {
                "ndarray": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "partition/graphs.py": {
        "sklearn": {
            "NearestNeighbors_15": {
                "variable": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k_nn + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_34": {
                "variable": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "k_nn2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "partition/provider.py": {
        "sklearn": {
            "NearestNeighbors_200": {
                "variable": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_632": {
                "variable": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_672": {
                "variable": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "kd_tree",
                    "type": "str",
                    "possible_values": []
                }
            },
            "PCA_431": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "supervized_partition/graph_processing.py": {
        "sklearn": {
            "RANSACRegressor_183": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_431": {
                "variable": {
                    "value": "is_transition",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "is_transition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(False)",
                            "Call"
                        ],
                        [
                            "objects[graph_nn['source']] != objects[graph_nn['target']]",
                            "Compare"
                        ],
                        [
                            "hard_labels[graph_nn['source']] != hard_labels[graph_nn['target']] * (hard_labels[graph_nn['source']] != 0) * (hard_labels[graph_nn['target']] != 0)",
                            "Compare"
                        ],
                        [
                            "objects[graph_nn['source']] != objects[graph_nn['target']]",
                            "Compare"
                        ],
                        [
                            "hard_labels[graph_nn['source']] != hard_labels[graph_nn['target']]",
                            "Compare"
                        ],
                        [
                            "np.array(data_file['is_transition'])",
                            "Call"
                        ],
                        [
                            "np.array([0])",
                            "Call"
                        ],
                        [
                            "is_transition[selected_edg]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(is_transition)",
                            "Call"
                        ],
                        [
                            "torch.cat(is_transition, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_433": {
                "variable": {
                    "value": "objects",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "objects.astype('int64')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_434": {
                "variable": {
                    "value": "clouds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "clouds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz[nei,]",
                            "Subscript"
                        ],
                        [
                            "(clouds - xyz[selected_ver, np.newaxis, :]) / (diameters[:, np.newaxis, np.newaxis] + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "np.concatenate([clouds, rgb[nei,]], axis=2)",
                            "Call"
                        ],
                        [
                            "clouds.transpose([0, 2, 1])",
                            "Call"
                        ],
                        [
                            "np.concatenate([local_geometry, rgb[selected_ver,]], axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(clouds)",
                            "Call"
                        ],
                        [
                            "local_geometry",
                            "variable"
                        ],
                        [
                            "torch.cat(clouds, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_435": {
                "variable": {
                    "value": "clouds_global",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "clouds_global",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diameters[:, None]",
                            "Subscript"
                        ],
                        [
                            "np.array([0])",
                            "Call"
                        ],
                        [
                            "np.hstack((clouds_global, elevation[:, None]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(clouds_global)",
                            "Call"
                        ],
                        [
                            "np.array([0])",
                            "Call"
                        ],
                        [
                            "np.hstack((clouds_global, rgb[selected_ver,]))",
                            "Call"
                        ],
                        [
                            "np.hstack((clouds_global, xyn))",
                            "Call"
                        ],
                        [
                            "np.hstack((clouds_global, xyz[selected_ver, :2]))",
                            "Call"
                        ],
                        [
                            "torch.cat(clouds_global, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_450": {
                "variable": {
                    "value": "clouds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "clouds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz[nei,]",
                            "Subscript"
                        ],
                        [
                            "(clouds - xyz[selected_ver, np.newaxis, :]) / (diameters[:, np.newaxis, np.newaxis] + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "np.concatenate([clouds, rgb[nei,]], axis=2)",
                            "Call"
                        ],
                        [
                            "clouds.transpose([0, 2, 1])",
                            "Call"
                        ],
                        [
                            "np.concatenate([local_geometry, rgb[selected_ver,]], axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(clouds)",
                            "Call"
                        ],
                        [
                            "local_geometry",
                            "variable"
                        ],
                        [
                            "torch.cat(clouds, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_451": {
                "variable": {
                    "value": "clouds_global",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "clouds_global",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diameters[:, None]",
                            "Subscript"
                        ],
                        [
                            "np.array([0])",
                            "Call"
                        ],
                        [
                            "np.hstack((clouds_global, elevation[:, None]))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(clouds_global)",
                            "Call"
                        ],
                        [
                            "np.array([0])",
                            "Call"
                        ],
                        [
                            "np.hstack((clouds_global, rgb[selected_ver,]))",
                            "Call"
                        ],
                        [
                            "np.hstack((clouds_global, xyn))",
                            "Call"
                        ],
                        [
                            "np.hstack((clouds_global, xyz[selected_ver, :2]))",
                            "Call"
                        ],
                        [
                            "torch.cat(clouds_global, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_454": {
                "variable": {
                    "value": "is_transition",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "is_transition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(False)",
                            "Call"
                        ],
                        [
                            "objects[graph_nn['source']] != objects[graph_nn['target']]",
                            "Compare"
                        ],
                        [
                            "hard_labels[graph_nn['source']] != hard_labels[graph_nn['target']] * (hard_labels[graph_nn['source']] != 0) * (hard_labels[graph_nn['target']] != 0)",
                            "Compare"
                        ],
                        [
                            "objects[graph_nn['source']] != objects[graph_nn['target']]",
                            "Compare"
                        ],
                        [
                            "hard_labels[graph_nn['source']] != hard_labels[graph_nn['target']]",
                            "Compare"
                        ],
                        [
                            "np.array(data_file['is_transition'])",
                            "Call"
                        ],
                        [
                            "np.array([0])",
                            "Call"
                        ],
                        [
                            "is_transition[selected_edg]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(is_transition)",
                            "Call"
                        ],
                        [
                            "torch.cat(is_transition, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_461": {
                "variable": {
                    "value": "objects",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "objects",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objects[:, 1:].argmax(axis=1) + 1",
                            "BinOp"
                        ],
                        [
                            "objects",
                            "variable"
                        ],
                        [
                            "np.array([0])",
                            "Call"
                        ],
                        [
                            "np.array(data_file['objects'][()])",
                            "Call"
                        ],
                        [
                            "objects[selected_ver,]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(objects.astype('int64'))",
                            "Call"
                        ],
                        [
                            "torch.cat(objects, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "learning/custom_dataset.py": {
        "torch": {}
    },
    "learning/ecc/GraphConvInfo.py": {
        "torch": {}
    },
    "learning/ecc/GraphConvModule.py": {
        "torch": {
            "index_select_233": {
                "variable": {
                    "value": "sel_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idxn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(idxn, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_236": {
                "variable": {
                    "value": "products",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sel_input.view(-1, 1, self._in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fnet(edgefeats)",
                            "Call"
                        ],
                        [
                            "weights.view(-1, self._in_channels, self._out_channels)",
                            "Call"
                        ],
                        [
                            "self._fnet(edgefeats)",
                            "Call"
                        ],
                        [
                            "weights.view(-1, self._in_channels, self._out_channels)",
                            "Call"
                        ],
                        [
                            "torch.index_select(weights, 0, idxe)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_66": {
                "variable": {
                    "value": "sel_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idxn.narrow(0, starte, nume)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_124": {
                "variable": {
                    "value": "sel_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ctx._idxn.narrow(0, starte, nume)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_231": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fnet(edgefeats)",
                            "Call"
                        ],
                        [
                            "weights.view(-1, self._in_channels, self._out_channels)",
                            "Call"
                        ],
                        [
                            "self._fnet(edgefeats)",
                            "Call"
                        ],
                        [
                            "weights.view(-1, self._in_channels, self._out_channels)",
                            "Call"
                        ],
                        [
                            "torch.index_select(weights, 0, idxe)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idxe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(idxe, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_38": {
                "input": {
                    "value": "f_a(a) if f_a else a",
                    "type": "IfExp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "f_b(b) if f_b else b",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_41": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "b.expand_as(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_69": {
                "variable": {
                    "value": "sel_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fnet(edgefeats)",
                            "Call"
                        ],
                        [
                            "weights.view(-1, self._in_channels, self._out_channels)",
                            "Call"
                        ],
                        [
                            "self._fnet(edgefeats)",
                            "Call"
                        ],
                        [
                            "weights.view(-1, self._in_channels, self._out_channels)",
                            "Call"
                        ],
                        [
                            "torch.index_select(weights, 0, idxe)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idxe.narrow(0, starte, nume)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_137": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fnet(edgefeats)",
                            "Call"
                        ],
                        [
                            "weights.view(-1, self._in_channels, self._out_channels)",
                            "Call"
                        ],
                        [
                            "self._fnet(edgefeats)",
                            "Call"
                        ],
                        [
                            "weights.view(-1, self._in_channels, self._out_channels)",
                            "Call"
                        ],
                        [
                            "torch.index_select(weights, 0, idxe)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ctx._idxe.narrow(0, starte, nume)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_244": {
                "input": {
                    "value": "products.narrow(0, k, degs[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_85": {
                "input": {
                    "value": "products.narrow(0, k, ctx._degs[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "output[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "input.new(degs.numel(), out_channels)",
                            "Call"
                        ],
                        [
                            "Variable(input.data.new(len(degs), self._out_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "div_117": {
                "input": {
                    "value": "grad_output[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "ctx._degs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "grad_products[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "learning/ecc/GraphPoolInfo.py": {
        "torch": {}
    },
    "learning/ecc/GraphPoolModule.py": {
        "torch": {
            "index_select_44": {
                "variable": {
                    "value": "sel_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self._idxn.narrow(0, starte, nume)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_57": {
                "input": {
                    "value": "sel_input.narrow(0, k, self._degs[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "output[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "input.new(self._degs.numel(), input.size(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "div_91": {
                "input": {
                    "value": "grad_output[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self._degs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "grad_sel_input[k]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "grad_output.new(nume, grad_output.size(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_59": {
                "input": {
                    "value": "sel_input.narrow(0, k, self._degs[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "(output[i], self._max_indices[i])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "learning/ecc/cuda_kernels.py": {
        "torch": {
            "cumsum_123": {
                "variable": {
                    "value": "csdegs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_135": {
                "variable": {
                    "value": "csdegs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_stream_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learning/ecc/test_GraphConvModule.py": {
        "torch": {
            "randn_62": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_63": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "idxn",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(n, size=e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_25": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_30": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_31": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "idxn",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(n, size=e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradcheck_43": {
                "variable": {
                    "value": "ok",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GraphConvFunction(in_channels, out_channels, idxn, idxe, degs, degs_gpu, edge_mem_limit=edge_mem_limit)",
                            "Call"
                        ],
                        [
                            "GraphConvFunction(in_channels, out_channels, idxn, idxe, degs, degs_gpu, edge_mem_limit=edge_mem_limit)",
                            "Call"
                        ],
                        [
                            "GraphConvFunction(in_channels, out_channels, idxn, idxe, degs, degs, edge_mem_limit=10000000000.0)",
                            "Call"
                        ],
                        [
                            "GraphConvFunction(in_channels, out_channels, idxn, idxe, degs, degs, edge_mem_limit=1)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(Variable(input, requires_grad=True), Variable(weights, requires_grad=True))",
                            "Tuple"
                        ],
                        [
                            "(Variable(input, requires_grad=True), Variable(weights, requires_grad=True))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "randn_47": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "idxe",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(30, size=e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradcheck_54": {
                "variable": {
                    "value": "ok",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GraphConvFunction(in_channels, out_channels, idxn, idxe, degs, degs_gpu, edge_mem_limit=edge_mem_limit)",
                            "Call"
                        ],
                        [
                            "GraphConvFunction(in_channels, out_channels, idxn, idxe, degs, degs_gpu, edge_mem_limit=edge_mem_limit)",
                            "Call"
                        ],
                        [
                            "GraphConvFunction(in_channels, out_channels, idxn, idxe, degs, degs, edge_mem_limit=10000000000.0)",
                            "Call"
                        ],
                        [
                            "GraphConvFunction(in_channels, out_channels, idxn, idxe, degs, degs, edge_mem_limit=1)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(Variable(input, requires_grad=True), Variable(weights, requires_grad=True))",
                            "Tuple"
                        ],
                        [
                            "(Variable(input, requires_grad=True), Variable(weights, requires_grad=True))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_57": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "learning/ecc/test_GraphPoolModule.py": {
        "torch": {
            "randn_47": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "idxn",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_24": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_43": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_29": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "variable": {
                    "value": "idxn",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradcheck_40": {
                "variable": {
                    "value": "ok",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GraphPoolFunction(idxn, degs, degs_gpu, aggr=aggr, edge_mem_limit=edge_mem_limit)",
                            "Call"
                        ],
                        [
                            "GraphPoolFunction(idxn, degs, degs, aggr=GraphPoolFunction.AGGR_MAX, edge_mem_limit=10000000000.0)",
                            "Call"
                        ],
                        [
                            "GraphPoolFunction(idxn, degs, degs, aggr=GraphPoolFunction.AGGR_MAX, edge_mem_limit=1)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(Variable(input, requires_grad=True),)",
                            "Tuple"
                        ],
                        [
                            "(Variable(input, requires_grad=True),)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "learning/ecc/utils.py": {
        "torch": {
            "cat_30": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.from_numpy(f) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "ndarray": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "learning/graphnet.py": {
        "torch": {
            "Sequential_34": {
                "*args": {
                    "value": "*fnet_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "widths[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "widths[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "llbias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "widths[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "widths[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "num_features": {
                    "value": "fnet_modules[-1].weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_29": {
                "num_features": {
                    "value": "widths[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(conf[1])",
                            "Call"
                        ],
                        [
                            "nfeat * (nrepeats + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int(conf[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_51": {
                "num_features": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(conf[1])",
                            "Call"
                        ],
                        [
                            "nfeat * (nrepeats + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "len(conf) == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "p": {
                    "value": "float(conf[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "learning/main.py": {
        "torch": {
            "MultiStepLR_172": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_optimizer(args, model)",
                            "Call"
                        ],
                        [
                            "create_optimizer(args, model)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.lr_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "args.start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_393": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Module_420": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_180": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "spg.eccpc_collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_443": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_205": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.ecc(embeddings)",
                            "Call"
                        ],
                        [
                            "model.ecc(embeddings)",
                            "Call"
                        ],
                        [
                            "model.ecc(embeddings)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Variable(label_mode)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "dbinfo['class_weights']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sema3d_dataset.get_info(args)",
                            "Call"
                        ],
                        [
                            "s3dis_dataset.get_info(args)",
                            "Call"
                        ],
                        [
                            "vkitti_dataset.get_info(args)",
                            "Call"
                        ],
                        [
                            "custom_dataset.get_info(args)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_234": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "spg.eccpc_collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_236": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "spg.eccpc_collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_256": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.ecc(embeddings)",
                            "Call"
                        ],
                        [
                            "model.ecc(embeddings)",
                            "Call"
                        ],
                        [
                            "model.ecc(embeddings)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "Variable(label_mode)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "dbinfo['class_weights']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "sema3d_dataset.get_info(args)",
                            "Call"
                        ],
                        [
                            "s3dis_dataset.get_info(args)",
                            "Call"
                        ],
                        [
                            "vkitti_dataset.get_info(args)",
                            "Call"
                        ],
                        [
                            "custom_dataset.get_info(args)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_278": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_ss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_dataset(args, ss)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "spg.eccpc_collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_376": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'args': args, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.odir, 'model.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_435": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_445": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_437": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_342": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'args': args, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scaler': scaler}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.odir, 'model.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_345": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'args': args, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scaler': scaler}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.odir, 'model.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "learning/modules.py": {
        "torch": {
            "softmax_196": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn(hx, edge_indexes, weights)",
                            "Call"
                        ],
                        [
                            "ecc.GraphConvFunction.apply(hx, weights, nc, nc, idxn, idxe, degs, degs_gpu, self._edge_mem_limit)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self._modules['ig'](hidden)) * input",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(self._modules['ig'](hidden[0])) * input",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_239": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn(hx, edge_indexes, weights)",
                            "Call"
                        ],
                        [
                            "ecc.GraphConvFunction.apply(hx, weights, nc, nc, idxn, idxe, degs, degs_gpu, self._edge_mem_limit)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self._modules['ig'](hidden)) * input",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(self._modules['ig'](hidden[0])) * input",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_240": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_247": {
                "variable": {
                    "value": "resetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + bih_r + h_r + bhh_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_248": {
                "variable": {
                    "value": "inputgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + bih_i + h_i + bhh_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_249": {
                "variable": {
                    "value": "newgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + bih_n + resetgate * (h_n + bhh_n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_296": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn(hx, edge_indexes, weights)",
                            "Call"
                        ],
                        [
                            "ecc.GraphConvFunction.apply(hx, weights, nc, nc, idxn, idxe, degs, degs_gpu, self._edge_mem_limit)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self._modules['ig'](hidden)) * input",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(self._modules['ig'](hidden[0])) * input",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_297": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_301": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(ingate)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_302": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_303": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_304": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_230": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn(hx, edge_indexes, weights)",
                            "Call"
                        ],
                        [
                            "ecc.GraphConvFunction.apply(hx, weights, nc, nc, idxn, idxe, degs, degs_gpu, self._edge_mem_limit)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self._modules['ig'](hidden)) * input",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(self._modules['ig'](hidden[0])) * input",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_231": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_287": {
                "variable": {
                    "value": "gi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn(hx, edge_indexes, weights)",
                            "Call"
                        ],
                        [
                            "ecc.GraphConvFunction.apply(hx, weights, nc, nc, idxn, idxe, degs, degs_gpu, self._edge_mem_limit)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self._modules['ig'](hidden)) * input",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(self._modules['ig'](hidden[0])) * input",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_288": {
                "variable": {
                    "value": "gh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_183": {
                "tensors": {
                    "value": "hxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[hx]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_201": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nnf.softmax(input)",
                            "Call"
                        ],
                        [
                            "self._propagation(Q)",
                            "Call"
                        ],
                        [
                            "input - Q",
                            "BinOp"
                        ],
                        [
                            "nnf.softmax(Q)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_307": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forgetgate * hidden[1] + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_107": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[softmax(weight[:, k, :], edge_index_i, size_i).unsqueeze(1) for k in range(self.out_channels)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "input": {
                    "value": "x_j.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.view(-1, self.in_channels, self.out_channels)",
                            "Call"
                        ],
                        [
                            "weights.view(-1, self.in_channels)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(weight, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "torch.cat([softmax(weight[:, k, :], edge_index_i, size_i).unsqueeze(1) for k in range(self.out_channels)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(weight, self.negative_slope)",
                            "Call"
                        ],
                        [
                            "torch.cat([softmax(w.unsqueeze(-1), edge_index_i, size_i).t() for w in weight.t()], dim=0).t()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_108": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[softmax(w.unsqueeze(-1), edge_index_i, size_i).t() for w in weight.t()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_113": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm1d_213": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_214": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_226": {
                "input": {
                    "value": "self._modules['ig'](hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_270": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_271": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_283": {
                "input": {
                    "value": "self._modules['ig'](hidden[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_118": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(-1) if x.dim() == 1 else x",
                            "IfExp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.root",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_229": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_286": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "learning/pointnet.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nf_fc[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "K * K",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_53": {
                "variable": {
                    "value": "self.eye",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_53": {
                "variable": {
                    "value": "self.eye",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_58": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs(input)",
                            "Call"
                        ],
                        [
                            "nnf.max_pool1d(input, input.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.fcs(input)",
                            "Call"
                        ],
                        [
                            "self.proj(input)",
                            "Call"
                        ],
                        [
                            "torch.cat([xy_transf, input[:, 2:, :]], 1)",
                            "Call"
                        ],
                        [
                            "self.convs(input)",
                            "Call"
                        ],
                        [
                            "nnf.max_pool1d(input, input.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.cat([input, input_global.view(-1, 1)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([input, input_global], 1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "input.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_58": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "max_pool1d_127": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs(input)",
                            "Call"
                        ],
                        [
                            "nnf.max_pool1d(input, input.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.fcs(input)",
                            "Call"
                        ],
                        [
                            "self.proj(input)",
                            "Call"
                        ],
                        [
                            "torch.cat([xy_transf, input[:, 2:, :]], 1)",
                            "Call"
                        ],
                        [
                            "self.convs(input)",
                            "Call"
                        ],
                        [
                            "nnf.max_pool1d(input, input.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.cat([input, input_global.view(-1, 1)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([input, input_global], 1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "input.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_127": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_149": {
                "variable": {
                    "value": "idx_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clouds_flag.eq(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_149": {
                "variable": {
                    "value": "idx_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_162": {
                "variable": {
                    "value": "idx_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clouds_flag.eq(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_162": {
                "variable": {
                    "value": "idx_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_78": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_123": {
                "variable": {
                    "value": "xy_transf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, :2, :].transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn(input[:, :self.nfeat_stn, :])",
                            "Call"
                        ],
                        [
                            "model.stn(clouds[:batch_size, :self.nfeat_stn, :])",
                            "Call"
                        ],
                        [
                            "torch.cat((T, model.stn(clouds[i * batch_size:(i + 1) * batch_size, :self.nfeat_stn, :])))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_123": {
                "variable": {
                    "value": "xy_transf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xy_transf, input[:, 2:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_199": {
                "variable": {
                    "value": "xy_transf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clouds[:, :2, :].transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn(input[:, :self.nfeat_stn, :])",
                            "Call"
                        ],
                        [
                            "model.stn(clouds[:batch_size, :self.nfeat_stn, :])",
                            "Call"
                        ],
                        [
                            "torch.cat((T, model.stn(clouds[i * batch_size:(i + 1) * batch_size, :self.nfeat_stn, :])))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_199": {
                "variable": {
                    "value": "xy_transf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "clouds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xy_transf, clouds[:, 2:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, model.ptn(clouds[i * batch_size:(i + 1) * batch_size, :, :], clouds_global[i * batch_size:(i + 1) * batch_size, :]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normalize_207": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.ptn(clouds, clouds_global)",
                            "Call"
                        ],
                        [
                            "model.ptn(Variable(clouds), clouds_global)",
                            "Call"
                        ],
                        [
                            "Variable(out.data, requires_grad=model.training)",
                            "Call"
                        ],
                        [
                            "Variable(out.data, requires_grad=model.training)",
                            "Call"
                        ],
                        [
                            "model.ptn(clouds[:batch_size, :, :], clouds_global[:batch_size, :])",
                            "Call"
                        ],
                        [
                            "torch.cat((out, model.ptn(clouds[i * batch_size:(i + 1) * batch_size, :, :], clouds_global[i * batch_size:(i + 1) * batch_size, :])))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_217": {
                "variable": {
                    "value": "emb_total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(emb_total, emb.cpu())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, input_global.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, input_global]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(T, model.stn(clouds[i * batch_size:(i + 1) * batch_size, :self.nfeat_stn, :]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "clouds_global",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[clouds_global, T.view(-1, 4)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_29": {
                "in_channels": {
                    "value": "nf_conv[i - 1] if i > 0 else nfeat",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf_conv[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "nf_fc[i - 1] if i > 0 else nf_conv[-1]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nf_fc[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_85": {
                "in_channels": {
                    "value": "nf_conv[i - 1] if i > 0 else nfeat",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf_conv[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "in_features": {
                    "value": "nf_fc[i - 1] if i > 0 else nf_conv[-1] + nfeat_global",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nf_fc[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "num_features": {
                    "value": "nf_conv[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_43": {
                "num_features": {
                    "value": "nf_fc[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_87": {
                "num_features": {
                    "value": "nf_conv[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "p": {
                    "value": "prelast_do",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_33": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nf_conv[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GroupNorm_45": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nf_fc[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GroupNorm_89": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nf_conv[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_103": {
                "num_features": {
                    "value": "nf_fc[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GroupNorm_35": {
                "num_groups": {
                    "value": "n_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "nf_conv[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GroupNorm_47": {
                "num_groups": {
                    "value": "n_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "nf_fc[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GroupNorm_91": {
                "num_groups": {
                    "value": "n_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "nf_conv[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GroupNorm_105": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nf_fc[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GroupNorm_107": {
                "num_groups": {
                    "value": "n_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "nf_fc[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "learning/sema3d_dataset.py": {
        "torch": {
            "from_numpy_76": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((8,), dtype='f4')",
                            "Call"
                        ],
                        [
                            "h5py.File(args.SEMA3D_PATH + '/parsed/class_count.h5')['class_count'][:].astype('f4')",
                            "Call"
                        ],
                        [
                            "weights.mean() / weights",
                            "BinOp"
                        ],
                        [
                            "np.sqrt(weights)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(weights).cuda() if args.cuda else torch.from_numpy(weights)",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "learning/vkitti_dataset.py": {
        "torch": {
            "from_numpy_74": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((13,), dtype='f4')",
                            "Call"
                        ],
                        [
                            "h5py.File(args.VKITTI_PATH + '/parsed/class_count.h5')['class_count'][:].astype('f4')",
                            "Call"
                        ],
                        [
                            "weights[:, [i for i in range(6) if i != args.cvfold - 1]].sum(1)",
                            "Call"
                        ],
                        [
                            "(weights + 1).mean() / (weights + 1)",
                            "BinOp"
                        ],
                        [
                            "np.sqrt(weights)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(weights).cuda() if args.cuda else torch.from_numpy(weights)",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "supervized_partition/generate_partition.py": {
        "torch": {
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, supervized_partition.FolderHierachy.MODEL_FILE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tnt.dataset.ListDataset(file_list, functools.partial(graph_processing.graph_loader, train=False, args=training_args, db_path=''))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "graph_processing.graph_collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "supervized_partition/losses.py": {
        "torch": {
            "clamp_29": {
                "input": {
                    "value": "-lam * x + lam * beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "weights_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones_like(edg_target).astype('f4')",
                            "Call"
                        ],
                        [
                            "np.ones_like(edg_target).astype('f4') * float(len(is_transition)) / (1 - is_transition).sum().float()",
                            "BinOp"
                        ],
                        [
                            "weights_loss.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(weights_loss).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(weights_loss)",
                            "Call"
                        ],
                        [
                            "compute_weights_SEAL(pred_components, pred_in_component, objects, edg_source, edg_target, is_transition, args.transition_factor)",
                            "Call"
                        ],
                        [
                            "compute_weights_XPART(pred_components, pred_in_component, objects.cpu().numpy(), edg_source, edg_target, is_transition.cpu().numpy(), args.transition_factor * 2 * args.k_nn_adj, xyz)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "weights_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones_like(edg_target).astype('f4')",
                            "Call"
                        ],
                        [
                            "np.ones_like(edg_target).astype('f4') * float(len(is_transition)) / (1 - is_transition).sum().float()",
                            "BinOp"
                        ],
                        [
                            "weights_loss.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(weights_loss).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(weights_loss)",
                            "Call"
                        ],
                        [
                            "compute_weights_SEAL(pred_components, pred_in_component, objects, edg_source, edg_target, is_transition, args.transition_factor)",
                            "Call"
                        ],
                        [
                            "compute_weights_XPART(pred_components, pred_in_component, objects.cpu().numpy(), edg_source, edg_target, is_transition.cpu().numpy(), args.transition_factor * 2 * args.k_nn_adj, xyz)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_176": {
                "obj": {
                    "value": "edg_binary",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_72": {
                "input": {
                    "value": "diff * args.edge_weight_threshold",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_47": {
                "input": {
                    "value": "diff[intra_edg] + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_59": {
                "input": {
                    "value": "diff[inter_edg] + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_36": {
                "input": {
                    "value": "(embeddings[edg_source, :] * embeddings[edg_target, :]).sum(1) * smoothness",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_61": {
                "input": {
                    "value": "diff[inter_edg] + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_52": {
                "input": {
                    "value": "1 + diff[intra_edg] / delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "supervized_partition/supervized_partition.py": {
        "torch": {
            "MultiStepLR_190": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_optimizer(args, model)",
                            "Call"
                        ],
                        [
                            "create_optimizer(args, model)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.lr_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "args.start_epoch - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Module_413": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_439": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_196": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "graph_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_425": {
                "variable": {
                    "value": "model.placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_428": {
                "variable": {
                    "value": "model.placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_254": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "graph_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_311": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "graph_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.nworkers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_309": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_403": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'args': args, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(folder_hierarchy.outputdir, model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_425": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_428": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}