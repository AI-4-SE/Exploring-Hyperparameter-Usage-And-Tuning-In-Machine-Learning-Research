{
    "scripts/sklearn_lr.py": {
        "sklearn": {
            "LogisticRegression_70": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "sample",
                    "type": "kwargs",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_60": {
                "variable": {
                    "value": "vect",
                    "type": "variable",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "stop_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'english'",
                            "str"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "lowercase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "ngram_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample.pop('ngram_range')",
                            "Call"
                        ],
                        [
                            "sorted([int(x) for x in ngram_range.split()])",
                            "Call"
                        ]
                    ]
                }
            },
            "CountVectorizer_62": {
                "variable": {
                    "value": "vect",
                    "type": "variable",
                    "possible_values": []
                },
                "binary": {
                    "value": "binary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "stop_words": {
                    "value": "stop_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'english'",
                            "str"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "lowercase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "ngram_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample.pop('ngram_range')",
                            "Call"
                        ],
                        [
                            "sorted([int(x) for x in ngram_range.split()])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "show_your_work/models/bcn.py": {
        "torch": {
            "Dropout_95": {
                "variable": {
                    "value": "self._embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "float(embedding_dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "variable": {
                    "value": "self._integrator_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "float(integrator_dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self._self_attentive_pooling_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._combined_integrator_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self._logit_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._output_layer.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_176": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "integrator_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_tokens, encoded_tokens - encoded_text, encoded_tokens * encoded_text]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "pooled_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[max_pool, min_pool, mean_pool, self_attentive_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_276": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._logit_layer(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "integrated_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[integrated_encodings, integrator_output_elmo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "embedded_text",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_text, input_elmo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_257": {
                "input": {
                    "value": "max_masked_integrated_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.replace_masked_values(integrated_encodings, text_mask.unsqueeze(2), -10000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_260": {
                "input": {
                    "value": "min_masked_integrated_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.replace_masked_values(integrated_encodings, text_mask.unsqueeze(2), +10000000.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_261": {
                "input": {
                    "value": "text_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.get_text_field_mask(tokens).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "show_your_work/models/dam.py": {
        "torch": {
            "CrossEntropyLoss_93": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "premise_compare_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_premise, attended_hypothesis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "hypothesis_compare_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_hypothesis, attended_premise]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "aggregate_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[compared_premise, compared_hypothesis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_169": {
                "variable": {
                    "value": "label_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_layer(aggegrate_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "show_your_work/models/simple_overlap.py": {
        "torch": {
            "CrossEntropyLoss_28": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_60": {
                "variable": {
                    "value": "label_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_layer(clf_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}