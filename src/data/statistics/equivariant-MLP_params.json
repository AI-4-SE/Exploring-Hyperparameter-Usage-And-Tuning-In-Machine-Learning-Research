{
    "emlp/reps/representation.py": {
        "sklearn": {
            "KMeans_473": {
                "n_clusters": {
                    "value": "Q.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "emlp/nn/pytorch.py": {
        "torch": {
            "Parameter_94": {
                "variable": {
                    "value": "self.bi_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(Wdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[EMLPBlock(rin, rout) for (rin, rout) in zip(reps, reps[1:])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "*args": {
                    "value": "nn.Linear(cin, cout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[MLPBlock(cin, cout) for (cin, cout) in zip(chs, chs[1:])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "ndarray": {
                    "value": "np.array(arr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_84": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.proj_w(self.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.proj_b(self.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "in_features": {
                    "value": "cin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rep_out.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_94": {
                "*size": {
                    "value": "Wdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_189": {
                "in_features": {
                    "value": "chs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rep_out.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/datasets/batchnorm.py": {
        "torch": {}
    },
    "experiments/depreciated/train_cube_simple.py": {
        "torch": {
            "DataLoader_34": {
                "dataset": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "min(bs, len(v))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/depreciated/train_rubiks.py": {
        "torch": {
            "DataLoader_33": {
                "dataset": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "min(bs, len(v))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/depreciated/train_tagging.py": {
        "torch": {
            "DataLoader_37": {
                "dataset": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/hnn.py": {
        "torch": {
            "DataLoader_33": {
                "dataset": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "min(bs, len(v))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/neuralode.py": {
        "torch": {
            "DataLoader_32": {
                "dataset": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "min(bs, len(v))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train_regression.py": {
        "torch": {
            "DataLoader_36": {
                "dataset": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "min(bs, len(v))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/trainer/classifier.py": {
        "torch": {}
    },
    "experiments/trainer/hamiltonian_dynamics.py": {
        "torch": {
            "load_94": {
                "variable": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root_dir, f'trajectories_{n_systems}_{chunk_len}_{dt}_{integration_time}.pz')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_99": {
                "obj": {
                    "value": "Zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(filename)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.chunk_training_data(zs, chunk_len))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root_dir, f'trajectories_{n_systems}_{chunk_len}_{dt}_{integration_time}.pz')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_453": {
                "obj": {
                    "value": "np.concatenate(trajectories)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f\"./{cfg['network']}_{cfg['net_config']['group']}_{i}.t\"",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_484": {
                "obj": {
                    "value": "np.concatenate(trajectories)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f\"./{cfg['network']}_{cfg['net_config']['group']}_{i}.t\"",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/trainer/model_trainer.py": {
        "torch": {}
    },
    "tests/model_tests.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dsclass(100)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "min(bs, len(ds))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "ndarray": {
                    "value": "np.asarray(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}