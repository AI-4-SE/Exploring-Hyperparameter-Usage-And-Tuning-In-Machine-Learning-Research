{
    "POMBU/V_estimators/__init__.py": {
        "tensorflow": {
            "placeholder_10": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "POMBU/V_estimators/single_V.py": {
        "tensorflow": {
            "get_collection_45": {
                "variable": {
                    "value": "all_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SV'",
                            "MethodArgument"
                        ],
                        [
                            "'backup'",
                            "MethodArgument"
                        ],
                        [
                            "'backup'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variables_initializer_46": {
                "variable": {
                    "value": "self.init_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "all_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "self.state_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.extra_n + self.state_space.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "state_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.U_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "U_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "self.V_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "V_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_105": {
                "variable": {
                    "value": "self.network_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.network_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_106": {
                "variable": {
                    "value": "self.init_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.network_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_107": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.network_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "self.U_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.U - self.U_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "self.V_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.V - self.V_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_126": {
                "variable": {
                    "value": "reg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name + '/' + self.network_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_131": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[V_loss, U_coefficient * U_loss, reg_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "UV_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FileWriter_135": {
                "variable": {
                    "value": "self.uv_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'UV_data/' if self.save_dir == None else os.path.join(self.save_dir, 'UV_data')",
                    "type": "IfExp",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_154": {
                "variable": {
                    "value": "optimizer_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "optimizer_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variables_initializer_155": {
                "variable": {
                    "value": "self.init_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "optimizer_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=optimizer_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_93": {
                "variable": {
                    "value": "Upred",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "U",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.training_network_fn(state_input)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "self.prediction_network_fn(state_input)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "self.training_network_fn(state_input)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.prediction_network_fn(state_input)[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_128": {
                "variable": {
                    "value": "reg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "reg_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES, scope=self.name + '/' + self.network_name)",
                            "Call"
                        ],
                        [
                            "tf.add_n(reg_loss)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_collection_138": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name + '/' + self.network_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "merge_152": {
                "variable": {
                    "value": "self.train_summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "train_summary_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "name_scope_42": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "network_name",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.network_name",
                            "Attribute"
                        ],
                        [
                            "self.network_name",
                            "Attribute"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "network_name",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.network_name",
                            "Attribute"
                        ],
                        [
                            "self.network_name",
                            "Attribute"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_122": {
                "x": {
                    "value": "self.U - self.U_input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_123": {
                "x": {
                    "value": "self.V - self.V_input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "optimizer_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_140": {
                "variable": {
                    "value": "trainer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_141": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.network_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_139": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS, scope=self.name + '/' + self.network_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_145": {
                "variable": {
                    "value": "(grads, _grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "max_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.optimization_kwargs['max_grad']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_150": {
                "name": {
                    "value": "V_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "V_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_151": {
                "name": {
                    "value": "U_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "U_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "value",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "uncertainty",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "POMBU/dataset.py": {
        "tensorflow": {
            "get_collection_83": {
                "variable": {
                    "value": "all_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'DS'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Saver_84": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "all_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'DS'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_194": {
                "x": {
                    "value": "self.change_rms.f32_var + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_197": {
                "x": {
                    "value": "self.state_rms.f32_var + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_200": {
                "x": {
                    "value": "self.action_rms.f32_var + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_203": {
                "x": {
                    "value": "self.return_rms.f32_var + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_206": {
                "x": {
                    "value": "self.change_rms.f32_var + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_224": {
                "x": {
                    "value": "self.action_rms.f32_var + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "POMBU/envs/gym/ant.py": {
        "tensorflow": {
            "reduce_sum_76": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "old_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "not_equal_77": {
                "x": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_66": {
                "name": {
                    "value": "reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "input_tensor": {
                    "value": "tf.square(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_69": {
                "x": {
                    "value": "old_obs[:, 0] - 0.57",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_68": {
                "x": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(action, self.action_space.low, self.action_space.high)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "POMBU/envs/gym/gym_cheetahO001.py": {
        "tensorflow": {
            "reduce_sum_72": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "old_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "not_equal_73": {
                "x": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "input_tensor": {
                    "value": "tf.square(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_65": {
                "x": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(action, self.action_space.low, self.action_space.high)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "POMBU/envs/gym/gym_cheetahO01.py": {
        "tensorflow": {
            "reduce_sum_72": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "old_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "not_equal_73": {
                "x": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "input_tensor": {
                    "value": "tf.square(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_65": {
                "x": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(action, self.action_space.low, self.action_space.high)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "POMBU/envs/gym/half_cheetah.py": {
        "tensorflow": {
            "reduce_sum_65": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "old_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "not_equal_66": {
                "x": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_56": {
                "name": {
                    "value": "reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "input_tensor": {
                    "value": "tf.square(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_58": {
                "x": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(action, self.action_space.low, self.action_space.high)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "POMBU/envs/gym/hopper.py": {
        "tensorflow": {
            "reduce_sum_79": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "old_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "not_equal_80": {
                "x": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_69": {
                "name": {
                    "value": "reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "input_tensor": {
                    "value": "tf.square(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_71": {
                "x": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(action, self.action_space.low, self.action_space.high)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "POMBU/envs/gym/point_2d.py": {
        "tensorflow": {
            "reduce_sum_66": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "old_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "not_equal_67": {
                "x": {
                    "value": "temp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(obs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(obs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_73": {
                "t": {
                    "value": "action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pi.step(state)",
                            "Call"
                        ],
                        [
                            "np.array([action] * num_traj).reshape(-1, 3)",
                            "Call"
                        ],
                        [
                            "pi.step(state)",
                            "Call"
                        ],
                        [
                            "0 - state",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_60": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(new_obs - self.goal), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "input_tensor": {
                    "value": "tf.square(new_obs - self.goal)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_60": {
                "x": {
                    "value": "new_obs - self.goal",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "POMBU/envs/gym/point_2d_copy.py": {
        "tensorflow": {
            "reduce_sum_67": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "old_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "not_equal_68": {
                "x": {
                    "value": "temp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(obs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(obs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_60": {
                "name": {
                    "value": "reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_74": {
                "t": {
                    "value": "action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pi.step(state)",
                            "Call"
                        ],
                        [
                            "np.array([action] * num_traj).reshape(-1, 2)",
                            "Call"
                        ],
                        [
                            "pi.step(state)",
                            "Call"
                        ],
                        [
                            "0 - state",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_61": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(new_obs - self.goal), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_61": {
                "input_tensor": {
                    "value": "tf.square(new_obs - self.goal)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_61": {
                "x": {
                    "value": "new_obs - self.goal",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "POMBU/envs/gym/swimmer.py": {
        "tensorflow": {
            "reduce_sum_72": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "old_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "not_equal_73": {
                "x": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "input_tensor": {
                    "value": "tf.square(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_65": {
                "x": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(action, self.action_space.low, self.action_space.high)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "POMBU/envs/gym/walker2d.py": {
        "tensorflow": {
            "reduce_sum_90": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "old_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "not_equal_91": {
                "x": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(old_obs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_80": {
                "name": {
                    "value": "reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "input_tensor": {
                    "value": "tf.square(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_82": {
                "x": {
                    "value": "action",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.clip(action, self.action_space.low, self.action_space.high)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "POMBU/envs/proxy_env.py": {
        "tensorflow": {}
    },
    "POMBU/envs/utils.py": {
        "tensorflow": {}
    },
    "POMBU/models/__init__.py": {
        "tensorflow": {
            "get_collection_70": {
                "variable": {
                    "value": "all_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variables_initializer_71": {
                "variable": {
                    "value": "self.init_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "all_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_73": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "data/ if save_dir == None else save_dir + /data/",
                    "type": "IfExp",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.session.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "self.next_states_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.state_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(k, -1, size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "self.state_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, state_space.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "state_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "state_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "self.index_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "state_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "index_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_146": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(self.rewards_output, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(k, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "next_Vs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(next_Vs, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(k, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "self.reward_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rewards",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(self.rewards_output, axis=0), shape=(k, -1))",
                            "Call"
                        ],
                        [
                            "self.tf_modify_reward(rewards)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "reward_mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "self.reward_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(rewards - reward_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "reward_var",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "variable": {
                    "value": "next_Vs_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "next_Vs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.V_estimator.tf_value(next_states[i]) for i in range(k)]",
                            "ListComp"
                        ],
                        [
                            "tf.reshape(tf.concat(next_Vs, axis=0), shape=(k, -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "next_Vs_mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "variable": {
                    "value": "self.next_Vs_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(next_Vs - next_Vs_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "next_Vs_var",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_161": {
                "variable": {
                    "value": "Q_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Qs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rewards + self.gamma * next_Vs",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "Q_mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_91": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "reward",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.clip_by_value(reward, -self.rollout_clip_rew, self.rollout_clip_rew)",
                            "Call"
                        ],
                        [
                            "self.dataset.tf_normalize_reward(reward)",
                            "Call"
                        ],
                        [
                            "np.clip(reward, -self.rollout_clip_rew, self.rollout_clip_rew)",
                            "Call"
                        ],
                        [
                            "self.dataset.normalize_reward(reward)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.rollout_clip_rew",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.rollout_clip_rew",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "self.u_MBUI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(Qs - Q_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "u_MBUI",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_164": {
                "variable": {
                    "value": "self.u_UBE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "reward_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha_UBE * Q_mean * Q_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "u_UBE",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "variable": {
                    "value": "next_state_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.next_states_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_166": {
                "variable": {
                    "value": "next_state_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(self.next_states_output - next_state_mean), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_167": {
                "variable": {
                    "value": "self.next_state_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "next_state_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(self.next_states_output - next_state_mean), axis=0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_66": {
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_87": {
                "values": {
                    "value": "[0.0 * state[:, 0:1] + step * 2 / (self.horizon - 1) - 1, state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_146": {
                "values": {
                    "value": "self.rewards_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_152": {
                "values": {
                    "value": "next_Vs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.V_estimator.tf_value(next_states[i]) for i in range(k)]",
                            "ListComp"
                        ],
                        [
                            "tf.reshape(tf.concat(next_Vs, axis=0), shape=(k, -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_156": {
                "x": {
                    "value": "rewards - reward_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_158": {
                "x": {
                    "value": "next_Vs - next_Vs_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_162": {
                "name": {
                    "value": "uncertainty",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_171": {
                "variable": {
                    "value": "next_state_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(self.next_states_output - next_state_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_172": {
                "variable": {
                    "value": "self.next_state_error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "next_state_error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.abs(self.next_states_output - next_state_real), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "next_state_error",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_163": {
                "x": {
                    "value": "Qs - Q_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "input_tensor": {
                    "value": "tf.square(self.next_states_output - next_state_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_166": {
                "x": {
                    "value": "self.next_states_output - next_state_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_171": {
                "x": {
                    "value": "self.next_states_output - next_state_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "POMBU/models/deterministic_ensemble.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "self.train_state_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + state_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "state_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "state_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.train_action_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + action_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "action_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "action_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.train_change_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + state_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "state_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "change_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.train_next_state_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + state_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "state_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "next_state_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[state, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[train_state, train_action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_92": {
                "variable": {
                    "value": "self.network_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "network_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variables_initializer_93": {
                "variable": {
                    "value": "self.init_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.network_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self.reg_coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_158": {
                "variable": {
                    "value": "self.model_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'model_data' if self.save_dir == None else os.path.join(self.save_dir, 'model_data')",
                    "type": "IfExp",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.session.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_183": {
                "variable": {
                    "value": "self.optimizer_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "optimizer_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variables_initializer_184": {
                "variable": {
                    "value": "self.init_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.optimizer_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "network_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_94": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "network_name + '/model%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_95": {
                "var_list": {
                    "value": "self.network_var_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_140": {
                "input_tensor": {
                    "value": "tf.square(self.train_ys[i] - self.train_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "input_tensor": {
                    "value": "tf.square(self.valid_ys[i] - self.train_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "input_tensor": {
                    "value": "tf.square(self.valid_next_states[i] - self.train_next_state_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "self.network_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_147": {
                "variable": {
                    "value": "reg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name + '/' + self.network_name + '/model%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_153": {
                "x": {
                    "value": "self.losses[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "reg_losses[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'regularized_loss%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "optimizer_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_collection_162": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name + '/' + self.network_name + '/model%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_140": {
                "x": {
                    "value": "self.train_ys[i] - self.train_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_141": {
                "x": {
                    "value": "self.valid_ys[i] - self.train_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_142": {
                "x": {
                    "value": "self.valid_next_states[i] - self.train_next_state_input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_164": {
                "variable": {
                    "value": "trainer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_165": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.network_name + '/model%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "'model%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_163": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS, scope=self.name + '/' + self.network_name + '/model%d' % i)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_169": {
                "variable": {
                    "value": "(grads, _grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "max_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.optimization_kwargs['max_grad']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_175": {
                "name": {
                    "value": "'train_loss%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.losses[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_176": {
                "name": {
                    "value": "'train_regularized_loss%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.regularized_losses[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_178": {
                "name": {
                    "value": "'valid_loss%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.valid_losses[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_179": {
                "name": {
                    "value": "'diff_next_state%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.diff_next_state[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "merge_181": {
                "inputs": {
                    "value": "train_summary_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_182": {
                "inputs": {
                    "value": "valid_summary_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "add_n_149": {
                "inputs": {
                    "value": "reg_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES, scope=self.name + '/' + self.network_name + '/model%d' % i)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "POMBU/models/point_2d_noisy_model.py": {
        "tensorflow": {
            "clip_by_value_32": {
                "variable": {
                    "value": "cliped_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "self.action_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_34": {
                "input": {
                    "value": "_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.state_input + cliped_action",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "POMBU/policy/__init__.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "self.action_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.action_space.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.neglogp_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "POMBU/policy/stochastic_policy.py": {
        "tensorflow": {
            "AdamOptimizer_327": {
                "variable": {
                    "value": "trainer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "logstd",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pi/logstd",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_26": {
                "variable": {
                    "value": "pdparam",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_40": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_43": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pi/logstd', shape=[1, self.size], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_79": {
                "variable": {
                    "value": "all_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'Pi'",
                            "MethodArgument"
                        ],
                        [
                            "'backup'",
                            "MethodArgument"
                        ],
                        [
                            "'backup'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variables_initializer_80": {
                "variable": {
                    "value": "self.init_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "all_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "other_logstd",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.action_input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "other_logstd",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "other_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.action_input.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "other_mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_132": {
                "variable": {
                    "value": "other_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "other_logstd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "variable": {
                    "value": "self.state_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.extra_n + self.state_space.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "state_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_147": {
                "variable": {
                    "value": "self.action_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.action_space.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "action_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "self.A_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "A_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "self.Uv_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Uv_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.Uq_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Uq_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "self.oldneglogp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "neglogp",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_159": {
                "variable": {
                    "value": "self.logstd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_160": {
                "variable": {
                    "value": "self.set_logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "zeros + self.logstd_input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_164": {
                "variable": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.pd.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_168": {
                "variable": {
                    "value": "self.network_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.network_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_169": {
                "variable": {
                    "value": "self.init_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.network_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_170": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.network_vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_188": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_189": {
                "variable": {
                    "value": "self.cliprange",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cliprange",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_190": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_192": {
                "variable": {
                    "value": "Uq_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.Uq_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_195": {
                "variable": {
                    "value": "cliped_ratio_change",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "ratio_change",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(self.oldneglogp - self.train_neglogp) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.cliprange",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.cliprange",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_198": {
                "variable": {
                    "value": "true_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-self.A_input * ratio_change",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_199": {
                "variable": {
                    "value": "ppo_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(-self.A_input * ratio_change, -self.A_input * cliped_ratio_change)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_200": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(ratio_change) * Uq_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_202": {
                "variable": {
                    "value": "ex_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(-modified_A * ratio_change, -modified_A * cliped_ratio_change)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_204": {
                "variable": {
                    "value": "self.ratio_change",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(ratio_change)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_206": {
                "variable": {
                    "value": "self.ratio_invalid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.less(tf.abs(self.A_input), self.alpha * Uq_std))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_211": {
                "variable": {
                    "value": "self.mean_return_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mean_return_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_212": {
                "variable": {
                    "value": "self.mean_return_deterministic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mean_return_deterministic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_213": {
                "variable": {
                    "value": "self.mean_return_stochastic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mean_return_stochastic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FileWriter_217": {
                "variable": {
                    "value": "self.policy_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "'policy_data/' if self.save_dir == None else os.path.join(self.save_dir, 'policy_data')",
                    "type": "IfExp",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.session.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_244": {
                "variable": {
                    "value": "optimizer_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "optimizer_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variables_initializer_245": {
                "variable": {
                    "value": "self.init_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "optimizer_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=optimizer_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_331": {
                "variable": {
                    "value": "(grads, _grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "max_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.optimization_kwargs['max_grad']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_54": {
                "input_tensor": {
                    "value": "other.logstd - self.logstd + (tf.square(self.std) + tf.square(self.mean - other.mean)) / (2.0 * tf.square(other.std)) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_56": {
                "input_tensor": {
                    "value": "self.logstd + 0.5 * np.log(2.0 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "input_tensor": {
                    "value": "self.logstd - other_logstd + (tf.square(other_std) + tf.square(self.mean - other_mean)) / (2.0 * tf.square(self.std)) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scalar_221": {
                "variable": {
                    "value": "model_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "return_model",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mean_return_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_222": {
                "variable": {
                    "value": "deterministic_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "return_deterministic",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mean_return_deterministic",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_223": {
                "variable": {
                    "value": "stochastic_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "return_stochastic",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mean_return_stochastic",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_232": {
                "variable": {
                    "value": "self.return_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[model_summary, deterministic_summary, stochastic_summary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "merge_241": {
                "variable": {
                    "value": "self.vc_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "vc_summay_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "summay_list.copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_242": {
                "variable": {
                    "value": "self.p_ppo_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summay_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.summary.scalar('entropy', self.entropy), tf.summary.scalar('approxkl', self.approxkl), tf.summary.scalar('ratio_change', self.ratio_change), tf.summary.scalar('ppo_loss', ppo_loss), tf.summary.scalar('true_loss', true_loss), tf.summary.scalar('variance', variance), tf.summary.scalar('p_improve_ppo', self.p_improve_ppo), tf.summary.scalar('p_improve_true', self.p_improve_true)]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_76": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "network_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.network_name",
                            "Attribute"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_194": {
                "x": {
                    "value": "self.oldneglogp - self.train_neglogp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_199": {
                "x": {
                    "value": "-self.A_input * ratio_change",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-self.A_input * cliped_ratio_change",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_202": {
                "x": {
                    "value": "-modified_A * ratio_change",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-modified_A * cliped_ratio_change",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_204": {
                "x": {
                    "value": "ratio_change",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(self.oldneglogp - self.train_neglogp) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_205": {
                "input_tensor": {
                    "value": "tf.square(self.train_neglogp - self.oldneglogp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_206": {
                "x": {
                    "value": "tf.less(tf.abs(self.A_input), self.alpha * Uq_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "optimizer_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_initializer_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_163": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_200": {
                "x": {
                    "value": "ratio_change",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(self.oldneglogp - self.train_neglogp) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_205": {
                "x": {
                    "value": "self.train_neglogp - self.oldneglogp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_206": {
                "x": {
                    "value": "tf.abs(self.A_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha * Uq_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_224": {
                "name": {
                    "value": "entropy",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_225": {
                "name": {
                    "value": "approxkl",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.approxkl",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_226": {
                "name": {
                    "value": "ratio_change",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.ratio_change",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_227": {
                "name": {
                    "value": "ppo_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "ppo_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.maximum(-self.A_input * ratio_change, -self.A_input * cliped_ratio_change))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_228": {
                "name": {
                    "value": "true_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "true_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(-self.A_input * ratio_change)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_229": {
                "name": {
                    "value": "variance",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "variance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.abs(ratio_change) * Uq_std)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_230": {
                "name": {
                    "value": "p_improve_ppo",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.p_improve_ppo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_231": {
                "name": {
                    "value": "p_improve_true",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.p_improve_true",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_239": {
                "name": {
                    "value": "vc_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "vc_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ppo_loss + self.alpha * variance",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_240": {
                "name": {
                    "value": "alpha",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_49": {
                "input_tensor": {
                    "value": "tf.square((x - self.mean) / self.std)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_50": {
                "x": {
                    "value": "tf.shape(x)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_206": {
                "x": {
                    "value": "self.A_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_49": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_50": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_54": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_133": {
                "x": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "POMBU/tf_utils/nn.py": {
        "tensorflow": {
            "get_variable_6": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "V",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(x_.get_shape()[1]), nh]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, 0.05)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_10": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "g",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_14": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('V', shape=[int(x_.get_shape()[1]), nh], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_63": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_78": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_5": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'mlp_fc{}'.format(i)",
                            "Call"
                        ],
                        [
                            "'mlp_fc{}'.format(i)",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'mlp_fc{}'.format(i)",
                            "Call"
                        ],
                        [
                            "'mlp_fc{}'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'mlp_fc{}'.format(i)",
                            "Call"
                        ],
                        [
                            "'mlp_fc{}'.format(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_21": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(V), [0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_8": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_12": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_16": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_21": {
                "input_tensor": {
                    "value": "tf.square(V)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_21": {
                "x": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('V', shape=[int(x_.get_shape()[1]), nh], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "POMBU/train.py": {
        "tensorflow": {}
    },
    "POMBU/utils.py": {
        "tensorflow": {
            "placeholder_137": {
                "variable": {
                    "value": "self._new_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "self._new_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self._new_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_149": {
                "variable": {
                    "value": "self.update_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[self._var.assign(self._new_var), self._mean.assign(self._new_mean), self._count.assign(self._new_count)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_random_seed_34": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_143": {
                "variable": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.zeros(shape, 'float64')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_144": {
                "variable": {
                    "value": "self._var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "std",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.ones(shape, 'float64')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "variable": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.full((), epsilon, 'float64')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_146": {
                "variable": {
                    "value": "self.f32_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_147": {
                "variable": {
                    "value": "self.f32_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_155": {
                "var_list": {
                    "value": "[self._mean, self._var, self._count]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}