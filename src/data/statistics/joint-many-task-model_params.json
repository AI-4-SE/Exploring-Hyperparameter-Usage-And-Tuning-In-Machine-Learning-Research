{
    "helper.py": {
        "tensorflow": {
            "sign_6": {
                "variable": {
                    "value": "used",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(tf.abs(sequence), reduction_indices=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_7": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "used",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_max(tf.abs(sequence), reduction_indices=2))",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_8": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, reduction_indices=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_15": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(tf.abs(target), reduction_indices=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_17": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "target * tf.log(output)",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_sum(cross_entropy, reduction_indices=2)",
                            "UnaryOp"
                        ],
                        [
                            "cross_entropy / tf.reduce_sum(mask, reduction_indices=1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(cross_entropy, reduction_indices=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "weight_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "bias_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_18": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_max(tf.abs(target), reduction_indices=2))",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_19": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "target * tf.log(output)",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_sum(cross_entropy, reduction_indices=2)",
                            "UnaryOp"
                        ],
                        [
                            "cross_entropy / tf.reduce_sum(mask, reduction_indices=1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(cross_entropy, reduction_indices=1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_38": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(tf.sub(targets, outputs)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_6": {
                "input_tensor": {
                    "value": "tf.abs(sequence)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_13": {
                "x": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_14": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "target * tf.log(output)",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_sum(cross_entropy, reduction_indices=2)",
                            "UnaryOp"
                        ],
                        [
                            "cross_entropy / tf.reduce_sum(mask, reduction_indices=1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(cross_entropy, reduction_indices=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_15": {
                "input_tensor": {
                    "value": "tf.abs(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_38": {
                "input_tensor": {
                    "value": "tf.square(tf.sub(targets, outputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_6": {
                "x": {
                    "value": "sequence",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_15": {
                "x": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_normal_initializer_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_27": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_38": {
                "x": {
                    "value": "tf.sub(targets, outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_29": {
                "a": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=weight_shape, initializer=tf.random_normal_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_31": {
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, weight_shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "a": {
                    "value": "tf.reshape(outputs, [-1, weight_shape[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=weight_shape, initializer=tf.random_normal_initializer())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "jmt.py": {
        "tensorflow": {
            "Saver_142": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_191": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "self.inp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.max_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "self.t_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.max_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "t_pos",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "self.t_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.max_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "t_chunk",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "self.inp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.max_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_117": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tf.abs(tf.sub(s11, s21)), tf.mul(s11, s21)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_118": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tf.sub(s12, s22), tf.mul(s12, s22)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_120": {
                "variable": {
                    "value": "self.y_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "activate(d, [self.dim * 4, 1], [1], activation=tf.nn.relu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "self.t_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_126": {
                "variable": {
                    "value": "self.optimize_op2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "self.t_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_131": {
                "variable": {
                    "value": "t_ent_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.t_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_136": {
                "variable": {
                    "value": "self.optimize_op3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "import_meta_graph_144": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "saves/model.ckpt.meta",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_38": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_39": {
                "variable": {
                    "value": "embeds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(self.vec, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "inputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[[self.w2i[i] for i in inp] + [self.vec.shape[0] - 1] * (self.max_length - len(inp))]",
                            "List"
                        ],
                        [
                            "[[self.w2i[i] for i in inp] + [self.vec.shape[0] - 1] * (self.max_length - len(inp))]",
                            "List"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_42": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_lstm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_lstm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "embeds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embeddings, inputs)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "length(embeds)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_44": {
                "variable": {
                    "value": "concat_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_47": {
                "variable": {
                    "value": "t_pos_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "t_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "len(self.i2p)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_52": {
                "variable": {
                    "value": "optimize_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_56": {
                "variable": {
                    "value": "inputs1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[embeds, concat_outputs, y_pos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_59": {
                "variable": {
                    "value": "(outputs1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_lstm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_lstm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs1",
                    "type": "List",
                    "possible_values": [
                        [
                            "tf.concat(2, [embeds, concat_outputs, y_pos])",
                            "Call"
                        ],
                        [
                            "[[self.w2i[i] for i in inp1] + [self.vec.shape[0] - 1] * (self.max_length - len(inp1))]",
                            "List"
                        ],
                        [
                            "[[self.w2i[i] for i in inp1] + [self.vec.shape[0] - 1] * (self.max_length - len(inp1))]",
                            "List"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "length(embeds)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_61": {
                "variable": {
                    "value": "concat_outputs1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "outputs1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_64": {
                "variable": {
                    "value": "t_chunk_sparse",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "t_chunk",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "len(self.i2c)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_69": {
                "variable": {
                    "value": "optimize_op1",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "sentence",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "relation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "[self.reg_lambda * tf.nn.l2_loss(x) for x in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "entailment",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_134": {
                "input_tensor": {
                    "value": "[self.reg_lambda * tf.nn.l2_loss(x) for x in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_143": {
                "graph": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_193": {
                "graph": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "import_meta_graph_195": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "saves/model.ckpt.meta",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "pos",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "[self.reg_lambda * tf.nn.l2_loss(x) for x in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "chunk",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "[self.reg_lambda * tf.nn.l2_loss(x) for x in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "relatedness",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_74": {
                "variable": {
                    "value": "inputs2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[embeds, concat_outputs1, y_pos, y_chunk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_78": {
                "variable": {
                    "value": "(outputs2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_lstm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_lstm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ],
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs2",
                    "type": "List",
                    "possible_values": [
                        [
                            "tf.concat(2, [embeds, concat_outputs1, y_pos, y_chunk])",
                            "Call"
                        ],
                        [
                            "[[self.w2i[i] for i in inp2] + [self.vec.shape[0] - 1] * (self.max_length - len(inp2))]",
                            "List"
                        ],
                        [
                            "[[self.w2i[i] for i in inp2] + [self.vec.shape[0] - 1] * (self.max_length - len(inp2))]",
                            "List"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "length(embeds)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "concat_outputs2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "outputs2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "inputs3",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[embeds, concat_outputs2, y_pos, y_chunk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_86": {
                "variable": {
                    "value": "(outputs3, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_lstm1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_lstm1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(2, [embeds, concat_outputs2, y_pos, y_chunk])",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "length(embeds)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_88": {
                "variable": {
                    "value": "concat_outputs3",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "outputs3",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_max_89": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "concat_outputs3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(2, outputs3)",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_92": {
                "variable": {
                    "value": "inputs4",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[embeds, concat_outputs3, y_pos, y_chunk]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_96": {
                "variable": {
                    "value": "(outputs4, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_lstm2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_lstm2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MyLSTM(self.dim, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(2, [embeds, concat_outputs3, y_pos, y_chunk])",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "length(embeds)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_98": {
                "variable": {
                    "value": "concat_outputs4",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "outputs3",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_max_99": {
                "variable": {
                    "value": "s1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "concat_outputs4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(2, outputs3)",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_133": {
                "input_tensor": {
                    "value": "t_ent_sparse * tf.log(self.y_ent)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "latest_checkpoint_145": {
                "checkpoint_dir": {
                    "value": "./saves",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "layer_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "layer_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "layer_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_117": {
                "x": {
                    "value": "tf.sub(s11, s21)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_196": {
                "checkpoint_dir": {
                    "value": "./saves",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_124": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_133": {
                "x": {
                    "value": "self.y_ent",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_134": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_50": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_67": {
                "t": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "my_lstm.py": {
        "tensorflow": {
            "concat_21": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[inputs, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_25": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "linear([g], 4 * self._num_units, True, scope=scope)",
                            "Call"
                        ]
                    ]
                },
                "num_split": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "split_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_13": {
                "name_or_scope": {
                    "value": "scope or 'basic_lstm_cell'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "split_19": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "split_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_30": {
                "x": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_28": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "tensorflow": {
            "Graph_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}