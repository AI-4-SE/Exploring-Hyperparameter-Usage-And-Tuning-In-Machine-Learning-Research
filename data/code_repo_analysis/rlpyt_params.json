{
    "max_q_eval_policy.py": {
        "torch": {
            "load_24": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "snapshot_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(args.snapshot_dir, 'params.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "random_policy.py": {
        "torch": {}
    },
    "rlpyt/agents/base.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_65": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "cuda_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/dqn/catdqn_agent.py": {
        "torch": {
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_29": {
                "start": {
                    "value": "V_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V_min",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "V_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V_max",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "self.n_atoms",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_24": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.n_atoms",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/dqn/dqn_agent.py": {
        "torch": {
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/dqn/epsilon_greedy.py": {
        "torch": {
            "logspace_42": {
                "variable": {
                    "value": "global_eps_final",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "torch.log10(torch.tensor(self.eps_final_min))",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "torch.log10(torch.tensor(self._eps_final_scalar))",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "global_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_B // 2",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "global_B",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_41": {
                "*size": {
                    "value": "len(env_ranks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log10_43": {
                "input": {
                    "value": "torch.tensor(self.eps_final_min)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log10_44": {
                "input": {
                    "value": "torch.tensor(self._eps_final_scalar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "self.eps_final_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "self._eps_final_scalar",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/dqn/r2d1_agent.py": {
        "torch": {
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/pg/categorical.py": {
        "torch": {
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/pg/gaussian.py": {
        "torch": {
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/qpg/ddpg_agent.py": {
        "torch": {
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/qpg/sac_agent.py": {
        "torch": {
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/qpg/sac_agent_autoreg_v2.py": {
        "torch": {
            "Parameter_70": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_151": {
                "variable": {
                    "value": "min_next_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q1_model(*model_inputs)",
                            "Call"
                        ],
                        [
                            "self.target_q1_model(*model_inputs)",
                            "Call"
                        ],
                        [
                            "self.target_q(observation, prev_action, prev_reward, next_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_176": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_137": {
                "tensors": {
                    "value": "log_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "log_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/qpg/sac_agent_autoreg_v2_generic.py": {
        "torch": {
            "Parameter_69": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_138": {
                "variable": {
                    "value": "min_next_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q1_model(*model_inputs)",
                            "Call"
                        ],
                        [
                            "self.target_q1_model(*model_inputs)",
                            "Call"
                        ],
                        [
                            "self.target_q(observation, prev_action, prev_reward, next_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_157": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/qpg/sac_agent_v2.py": {
        "torch": {
            "Parameter_83": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_215": {
                "variable": {
                    "value": "locations",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "locations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(25).astype('float32')",
                            "Call"
                        ],
                        [
                            "locations[:, None]",
                            "Subscript"
                        ],
                        [
                            "np.tile(locations, (1, 50)) / 24",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(locations).to(self.device)",
                            "Call"
                        ],
                        [
                            "np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.tile(locations, (1, 50))",
                            "Call"
                        ],
                        [
                            "np.mgrid[0:9, 0:9].reshape(2, 81).T.astype('float32')",
                            "Call"
                        ],
                        [
                            "np.tile(locations, (1, 50)) / 8",
                            "BinOp"
                        ],
                        [
                            "np.transpose(np.where(np.all(image > 150, axis=2))).astype('float32')",
                            "Call"
                        ],
                        [
                            "np.array([[-1, -1]], dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.tile(locations, (1, 50)) / 63",
                            "BinOp"
                        ],
                        [
                            "np.transpose(np.where(np.any(image < 100, axis=-1))).astype('float32')",
                            "Call"
                        ],
                        [
                            "np.tile(locations, (1, 50)) / 63",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_234": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Call"
                        ],
                        [
                            "torch.min(torch.stack(qs, dim=0), dim=0)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "math.ceil(threshold * n_locations)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randint_245": {
                "variable": {
                    "value": "sampled_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "high": {
                    "value": "math.ceil(threshold * n_locations)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_252": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean[actual_idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(location, delta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_144": {
                "input": {
                    "value": "torch.stack(qs, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_144": {
                "tensors": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[q(*model_inputs) for q in self.q_models]",
                            "ListComp"
                        ],
                        [
                            "[target_q(*model_inputs) for target_q in self.target_q_models]",
                            "ListComp"
                        ],
                        [
                            "self.target_q(observation, prev_action, prev_reward, next_actions)",
                            "Call"
                        ],
                        [
                            "[q.forward_output(aug_obs, mean) for (q, aug_obs) in zip(self.q_models, aug_observation_qs)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_231": {
                "input": {
                    "value": "torch.stack(qs, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_231": {
                "tensors": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[q(*model_inputs) for q in self.q_models]",
                            "ListComp"
                        ],
                        [
                            "[target_q(*model_inputs) for target_q in self.target_q_models]",
                            "ListComp"
                        ],
                        [
                            "self.target_q(observation, prev_action, prev_reward, next_actions)",
                            "Call"
                        ],
                        [
                            "[q.forward_output(aug_obs, mean) for (q, aug_obs) in zip(self.q_models, aug_observation_qs)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/qpg/sac_agent_v2_generic.py": {
        "torch": {
            "Parameter_70": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_129": {
                "variable": {
                    "value": "min_next_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q1_model(*model_inputs)",
                            "Call"
                        ],
                        [
                            "self.target_q1_model(*model_inputs)",
                            "Call"
                        ],
                        [
                            "self.target_q(observation, prev_action, prev_reward, next_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/agents/qpg/td3_agent.py": {
        "torch": {}
    },
    "rlpyt/algos/dqn/cat_dqn.py": {
        "torch": {
            "linspace_32": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.V_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "self.V_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.agent.n_atoms",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ger_36": {
                "variable": {
                    "value": "next_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - samples.done_n.float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "vec2": {
                    "value": "next_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z * self.discount ** self.n_step_return",
                            "BinOp"
                        ],
                        [
                            "torch.ger(1 - samples.done_n.float(), next_z)",
                            "Call"
                        ],
                        [
                            "torch.clamp(ret + next_z, self.V_min, self.V_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_38": {
                "variable": {
                    "value": "next_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ret + next_z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "self.V_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.V_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_43": {
                "variable": {
                    "value": "projection_coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - abs_diff_on_delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_63": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select_at_indexes(samples.action, ps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(p, EPS, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_69": {
                "variable": {
                    "value": "target_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_p_unproj * projection_coeffs).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(target_p, EPS, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_70": {
                "variable": {
                    "value": "KL_div",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_p * (torch.log(target_p) - torch.log(p.detach()))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_72": {
                "variable": {
                    "value": "KL_div",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "KL_div",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(target_p * (torch.log(target_p) - torch.log(p.detach())), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(KL_div, EPS, 1 / EPS)",
                            "Call"
                        ],
                        [
                            "KL_div * valid",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                },
                "max": {
                    "value": "1 / EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_79": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.sum(target_p * torch.log(p), dim=1)",
                            "UnaryOp"
                        ],
                        [
                            "losses * samples.is_weights",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensordot_53": {
                "variable": {
                    "value": "next_qs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "next_ps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agent(*samples.target_inputs)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(self.V_min, self.V_max, self.agent.n_atoms)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_54": {
                "variable": {
                    "value": "next_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensordot(next_ps, z, dims=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensordot_56": {
                "variable": {
                    "value": "target_qs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "target_ps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agent.target(*samples.target_inputs)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(self.V_min, self.V_max, self.agent.n_atoms)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_57": {
                "variable": {
                    "value": "next_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensordot(target_ps, z, dims=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "target_p * torch.log(p)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_64": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "select_at_indexes(samples.action, ps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(p, EPS, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_71": {
                "input": {
                    "value": "p.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/algos/dqn/dqn.py": {
        "torch": {
            "clip_grad_norm__149": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_190": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "abs_delta <= self.delta_clip",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * delta ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.where(abs_delta <= self.delta_clip, losses, b)",
                            "Call"
                        ],
                        [
                            "losses * samples.is_weights",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.delta_clip * (abs_delta - self.delta_clip / 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_195": {
                "variable": {
                    "value": "td_abs_errors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "td_abs_errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss(samples_from_replay)",
                            "Call"
                        ],
                        [
                            "abs_delta.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(td_abs_errors, 0, self.delta_clip)",
                            "Call"
                        ],
                        [
                            "td_abs_errors * valid",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.delta_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_201": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * delta ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.where(abs_delta <= self.delta_clip, losses, b)",
                            "Call"
                        ],
                        [
                            "losses * samples.is_weights",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_179": {
                "variable": {
                    "value": "next_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agent(*samples.target_inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_182": {
                "input": {
                    "value": "target_qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agent.target(*samples.target_inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/algos/dqn/r2d1.py": {
        "torch": {
            "clip_grad_norm__142": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_206": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abs(q_at_a[:-nm1] - y)",
                            "Call"
                        ],
                        [
                            "torch.clamp(delta, 0, self.delta_clip)",
                            "Call"
                        ],
                        [
                            "y - q",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.delta_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_284": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "abs_delta <= self.delta_clip",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * delta ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.where(abs_delta <= self.delta_clip, losses, b)",
                            "Call"
                        ],
                        [
                            "losses * samples.is_weights.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.delta_clip * (abs_delta - self.delta_clip / 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_291": {
                "variable": {
                    "value": "td_abs_errors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "td_abs_errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss(samples_from_replay)",
                            "Call"
                        ],
                        [
                            "abs_delta.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(td_abs_errors, 0, self.delta_clip)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.delta_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_186": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.agent.agent_info.q",
                            "Attribute"
                        ],
                        [
                            "select_at_indexes(action, qs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_208": {
                "input": {
                    "value": "delta * valid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_269": {
                "variable": {
                    "value": "next_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agent(*target_inputs, init_rnn_state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_293": {
                "input": {
                    "value": "valid_td_abs_errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "td_abs_errors * valid",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_304": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_300": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_272": {
                "input": {
                    "value": "target_qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agent.target(*target_inputs, target_rnn_state)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_300": {
                "input": {
                    "value": "abs(x) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_304": {
                "input": {
                    "value": "1 + 4 * self.value_scale_eps * (abs(z) + 1 + self.value_scale_eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/algos/pg/a2c.py": {
        "torch": {
            "clip_grad_norm__39": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/algos/pg/ppo.py": {
        "torch": {
            "clamp_112": {
                "variable": {
                    "value": "clipped_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.likelihood_ratio(action, old_dist_info=old_dist_info, new_dist_info=dist_info)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0 - self.ratio_clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 + self.ratio_clip",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_115": {
                "variable": {
                    "value": "surrogate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "surr_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio * advantage",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LambdaLR_43": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda itr: (self.n_itr - itr) / self.n_itr",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "clip_grad_norm__83": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/algos/qpg/ddpg.py": {
        "torch": {
            "clamp_163": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples.return_ + (1 - samples.done_n.float()) * disc * target_q",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(y, -self.q_target_clip, self.q_target_clip)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.q_target_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.q_target_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__124": {
                "variable": {
                    "value": "q_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.q_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__134": {
                "variable": {
                    "value": "mu_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.mu_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/algos/qpg/sac.py": {
        "torch": {
            "min_200": {
                "variable": {
                    "value": "min_log_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_target1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agent.q(*agent_inputs, new_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__138": {
                "variable": {
                    "value": "v_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.v_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__144": {
                "variable": {
                    "value": "pi_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.pi_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__151": {
                "variable": {
                    "value": "q1_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.q1_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__157": {
                "variable": {
                    "value": "q2_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.q2_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_337": {
                "input": {
                    "value": "abs(q1 - q2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_212": {
                "input": {
                    "value": "0.5 * pi_mean ** 2 + 0.5 * pi_log_std ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_316": {
                "input": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer_to((samples.agent_inputs, samples.target_inputs, samples.action))",
                            "Call"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlpyt/algos/qpg/sac_v2.py": {
        "torch": {
            "clip_grad_norm__147": {
                "variable": {
                    "value": "pi_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.pi_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__160": {
                "variable": {
                    "value": "q_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "q_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.q_optimizers, q_losses, self.agent.q_parameters())",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_201": {
                "input": {
                    "value": "torch.stack(log_targets, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_209": {
                "input": {
                    "value": "self.policy_output_regularization * 0.5 * pi_mean ** 2 + pi_log_std ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_201": {
                "tensors": {
                    "value": "log_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agent.q(*agent_inputs, new_action)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_228": {
                "input": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer_to((samples.agent_inputs, samples.target_inputs, samples.action))",
                            "Call"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlpyt/algos/qpg/sac_v2_generic.py": {
        "torch": {
            "min_200": {
                "variable": {
                    "value": "min_log_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_target1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agent.q(*agent_inputs, new_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__142": {
                "variable": {
                    "value": "pi_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.pi_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__152": {
                "variable": {
                    "value": "q1_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.q1_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__158": {
                "variable": {
                    "value": "q2_grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent.q2_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_240": {
                "input": {
                    "value": "abs(q1 - q2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_222": {
                "input": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer_to((samples.agent_inputs, samples.target_inputs, samples.action))",
                            "Call"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlpyt/algos/qpg/td3.py": {
        "torch": {
            "min_41": {
                "variable": {
                    "value": "target_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.agent.target_q_at_mu(*samples.target_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/algos/utils.py": {
        "torch": {
            "ones_like_94": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "done.type(reward.dtype)",
                            "Call"
                        ],
                        [
                            "done.type(torch.float)",
                            "Call"
                        ],
                        [
                            "done",
                            "Method Argument"
                        ],
                        [
                            "done",
                            "Method Argument"
                        ],
                        [
                            "done",
                            "Method Argument"
                        ],
                        [
                            "done",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_95": {
                "input": {
                    "value": "torch.cumsum(done[:-1], dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_95": {
                "input": {
                    "value": "done[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/distributions/base.py": {
        "torch": {
            "exp_37": {
                "input": {
                    "value": "self.entropy(dist_info)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/distributions/categorical.py": {
        "torch": {
            "multinomial_26": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.view(-1, self.dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "p * (torch.log(p + EPS) - torch.log(q + EPS))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_35": {
                "input": {
                    "value": "selected_likelihood + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "p * torch.log(p + EPS)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_19": {
                "input": {
                    "value": "q + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "p + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/distributions/discrete.py": {
        "torch": {}
    },
    "rlpyt/distributions/epsilon_greedy.py": {
        "torch": {
            "argmax_17": {
                "variable": {
                    "value": "arg_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensordot(p, z or self.z, dims=1)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randint_19": {
                "variable": {
                    "value": "arg_rand",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "q.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(mask.sum(),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_40": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "z or self.z",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_18": {
                "*size": {
                    "value": "arg_select.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/distributions/gaussian.py": {
        "torch": {
            "exp_67": {
                "variable": {
                    "value": "old_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "old_log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.clamp(old_log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_68": {
                "variable": {
                    "value": "new_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.clamp(new_log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_75": {
                "input": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num / den",
                            "BinOp"
                        ],
                        [
                            "num / den + new_log_std - old_log_std",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_91": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_92": {
                "input": {
                    "value": "log_std + math.log(math.sqrt(2 * math.pi * math.e))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_96": {
                "input": {
                    "value": "self.entropy(dist_info)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_111": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.log(self.std)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ],
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.log(self.std)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ],
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_130": {
                "input": {
                    "value": "logli_new - logli_old",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_177": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.log(self.std)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ],
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.log(self.std)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ],
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_187": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std * torch.normal(torch.zeros_like(mean), torch.ones_like(mean))",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(noise, -self.noise_clip, self.noise_clip)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.noise_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.noise_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_193": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample",
                            "Call"
                        ],
                        [
                            "self.sample(dist_info)",
                            "Call"
                        ],
                        [
                            "squash * torch.tanh(sample)",
                            "BinOp"
                        ],
                        [
                            "mean + noise",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(sample, -self.clip, self.clip)",
                            "Call"
                        ],
                        [
                            "self.squash * torch.tanh(sample)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_63": {
                "variable": {
                    "value": "old_log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "old_log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.clamp(old_log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min_log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_65": {
                "variable": {
                    "value": "new_log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.clamp(new_log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min_log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_86": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.log(self.std)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ],
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.log(self.std)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ],
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min_log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_109": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.log(self.std)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ],
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.log(self.std)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ],
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min_log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_122": {
                "input": {
                    "value": "torch.log(self.squash * (1 - torch.tanh(x) ** 2) + EPS)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_175": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.log(self.std)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ],
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.log(self.std)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ],
                        [
                            "dist_info.log_std",
                            "Attribute"
                        ],
                        [
                            "torch.clamp(log_std, min=self.min_log_std, max=self.max_log_std)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min_log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_184": {
                "mean": {
                    "value": "torch.zeros_like(mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones_like(mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "torch.exp(log_std)",
                            "Call"
                        ],
                        [
                            "self.std.to(mean.device)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_std)",
                            "Call"
                        ],
                        [
                            "torch.tensor(std).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_113": {
                "input": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "log_std + 0.5 * z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "self.squash * (1 - torch.tanh(x) ** 2) + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_139": {
                "input": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample",
                            "Call"
                        ],
                        [
                            "self.sample(dist_info)",
                            "Call"
                        ],
                        [
                            "squash * torch.tanh(sample)",
                            "BinOp"
                        ],
                        [
                            "mean + noise",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(sample, -self.clip, self.clip)",
                            "Call"
                        ],
                        [
                            "self.squash * torch.tanh(sample)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_184": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_info.mean",
                            "Attribute"
                        ],
                        [
                            "dist_info.mean",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_like_184": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_info.mean",
                            "Attribute"
                        ],
                        [
                            "dist_info.mean",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tanh_195": {
                "input": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample",
                            "Call"
                        ],
                        [
                            "self.sample(dist_info)",
                            "Call"
                        ],
                        [
                            "squash * torch.tanh(sample)",
                            "BinOp"
                        ],
                        [
                            "mean + noise",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(sample, -self.clip, self.clip)",
                            "Call"
                        ],
                        [
                            "self.squash * torch.tanh(sample)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_123": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlpyt/models/conv2d.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "mlp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, extra_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(conv_layers, maxp_strides, channels, strides)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_42": {
                "normalized_shape": {
                    "value": "(c, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_45": {
                "kernel_size": {
                    "value": "maxp_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(conv_layers, maxp_strides, channels, strides)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rlpyt/models/dqn/atari_catdqn_model.py": {
        "torch": {
            "softmax_68": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.head(conv_out.view(T * B, -1))",
                            "Call"
                        ],
                        [
                            "F.softmax(p, dim=-1)",
                            "Call"
                        ],
                        [
                            "restore_leading_dims(p, lead_dim, T, B)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/models/dqn/atari_dqn_model.py": {
        "torch": {}
    },
    "rlpyt/models/dqn/atari_r2d1_model.py": {
        "torch": {
            "LSTM_41": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv.output_size + output_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[conv_out.view(T, B, -1), prev_action.view(T, B, -1), prev_reward.view(T, B, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/models/dqn/dueling.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.advantage_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ],
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.advantage_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.advantage_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size * n_atoms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.advantage_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_atoms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "n_atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_atoms",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlpyt/models/mlp.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "last_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_sizes[-1] if hidden_sizes else input_size",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlpyt/models/pg/atari_ff_model.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.conv.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.conv.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pi(fc_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/models/pg/atari_lstm_model.py": {
        "torch": {
            "LSTM_37": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv.output_size + output_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "lstm_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "lstm_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fc_out.view(T, B, -1), prev_action.view(T, B, -1), prev_reward.view(T, B, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pi(lstm_out.view(T * B, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/models/pg/mujoco_ff_model.py": {
        "torch": {
            "Parameter_40": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_log_std * torch.ones(action_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "mu_mlp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "action_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlpyt/models/pg/mujoco_lstm_model.py": {
        "torch": {
            "LSTM_34": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "mlp_output_size + action_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "lstm_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_size * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "lstm_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlp_out.view(T, B, -1), prev_action.view(T, B, -1), prev_reward.view(T, B, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/models/qpg/conv2d.py": {
        "torch": {
            "Sequential_142": {
                "variable": {
                    "value": "self.deconv_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose2d(channels, channels, 4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_294": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, :4] / 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_303": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cat_dist_info.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(one_hot, delta_sample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_319": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cat_dist_info.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_382": {
                "variable": {
                    "value": "extra_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(observation, f).view(T * B, -1) for f in fields] + [action]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "extra_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(observation, f).view(T * B, -1) for f in fields] + [action]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "extra_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(observation, f).view(T * B, -1) for f in fields]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "extra_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(observation, f).view(T * B, -1) for f in fields]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_182": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv_loc(embedding)",
                            "Call"
                        ],
                        [
                            "prob_map - (1 - seg) * float('inf')",
                            "BinOp"
                        ],
                        [
                            "prob_map.view(prob_map.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_207": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_info.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_223": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_info.prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "extra_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(observation, f).view(T * B, -1) for f in fields]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_327": {
                "tensors": {
                    "value": "(one_hot, delta_sample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_143": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_145": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_147": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding, action_loc.repeat((1, self._n_tile)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_317": {
                "input": {
                    "value": "cat_dist_info.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_221": {
                "input": {
                    "value": "dist_info.prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/models/qpg/mlp.py": {
        "torch": {
            "rand_like_205": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, :4]",
                            "Subscript"
                        ],
                        [
                            "restore_leading_dims((logits, mu, log_std), lead_dim, T, B)",
                            "Call"
                        ],
                        [
                            "dist_info.cat_dist",
                            "Attribute"
                        ],
                        [
                            "dist_info.cat_dist",
                            "Attribute"
                        ],
                        [
                            "self.mlp_loc(input_obs)",
                            "Call"
                        ],
                        [
                            "restore_leading_dims(logits, lead_dim, T, B)",
                            "Call"
                        ],
                        [
                            "dist_info",
                            "variable"
                        ],
                        [
                            "dist_info",
                            "variable"
                        ]
                    ]
                }
            },
            "clamp_206": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_208": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(logits + gumbel) / 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_210": {
                "variable": {
                    "value": "cat_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(one_hot, delta_sample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_like_232": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, :4]",
                            "Subscript"
                        ],
                        [
                            "restore_leading_dims((logits, mu, log_std), lead_dim, T, B)",
                            "Call"
                        ],
                        [
                            "dist_info.cat_dist",
                            "Attribute"
                        ],
                        [
                            "dist_info.cat_dist",
                            "Attribute"
                        ],
                        [
                            "self.mlp_loc(input_obs)",
                            "Call"
                        ],
                        [
                            "restore_leading_dims(logits, lead_dim, T, B)",
                            "Call"
                        ],
                        [
                            "dist_info",
                            "variable"
                        ],
                        [
                            "dist_info",
                            "variable"
                        ]
                    ]
                }
            },
            "clamp_233": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_235": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(logits + gumbel) / 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_237": {
                "variable": {
                    "value": "cat_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_410": {
                "variable": {
                    "value": "q_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[observation.view(T * B, -1), action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "(one_hot, delta_sample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_like_338": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, :4]",
                            "Subscript"
                        ],
                        [
                            "restore_leading_dims((logits, mu, log_std), lead_dim, T, B)",
                            "Call"
                        ],
                        [
                            "dist_info.cat_dist",
                            "Attribute"
                        ],
                        [
                            "dist_info.cat_dist",
                            "Attribute"
                        ],
                        [
                            "self.mlp_loc(input_obs)",
                            "Call"
                        ],
                        [
                            "restore_leading_dims(logits, lead_dim, T, B)",
                            "Call"
                        ],
                        [
                            "dist_info",
                            "variable"
                        ],
                        [
                            "dist_info",
                            "variable"
                        ]
                    ]
                }
            },
            "clamp_339": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_341": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(logits + gumbel) / 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_343": {
                "variable": {
                    "value": "cat_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_like_360": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, :4]",
                            "Subscript"
                        ],
                        [
                            "restore_leading_dims((logits, mu, log_std), lead_dim, T, B)",
                            "Call"
                        ],
                        [
                            "dist_info.cat_dist",
                            "Attribute"
                        ],
                        [
                            "dist_info.cat_dist",
                            "Attribute"
                        ],
                        [
                            "self.mlp_loc(input_obs)",
                            "Call"
                        ],
                        [
                            "restore_leading_dims(logits, lead_dim, T, B)",
                            "Call"
                        ],
                        [
                            "dist_info",
                            "variable"
                        ],
                        [
                            "dist_info",
                            "variable"
                        ]
                    ]
                }
            },
            "clamp_361": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_363": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(logits + gumbel) / 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_365": {
                "variable": {
                    "value": "cat_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax((logits + gumbel) / 10, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_405": {
                "variable": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(observation, dim=-1)",
                            "Call"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "input": {
                    "value": "self.mlp(observation.view(T * B, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_obs, action_loc.repeat((1, self._n_tile)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_207": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_234": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_320": {
                "variable": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_obs, action_loc.repeat((1, self._n_tile)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_340": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_362": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ],
                        [
                            "torch.rand_like(logits)",
                            "Call"
                        ],
                        [
                            "torch.clamp(u, 1e-05, 1 - 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_219": {
                "start": {
                    "value": "len(cat_sample)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_220": {
                "start": {
                    "value": "len(cat_sample)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/models/utils.py": {
        "torch": {}
    },
    "rlpyt/runners/async_rl.py": {
        "torch": {
            "set_num_threads_490": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_117": {
                "int": {
                    "value": "main_affinity['torch_threads']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_num_threads_422": {
                "int": {
                    "value": "self.affinity['torch_threads']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_num_threads_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_num_threads_423": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/runners/minibatch_rl.py": {
        "torch": {
            "set_num_threads_46": {
                "int": {
                    "value": "self.affinity['master_torch_threads']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_num_threads_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/runners/sync_rl.py": {
        "torch": {}
    },
    "rlpyt/samplers/async_/cpu_sampler.py": {
        "torch": {
            "set_num_threads_32": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/samplers/async_/gpu_sampler.py": {
        "torch": {
            "set_num_threads_32": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_125": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/samplers/async_/serial_sampler.py": {
        "torch": {
            "set_num_threads_29": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/samplers/buffer.py": {
        "torch": {
            "set_num_threads_65": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/samplers/parallel/worker.py": {
        "torch": {
            "set_num_threads_25": {
                "int": {
                    "value": "torch_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if torch_threads is None and cpu is not None else torch_threads",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_num_threads_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/utils/buffer.py": {
        "torch": {
            "from_numpy_43": {
                "ndarray": {
                    "value": "buffer_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "buffer_",
                            "Method Argument"
                        ],
                        [
                            "buffer_",
                            "Method Argument"
                        ],
                        [
                            "buffer_",
                            "Method Argument"
                        ],
                        [
                            "buffer_",
                            "Method Argument"
                        ],
                        [
                            "buffer_",
                            "Method Argument"
                        ],
                        [
                            "buffer_",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlpyt/utils/launching/affinity.py": {
        "torch": {
            "device_count_38": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlpyt/utils/logging/logger.py": {
        "torch": {
            "save_336": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_all_parameters(cls, args)",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(get_snapshot_dir(), 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(get_snapshot_dir(), 'params.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join(get_snapshot_dir(), 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlpyt/utils/misc.py": {
        "torch": {
            "zeros_19": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(T, len(B_idxs)) + array_or_tensor.shape[2:]",
                            "BinOp"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_26": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(T, len(B_idxs)) + array_or_tensor.shape[2:]",
                            "BinOp"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlpyt/utils/seed.py": {
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed % 4294967294",
                            "BinOp"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed % 4294967294",
                            "BinOp"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlpyt/utils/synchronize.py": {
        "torch": {}
    },
    "rlpyt/utils/tensor.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "indexes.shape + (num,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indexes.dtype",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "indexes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_27": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(indexes.shape + (num,), dtype=dtype, device=indexes.device)",
                            "Call"
                        ],
                        [
                            "onehot",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(indexes.shape)",
                            "Call"
                        ],
                        [
                            "() if dim is None else dim",
                            "IfExp"
                        ],
                        [
                            "dim in enumerate(dims)",
                            "Call"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_92": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(indexes.shape)",
                            "Call"
                        ],
                        [
                            "() if dim is None else dim",
                            "IfExp"
                        ],
                        [
                            "dim in enumerate(dims)",
                            "Call"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index in enumerate(dims)",
                            "Call"
                        ],
                        [
                            "index.expand(expanse)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(ii)",
                            "Call"
                        ],
                        [
                            "index",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_11": {
                "start": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indexes.numel()",
                            "Call"
                        ],
                        [
                            "num",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "simulate_policy.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "snapshot_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(args.snapshot_dir, 'params.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}