{
    "lib/sa/functions/aggregation_refpad.py": {
        "torch": {
            "randn_219": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.numel()",
                            "Call"
                        ],
                        [
                            "grad_input.numel()",
                            "Call"
                        ],
                        [
                            "grad_weight.numel() // weight.shape[2]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_width",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_220": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.numel()",
                            "Call"
                        ],
                        [
                            "grad_input.numel()",
                            "Call"
                        ],
                        [
                            "grad_weight.numel() // weight.shape[2]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "c_w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pow(kernel_size, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "out_height * out_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Unfold_223": {
                "variable": {
                    "value": "unfold_j",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_224": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dilation * (kernel_size - 1) + 1) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradcheck_238": {
                "func": {
                    "value": "partial(aggregation_refpad, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(x, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_229": {
                "outputs": {
                    "value": "y1.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c_x, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_230": {
                "outputs": {
                    "value": "y2.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c_x, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_233": {
                "outputs": {
                    "value": "y1.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c_w, pow(kernel_size, 2), out_height * out_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_234": {
                "outputs": {
                    "value": "y2.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c_w, pow(kernel_size, 2), out_height * out_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_of_139": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_of_174": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flip_184": {
                "input": {
                    "value": "grad_input[:, :, :padding[0], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_185": {
                "input": {
                    "value": "grad_input[:, :, input_height + padding[0]:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_186": {
                "input": {
                    "value": "grad_input[:, :, :, :padding[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_187": {
                "input": {
                    "value": "grad_input[:, :, :, input_width + padding[1]:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "current_stream_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/sa/functions/aggregation_zeropad.py": {
        "torch": {
            "randn_197": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.numel()",
                            "Call"
                        ],
                        [
                            "grad_input.numel()",
                            "Call"
                        ],
                        [
                            "grad_weight.numel() // weight.shape[2]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_width",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_198": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.numel()",
                            "Call"
                        ],
                        [
                            "grad_input.numel()",
                            "Call"
                        ],
                        [
                            "grad_weight.numel() // weight.shape[2]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "c_w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pow(kernel_size, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "out_height * out_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Unfold_201": {
                "variable": {
                    "value": "unfold_j",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dilation * (kernel_size - 1) + 1) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradcheck_215": {
                "func": {
                    "value": "partial(aggregation_zeropad, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(x, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_206": {
                "outputs": {
                    "value": "y1.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c_x, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_207": {
                "outputs": {
                    "value": "y2.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c_x, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_210": {
                "outputs": {
                    "value": "y1.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c_w, pow(kernel_size, 2), out_height * out_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_211": {
                "outputs": {
                    "value": "y2.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c_w, pow(kernel_size, 2), out_height * out_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_of_123": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_of_158": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "current_stream_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/sa/functions/subtraction2_refpad.py": {
        "torch": {
            "randn_205": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.numel() // output.shape[2]",
                            "BinOp"
                        ],
                        [
                            "grad_input1.numel()",
                            "Call"
                        ],
                        [
                            "grad_input2.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_width",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_206": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.numel() // output.shape[2]",
                            "BinOp"
                        ],
                        [
                            "grad_input1.numel()",
                            "Call"
                        ],
                        [
                            "grad_input2.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_width",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Unfold_209": {
                "variable": {
                    "value": "unfold_i",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Unfold_210": {
                "variable": {
                    "value": "unfold_j",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_211": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dilation * (kernel_size - 1) + 1) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradcheck_223": {
                "func": {
                    "value": "partial(subtraction2_refpad, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_215": {
                "outputs": {
                    "value": "y1.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_216": {
                "outputs": {
                    "value": "y1.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_217": {
                "outputs": {
                    "value": "y2.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_218": {
                "outputs": {
                    "value": "y2.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_of_125": {
                "obj": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_of_160": {
                "obj": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_of_170": {
                "obj": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flip_180": {
                "input": {
                    "value": "grad_input2[:, :, :padding[0], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_181": {
                "input": {
                    "value": "grad_input2[:, :, input_height + padding[0]:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_182": {
                "input": {
                    "value": "grad_input2[:, :, :, :padding[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_183": {
                "input": {
                    "value": "grad_input2[:, :, :, input_width + padding[1]:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "current_stream_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/sa/functions/subtraction2_zeropad.py": {
        "torch": {
            "randn_194": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.numel() // output.shape[2]",
                            "BinOp"
                        ],
                        [
                            "grad_input1.numel()",
                            "Call"
                        ],
                        [
                            "grad_input2.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_width",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_195": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.numel() // output.shape[2]",
                            "BinOp"
                        ],
                        [
                            "grad_input1.numel()",
                            "Call"
                        ],
                        [
                            "grad_input2.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_width",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Unfold_198": {
                "variable": {
                    "value": "unfold_i",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Unfold_199": {
                "variable": {
                    "value": "unfold_j",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dilation * (kernel_size - 1) + 1) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradcheck_212": {
                "func": {
                    "value": "partial(subtraction2_zeropad, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grad_204": {
                "outputs": {
                    "value": "y1.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_205": {
                "outputs": {
                    "value": "y1.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_206": {
                "outputs": {
                    "value": "y2.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_207": {
                "outputs": {
                    "value": "y2.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_of_119": {
                "obj": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_of_154": {
                "obj": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_of_164": {
                "obj": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "current_stream_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/sa/functions/subtraction_refpad.py": {
        "torch": {
            "randn_183": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.numel() // output.shape[2]",
                            "BinOp"
                        ],
                        [
                            "grad_input.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_width",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Unfold_186": {
                "variable": {
                    "value": "unfold_i",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Unfold_187": {
                "variable": {
                    "value": "unfold_j",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_188": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dilation * (kernel_size - 1) + 1) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradcheck_197": {
                "func": {
                    "value": "partial(subtraction_refpad, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_192": {
                "outputs": {
                    "value": "y1.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_193": {
                "outputs": {
                    "value": "y2.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_of_113": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_of_148": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flip_158": {
                "input": {
                    "value": "grad_input[:, :, :padding[0], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_159": {
                "input": {
                    "value": "grad_input[:, :, input_height + padding[0]:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_160": {
                "input": {
                    "value": "grad_input[:, :, :, :padding[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_161": {
                "input": {
                    "value": "grad_input[:, :, :, input_width + padding[1]:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "current_stream_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/sa/functions/subtraction_zeropad.py": {
        "torch": {
            "randn_168": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.numel() // output.shape[2]",
                            "BinOp"
                        ],
                        [
                            "grad_input.numel()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "in_width",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Unfold_171": {
                "variable": {
                    "value": "unfold_i",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Unfold_172": {
                "variable": {
                    "value": "unfold_j",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dilation * (kernel_size - 1) + 1) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradcheck_182": {
                "func": {
                    "value": "partial(subtraction_zeropad, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_177": {
                "outputs": {
                    "value": "y1.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_178": {
                "outputs": {
                    "value": "y2.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(n, c, in_height, in_width, requires_grad=True).double().cuda()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_of_103": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_of_138": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "current_stream_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/sa/functions/utils.py": {
        "torch": {}
    },
    "lib/sa/modules/aggregation.py": {
        "torch": {}
    },
    "lib/sa/modules/subtraction.py": {
        "torch": {}
    },
    "lib/sa/modules/subtraction2.py": {
        "torch": {}
    },
    "model/san.py": {
        "torch": {
            "cat_18": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loc_w.unsqueeze(0), loc_h.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_18": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linspace_13": {
                "variable": {
                    "value": "loc_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_13": {
                "variable": {
                    "value": "loc_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_14": {
                "variable": {
                    "value": "loc_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "loc_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_16": {
                "variable": {
                    "value": "loc_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_16": {
                "variable": {
                    "value": "loc_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_17": {
                "variable": {
                    "value": "loc_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_17": {
                "variable": {
                    "value": "loc_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "rel_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "rel_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_108": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "c * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.conv_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(rel_planes + 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_37": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.conv_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(rel_planes * (pow(kernel_size, 2) + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Unfold_43": {
                "variable": {
                    "value": "self.unfold_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Unfold_44": {
                "variable": {
                    "value": "self.unfold_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_45": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_139": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "num_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "c * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "c * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "c * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "c * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_99": {
                "num_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "c * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "c * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "rel_planes + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "rel_planes + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "rel_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "rel_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "rel_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes // share_planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "rel_planes * (pow(kernel_size, 2) + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "rel_planes * (pow(kernel_size, 2) + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes // share_planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "out_planes // share_planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "out_planes // share_planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "pow(kernel_size, 2) * out_planes // share_planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "[self.subtraction2(x1, x2), self.subtraction(p).repeat(x.shape[0], 1, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tool/counter.py": {
        "torch": {
            "device_7": {
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tool/test.py": {
        "torch": {
            "DataParallel_62": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_63": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "args.ignore_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(os.path.join(args.data_root, 'val'), val_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.test_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_67": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tool/train.py": {
        "torch": {
            "CrossEntropyLoss_101": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "args.ignore_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_165": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(os.path.join(args.data_root, 'train'), train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_set)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_166": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(os.path.join(args.data_root, 'val'), val_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_set)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultiStepLR_104": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.base_lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.step_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_121": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_123": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_160": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(os.path.join(args.data_root, 'train'), train_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_161": {
                "variable": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(os.path.join(args.data_root, 'val'), val_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "args.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_69": {
                "seed": {
                    "value": "args.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_70": {
                "seed": {
                    "value": "args.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_106": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.base_lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_117": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_129": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_141": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(gpu)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_192": {
                "obj": {
                    "value": "{'epoch': epoch_log, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'top1_val': top1_val, 'top5_val': top5_val}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.save_path + '/train_epoch_' + str(epoch_log) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/complexity.py": {
        "torch": {
            "ones_22": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_24": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "util/util.py": {
        "torch": {
            "histc_69": {
                "variable": {
                    "value": "area_intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersection.float().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "K - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_70": {
                "variable": {
                    "value": "area_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.float().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "K - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_71": {
                "variable": {
                    "value": "area_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.float().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "K - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_198": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_205": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.reshape(output.size).copy()",
                            "Call"
                        ],
                        [
                            "output.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_205": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "target_a.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_207": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.reshape(output.size).copy()",
                            "Call"
                        ],
                        [
                            "output.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_210": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.reshape(output.size).copy()",
                            "Call"
                        ],
                        [
                            "output.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_210": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "target_b.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_212": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.reshape(output.size).copy()",
                            "Call"
                        ],
                        [
                            "output.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_218": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.reshape(output.size).copy()",
                            "Call"
                        ],
                        [
                            "output.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_218": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_220": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.reshape(output.size).copy()",
                            "Call"
                        ],
                        [
                            "output.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}