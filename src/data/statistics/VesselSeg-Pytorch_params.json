{
    "lib/metrics.py": {
        "sklearn": {
            "roc_auc_score_44": {
                "variable": {
                    "value": "AUC_ROC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_score": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "precision_recall_curve_60": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "confusion_matrix_80": {
                "variable": {
                    "value": "confusion",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output >= self.threshold_confusion",
                            "Compare"
                        ]
                    ]
                }
            },
            "f1_score_109": {
                "variable": {
                    "value": "F1_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output >= self.threshold_confusion",
                            "Compare"
                        ]
                    ]
                },
                "labels": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                },
                "sample_weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "roc_curve_47": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_score": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "tools/ablation/ablation_plot.py": {
        "sklearn": {
            "roc_auc_score_32": {
                "variable": {
                    "value": "AUC_ROC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_35": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "precision_recall_curve_51": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "tools/ablation/ablation_plot_with_detail.py": {
        "sklearn": {
            "roc_auc_score_40": {
                "variable": {
                    "value": "AUC_ROC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_43": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "precision_recall_curve_64": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "function.py": {
        "torch": {
            "DataLoader_33": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainDataset(patches_imgs_train[train_ind, ...], patches_masks_train[train_ind, ...], mode='train')",
                            "Call"
                        ],
                        [
                            "TrainDatasetV2(imgs_train, masks_train, fovs_train, train_idx, mode='train', args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainDataset(patches_imgs_train[val_ind, ...], patches_masks_train[val_ind, ...], mode='val')",
                            "Call"
                        ],
                        [
                            "TrainDatasetV2(imgs_train, masks_train, fovs_train, val_idx, mode='val', args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainDataset(patches_imgs_train[train_ind, ...], patches_masks_train[train_ind, ...], mode='train')",
                            "Call"
                        ],
                        [
                            "TrainDatasetV2(imgs_train, masks_train, fovs_train, train_idx, mode='train', args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainDataset(patches_imgs_train[val_ind, ...], patches_masks_train[val_ind, ...], mode='val')",
                            "Call"
                        ],
                        [
                            "TrainDatasetV2(imgs_train, masks_train, fovs_train, val_idx, mode='val', args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "visual_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "visual_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TrainDatasetV2(imgs_train, masks_train, fovs_train, val_idx, mode='val', args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/common.py": {
        "torch": {
            "manual_seed_69": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_70": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/dataset.py": {
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgs[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(data).float()",
                            "Call"
                        ],
                        [
                            "self.transforms(data, mask)",
                            "Call"
                        ],
                        [
                            "self.imgs[idx]",
                            "Subscript"
                        ],
                        [
                            "data.transpose((1, 2, 0))",
                            "Call"
                        ],
                        [
                            "seq_det.augment_image(data).transpose((2, 0, 1)) / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.masks[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(mask).long()",
                            "Call"
                        ],
                        [
                            "self.transforms(data, mask)",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=self.shape, mode='nearest')",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=self.shape, mode='nearest')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(mask))",
                            "Call"
                        ],
                        [
                            "t(img, mask)",
                            "Call"
                        ],
                        [
                            "self.masks[idx, 0]",
                            "Subscript"
                        ],
                        [
                            "ia.SegmentationMapsOnImage(mask, shape=data.shape)",
                            "Call"
                        ],
                        [
                            "seq_det.augment_segmentation_maps([mask])[0].get_arr().astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_48": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=self.shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=self.shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "img.flip(2)",
                            "Call"
                        ],
                        [
                            "img.flip(1)",
                            "Call"
                        ],
                        [
                            "torch.rot90(img, cnt, [1, 2])",
                            "Call"
                        ],
                        [
                            "self.to_tensor(img)",
                            "Call"
                        ],
                        [
                            "t(img, mask)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_49": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.masks[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(mask).long()",
                            "Call"
                        ],
                        [
                            "self.transforms(data, mask)",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=self.shape, mode='nearest')",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=self.shape, mode='nearest')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(mask))",
                            "Call"
                        ],
                        [
                            "t(img, mask)",
                            "Call"
                        ],
                        [
                            "self.masks[idx, 0]",
                            "Subscript"
                        ],
                        [
                            "ia.SegmentationMapsOnImage(mask, shape=data.shape)",
                            "Call"
                        ],
                        [
                            "seq_det.augment_segmentation_maps([mask])[0].get_arr().astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_62": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=self.shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=self.shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "img.flip(2)",
                            "Call"
                        ],
                        [
                            "img.flip(1)",
                            "Call"
                        ],
                        [
                            "torch.rot90(img, cnt, [1, 2])",
                            "Call"
                        ],
                        [
                            "self.to_tensor(img)",
                            "Call"
                        ],
                        [
                            "t(img, mask)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_63": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.masks[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(mask).long()",
                            "Call"
                        ],
                        [
                            "self.transforms(data, mask)",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=self.shape, mode='nearest')",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=self.shape, mode='nearest')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(mask))",
                            "Call"
                        ],
                        [
                            "t(img, mask)",
                            "Call"
                        ],
                        [
                            "self.masks[idx, 0]",
                            "Subscript"
                        ],
                        [
                            "ia.SegmentationMapsOnImage(mask, shape=data.shape)",
                            "Call"
                        ],
                        [
                            "seq_det.augment_segmentation_maps([mask])[0].get_arr().astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rot90_117": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=self.shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "img.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.interpolate(img, size=self.shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "img.flip(2)",
                            "Call"
                        ],
                        [
                            "img.flip(1)",
                            "Call"
                        ],
                        [
                            "torch.rot90(img, cnt, [1, 2])",
                            "Call"
                        ],
                        [
                            "self.to_tensor(img)",
                            "Call"
                        ],
                        [
                            "t(img, mask)",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, self.max_cnt)",
                            "Call"
                        ],
                        [
                            "cnt",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "ndarray": {
                    "value": "self.imgs[idx, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_197": {
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.masks[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(mask).long()",
                            "Call"
                        ],
                        [
                            "self.transforms(data, mask)",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=self.shape, mode='nearest')",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=self.shape, mode='nearest')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(mask))",
                            "Call"
                        ],
                        [
                            "t(img, mask)",
                            "Call"
                        ],
                        [
                            "self.masks[idx, 0]",
                            "Subscript"
                        ],
                        [
                            "ia.SegmentationMapsOnImage(mask, shape=data.shape)",
                            "Call"
                        ],
                        [
                            "seq_det.augment_segmentation_maps([mask])[0].get_arr().astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasetV2.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.imgs[n, :, y_center - int(self.patch_h / 2):y_center + int(self.patch_h / 2), x_center - int(self.patch_w / 2):x_center + int(self.patch_w / 2)]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(data).float()",
                            "Call"
                        ],
                        [
                            "self.transforms(data, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.masks[n, :, y_center - int(self.patch_h / 2):y_center + int(self.patch_h / 2), x_center - int(self.patch_w / 2):x_center + int(self.patch_w / 2)]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(mask).long()",
                            "Call"
                        ],
                        [
                            "self.transforms(data, mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/losses/loss.py": {
        "torch": {
            "NLLLoss_16": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "nll_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(class_weights.astype(np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "NLLLoss_37": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "NLLLoss_46": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_13": {
                "variable": {
                    "value": "nll_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "class_weights.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_40": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_49": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "(intersection + eps) / (union - intersection + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/losses/loss_lab.py": {
        "torch": {
            "zeros_15": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size()",
                            "Call"
                        ],
                        [
                            "tensor.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size()",
                            "Call"
                        ],
                        [
                            "tensor.size()",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size()",
                            "Call"
                        ],
                        [
                            "tensor.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_144": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - logits * Variable(signs)",
                            "BinOp"
                        ],
                        [
                            "(Variable(fg) - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dot_148": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(errors_sorted)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Variable(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsigmoid_276": {
                "variable": {
                    "value": "invprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-output * (target * 2 - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_284": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_285": {
                "variable": {
                    "value": "target1",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10, 64, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size()",
                            "Call"
                        ],
                        [
                            "tensor.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ],
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size()",
                            "Call"
                        ],
                        [
                            "tensor.size()",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size()",
                            "Call"
                        ],
                        [
                            "tensor.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_83": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_126": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lovasz_hinge_flat(*flatten_binary_scores(log.unsqueeze(0), lab.unsqueeze(0), ignore)) for (log, lab) in zip(logits, labels))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "mean_177": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lovasz_softmax_flat(*flatten_probas(prob.unsqueeze(0), lab.unsqueeze(0), ignore), classes=classes) for (prob, lab) in zip(probas, labels))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "sort_207": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - logits * Variable(signs)",
                            "BinOp"
                        ],
                        [
                            "(Variable(fg) - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_211": {
                "input": {
                    "value": "torch.Tensor(losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_239": {
                "variable": {
                    "value": "self.bce_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_248": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-self.bce_fn(preds, labels)",
                            "UnaryOp"
                        ],
                        [
                            "-self.ce_fn(preds, labels)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_259": {
                "variable": {
                    "value": "self.ce_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_263": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-self.bce_fn(preds, labels)",
                            "UnaryOp"
                        ],
                        [
                            "-self.ce_fn(preds, labels)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "ones_52": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probas.size(1)",
                            "Call"
                        ],
                        [
                            "probas.size()",
                            "Call"
                        ],
                        [
                            "target.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_148": {
                "input": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(errors, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(errors, 0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_210": {
                "input": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(errors, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(errors, 0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(lovasz_grad(fg_sorted))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/DenseUnet.py": {
        "torch": {
            "randn_101": {
                "variable": {
                    "value": "in1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_10": {
                "variable": {
                    "value": "self.conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_11": {
                "variable": {
                    "value": "self.bn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "variable": {
                    "value": "self.down_sample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_43": {
                "variable": {
                    "value": "self.upsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(self.conv(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.outconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.outconv(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_24": {
                "input": {
                    "value": "self.bn_list[i](temp_out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/LadderNet.py": {
        "torch": {
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_31": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.inconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_103": {
                "variable": {
                    "value": "self.down_module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_108": {
                "variable": {
                    "value": "self.down_conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_116": {
                "variable": {
                    "value": "self.up_conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "variable": {
                    "value": "self.up_dense_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_126": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.drop(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.inconv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.down_module_list[i](out)",
                            "Call"
                        ],
                        [
                            "self.down_conv_list[i](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bottom(out)",
                            "Call"
                        ],
                        [
                            "self.up_conv_list[j](out) + down_out[self.layers - j - 1]",
                            "BinOp"
                        ],
                        [
                            "self.up_dense_list[j](out)",
                            "Call"
                        ],
                        [
                            "self.inconv(x[-1])",
                            "Call"
                        ],
                        [
                            "out + x[-i - 1]",
                            "BinOp"
                        ],
                        [
                            "self.down_module_list[i](out)",
                            "Call"
                        ],
                        [
                            "self.down_conv_list[i](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bottom(out)",
                            "Call"
                        ],
                        [
                            "self.up_conv_list[j](out) + down_out[self.layers - j - 1]",
                            "BinOp"
                        ],
                        [
                            "self.up_dense_list[j](out)",
                            "Call"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.initial_block(x)",
                            "Call"
                        ],
                        [
                            "self.final_block(out)",
                            "Call"
                        ],
                        [
                            "self.final(out)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "self.down_module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_169": {
                "variable": {
                    "value": "self.down_conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_177": {
                "variable": {
                    "value": "self.up_conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_178": {
                "variable": {
                    "value": "self.up_dense_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_230": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_238": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.drop(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.inconv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.down_module_list[i](out)",
                            "Call"
                        ],
                        [
                            "self.down_conv_list[i](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bottom(out)",
                            "Call"
                        ],
                        [
                            "self.up_conv_list[j](out) + down_out[self.layers - j - 1]",
                            "BinOp"
                        ],
                        [
                            "self.up_dense_list[j](out)",
                            "Call"
                        ],
                        [
                            "self.inconv(x[-1])",
                            "Call"
                        ],
                        [
                            "out + x[-i - 1]",
                            "BinOp"
                        ],
                        [
                            "self.down_module_list[i](out)",
                            "Call"
                        ],
                        [
                            "self.down_conv_list[i](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bottom(out)",
                            "Call"
                        ],
                        [
                            "self.up_conv_list[j](out) + down_out[self.layers - j - 1]",
                            "BinOp"
                        ],
                        [
                            "self.up_dense_list[j](out)",
                            "Call"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.initial_block(x)",
                            "Call"
                        ],
                        [
                            "self.final_block(out)",
                            "Call"
                        ],
                        [
                            "self.final(out)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_49": {
                "input": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out1 + x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_134": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.drop(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.inconv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.down_module_list[i](out)",
                            "Call"
                        ],
                        [
                            "self.down_conv_list[i](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bottom(out)",
                            "Call"
                        ],
                        [
                            "self.up_conv_list[j](out) + down_out[self.layers - j - 1]",
                            "BinOp"
                        ],
                        [
                            "self.up_dense_list[j](out)",
                            "Call"
                        ],
                        [
                            "self.inconv(x[-1])",
                            "Call"
                        ],
                        [
                            "out + x[-i - 1]",
                            "BinOp"
                        ],
                        [
                            "self.down_module_list[i](out)",
                            "Call"
                        ],
                        [
                            "self.down_conv_list[i](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bottom(out)",
                            "Call"
                        ],
                        [
                            "self.up_conv_list[j](out) + down_out[self.layers - j - 1]",
                            "BinOp"
                        ],
                        [
                            "self.up_dense_list[j](out)",
                            "Call"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.initial_block(x)",
                            "Call"
                        ],
                        [
                            "self.final_block(out)",
                            "Call"
                        ],
                        [
                            "self.final(out)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_196": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.drop(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.inconv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.down_module_list[i](out)",
                            "Call"
                        ],
                        [
                            "self.down_conv_list[i](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bottom(out)",
                            "Call"
                        ],
                        [
                            "self.up_conv_list[j](out) + down_out[self.layers - j - 1]",
                            "BinOp"
                        ],
                        [
                            "self.up_dense_list[j](out)",
                            "Call"
                        ],
                        [
                            "self.inconv(x[-1])",
                            "Call"
                        ],
                        [
                            "out + x[-i - 1]",
                            "BinOp"
                        ],
                        [
                            "self.down_module_list[i](out)",
                            "Call"
                        ],
                        [
                            "self.down_conv_list[i](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.bottom(out)",
                            "Call"
                        ],
                        [
                            "self.up_conv_list[j](out) + down_out[self.layers - j - 1]",
                            "BinOp"
                        ],
                        [
                            "self.up_dense_list[j](out)",
                            "Call"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.initial_block(x)",
                            "Call"
                        ],
                        [
                            "self.final_block(out)",
                            "Call"
                        ],
                        [
                            "self.final(out)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "planes * 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2 ** (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_119": {
                "in_channels": {
                    "value": "planes * 2 ** (layers - i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2 ** max(0, layers - i - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "in_channels": {
                    "value": "planes * 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2 ** (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_180": {
                "in_channels": {
                    "value": "planes * 2 ** (layers - i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2 ** max(0, layers - i - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/UNetFamily.py": {
        "torch": {
            "randn_506": {
                "variable": {
                    "value": "in1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_514": {
                "variable": {
                    "value": "in1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 1, 48, 48)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_in, ch_out, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_out, ch_out, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.RCNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Recurrent_block(ch_out, t=t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.Conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(ch_in, ch_out, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.W_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(F_g, F_int, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(F_l, F_int, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(F_int, 1, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_128": {
                "variable": {
                    "value": "self.Maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.Conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x4, d5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3, d4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2, d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_194": {
                "variable": {
                    "value": "self.Maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_195": {
                "variable": {
                    "value": "self.Upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_219": {
                "variable": {
                    "value": "self.Conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x4, d5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3, d4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2, d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_255": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_264": {
                "variable": {
                    "value": "self.Maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_288": {
                "variable": {
                    "value": "self.Conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x4, d5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3, d4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2, d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_328": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_336": {
                "variable": {
                    "value": "self.Maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_337": {
                "variable": {
                    "value": "self.Upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_365": {
                "variable": {
                    "value": "self.Conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_386": {
                "variable": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x4, d5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3, d4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2, d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_401": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_405": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.Conv_1x1(d2)",
                            "Call"
                        ],
                        [
                            "F.softmax(d1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_414": {
                "variable": {
                    "value": "self.conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self.bn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_437": {
                "variable": {
                    "value": "self.down_sample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_447": {
                "variable": {
                    "value": "self.upsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_448": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_449": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_453": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_454": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(self.conv(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_462": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_480": {
                "variable": {
                    "value": "self.outconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_499": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x + x1)",
                            "Call"
                        ],
                        [
                            "self.RCNN(x)",
                            "Call"
                        ],
                        [
                            "self.W_x(x)",
                            "Call"
                        ],
                        [
                            "self.Conv1(x)",
                            "Call"
                        ],
                        [
                            "self.RRCNN1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv1(x)",
                            "Call"
                        ],
                        [
                            "self.Att2(g=d2, x=x1)",
                            "Call"
                        ],
                        [
                            "self.RRCNN1(x)",
                            "Call"
                        ],
                        [
                            "self.Att2(g=d2, x=x1)",
                            "Call"
                        ],
                        [
                            "self.outconv(x)",
                            "Call"
                        ],
                        [
                            "F.softmax(x1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_33": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "ch_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ],
                        [
                            "ch_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ],
                        [
                            "ch_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "F_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_g",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_int",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "num_features": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_int",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "F_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_l",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_int",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "num_features": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_int",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "F_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F_int",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_417": {
                "in_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_418": {
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "filters",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_428": {
                "input": {
                    "value": "self.bn_list[i](temp_out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/nn/attention.py": {
        "torch": {
            "ones_41": {
                "variable": {
                    "value": "in_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_7": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_8": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes // ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes // ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_14": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3 if kernel_size == 7 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_30": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_33": {
                "variable": {
                    "value": "avg_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_34": {
                "variable": {
                    "value": "(max_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[avg_out, max_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_118": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "join(save_path, 'best_model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TestDataset(self.patches_imgs_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_52": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(net.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.N_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.outf + '%s/latest_model.pth' % args.pre_trained",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_33": {
                "*size": {
                    "value": "(1, 1, 48, 48)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'net': net.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "join(save_path, 'latest_model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'net': net.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "join(save_path, 'best_model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}