{
    "scripts/convert_albert_from_original_tf_to_uer.py": {
        "tensorflow": {
            "NewCheckpointReader_24": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_36": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "zeros_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, col_dim], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "zeros_var",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "shape": {
                    "value": "[1, col_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_39": {
                "values": {
                    "value": "[sess.run(zeros_var), torch_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_40": {
                "variable": {
                    "value": "input_model[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_96": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_albert_from_uer_to_original_tf.py": {
        "tensorflow": {
            "get_variable_16": {
                "variable": {
                    "value": "tf_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_32": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_100": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "set_session_33": {
                "session": {
                    "value": "session",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "load_30": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_bert_from_original_tf_to_uer.py": {
        "tensorflow": {
            "NewCheckpointReader_30": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_42": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "zeros_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, col_dim], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "zeros_var",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "shape": {
                    "value": "[1, col_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_45": {
                "values": {
                    "value": "[sess.run(zeros_var), torch_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Tensor_46": {
                "variable": {
                    "value": "input_model[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_101": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_bert_from_uer_to_original_tf.py": {
        "tensorflow": {
            "get_variable_17": {
                "variable": {
                    "value": "tf_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_37": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_104": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "set_session_38": {
                "session": {
                    "value": "session",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_35": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_c3.py": {
        "torch": {
            "device_145": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_170": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MultipleChoice(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_205": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_207": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_58": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_chid.py": {
        "torch": {
            "device_167": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_192": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MultipleChoice(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_classifier.py": {
        "torch": {
            "zeros_231": {
                "variable": {
                    "value": "confusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.labels_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.labels_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_296": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.output_layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.output_layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.labels_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_53": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_layer_1(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_183": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "train_model(args, model, optimizer, scheduler, src_batch, tgt_batch, seg_batch, soft_tgt_batch)",
                            "Call"
                        ],
                        [
                            "self.soft_alpha * nn.MSELoss()(logits, soft_tgt) + (1 - self.soft_alpha) * nn.NLLLoss()(nn.LogSoftmax(dim=-1)(logits), tgt.view(-1))",
                            "BinOp"
                        ],
                        [
                            "nn.NLLLoss()(nn.LogSoftmax(dim=-1)(logits), tgt.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_241": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.Softmax(dim=1)(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_320": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Classifier(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_195": {
                "variable": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(loss_adv)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_245": {
                "input": {
                    "value": "pred == gold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_count_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_83": {
                "f": {
                    "value": "args.pretrained_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_212": {
                "variable": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(loss_adv)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_241": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_356": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_358": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_60": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MSELoss_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_58": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_classifier_cv.py": {
        "torch": {
            "Softmax_147": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_classifier_deepspeed.py": {
        "torch": {
            "device_177": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "result_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evaluate(args, read_dataset(args, args.dev_path, split=False))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_92": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "train_model(args, model, optimizer, scheduler, src_batch, tgt_batch, seg_batch, soft_tgt_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "result_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "result[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "broadcast_198": {
                "tensor": {
                    "value": "result_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(result).to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(result[0]).to(args.device)",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "async_op": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_classifier_grid.py": {
        "torch": {
            "device_73": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_85": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Classifier(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_classifier_mt.py": {
        "torch": {
            "device_133": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.output_layers_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(args.hidden_size, args.hidden_size) for _ in args.labels_num_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_35": {
                "variable": {
                    "value": "self.output_layers_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(args.hidden_size, labels_num) for labels_num in args.labels_num_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_layers_1[self.dataset_id](output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_168": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MultitaskClassifier(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "labels_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "NLLLoss_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_55": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_classifier_multi_label.py": {
        "torch": {
            "tensor_165": {
                "variable": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sample[1] for sample in dataset]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_220": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.output_layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.output_layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.labels_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_layer_1(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "train_model(args, model, optimizer, scheduler, src_batch, tgt_batch, seg_batch)",
                            "Call"
                        ],
                        [
                            "nn.BCELoss()(probs_batch, tgt)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_244": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MultilabelClassifier(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sample[1] for sample in trainset]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_136": {
                "variable": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(loss_adv)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_153": {
                "variable": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(loss_adv)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_278": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_280": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_classifier_prompt.py": {
        "torch": {
            "zeros_178": {
                "variable": {
                    "value": "confusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_227": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "mean_128": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "train_model(args, model, optimizer, scheduler, src_batch, tgt_batch, seg_batch)",
                            "Call"
                        ],
                        [
                            "self.target.criterion(prob, tgt_mlm)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_266": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ClozeTest(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_192": {
                "input": {
                    "value": "pred == gold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_count_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_297": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_299": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_classifier_siamese.py": {
        "torch": {
            "zeros_204": {
                "variable": {
                    "value": "confusion",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.labels_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.labels_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_273": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * args.stream_0['hidden_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.labels_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vectors_concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_179": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "train_model(args, model, optimizer, scheduler, src_batch, tgt_batch, seg_batch)",
                            "Call"
                        ],
                        [
                            "nn.NLLLoss()(nn.LogSoftmax(dim=-1)(logits), tgt.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_223": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nn.Softmax(dim=1)(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_298": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SiameseClassifier(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_227": {
                "input": {
                    "value": "pred == gold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_count_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_62": {
                "input": {
                    "value": "features_0 - features_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_223": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_330": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_332": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_71": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_cmrc.py": {
        "torch": {
            "device_376": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_157": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "train(args, model, optimizer, scheduler, src_batch, seg_batch, start_position_batch, end_position_batch)",
                            "Call"
                        ],
                        [
                            "(start_loss + end_loss) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataParallel_403": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MachineReadingComprehension(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_273": {
                "input": {
                    "value": "end_scores[start_pred:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_313": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_314": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_436": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_46": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LogSoftmax_47": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_272": {
                "input": {
                    "value": "start_scores[question_length + 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_402": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_437": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_439": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_dbqa.py": {
        "torch": {
            "device_167": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_192": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Classifier(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_105": {
                "variable": {
                    "value": "logits_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits_all, logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_225": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_227": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_ner.py": {
        "torch": {
            "device_274": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.labels_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_143": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "train(args, model, optimizer, scheduler, src_batch, tgt_batch, seg_batch)",
                            "Call"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ],
                        [
                            "-self.crf(F.log_softmax(logits, 2), tgt, mask=tgt_mask, reduction='mean')",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "DataParallel_297": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NerTagger(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.crf.decode(logits, mask=tgt_mask)",
                            "Call"
                        ],
                        [
                            "logits.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(pred).contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.labels_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "numerator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_mask * numerator",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_329": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_331": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "nn.LogSoftmax(dim=-1)(logits) * one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "tgt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "seg.type(torch.uint8)",
                            "Call"
                        ],
                        [
                            "seg.contiguous().view(-1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_68": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.output_layer(output)",
                            "Call"
                        ],
                        [
                            "logits.contiguous().view(-1, self.labels_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_79": {
                "type": {
                    "value": "tgt.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_81": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_regression.py": {
        "torch": {
            "device_133": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.output_layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.output_layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_40": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_layer_1(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_157": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Regression(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_189": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_191": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_simcse.py": {
        "torch": {
            "device_187": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(seg, dim=-1).type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataParallel_212": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SimCSE(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_64": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory_bank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "memory_bank * seg",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_65": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.sum(memory_bank, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(features, torch.sum(seg, dim=1))",
                            "Call"
                        ],
                        [
                            "memory_bank[torch.arange(memory_bank.shape[0]), torch.squeeze(torch.sum(seg, dim=1).type(torch.int64) - 1), :]",
                            "Subscript"
                        ],
                        [
                            "torch.max(memory_bank + (seg - 1) * sys.maxsize, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "memory_bank[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sum(seg, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_155": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / x.norm(dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "y.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_242": {
                "variable": {
                    "value": "tgt_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "similarity_matrix.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "similarity_matrix.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(seg, dim=-1).type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_67": {
                "start": {
                    "value": "memory_bank.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "input": {
                    "value": "torch.sum(seg, dim=1).type(torch.int64) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_69": {
                "input": {
                    "value": "memory_bank + (seg - 1) * sys.maxsize",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(seg, dim=-1).type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "finetune/run_text2text.py": {
        "torch": {
            "zeros_185": {
                "variable": {
                    "value": "confusion_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "labels_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "labels_num + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "labels_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "labels_num + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_235": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "mean_129": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "train_model(args, model, optimizer, scheduler, src_batch, tgt_in_batch, tgt_out_batch, seg_batch)",
                            "Call"
                        ],
                        [
                            "self.target(hidden, tgt_out, seg)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "tgt_in_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_in_batch.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_260": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Text2text(args)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_171": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[:, -1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_171": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "tgt_in_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt_in_batch, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_291": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_293": {
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "inference/run_c3_infer.py": {
        "torch": {
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_49": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MultipleChoice(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args.load_model_path)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_83": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference/run_chid_infer.py": {
        "torch": {
            "device_74": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MultipleChoice(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args.load_model_path)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_107": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference/run_classifier_cv_infer.py": {
        "torch": {
            "device_88": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_92": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Classifier(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, load_model_name + '-fold_' + str(fold_id) + '.' + load_model_suffix)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_101": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference/run_classifier_deepspeed_infer.py": {
        "torch": {
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_86": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_88": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "inference/run_classifier_infer.py": {
        "torch": {
            "device_95": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_99": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Classifier(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args.load_model_path)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_126": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_128": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "inference/run_classifier_multi_label_infer.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_56": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MultilabelClassifier(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args.load_model_path)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference/run_classifier_siamese_infer.py": {
        "torch": {
            "device_103": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SiameseClassifier(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args.load_model_path)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_144": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_146": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "inference/run_cmrc_infer.py": {
        "torch": {
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_50": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MachineReadingComprehension(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args.load_model_path)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_79": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_80": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "inference/run_ner_infer.py": {
        "torch": {
            "device_98": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_102": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NerTagger(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args.load_model_path)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference/run_regression_infer.py": {
        "torch": {
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_43": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Regression(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args.load_model_path)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference/run_text2text_infer.py": {
        "torch": {
            "device_75": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_81": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Text2text(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args.load_model_path)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "tgt_in_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "src_batch.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_113": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[:, -1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_113": {
                "variable": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "tgt_in_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt_in_batch, next_tokens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pretrain.py": {
        "torch": {
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/average_models.py": {
        "torch": {
            "load_12": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_31": {
                "obj": {
                    "value": "avg_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "average(args.model_list_path)",
                            "Call"
                        ],
                        [
                            "model",
                            "Name"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/cloze_test.py": {
        "torch": {
            "device_120": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_124": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ClozeTest(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args.load_model_path)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_92": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_albert_from_huggingface_to_uer.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "output_model[embedding.segment_embedding.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([[0] * input_model['albert.embeddings.token_type_embeddings.weight'].size()[1]]), input_model['albert.embeddings.token_type_embeddings.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_78": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_albert_from_uer_to_huggingface.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_76": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_bart_from_huggingface_to_uer.py": {
        "torch": {
            "load_108": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_bart_from_uer_to_huggingface.py": {
        "torch": {
            "load_108": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "output_model[model.encoder.embed_positions.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(2, emb_size), input_model['embedding.position_embedding.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "output_model[model.decoder.embed_positions.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(2, emb_size), input_model['tgt_embedding.position_embedding.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_129": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "emb_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_model['embedding.word_embedding.weight'].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_116": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "emb_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_model['embedding.word_embedding.weight'].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/convert_bert_extractive_qa_from_huggingface_to_uer.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "output_model[embedding.segment_embedding.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([[0] * input_model['bert.embeddings.token_type_embeddings.weight'].size()[1]]), input_model['bert.embeddings.token_type_embeddings.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_39": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_bert_extractive_qa_from_uer_to_huggingface.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_37": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_bert_from_huggingface_to_uer.py": {
        "torch": {
            "load_54": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "output_model[embedding.segment_embedding.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([[0] * input_model['bert.embeddings.token_type_embeddings.weight'].size()[1]]), input_model['bert.embeddings.token_type_embeddings.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_bert_from_uer_to_huggingface.py": {
        "torch": {
            "load_54": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_78": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_bert_text_classification_from_huggingface_to_uer.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "output_model[embedding.segment_embedding.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([[0] * input_model['bert.embeddings.token_type_embeddings.weight'].size()[1]]), input_model['bert.embeddings.token_type_embeddings.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_42": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_bert_text_classification_from_uer_to_huggingface.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_40": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_bert_token_classification_from_huggingface_to_uer.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "output_model[embedding.segment_embedding.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([[0] * input_model['bert.embeddings.token_type_embeddings.weight'].size()[1]]), input_model['bert.embeddings.token_type_embeddings.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_41": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_bert_token_classification_from_uer_to_huggingface.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_39": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_gpt2_from_huggingface_to_uer.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_59": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_gpt2_from_uer_to_huggingface.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tril_26": {
                "variable": {
                    "value": "output_model[transformer.h. + str(i) + .attn.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(max_position, max_position)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "output_model[transformer.h. + str(i) + .attn.c_attn.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_33": {
                "variable": {
                    "value": "output_model[transformer.h. + str(i) + .attn.c_attn.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "output_model[transformer.h. + str(i) + .attn.c_attn.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_26": {
                "*size": {
                    "value": "max_position",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_model['embedding.position_embedding.weight'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_position",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_model['embedding.position_embedding.weight'].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/convert_pegasus_from_huggingface_to_uer.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_40": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_pegasus_from_uer_to_huggingface.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_41": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_sbert_from_huggingface_to_uer.py": {
        "torch": {
            "load_53": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "output_model[embedding.embedding_ + str(i) + .segment_embedding.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([[0] * input_model['embeddings.token_type_embeddings.weight'].size()[1]]), input_model['embeddings.token_type_embeddings.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_71": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_sbert_from_uer_to_huggingface.py": {
        "torch": {
            "load_52": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_t5_from_huggingface_to_uer.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_102": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_t5_from_uer_to_huggingface.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_104": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/convert_xlmroberta_from_huggingface_to_uer.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "output_model[embedding.position_embedding.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_model['roberta.embeddings.position_embeddings.weight'][2:], torch.zeros(2, emb_size))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "output_model[embedding.segment_embedding.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor(torch.zeros(2, emb_size)), input_model['roberta.embeddings.token_type_embeddings.weight'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "emb_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_model['roberta.embeddings.word_embeddings.weight'].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "emb_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_model['roberta.embeddings.word_embeddings.weight'].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/convert_xlmroberta_from_uer_to_huggingface.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "input_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "output_model[roberta.embeddings.position_embeddings.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(2, emb_size), input_model['embedding.position_embedding.weight'][:-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "output_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "emb_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_model['embedding.word_embedding.weight'].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/dynamic_vocab_adapter.py": {
        "torch": {
            "tensor_52": {
                "variable": {
                    "value": "new_model[embedding_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "new_embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.normal(0, 0.02, [len(new_vocab), old_embedding.shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "old_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.old_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "new_model[softmax_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "new_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.normal(0, 0.02, [len(new_vocab), old_softmax.shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "new_model[softmax_bias_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "new_softmax_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.normal(0, 0.02, [len(new_vocab)])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "new_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adapter(old_model, old_vocab, new_vocab)",
                            "Call"
                        ],
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.new_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/extract_embeddings.py": {
        "torch": {
            "load_42": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/extract_features.py": {
        "torch": {
            "device_140": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "feature_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_vectors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feature_vectors, 0)",
                            "Call"
                        ],
                        [
                            "whitening(feature_vectors, args.whitening_size, pt=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_144": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "FeatureExtractor(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args.load_model_path)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_166": {
                "obj": {
                    "value": "feature_vectors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(feature_vectors, 0)",
                            "Call"
                        ],
                        [
                            "whitening(feature_vectors, args.whitening_size, pt=True)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.prediction_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "vecs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._format_vecs_to_np(vecs)",
                            "Call"
                        ],
                        [
                            "self._transform(vecs, n_components)",
                            "Call"
                        ],
                        [
                            "self._normalize(vecs) if normal else vecs",
                            "IfExp"
                        ],
                        [
                            "torch.tensor(vecs) if pt else vecs",
                            "IfExp"
                        ],
                        [
                            "self._format_vecs_to_np(vecs)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_110": {
                "obj": {
                    "value": "vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vecs",
                            "Name"
                        ],
                        [
                            "np.array(vec)",
                            "Call"
                        ],
                        [
                            "vec.detach().numpy()",
                            "Call"
                        ],
                        [
                            "vec",
                            "Name"
                        ]
                    ]
                }
            },
            "device_count_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_lm.py": {
        "torch": {
            "sort_46": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_47": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_99": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "src_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_tensor, next_token.view(1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "seg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seg_tensor, torch.tensor([[1]])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "input": {
                    "value": "sorted_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "input": {
                    "value": "filtered_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(next_token_logits, args.top_k, args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_42": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(top_k, logits.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_102": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_lm_deepspeed.py": {
        "torch": {
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_68": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "src_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_tensor, next_token.view(1, 1).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "seg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seg_tensor, torch.tensor([[1]]).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "input": {
                    "value": "filtered_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(next_token_logits, args.top_k, args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_seq2seq.py": {
        "torch": {
            "multinomial_91": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "tgt_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt_tensor, next_token.view(1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "input": {
                    "value": "filtered_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(next_token_logits, args.top_k, args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_seq2seq_deepspeed.py": {
        "torch": {
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_75": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(filtered_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "tgt_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt_tensor, next_token.view(1, 1).to(device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "input": {
                    "value": "filtered_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(next_token_logits, args.top_k, args.top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/topn_words_dep.py": {
        "torch": {
            "load_70": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_76": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SequenceEncoder(args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cosine_similarity_124": {
                "variable": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "torch.FloatTensor(target_embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "torch.FloatTensor(cand_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_127": {
                "variable": {
                    "value": "sorted_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.cosine_similarity(torch.FloatTensor(target_embedding), torch.FloatTensor(cand_embeddings))",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/topn_words_indep.py": {
        "torch": {
            "load_41": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cosine_similarity_52": {
                "variable": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "target_embedding.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pretrained_model['embedding.word_embedding.weight']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argsort_53": {
                "variable": {
                    "value": "sorted_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.cosine_similarity(target_embedding.view(1, -1), embedding)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "uer/decoders/transformer_decoder.py": {
        "torch": {
            "ModuleList_19": {
                "variable": {
                    "value": "self.transformer_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(args) for _ in range(self.layers_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_59": {
                "variable": {
                    "value": "mask_decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "tgt_seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "emb.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tril_60": {
                "variable": {
                    "value": "mask_decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_decoder",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(tgt_seq_length, tgt_seq_length, device=emb.device)",
                            "Call"
                        ],
                        [
                            "torch.tril(mask_decoder)",
                            "Call"
                        ],
                        [
                            "(1.0 - mask_decoder) * -10000",
                            "BinOp"
                        ],
                        [
                            "mask_decoder.repeat(batch_size, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "uer/embeddings/dual_embedding.py": {
        "torch": {
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "uer/embeddings/word_embedding.py": {
        "torch": {
            "Dropout_13": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_14": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "uer/embeddings/wordpos_embedding.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "self.position_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.max_seq_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_28": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "word_emb.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_28": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "uer/embeddings/wordposseg_embedding.py": {
        "torch": {
            "Embedding_14": {
                "variable": {
                    "value": "self.segment_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_26": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "word_emb.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_26": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "uer/embeddings/wordsinusoidalpos_embedding.py": {
        "torch": {
            "zeros_21": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_seq_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_22": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.max_seq_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_22": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_23": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, args.emb_size, 2, dtype=torch.float) * -(math.log(10000.0) / args.emb_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_29": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_30": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_25": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "uer/encoders/cnn_encoder.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(args.kernel_size, args.emb_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.gate_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(args.kernel_size, args.emb_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.conv_b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, args.hidden_size, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.gate_b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, args.hidden_size, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_23": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(args.hidden_size, args.hidden_size, (args.kernel_size, 1)) for _ in range(args.layers_num - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(args.hidden_size, args.hidden_size, (args.kernel_size, 1)) for _ in range(args.layers_num - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_36": {
                "variable": {
                    "value": "self.conv_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "(nn.Parameter(torch.randn(1, args.hidden_size, 1, 1)) for _ in range(args.layers_num - 1))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "ParameterList_40": {
                "variable": {
                    "value": "self.gate_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "(nn.Parameter(torch.randn(1, args.hidden_size, 1, 1)) for _ in range(args.layers_num - 1))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, self.kernel_size - 1, self.emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, self.hidden_size, self.kernel_size - 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_20": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_21": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "input": {
                    "value": "gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gate_1(emb)",
                            "Call"
                        ],
                        [
                            "gate + self.gate_b[i].repeat(1, 1, seq_length, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(args.kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(args.kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "data": {
                    "value": "torch.randn(1, args.hidden_size, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "data": {
                    "value": "torch.randn(1, args.hidden_size, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "input": {
                    "value": "gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gate_1(emb)",
                            "Call"
                        ],
                        [
                            "gate + self.gate_b[i].repeat(1, 1, seq_length, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_37": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_41": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "uer/encoders/dual_encoder.py": {
        "torch": {}
    },
    "uer/encoders/rnn_encoder.py": {
        "torch": {
            "RNN_21": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_51": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_74": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RNN_93": {
                "variable": {
                    "value": "self.rnn_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RNN_99": {
                "variable": {
                    "value": "self.rnn_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_136": {
                "variable": {
                    "value": "self.rnn_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_142": {
                "variable": {
                    "value": "self.rnn_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_160": {
                "variable": {
                    "value": "self.rnn_forward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_166": {
                "variable": {
                    "value": "self.rnn_backward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "[output_forward, output_backward]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "*size": {
                    "value": "self.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "*size": {
                    "value": "self.layers_num * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "self.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "*size": {
                    "value": "self.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "self.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "self.layers_num * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "self.layers_num * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "self.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "self.layers_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "uer/encoders/transformer_encoder.py": {
        "torch": {
            "Linear_29": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerLayer(args) for _ in range(self.layers_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_70": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "emb.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tril_71": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(seg > 0).unsqueeze(1).repeat(1, seq_length, 1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "(1.0 - mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "torch.ones(seq_length, seq_length, device=emb.device)",
                            "Call"
                        ],
                        [
                            "torch.tril(mask)",
                            "Call"
                        ],
                        [
                            "(1.0 - mask) * -10000",
                            "BinOp"
                        ],
                        [
                            "mask.repeat(batch_size, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "(mask_a + mask_b + mask_tril >= 2).float()",
                            "Call"
                        ],
                        [
                            "(1.0 - mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_85": {
                "variable": {
                    "value": "mask_tril",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "emb.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tril_86": {
                "variable": {
                    "value": "mask_tril",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_tril",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones(seq_length, seq_length, device=emb.device)",
                            "Call"
                        ],
                        [
                            "torch.tril(mask_tril)",
                            "Call"
                        ],
                        [
                            "mask_tril.repeat(batch_size, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "uer/layers/layer_norm.py": {
        "torch": {
            "Parameter_13": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_13": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_14": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_31": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rsqrt_37": {
                "input": {
                    "value": "variance + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "uer/layers/multi_headed_attn.py": {
        "torch": {
            "ModuleList_20": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_size, self.inner_hidden_size, bias=has_bias) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inner_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_72": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "uer/layers/position_ffn.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feedforward_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_9": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feedforward_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.linear_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feedforward_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feedforward_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feedforward_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "uer/layers/relative_position_embedding.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "self.relative_attention_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "heads_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_81": {
                "variable": {
                    "value": "relative_postion_if_large",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_postion_if_large",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(relative_position.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(relative_postion_if_large, torch.full_like(relative_postion_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_66": {
                "variable": {
                    "value": "relative_position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_position",
                    "type": "Name",
                    "possible_values": [
                        [
                            "memory_position - context_position",
                            "BinOp"
                        ],
                        [
                            "torch.abs(relative_position)",
                            "Call"
                        ],
                        [
                            "-torch.min(relative_position, torch.zeros_like(relative_position))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "where_85": {
                "condition": {
                    "value": "is_small",
                    "type": "Name",
                    "possible_values": [
                        [
                            "relative_position < max_exact",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "relative_position",
                    "type": "Name",
                    "possible_values": [
                        [
                            "memory_position - context_position",
                            "BinOp"
                        ],
                        [
                            "torch.abs(relative_position)",
                            "Call"
                        ],
                        [
                            "-torch.min(relative_position, torch.zeros_like(relative_position))",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "relative_postion_if_large",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(relative_position.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(relative_postion_if_large, torch.full_like(relative_postion_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_30": {
                "start": {
                    "value": "query_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_hidden.size()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_31": {
                "start": {
                    "value": "key_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "decoder_hidden.size()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_82": {
                "input": {
                    "value": "relative_postion_if_large",
                    "type": "Name",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(relative_position.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(relative_postion_if_large, torch.full_like(relative_postion_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "num_buckets - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_68": {
                "input": {
                    "value": "relative_position",
                    "type": "Name",
                    "possible_values": [
                        [
                            "memory_position - context_position",
                            "BinOp"
                        ],
                        [
                            "torch.abs(relative_position)",
                            "Call"
                        ],
                        [
                            "-torch.min(relative_position, torch.zeros_like(relative_position))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "zeros_like_68": {
                "input": {
                    "value": "relative_position",
                    "type": "Name",
                    "possible_values": [
                        [
                            "memory_position - context_position",
                            "BinOp"
                        ],
                        [
                            "torch.abs(relative_position)",
                            "Call"
                        ],
                        [
                            "-torch.min(relative_position, torch.zeros_like(relative_position))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "log_77": {
                "input": {
                    "value": "relative_position.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "uer/layers/transformer.py": {
        "torch": {
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_111": {
                "variable": {
                    "value": "self.dropout_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "uer/model_loader.py": {
        "torch": {
            "load_9": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_11": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "uer/model_saver.py": {
        "torch": {
            "save_9": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_11": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "uer/models/model.py": {
        "torch": {}
    },
    "uer/targets/cls_target.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.labels_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_18": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "NLLLoss_19": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_33": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_1(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "uer/targets/lm_target.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "args.has_lmtarget_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_17": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "NLLLoss_18": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "output.size(0) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_33": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.argmax(dim=-1).eq(tgt_lm).float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "uer/targets/mlm_target.py": {
        "torch": {
            "LogSoftmax_30": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "NLLLoss_32": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "output_mlm.size(0) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.mlm_linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.mlm_linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.mlm_linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.mlm_linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "correct_mlm",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "correct_mlm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_mlm.argmax(dim=-1).eq(tgt_mlm).float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "uer/targets/sp_target.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.sp_linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.sp_linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogSoftmax_13": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "NLLLoss_14": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_26": {
                "variable": {
                    "value": "output_sp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sp_linear_1(memory_bank[:, 0, :])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "uer/targets/target.py": {
        "torch": {}
    },
    "uer/trainer.py": {
        "torch": {
            "DistributedDataParallel_510": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "build_model(args)",
                            "Call"
                        ],
                        [
                            "load_model(model, args.pretrained_model_path)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[gpu_id], find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[gpu_id]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "uer/utils/act_fun.py": {
        "torch": {
            "relu_14": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_27": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "erf_8": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_11": {
                "input": {
                    "value": "math.sqrt(2.0 / math.pi) * (x + 0.044715 * torch.pow(x, 3.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_11": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "3.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "uer/utils/adversarial.py": {
        "torch": {
            "norm_18": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_47": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_62": {
                "input": {
                    "value": "r",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "param_data - self.emb_backup[param_name]",
                            "BinOp"
                        ],
                        [
                            "epsilon * r / torch.norm(r)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_63": {
                "input": {
                    "value": "r",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "param_data - self.emb_backup[param_name]",
                            "BinOp"
                        ],
                        [
                            "epsilon * r / torch.norm(r)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_19": {
                "input": {
                    "value": "norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.norm(param.grad)",
                            "Call"
                        ],
                        [
                            "torch.norm(param.grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_48": {
                "input": {
                    "value": "norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.norm(param.grad)",
                            "Call"
                        ],
                        [
                            "torch.norm(param.grad)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "uer/utils/dataloader.py": {
        "torch": {}
    },
    "uer/utils/dataset.py": {
        "torch": {}
    },
    "uer/utils/misc.py": {
        "torch": {
            "arange_18": {
                "variable": {
                    "value": "indices[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_24": {
                "variable": {
                    "value": "seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(seg, dim=-1).type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory_bank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "memory_bank * seg",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_28": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.sum(memory_bank, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(features, torch.sum(seg, dim=1))",
                            "Call"
                        ],
                        [
                            "memory_bank[torch.arange(memory_bank.shape[0]), torch.squeeze(torch.sum(seg, dim=1).type(torch.int64) - 1), :]",
                            "Subscript"
                        ],
                        [
                            "torch.max(memory_bank + (seg - 1) * sys.maxsize, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "memory_bank[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.sum(seg, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(seg, dim=-1).type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_30": {
                "start": {
                    "value": "memory_bank.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_30": {
                "input": {
                    "value": "torch.sum(seg, dim=1).type(torch.int64) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_32": {
                "input": {
                    "value": "memory_bank + (seg - 1) * sys.maxsize",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(seg, dim=-1).type(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "uer/utils/optimizers.py": {
        "torch": {
            "LambdaLR_36": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda _: 1",
                    "type": "Lambda",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_59": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_86": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_118": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_151": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_196": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_410": {
                "input": {
                    "value": "r_factor.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "c_factor.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_262": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_264": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_443": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_445": {
                "variable": {
                    "value": "state[exp_avg_sq_row]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_446": {
                "variable": {
                    "value": "state[exp_avg_sq_col]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-2] + grad_shape[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_448": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "uer/utils/seed.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_11": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}