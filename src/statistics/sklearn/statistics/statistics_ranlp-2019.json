{
    "src/classifier/sklearn/pipelines.py": {
        "FunctionTransformer_25": {
            "func": "lambda x: x[column_name].tolist()",
            "validate": "False"
        },
        "FeatureUnion_35": {
            "transformer_list": "[('category', Pipeline([('selector', get_column('media_cat')), ('vect', DictVectorizer())])), ('numerical', Pipeline([('selector', get_column('media_num')), ('vect', DictVectorizer()), ('norm', Normalizer())]))]"
        },
        "Pipeline_47": {
            "steps": "[('selector', get_column('title')), ('vect', TfidfVectorizer(stop_words=bg_stopwords)), ('dim_red', TruncatedSVD(15, random_state=0)), ('norm', Normalizer())]"
        },
        "Pipeline_54": {
            "steps": "[('selector', get_column('text')), ('vect', TfidfVectorizer(stop_words=bg_stopwords)), ('dim_red', TruncatedSVD(200, random_state=0)), ('norm', Normalizer())]"
        },
        "Pipeline_82": {
            "steps": "[('feats', FeatureUnion(feat_pipes)), ('oversampler', oversampler), ('clf', classifier)]"
        },
        "Pipeline_88": {
            "steps": "[('feats', FeatureUnion(feat_pipes)), ('clf', classifier)]"
        },
        "Pipeline_30": {
            "steps": "[('selector', get_column(name))]"
        },
        "Pipeline_36": {
            "steps": "[('selector', get_column('media_cat')), ('vect', DictVectorizer())]"
        },
        "Pipeline_40": {
            "steps": "[('selector', get_column('media_num')), ('vect', DictVectorizer()), ('norm', Normalizer())]"
        },
        "TfidfVectorizer_49": {
            "stop_words": "bg_stopwords"
        },
        "TruncatedSVD_50": {
            "n_components": "15",
            "random_state": "0"
        },
        "TfidfVectorizer_56": {
            "stop_words": "bg_stopwords"
        },
        "TruncatedSVD_57": {
            "n_components": "200",
            "random_state": "0"
        },
        "FeatureUnion_83": {
            "transformer_list": "feat_pipes"
        },
        "FeatureUnion_89": {
            "transformer_list": "feat_pipes"
        }
    },
    "src/evaluation/compare.py": {},
    "src/evaluation/confusion_matrix.py": {},
    "src/experiments/logistic_regression/feature_combination.py": {
        "LogisticRegression_44": {}
    },
    "src/experiments/logistic_regression/feature_comparison.py": {
        "LogisticRegression_19": {
            "C": "0.05",
            "random_state": "0",
            "multi_class": "auto",
            "solver": "liblinear",
            "max_iter": "20000"
        }
    },
    "src/experiments/logistic_regression/meta_predictions_comparison.py": {
        "LogisticRegression_20": {
            "C": "1.5",
            "random_state": "0",
            "multi_class": "auto",
            "solver": "liblinear",
            "max_iter": "20000"
        }
    },
    "src/experiments/neural_network/feature_comparison.py": {},
    "src/experiments/oversampling/fine_tuning.py": {
        "GridSearchCV_68": {
            "estimator": "model",
            "param_grid": "param_grid",
            "scoring": "accuracy",
            "cv": "5",
            "error_score": "-1",
            "verbose": "10000",
            "n_jobs": "-1",
            "iid": "False",
            "return_train_score": "True"
        },
        "LogisticRegression_60": {
            "random_state": "0",
            "multi_class": "auto",
            "max_iter": "1000"
        }
    },
    "src/experiments/oversampling/oversampling.py": {
        "LogisticRegression_17": {
            "C": "1.5",
            "tol": "0.01",
            "random_state": "0",
            "multi_class": "auto",
            "solver": "liblinear",
            "max_iter": "20000"
        }
    },
    "src/experiments/save_predictions.py": {
        "LogisticRegression_17": {
            "C": "0.05",
            "random_state": "0",
            "multi_class": "auto",
            "solver": "liblinear",
            "max_iter": "20000"
        }
    },
    "src/experiments/save_tuned_predictions.py": {
        "LogisticRegression_16": {},
        "GridSearchCV_46": {
            "estimator": "model",
            "param_grid": "param_grid",
            "scoring": "accuracy",
            "cv": "5",
            "error_score": "-1",
            "verbose": "1",
            "n_jobs": "-1",
            "iid": "False",
            "return_train_score": "True"
        }
    }
}