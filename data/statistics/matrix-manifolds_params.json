{
    "graphembed/experiments/plots/sne_vs_sste.py": {
        "sklearn": {
            "shuffle_40": {
                "variable": {
                    "value": "(xs, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "args.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "as_tensor_51": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_star_data(200)",
                            "Call"
                        ],
                        [
                            "gen_star_data(200)",
                            "Call"
                        ],
                        [
                            "shuffle(xs, labels, random_state=args.random_state)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(xs)",
                            "Call"
                        ],
                        [
                            "xs.to('cuda')",
                            "Call"
                        ],
                        [
                            "np.ndarray((len(means) * n, 2))",
                            "Call"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_52": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_star_data(200)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(ys)",
                            "Call"
                        ],
                        [
                            "ys.to('cuda')",
                            "Call"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "dxdy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[dx, dy]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "xs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/tf_test_eigh.py": {
        "tensorflow": {
            "Session_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matrix_transpose_8": {
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym(tf.random_uniform(shape=(n, 2, 2)))",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eigh_17": {
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym(tf.random_uniform(shape=(n, 2, 2)))",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "analysis/plot_ricci_curv.py": {
        "torch": {
            "manual_seed_142": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/diff_inconsistency.py": {
        "torch": {
            "randn_3": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_4": {
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_22": {
                "input": {
                    "value": "mat.grad - inv_mat",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_23": {
                "input": {
                    "value": "mat_clone.grad - inv_mat",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/eig_derivative.py": {
        "torch": {
            "gradcheck_27": {
                "func": {
                    "value": "eig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EigDiff.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "geoopt.manifolds.spd.multisym(torch.rand(3, 3, dtype=torch.float64, requires_grad=True))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "symeig_10": {
                "variable": {
                    "value": "(ws, vs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "geoopt.manifolds.spd.multisym(torch.rand(3, 3, dtype=torch.float64, requires_grad=True))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_26": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "triu_19": {
                "input": {
                    "value": "grad_x.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_17": {
                "equation": {
                    "value": "ij,j,kj->ik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.symeig(x, eigenvectors=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/embed_graph_torch.py": {
        "torch": {
            "gradcheck_95": {
                "func": {
                    "value": "manifold_sq_pdists_stein",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PairwiseSteinDivergence.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "torch.as_tensor([[[1.0, 0.0], [0.0, 1.0]], [[0.5, 0.0], [0.0, 0.5]]], dtype=torch.float64).requires_grad_()",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_156": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "multitrace(Y.matrix_power(2)) / 6 + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_indices_184": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "g_pdists.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "col": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "g_pdists.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_185": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "args.manifold_dim",
                            "Attribute"
                        ],
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "X.new(d, d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_189": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(n, d, d)",
                            "Call"
                        ],
                        [
                            "multisym(X)",
                            "Call"
                        ],
                        [
                            "multisymapply(X, lambda W: W.abs() + 1)",
                            "Call"
                        ],
                        [
                            "geoopt.ManifoldParameter(X_init, manifold=spd)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_210": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "g_pdists.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "args.manifold_dim",
                            "Attribute"
                        ],
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "args.manifold_dim",
                            "Attribute"
                        ],
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_231": {
                "variable": {
                    "value": "g_pdists",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "triu_indices_237": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "g_pdists.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "col": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "g_pdists.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_indices_238": {
                "variable": {
                    "value": "e_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "args.manifold_dim",
                            "Attribute"
                        ],
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "col": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "args.manifold_dim",
                            "Attribute"
                        ],
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_267": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "geoopt.optim.RiemannianSGD([X], lr=0.5)",
                            "Call"
                        ]
                    ]
                },
                "patience": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "args.verbose",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_271": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "triu_indices_54": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "g_pdists.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "col": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ],
                        [
                            "g_pdists.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_57": {
                "variable": {
                    "value": "xpy_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xpy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (x[mask[0]] + x[mask[1]])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cholesky_60": {
                "variable": {
                    "value": "x_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cholesky_solve_84": {
                "variable": {
                    "value": "xpy_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eye_like(xpy_l)",
                    "type": "Call",
                    "possible_values": []
                },
                "input2": {
                    "value": "xpy_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(xpy)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_solve_85": {
                "variable": {
                    "value": "x_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eye_like(x_l)",
                    "type": "Call",
                    "possible_values": []
                },
                "input2": {
                    "value": "x_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_100": {
                "data": {
                    "value": "[[[1.0, 0.0], [0.0, 1.0]], [[0.5, 0.0], [0.0, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "[half_traces + rhs_term, half_traces - rhs_term]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "tensors": {
                    "value": "[eig1, eig2, eig3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_226": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_default_dtype_227": {
                "d": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_334": {
                "obj": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(n, d, d)",
                            "Call"
                        ],
                        [
                            "multisym(X)",
                            "Call"
                        ],
                        [
                            "multisymapply(X, lambda W: W.abs() + 1)",
                            "Call"
                        ],
                        [
                            "geoopt.ManifoldParameter(X_init, manifold=spd)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(writer.get_logdir(), 'x_opt.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(n, n) + x.shape[1:]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "x.new(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "(c, new_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "det_157": {
                "input": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X - q * torch.eye(d, out=X.new(d, d)).expand(n, -1, -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "acos_159": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.det(Y) / (2 * p.pow(3))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "symeig_177": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(n, d, d)",
                            "Call"
                        ],
                        [
                            "multisym(X)",
                            "Call"
                        ],
                        [
                            "multisymapply(X, lambda W: W.abs() + 1)",
                            "Call"
                        ],
                        [
                            "geoopt.ManifoldParameter(X_init, manifold=spd)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "triangular_solve_190": {
                "b": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(d, out=X.new(d, d))",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(X)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_225": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_80": {
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "args.manifold_dim",
                            "Attribute"
                        ],
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "x.new(d, d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_155": {
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "args.manifold_dim",
                            "Attribute"
                        ],
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "X.new(d, d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_161": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(r) / 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_162": {
                "input": {
                    "value": "phi + 2 * math.pi / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/slicing_gradient.py": {
        "torch": {
            "rand_4": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 << 16) - 1",
                            "BinOp"
                        ],
                        [
                            "(1 << 19) - 8",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_13": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 << 16) - 1",
                            "BinOp"
                        ],
                        [
                            "(1 << 19) - 8",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "allclose_10": {
                "input": {
                    "value": "x.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.eye(2, out=x.new(2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_19": {
                "input": {
                    "value": "y.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "y.inverse()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_10": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "x.new(2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_14": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "x.new(2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/torch_test_eigh.py": {
        "torch": {
            "symeig_16": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym(torch.rand(n, 2, 2))",
                            "Call"
                        ],
                        [
                            "a.cuda()",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "symeig_22": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym(torch.rand(n, 2, 2))",
                            "Call"
                        ],
                        [
                            "a.cuda()",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_13": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/agg_angle_ratios.py": {
        "torch": {
            "load_159": {
                "variable": {
                    "value": "emb_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "emb_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(optim_dir, 'best_embedding.pth')",
                            "Call"
                        ],
                        [
                            "emb_file",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_dtype_20": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/agg_diss_grid_results.py": {
        "torch": {
            "set_default_dtype_38": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/agg_grid_results.py": {
        "torch": {
            "load_187": {
                "variable": {
                    "value": "best_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(exp_dir, best_optim, 'best_embedding.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_dtype_56": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/plot_run_grid.py": {
        "torch": {
            "set_default_dtype_35": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/plots/plot_grass_geodesic.py": {
        "torch": {
            "linspace_21": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_points_great_circle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            },
            "linspace_31": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_points_geodesic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                }
            },
            "reshape_31": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/plots/plot_ortho_geodesics.py": {
        "torch": {
            "as_tensor_21": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x @ sl.expm(t * u)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/plots/plot_spd_geodesic.py": {
        "torch": {
            "atan2_18": {
                "variable": {
                    "value": "rad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "us[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "us[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_13": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            },
            "reshape_13": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/plots/plot_synthetics.py": {
        "torch": {
            "set_default_dtype_34": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/products/agg_angle_ratios.py": {
        "torch": {
            "set_default_dtype_15": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/products/agg_grid_results.py": {
        "torch": {
            "load_162": {
                "variable": {
                    "value": "emb_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_dtype_56": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/products/run_prod_grid.py": {
        "torch": {
            "set_default_dtype_32": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_155": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_34": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/random/angle_ratios.py": {
        "torch": {
            "load_32": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(exp_dir, 'xs.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_dtype_13": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/random/compact/euc_baseline.py": {
        "torch": {
            "set_default_dtype_16": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_24": {
                "obj": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Sphere(args.dim + 1).rand_ball(args.num_nodes).mul_(args.radius)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(root_dir, 'xs.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/random/compact/grid.py": {
        "torch": {
            "set_default_dtype_21": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_47": {
                "obj": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "man.rand_uniform(args.num_nodes)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(root_dir, 'xs.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/random/noncomp/grid.py": {
        "torch": {
            "set_default_dtype_24": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_50": {
                "obj": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_from(man)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(root_dir, 'xs.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_77": {
                "input": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eucl_to_tangent_space(man, vs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "man.proju(zeros, us)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "[torch.zeros(len(vs), 1), vs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "len(vs)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/random/old/gen_grid.py": {
        "torch": {
            "set_default_dtype_27": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn(man, args.num_nodes, radius)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_dir, 'xs.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/random/old/gen_man_graph.py": {
        "torch": {
            "as_tensor_100": {
                "variable": {
                    "value": "rs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(num_nodes).mul_(radius)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(rs)",
                            "Call"
                        ],
                        [
                            "rs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_125": {
                "variable": {
                    "value": "rs_cosh",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_126": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(rs_cosh - 1) / (rs_cosh + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rs_cosh, rest]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_139": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_samples",
                            "Method Argument"
                        ],
                        [
                            "num_samples",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_145": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_samples",
                            "Method Argument"
                        ],
                        [
                            "num_samples",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_default_dtype_25": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_40": {
                "obj": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_samples_rs(man, args.num_nodes, args.radius, np.sqrt(args.curvature_r_squared))",
                            "Call"
                        ],
                        [
                            "gen_samples_exp(man, args.num_nodes, args.radius)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_dir, 'xs.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_70": {
                "input": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "from_vec(man, vs)",
                            "Call"
                        ],
                        [
                            "directions * rs.reshape(-1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "man.proju(zeros, us)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_81": {
                "variable": {
                    "value": "rs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_83": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_84": {
                "variable": {
                    "value": "(idx,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "condition": {
                    "value": "probs < rms",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "allclose_132": {
                "input": {
                    "value": "xs_pb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norms * directions",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Lorentz.to_poincare_ball(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sinh_102": {
                "input": {
                    "value": "rs / curv_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_113": {
                "tensors": {
                    "value": "[torch.zeros(len(vs), 1), vs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_96": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "radius",
                            "Method Argument"
                        ],
                        [
                            "radius",
                            "Method Argument"
                        ],
                        [
                            "radius",
                            "Method Argument"
                        ],
                        [
                            "radius",
                            "Method Argument"
                        ],
                        [
                            "radius",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_106": {
                "input": {
                    "value": "rs / curv_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "len(vs)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/random/old/gen_man_graph_mc.py": {
        "torch": {
            "empty_64": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "burnin + num_nodes * take_every",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "*zero.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "stack_182": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_dtype_20": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_29": {
                "obj": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_walk_graph(man, args.num_nodes, args.radius)",
                            "Call"
                        ],
                        [
                            "torch.empty(num_samples, *zero.size())",
                            "Call"
                        ],
                        [
                            "man.to_poincare_ball(xs).mul_(r)",
                            "Call"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_dir, 'xs.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_170": {
                "tensors": {
                    "value": "[y1, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_183": {
                "input": {
                    "value": "-ldot(y, y, keepdim=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/random/old/gen_spd_graph.py": {
        "torch": {
            "empty_72": {
                "variable": {
                    "value": "eigs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "man.n",
                            "Attribute"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_108": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "man.n",
                            "Attribute"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "man.n",
                            "Attribute"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_116": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_samples",
                            "Method Argument"
                        ],
                        [
                            "num_samples",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_122": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_samples",
                            "Method Argument"
                        ],
                        [
                            "num_samples",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r.diagonal(dim1=-2, dim2=-1).sign_()",
                            "Call"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_175": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_dtype_21": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_34": {
                "obj": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_samples_rs(man, args.num_nodes, args.radius)",
                            "Call"
                        ],
                        [
                            "gen_samples2(man, args.num_nodes, args.radius)",
                            "Call"
                        ],
                        [
                            "gen_samples(man, args.num_nodes, args.radius)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_dir, 'xs.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_52": {
                "input": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SymmetricPositiveDefinite.from_vec(vs)",
                            "Call"
                        ],
                        [
                            "gen_ortho(num_nodes, man.n)",
                            "Call"
                        ],
                        [
                            "gen_ortho(num_nodes, n)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "man.proju(zeros, us)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_63": {
                "input": {
                    "value": "man.projx(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tb.hgie(eigs.exp(), us)",
                            "Call"
                        ],
                        [
                            "gen_from_ball(num_nodes, n, radius)",
                            "Call"
                        ],
                        [
                            "tb.hgie(eigs.exp(), us)",
                            "Call"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_80": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ],
                        [
                            "num_nodes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_81": {
                "variable": {
                    "value": "(idx,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "condition": {
                    "value": "probs < rms",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "allclose_93": {
                "input": {
                    "value": "man.projx(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tb.hgie(eigs.exp(), us)",
                            "Call"
                        ],
                        [
                            "gen_from_ball(num_nodes, n, radius)",
                            "Call"
                        ],
                        [
                            "tb.hgie(eigs.exp(), us)",
                            "Call"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_163": {
                "tensors": {
                    "value": "[y1, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_73": {
                "size": {
                    "value": "(1, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-radius / np.sqrt(n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_176": {
                "input": {
                    "value": "-ldot(y, y, keepdim=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/run_grid.py": {
        "torch": {
            "ReduceLROnPlateau_114": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_optim(embedding)",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_default_dtype_46": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_48": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/spd-hyp/embed_hyp2_into_spd2.py": {
        "torch": {
            "Parameter_59": {
                "variable": {
                    "value": "sspd_emb.scales[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1 / curvature_sq / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "row1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "row2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_dtype_38": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_60": {
                "input": {
                    "value": "emb.compute_dists(None)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "sspd_emb.compute_dists(None)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "[row1, row2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_40": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/spd-hyp/embed_hyp_prod_into_spd.py": {
        "torch": {
            "cat_115": {
                "variable": {
                    "value": "row1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "row2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_dtype_34": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "emb.scales[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_117": {
                "tensors": {
                    "value": "[row1, row2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.unsqueeze(-3) for x in xs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_36": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_74": {
                "input": {
                    "value": "hyp_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb.to('cpu').compute_dists(None)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "spd_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spd_emb.compute_dists(None).to('cpu')",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_83": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latest_path_by_basename_numeric_order(pattern)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_130": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs.shape[-3]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "xs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_131": {
                "data": {
                    "value": "siz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs.shape[-2:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "graphembed/experiments/spd_seccurvs.py": {
        "torch": {
            "load_33": {
                "variable": {
                    "value": "emb_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.input, 'best_embedding.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(samples).cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_51": {
                "variable": {
                    "value": "neighs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random.sample(range(n_nodes), n_neighs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/experiments/utils.py": {
        "torch": {
            "manual_seed_120": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "graphembed/graphembed/data/dataset.py": {
        "torch": {}
    },
    "graphembed/graphembed/data/graph.py": {
        "torch": {}
    },
    "graphembed/graphembed/data/preprocess.py": {
        "torch": {
            "exp_15": {
                "input": {
                    "value": "dists / temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/inference/stochastic_neighbors.py": {
        "torch": {
            "empty_14": {
                "variable": {
                    "value": "theta_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nnm1d2_to_n(theta.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "theta.new(n, n - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_18": {
                "variable": {
                    "value": "logz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(n, n - 1, out=theta.new(n, n - 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_18": {
                "variable": {
                    "value": "logz",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_22": {
                "variable": {
                    "value": "margs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(n, n - 1, out=theta.new(n, n - 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/inference/stochastic_trees.py": {
        "torch": {
            "diag_16": {
                "variable": {
                    "value": "L_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L_off.sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_24": {
                "variable": {
                    "value": "(margs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "logz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tb.plogdet(L)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_15": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/linalg/fast.py": {
        "torch": {
            "sqrt_81": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tb.symsqtrace(Y, keepdim=True) / 6",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "row1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, torch.zeros_like(a)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "a.ndim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "row2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "a.ndim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_123": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[..., 0, 1]",
                            "Subscript"
                        ],
                        [
                            "(x11 - b ** 2 + eps).sqrt()",
                            "Call"
                        ],
                        [
                            "(x11 - b ** 2 + eps).sqrt()",
                            "Call"
                        ],
                        [
                            "x[..., 1, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_124": {
                "variable": {
                    "value": "row1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "a.ndim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "row2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-b, a]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "a.ndim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "row1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "a.ndim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "row2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "a.ndim - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row1, row2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "a.ndim - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_148": {
                "variable": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(a ** 2 + b ** 2 - c ** 2 - d ** 2) ** 2 + 4 * (a * c + b * d) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(S2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_156": {
                "variable": {
                    "value": "ss[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (S1 + S2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_157": {
                "variable": {
                    "value": "ss[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (S1 - S2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_70": {
                "tensors": {
                    "value": "[eig1, eig2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_91": {
                "tensors": {
                    "value": "[eig2, eig3, eig1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "[row1, row2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "a.ndim - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_34": {
                "tensors": {
                    "value": "[X[..., 1:, 0], X[..., 1:, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "acos_85": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symdet3x3(Y, keepdim=True) / (2 * p.pow(3) + eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "[row1, row2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "a.ndim - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_80": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "X.new(3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_87": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(r) / 3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_88": {
                "input": {
                    "value": "phi + 2 * math.pi / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_105": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[..., 0, 0]",
                            "Subscript"
                        ],
                        [
                            "x00.sqrt()",
                            "Call"
                        ],
                        [
                            "x00.sqrt()",
                            "Call"
                        ],
                        [
                            "x[..., 0, 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "graphembed/graphembed/linalg/torch_batch.py": {
        "torch": {
            "empty_like_58": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, shape[-1], shape[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_17": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "m": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "x.new(n, m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_34": {
                "equation": {
                    "value": "...ij,...jk,...lk->...il",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_60": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(0, batch_size, cuda_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "min(batch_size, i + cuda_batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_65": {
                "variable": {
                    "value": "acc[indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "upper": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "einsum_79": {
                "equation": {
                    "value": "...ji,...jk->...ik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, shape[-1], shape[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_84": {
                "equation": {
                    "value": "...ij,...kj->...ik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, shape[-1], shape[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_91": {
                "equation": {
                    "value": "...ij,...j,...kj->...ik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cholesky_48": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, shape[-1], shape[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "upper": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cholesky_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, shape[-1], shape[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "upper": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cholesky_solve_187": {
                "input": {
                    "value": "torch.eye(n, out=l.new(n, n))",
                    "type": "Call",
                    "possible_values": []
                },
                "input2": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chol(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_188": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "l.new(n, n)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/manifolds/base.py": {
        "torch": {
            "triu_indices_62": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "col": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/manifolds/euclidean.py": {
        "torch": {
            "randn_55": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.empty_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_51": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_like_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "graphembed/graphembed/manifolds/grassmann.py": {
        "torch": {
            "einsum_52": {
                "variable": {
                    "value": "xxtu",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "...ij,...kj,...kl->...il",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.zero(*shape, out=out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_110": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.empty_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_41": {
                "n": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_44": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "solve_85": {
                "input": {
                    "value": "At",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tb.transpose(y) - ytx @ tb.transpose(x)",
                            "BinOp"
                        ]
                    ]
                },
                "A": {
                    "value": "ytx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tb.xty(y, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_107": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_110": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.zero(*shape, out=out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "graphembed/graphembed/manifolds/impl/math.py": {
        "torch": {}
    },
    "graphembed/graphembed/manifolds/lorentz.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_66": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xy * xy - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_91": {
                "variable": {
                    "value": "dirs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(*shape, 1), dirs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_129": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * x - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_131": {
                "input": {
                    "value": "x + z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "addcmul_69": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ldot(x, y, keepdim=True).clamp_(max=-1)",
                            "Call"
                        ],
                        [
                            "ldot(x, y, keepdim=True).expand_as(x)",
                            "Call"
                        ]
                    ]
                },
                "tensor2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(*shape, self.n, out=out)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "torch.empty(*shape, self.n, out=out).uniform_(-ir, ir)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/manifolds/orthogonal.py": {
        "torch": {
            "stack_18": {
                "variable": {
                    "value": "eigs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z.eig().eigenvalues for z in xty]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "atan2_19": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eigs[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "eigs[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_34": {
                "tensors": {
                    "value": "[torch.as_tensor(self._log_np(xi.numpy(), yi.numpy())) for (xi, yi) in zip(x, y)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "all_14": {
                "input": {
                    "value": "torch.abs(x.det() - y.det()) < 1e-08",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "as_tensor_33": {
                "data": {
                    "value": "self._log_np(x.numpy(), y.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_35": {
                "data": {
                    "value": "self._log_np(xi.numpy(), yi.numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_14": {
                "input": {
                    "value": "x.det() - y.det()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/manifolds/spd.py": {
        "torch": {
            "eye_57": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.new(self.n, self.n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_solve_104": {
                "variable": {
                    "value": "x_inv_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(*shape, self.dim, out=eyes.new())",
                            "Call"
                        ],
                        [
                            "self.from_vec(u)",
                            "Call"
                        ],
                        [
                            "torch.randn(shape, out=x.new(shape))",
                            "Call"
                        ],
                        [
                            "self.from_vec(u)",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "input2": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self.invchol(x, ret_chol=ret_chol)",
                            "Call"
                        ],
                        [
                            "self._lult(x, u, ret_chol=True)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self._lult(x, y, ret_chol=True)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_solve_105": {
                "variable": {
                    "value": "x_inv_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "input2": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self.invchol(x, ret_chol=ret_chol)",
                            "Call"
                        ],
                        [
                            "self._lult(x, u, ret_chol=True)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self._lult(x, y, ret_chol=True)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "triu_indices_179": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "col": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_205": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "eyes.new()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_217": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[:-2] + (self.dim,)",
                            "BinOp"
                        ],
                        [
                            "(n, n) + x.shape[1:]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "x.new(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_solve_225": {
                "variable": {
                    "value": "x_inv_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(*shape, self.dim, out=eyes.new())",
                            "Call"
                        ],
                        [
                            "self.from_vec(u)",
                            "Call"
                        ],
                        [
                            "torch.randn(shape, out=x.new(shape))",
                            "Call"
                        ],
                        [
                            "self.from_vec(u)",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "input2": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self.invchol(x, ret_chol=ret_chol)",
                            "Call"
                        ],
                        [
                            "self._lult(x, u, ret_chol=True)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self._lult(x, y, ret_chol=True)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_solve_226": {
                "variable": {
                    "value": "x_inv_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "input2": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self.invchol(x, ret_chol=ret_chol)",
                            "Call"
                        ],
                        [
                            "self._lult(x, u, ret_chol=True)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self._lult(x, y, ret_chol=True)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "triu_indices_260": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "col": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_solve_282": {
                "variable": {
                    "value": "xpy_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tb.eye_like(xpy_l)",
                    "type": "Call",
                    "possible_values": []
                },
                "input2": {
                    "value": "xpy_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chol(xpy)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_solve_283": {
                "variable": {
                    "value": "x_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tb.eye_like(x_l)",
                    "type": "Call",
                    "possible_values": []
                },
                "input2": {
                    "value": "x_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chol(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_92": {
                "n": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_95": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[:-2] + (self.dim,)",
                            "BinOp"
                        ],
                        [
                            "(n, n) + x.shape[1:]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "x.new(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triangular_solve_58": {
                "b": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(self.n, out=x.new(self.n, self.n))",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self.invchol(x, ret_chol=ret_chol)",
                            "Call"
                        ],
                        [
                            "self._lult(x, u, ret_chol=True)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self._lult(x, y, ret_chol=True)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "triangular_solve_150": {
                "b": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(*shape, self.dim, out=eyes.new())",
                            "Call"
                        ],
                        [
                            "self.from_vec(u)",
                            "Call"
                        ],
                        [
                            "torch.randn(shape, out=x.new(shape))",
                            "Call"
                        ],
                        [
                            "self.from_vec(u)",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "A": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self.invchol(x, ret_chol=ret_chol)",
                            "Call"
                        ],
                        [
                            "self._lult(x, u, ret_chol=True)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ],
                        [
                            "self._lult(x, y, ret_chol=True)",
                            "Call"
                        ],
                        [
                            "self.chol(x)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/manifolds/sphere.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "acos_71": {
                "variable": {
                    "value": "sq_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner",
                            "Call"
                        ],
                        [
                            "self.inner(None, x, y, keepdim=keepdim)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_87": {
                "variable": {
                    "value": "rs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_93": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.empty_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_56": {
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_u > EPS[x.dtype]",
                            "Compare"
                        ],
                        [
                            "dist.gt(EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "expx_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * torch.cos(norm_u) + u * torch.sin(norm_u) / norm_u",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "retrx_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.retr(x, u)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_66": {
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_u > EPS[x.dtype]",
                            "Compare"
                        ],
                        [
                            "dist.gt(EPS[x.dtype])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "u * dist / self.norm(None, u, keepdim=True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u.clone()",
                            "Call"
                        ],
                        [
                            "self.proju(x, y - x, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.randvec(x, norm=ir)",
                            "Call"
                        ],
                        [
                            "torch.randn(x.shape, out=torch.empty_like(x))",
                            "Call"
                        ],
                        [
                            "self.proju(x, u, inplace=True)",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_83": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_53": {
                "input": {
                    "value": "norm_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.norm(None, u, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_93": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(*shape, np.prod(self.shape), out=out)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "self.zero(*shape, out=out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_53": {
                "input": {
                    "value": "norm_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.norm(None, u, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graphembed/graphembed/manifolds/stiefel.py": {
        "torch": {
            "randn_87": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.empty_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_30": {
                "n": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_84": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_87": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.zero(*shape, out=out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "graphembed/graphembed/manifolds/universal.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([c_init])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_43": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_37": {
                "input": {
                    "value": "torch.abs(self.get_c())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_37": {
                "input": {
                    "value": "self.get_c()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_29": {
                "input": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/metrics.py": {
        "torch": {
            "mean_56": {
                "input": {
                    "value": "torch.abs(mpdists - gpdists) / gpdists",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_56": {
                "input": {
                    "value": "mpdists - gpdists",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/modules.py": {
        "torch": {
            "ParameterList_51": {
                "variable": {
                    "value": "self.xs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[ManifoldParameter(data=manifold.rand(n), manifold=manifold) for manifold in manifolds]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_57": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[torch.nn.Parameter(torch.tensor(0.5)) for _ in manifolds]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_13": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "data": {
                    "value": "torch.tensor(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softplus_86": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/objectives.py": {
        "torch": {
            "randperm_98": {
                "variable": {
                    "value": "ms",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.n_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_99": {
                "variable": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_100": {
                "variable": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_42": {
                "input": {
                    "value": "mdists - gdists",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/optim/radam.py": {
        "torch": {
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_58": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_74": {
                "input": {
                    "value": "max_grad_norm / grad_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/optim/rsgd.py": {
        "torch": {
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_68": {
                "input": {
                    "value": "max_grad_norm / grad_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/products/embedding.py": {
        "torch": {
            "ModuleList_17": {
                "variable": {
                    "value": "self.manifolds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Universal(d, **kwargs) for d in self.ds]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_19": {
                "variable": {
                    "value": "self.xs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[ManifoldParameter(data=man.rand(n), manifold=man) for man in self.manifolds]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/train.py": {
        "torch": {
            "DataParallel_107": {
                "variable": {
                    "value": "self.batched_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "BatchedObjective(self.objective_fn, graph_dataset, self.embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_123": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_140": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.save_dir, 'burnin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_206": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(graph_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_333": {
                "obj": {
                    "value": "self.embedding.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'mean_{name}_{epoch}')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'std_{name}_{epoch}')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'embedding_{epoch}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'best_embedding.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'best_loss_{}'.format(epoch))",
                            "Call"
                        ],
                        [
                            "latest_path_by_basename_numeric_order(pattern)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_342": {
                "obj": {
                    "value": "embedding.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'mean_{name}_{epoch}')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'std_{name}_{epoch}')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'embedding_{epoch}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'best_embedding.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'best_loss_{}'.format(epoch))",
                            "Call"
                        ],
                        [
                            "latest_path_by_basename_numeric_order(pattern)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_352": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, f'mean_{name}_{epoch}')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'std_{name}_{epoch}')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, f'embedding_{epoch}.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'best_embedding.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'best_loss_{}'.format(epoch))",
                            "Call"
                        ],
                        [
                            "latest_path_by_basename_numeric_order(pattern)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/train_da.py": {
        "torch": {
            "DataParallel_30": {
                "variable": {
                    "value": "self.batched_obj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "BatchedObjective(self.objective_fn, graph_dataset, self.emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SummaryWriter_37": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/graphembed/utils.py": {
        "torch": {
            "ones_43": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.floor(math.sqrt(2 * m))",
                            "Call"
                        ],
                        [
                            "math.ceil(math.sqrt(2 * m))",
                            "Call"
                        ],
                        [
                            "nnm1d2_to_n(x_vec.shape[-1])",
                            "Call"
                        ],
                        [
                            "nnp1d2_to_n(x_vec.shape[-1])",
                            "Call"
                        ],
                        [
                            "[int(s) for s in re.findall('\\\\d+', os.path.basename(path))]",
                            "ListComp"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "variable"
                        ],
                        [
                            "triu_mask(x_vec.shape[-1], d=1, device=x_vec.device)",
                            "Call"
                        ],
                        [
                            "triu_mask(n, d=1, device=x_vec.device)",
                            "Call"
                        ],
                        [
                            "triu_mask(x_vec.shape[-1], device=x_vec.device)",
                            "Call"
                        ],
                        [
                            "triu_mask(n, device=x_vec.device)",
                            "Call"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_vec.shape[:-1] + (n, n)",
                            "BinOp"
                        ],
                        [
                            "x_vec.shape[:-1] + (n, n)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "x_vec.new(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_vec.shape[:-1] + (n, n)",
                            "BinOp"
                        ],
                        [
                            "x_vec.shape[:-1] + (n, n)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "x_vec.new(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/run.py": {
        "torch": {
            "set_default_dtype_32": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_131": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_35": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_37": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/tests/conftest.py": {
        "torch": {
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Call"
                        ],
                        [
                            "request.param",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_41": {
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "graphembed/tests/helpers/utils.py": {
        "torch": {}
    },
    "graphembed/tests/test_euclidean.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "graphembed/tests/test_isometry.py": {
        "torch": {
            "stack_29": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_74": {
                "variable": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_93": {
                "variable": {
                    "value": "row1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, c]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "row2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "[row1, row2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_30": {
                "input": {
                    "value": "-ldot(y, y, keepdim=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_115": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_127": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/tests/test_linalg.py": {
        "torch": {
            "eye_46": {
                "variable": {
                    "value": "eyes",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_47": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_53": {
                "variable": {
                    "value": "eyes",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_54": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_86": {
                "variable": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_86": {
                "variable": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "symeig_62": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rand_spd(n, d)",
                            "Call"
                        ],
                        [
                            "rand_sym(n, d)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, d)",
                            "Call"
                        ],
                        [
                            "rand_sym(n, d)",
                            "Call"
                        ],
                        [
                            "rand_sym(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_sym(n, 3)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "torch.rand(n, 2, 2, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "symeig_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rand_spd(n, d)",
                            "Call"
                        ],
                        [
                            "rand_sym(n, d)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, d)",
                            "Call"
                        ],
                        [
                            "rand_sym(n, d)",
                            "Call"
                        ],
                        [
                            "rand_sym(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_sym(n, 3)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "torch.rand(n, 2, 2, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "symeig_86": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1.detach().clone().requires_grad_()",
                            "Call"
                        ],
                        [
                            "x1.detach().clone().requires_grad_()",
                            "Call"
                        ],
                        [
                            "x1.detach().clone().requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/tests/test_optim.py": {
        "torch": {
            "set_default_dtype_19": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_28": {
                "equation": {
                    "value": "i,ij,j",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ManifoldParameter(man.rand(1)[0], manifold=man)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graphembed/tests/test_ortho.py": {
        "torch": {
            "empty_54": {
                "variable": {
                    "value": "float64",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_64": {
                "input": {
                    "value": "sum_angles >= math.pi",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "as_tensor_68": {
                "data": {
                    "value": "[sl.norm(sl.logm(x.T @ y)) for (x, y) in zip(xs, ys)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "set_default_dtype_73": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_34": {
                "outputs": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * gras.dist(x, y, squared=True)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gras.rand_uniform(100, out=torch.empty(10, n, p, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "so.rand_uniform(100, out=torch.empty(100, n, n, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "gras.rand_uniform(2, out=torch.empty(2, n, p, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_15": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_23": {
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_31": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_56": {
                "input": {
                    "value": "float64",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(100, n, p, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_57": {
                "input": {
                    "value": "float64",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(100, n, p, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_58": {
                "input": {
                    "value": "float64",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(100, n, p, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graphembed/tests/test_perf.py": {
        "torch": {
            "triu_indices_90": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000 if not torch.cuda.is_available() else 5000",
                            "IfExp"
                        ],
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "g.number_of_nodes()",
                            "Call"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "col": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000 if not torch.cuda.is_available() else 5000",
                            "IfExp"
                        ],
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "g.number_of_nodes()",
                            "Call"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triu_indices_102": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000 if not torch.cuda.is_available() else 5000",
                            "IfExp"
                        ],
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "g.number_of_nodes()",
                            "Call"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "col": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000 if not torch.cuda.is_available() else 5000",
                            "IfExp"
                        ],
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "g.number_of_nodes()",
                            "Call"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "symeig_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rand_sym(n, d)",
                            "Call"
                        ],
                        [
                            "rand_sym(n, d)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cholesky_46": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rand_sym(n, d)",
                            "Call"
                        ],
                        [
                            "rand_sym(n, d)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 2)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "graphembed/tests/test_spd.py": {
        "torch": {
            "randn_18": {
                "variable": {
                    "value": "u_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "spd.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_55": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "triu_indices_86": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "row": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "col": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_44": {
                "input": {
                    "value": "spd.pdist(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_76": {
                "outputs": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * spd.dist(x, y, squared=True)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(d)",
                            "Call"
                        ],
                        [
                            "rand_spd(10, d)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, d)",
                            "Call"
                        ],
                        [
                            "rand_spd(2, d)",
                            "Call"
                        ],
                        [
                            "spd.rand(2, ir=1.0, out=torch.empty(2, d, d, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_65": {
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_73": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_84": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eig_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eig_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "solve_55": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spd.exp(x, u)",
                            "Call"
                        ],
                        [
                            "spd.exp(x, u)",
                            "Call"
                        ],
                        [
                            "rand_spd(2, d)",
                            "Call"
                        ],
                        [
                            "spd.rand(2, ir=1.0, out=torch.empty(2, d, d, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(d)",
                            "Call"
                        ],
                        [
                            "rand_spd(10, d)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, d)",
                            "Call"
                        ],
                        [
                            "rand_spd(2, d)",
                            "Call"
                        ],
                        [
                            "spd.rand(2, ir=1.0, out=torch.empty(2, d, d, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_58": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(d)",
                            "Call"
                        ],
                        [
                            "rand_spd(10, d)",
                            "Call"
                        ],
                        [
                            "rand_spd(n, d)",
                            "Call"
                        ],
                        [
                            "rand_spd(2, d)",
                            "Call"
                        ],
                        [
                            "spd.rand(2, ir=1.0, out=torch.empty(2, d, d, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spd.exp(x, u)",
                            "Call"
                        ],
                        [
                            "spd.exp(x, u)",
                            "Call"
                        ],
                        [
                            "rand_spd(2, d)",
                            "Call"
                        ],
                        [
                            "spd.rand(2, ir=1.0, out=torch.empty(2, d, d, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graphembed/tests/test_sphere.py": {
        "torch": {
            "zeros_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_13": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}