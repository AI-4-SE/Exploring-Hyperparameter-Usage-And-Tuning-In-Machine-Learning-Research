{
    "packages/dendrites/src/nupic/research/frameworks/dendrites/mixins/sp_context_analysis.py": {
        "sklearn": {
            "pairwise_distances_118": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.contexts[self.tasks == i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.contexts[self.tasks == j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "metric": {
                    "value": "metric",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.distance_metric",
                            "Attribute"
                        ],
                        [
                            "dot_product_metric",
                            "Name"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "zeros_50": {
                "variable": {
                    "value": "self.contexts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, self.dim_context)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, self.dim_context)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(contexts, output)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "projects/dendrites/subnetworks/utils.py": {
        "sklearn": {
            "train_test_split_58": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "apply_target_transform(Y, target_transform_offset * idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_iris_125": {
                "variable": {
                    "value": "iris",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_wine_126": {
                "variable": {
                    "value": "wine",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_142": {
                "variable": {
                    "value": "irisX",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MinMaxScaler_144": {
                "variable": {
                    "value": "wineX",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_157": {
                "y_true": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(target)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(model(torch.FloatTensor(data)), dim=1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.argmax(model(torch.FloatTensor(data)), dim=1).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_195": {
                "y_true": {
                    "value": "target.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(model(torch.FloatTensor(data)), dim=1).numpy()",
                            "Call"
                        ],
                        [
                            "torch.argmax(model(torch.FloatTensor(data)), dim=1).numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "argmax_156": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(torch.FloatTensor(data))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_163": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_164": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_252": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_284": {
                "variable": {
                    "value": "self.block0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, hidden_sizes[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_298": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_sizes[0], hidden_sizes[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_sizes[1], hidden_sizes[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_326": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_337": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(dendrite_activations, dim=2, index=inds)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(dendrite_activations)",
                            "Call"
                        ],
                        [
                            "torch.gather(dendrite_activations, dim=2, index=inds)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(dendrite_activations)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_activations.abs().max(dim=2).indices",
                            "Attribute"
                        ],
                        [
                            "inds.unsqueeze(dim=2)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.abs().max(dim=2).indices",
                            "Attribute"
                        ],
                        [
                            "inds.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_339": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(dendrite_activations, dim=2, index=inds)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(dendrite_activations)",
                            "Call"
                        ],
                        [
                            "torch.gather(dendrite_activations, dim=2, index=inds)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(dendrite_activations)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_367": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(dendrite_activations, dim=2, index=inds)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(dendrite_activations)",
                            "Call"
                        ],
                        [
                            "torch.gather(dendrite_activations, dim=2, index=inds)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(dendrite_activations)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_activations.abs().max(dim=2).indices",
                            "Attribute"
                        ],
                        [
                            "inds.unsqueeze(dim=2)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.abs().max(dim=2).indices",
                            "Attribute"
                        ],
                        [
                            "inds.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_369": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(dendrite_activations, dim=2, index=inds)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(dendrite_activations)",
                            "Call"
                        ],
                        [
                            "torch.gather(dendrite_activations, dim=2, index=inds)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(dendrite_activations)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_194": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(torch.FloatTensor(data))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_240": {
                "num_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_250": {
                "in_features": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_285": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_286": {
                "num_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_299": {
                "in_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_300": {
                "num_features": {
                    "value": "hidden_sizes[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_313": {
                "in_features": {
                    "value": "hidden_sizes[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_314": {
                "num_features": {
                    "value": "hidden_sizes[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_246": {
                "in_features": {
                    "value": "hidden_sizes[idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_247": {
                "num_features": {
                    "value": "hidden_sizes[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_383": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.block0(x_input)",
                            "Call"
                        ],
                        [
                            "self.apply_dendrites(x, self.segments0(context))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.apply_dendrites(x, self.segments1(context))",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.apply_dendrites(x, self.segments2(context))",
                            "Call"
                        ],
                        [
                            "self.block0(x_input)",
                            "Call"
                        ],
                        [
                            "x * dendrites0",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "x * dendrites1",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "x * dendrites2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_384": {
                "input": {
                    "value": "dendrites0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reduce_dendrites(self.segments0(context))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_390": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.block0(x_input)",
                            "Call"
                        ],
                        [
                            "self.apply_dendrites(x, self.segments0(context))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.apply_dendrites(x, self.segments1(context))",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.apply_dendrites(x, self.segments2(context))",
                            "Call"
                        ],
                        [
                            "self.block0(x_input)",
                            "Call"
                        ],
                        [
                            "x * dendrites0",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "x * dendrites1",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "x * dendrites2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_391": {
                "input": {
                    "value": "dendrites1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reduce_dendrites(self.segments1(context))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_397": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.block0(x_input)",
                            "Call"
                        ],
                        [
                            "self.apply_dendrites(x, self.segments0(context))",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.apply_dendrites(x, self.segments1(context))",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.apply_dendrites(x, self.segments2(context))",
                            "Call"
                        ],
                        [
                            "self.block0(x_input)",
                            "Call"
                        ],
                        [
                            "x * dendrites0",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "x * dendrites1",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "x * dendrites2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_398": {
                "input": {
                    "value": "dendrites2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reduce_dendrites(self.segments2(context))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "projects/rsm/util.py": {
        "sklearn": {
            "confusion_matrix_67": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PCA_380": {
                "variable": {
                    "value": "pca_3d",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_43": {
                "variable": {
                    "value": "square",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "side ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(labels)",
                            "Call"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(labels)",
                            "Call"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_460": {
                "variable": {
                    "value": "lsm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "activity_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "distrs[key]",
                            "Subscript"
                        ],
                        [
                            "distrs[key]",
                            "Subscript"
                        ],
                        [
                            "distrs[key]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_151": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "activity_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "distrs[key]",
                            "Subscript"
                        ],
                        [
                            "distrs[key]",
                            "Subscript"
                        ],
                        [
                            "distrs[key]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cosine_similarity_196": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "act1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "act2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "activity_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "distrs[key]",
                            "Subscript"
                        ],
                        [
                            "distrs[key]",
                            "Subscript"
                        ],
                        [
                            "distrs[key]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_entropy_450": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "onehot(target, num_classes).type_as(inputs)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "-100",
                            "MethodArgument"
                        ],
                        [
                            "-100",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "nll_loss_454": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "onehot(target, num_classes).type_as(inputs)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "-100",
                            "MethodArgument"
                        ],
                        [
                            "-100",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_161": {
                "variable": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dist, col)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "projects/visual_recognition_grid_cells/SDR_classifiers.py": {
        "sklearn": {
            "KNeighborsClassifier_336": {
                "variable": {
                    "value": "knn",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "N_NEIGHBOURS_LIST[0]",
                            "Subscript"
                        ],
                        [
                            "N_NEIGHBOURS_LIST",
                            "Name"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "seed_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "randperm_373": {
                "variable": {
                    "value": "shuffle_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(training_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_428": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_429": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LR_LIST[0]",
                            "Subscript"
                        ],
                        [
                            "LR_LIST",
                            "Name"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "LSTM_103": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "128 + int(MOVEMENT_INFO_BOOL) + int(MOVEMENT_INFO_TYPE == 'vector_displacement' or MOVEMENT_INFO_TYPE == 'x_y_displacement')",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "hidden_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "np.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "cell_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "np.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_410": {
                "variable": {
                    "value": "testing_matches",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.argmax(outputs, dim=1) == testing_labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "clip_grad_value__394": {
                "parameters": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_410": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(training_batch_data)",
                            "Call"
                        ],
                        [
                            "net(testing_data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/common/ray_custom_loggers.py": {
        "tensorflow": {}
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/common/ray_custom_loggers_2.py": {
        "tensorflow": {}
    },
    "packages/ray/src/nupic/research/frameworks/ray/ray_custom_loggers.py": {
        "tensorflow": {}
    },
    "packages/ray/src/nupic/research/frameworks/ray/tf_tune_utils.py": {
        "tensorflow": {}
    },
    "packages/tensorflow/src/nupic/research/frameworks/tensorflow/constraints/sparse_weights.py": {
        "tensorflow": {
            "top_k_53": {
                "variable": {
                    "value": "(top_k, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "non_zeros",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(round(input_shape[-1].value * self.percent_on))",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_54": {
                "variable": {
                    "value": "kth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "top_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_55": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(values, kth)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_56": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater_equal(values, kth), dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "synchronization": {
                    "value": "tf.VariableSynchronization.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_equal_55": {
                "x": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "kth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(top_k, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages/tensorflow/src/nupic/research/frameworks/tensorflow/layers/k_winners.py": {
        "tensorflow": {
            "convert_to_tensor_80": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(k, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "keras.backend.in_test_phase(self.k_inference, self.k, training=training)",
                            "Call"
                        ],
                        [
                            "keras.backend.in_test_phase(x=self.k_inference, alt=self.k, training=training)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_81": {
                "variable": {
                    "value": "boost_strength",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boost_strength",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.maximum(boost_strength, 0.0)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_prod_83": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_84": {
                "variable": {
                    "value": "target_density",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "k / n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_85": {
                "variable": {
                    "value": "boost_factors",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(target_density - duty_cycles) * boost_strength",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "boosted",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boosted",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x * boost_factors",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(boosted, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "flat_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_kwinners(x=inputs, k=k, duty_cycles=self.duty_cycles, boost_strength=self.boost_strength)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_93": {
                "variable": {
                    "value": "(top_k, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "boosted",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x * boost_factors",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(boosted, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(k, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "keras.backend.in_test_phase(self.k_inference, self.k, training=training)",
                            "Call"
                        ],
                        [
                            "keras.backend.in_test_phase(x=self.k_inference, alt=self.k, training=training)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_94": {
                "variable": {
                    "value": "dim_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(0, tf.shape(indices)[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_95": {
                "variable": {
                    "value": "dim_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dim_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(0, tf.shape(indices)[0]), 1)",
                            "Call"
                        ],
                        [
                            "tf.tile(dim_range, [1, k])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "full_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(dim_range, -1), tf.expand_dims(indices, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "full_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "full_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(dim_range, -1), tf.expand_dims(indices, -1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(full_indices, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_101": {
                "variable": {
                    "value": "updates",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "full_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(dim_range, -1), tf.expand_dims(indices, -1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(full_indices, [-1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_102": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "full_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(dim_range, -1), tf.expand_dims(indices, -1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(full_indices, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "updates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(params=flat_x, indices=full_indices)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "flat_x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "tensor": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.scatter_nd(indices=full_indices, updates=updates, shape=flat_x.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_301": {
                "variable": {
                    "value": "period",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.duty_cycle_period",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.learning_iterations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_302": {
                "variable": {
                    "value": "period",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "period",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.minimum(self.duty_cycle_period, self.learning_iterations)",
                            "Call"
                        ],
                        [
                            "tf.cast(period, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.minimum(self.duty_cycle_period, self.learning_iterations)",
                            "Call"
                        ],
                        [
                            "tf.cast(period, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_400": {
                "variable": {
                    "value": "period",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.duty_cycle_period",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.learning_iterations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_401": {
                "variable": {
                    "value": "period",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "period",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.minimum(self.duty_cycle_period, self.learning_iterations)",
                            "Call"
                        ],
                        [
                            "tf.cast(period, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.minimum(self.duty_cycle_period, self.learning_iterations)",
                            "Call"
                        ],
                        [
                            "tf.cast(period, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_402": {
                "variable": {
                    "value": "count",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(inputs > 0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_97": {
                "input": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_307": {
                "input_tensor": {
                    "value": "tf.cast(x > 0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0, 1, 2, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_310": {
                "tensor": {
                    "value": "duty_cycles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.duty_cycles * (period - batch_size)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(duty_cycles, [-1]) + count",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_402": {
                "x": {
                    "value": "inputs > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_94": {
                "input": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_307": {
                "x": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "packages/tensorflow/src/nupic/research/frameworks/tensorflow/utils/pytorch_utils.py": {
        "tensorflow": {
            "get_logger_30": {
                "variable": {
                    "value": "TF_LOGGER",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/tensorflow/tests/unit/k_winner_test.py": {
        "tensorflow": {
            "ConfigProto_37": {
                "variable": {
                    "value": "CONFIG",
                    "type": "Variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'CPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "enable_eager_execution_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 1.2, 1.1, 1.3, 1.0, 1.5, 1.0], [1.1, 1.0, 1.2, 1.0, 1.3, 1.0, 1.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_56": {
                "variable": {
                    "value": "self.duty_cycle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0 / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_74": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.x.shape[1:]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1:]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1:]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1:]",
                            "Subscript"
                        ],
                        [
                            "x.shape[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Model_76": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Input(batch_size=batch_size, shape=input_shape)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "k_winners(inp, training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_97": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((1, 3, 2, 2), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones((2, 3, 2, 2), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "self.x2",
                            "Attribute"
                        ],
                        [
                            "self.x2",
                            "Attribute"
                        ],
                        [
                            "self.x2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_110": {
                "variable": {
                    "value": "self.x2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((1, 3, 2, 2), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones((2, 3, 2, 2), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "self.x2",
                            "Attribute"
                        ],
                        [
                            "self.x2",
                            "Attribute"
                        ],
                        [
                            "self.x2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "main_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_47": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "18",
                            "Constant"
                        ]
                    ]
                }
            },
            "set_random_seed_86": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "18",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_209": {
                "value": {
                    "value": "[1.5, 1.5, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "packages/tensorflow/tests/unit/load_pytorch_weights_test.py": {
        "tensorflow": {
            "convert_to_tensor_55": {
                "variable": {
                    "value": "data_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.data.transpose(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_60": {
                "variable": {
                    "value": "out_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_tf(data_tf, training=False)",
                            "Call"
                        ],
                        [
                            "tf.log(out_tf)",
                            "Call"
                        ],
                        [
                            "model_tf(data_tf, training=False)",
                            "Call"
                        ],
                        [
                            "tf.log(out_tf)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_79": {
                "variable": {
                    "value": "data_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.data.transpose(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_84": {
                "variable": {
                    "value": "out_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_tf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_tf(data_tf, training=False)",
                            "Call"
                        ],
                        [
                            "tf.log(out_tf)",
                            "Call"
                        ],
                        [
                            "model_tf(data_tf, training=False)",
                            "Call"
                        ],
                        [
                            "tf.log(out_tf)",
                            "Call"
                        ]
                    ]
                }
            },
            "main_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_44": {
                "variable": {
                    "value": "model_pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "github": {
                    "value": "numenta/nupic.torch",
                    "type": "str",
                    "possible_values": []
                },
                "model": {
                    "value": "gsc_sparse_cnn",
                    "type": "str",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "data_pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_68": {
                "variable": {
                    "value": "model_pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "github": {
                    "value": "numenta/nupic.torch",
                    "type": "str",
                    "possible_values": []
                },
                "model": {
                    "value": "gsc_super_sparse_cnn",
                    "type": "str",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "data_pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/continual_learning/dend_kwinners.py": {
        "torch": {
            "zeros_like_111": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DendriteKWinners.apply(x, self.k, self.dendrites_per_neuron)",
                            "Call"
                        ],
                        [
                            "self.kwinner_function(x, self.k)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_124": {
                "variable": {
                    "value": "grad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "boosted.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dpc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrites_per_neuron",
                            "Name"
                        ]
                    ]
                }
            },
            "argmax_139": {
                "variable": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boosted[:, k * (dpc - 1):k * (dpc - 1) + dpc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/continual_learning/dendrite_layers.py": {
        "torch": {
            "Linear_54": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_dendrites",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_dim, dendrites_per_unit * out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_178": {
                "variable": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1_pre",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out0 * cat_projection",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_91": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight * self.mask",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_interleave_100": {
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(out_dim, out_dim)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "self.dendrites_per_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/continual_learning/mnist_data_utils.py": {
        "torch": {
            "cat_102": {
                "variable": {
                    "value": "combined_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[data[k][0] for k in range(len(training_classes))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_103": {
                "variable": {
                    "value": "combined_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[data[k][1] for k in range(len(training_classes))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClasswiseDataset(cachefilepath=os.path.split(f.name)[0], basename=os.path.split(f.name)[1], qualifiers=['tmp'], transform=transforms.Compose([transforms.Lambda(lambda x: (x[0].float(), x[1].long()))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_107": {
                "obj": {
                    "value": "combined_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list((combined_samples, combined_labels))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tempfile.NamedTemporaryFile(delete=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_65": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClasswiseDataset(cachefilepath=data_dir, basename='mnist_train_', qualifiers=[class_], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClasswiseDataset(cachefilepath=data_dir, basename='mnist_test_', qualifiers=[class_], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_98": {
                "f": {
                    "value": "data_dir + 'mnist_{}.npz'.format(k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_149": {
                "f": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.path, self.basename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.path, self.basename + '{}.npz'.format(qualifier))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/continual_learning/multihead/multihead.py": {
        "torch": {
            "Adam_170": {
                "variable": {
                    "value": "adam",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_159": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_163": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/continual_learning/split_mnist_byclass.py": {
        "torch": {
            "save_78": {
                "obj": {
                    "value": "(x_class, class_ * torch.ones(len(y_inds)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + '/mnist_train_{}.npz'.format(class_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_86": {
                "obj": {
                    "value": "(x_class, class_ * torch.ones(len(y_inds)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "data_dir + '/mnist_test_{}.npz'.format(class_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_79": {
                "*size": {
                    "value": "len(y_inds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_87": {
                "*size": {
                    "value": "len(y_inds)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/continual_learning/utils.py": {
        "torch": {
            "randperm_319": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "no_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(bias)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_321": {
                "variable": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randperm(no_units)",
                            "Call"
                        ],
                        [
                            "torch.split(inds, split_len)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(no_units / no_splits)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_327": {
                "variable": {
                    "value": "x_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "dc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "duty_cycles[module_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "topk_81": {
                "variable": {
                    "value": "(_, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(duty_cycles[module_name])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                            ],
                            "Call"
                        ],
                        [
                            "int((1 - pct / 100) * len(dc))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_329": {
                "input": {
                    "value": "x[i, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/common/dataloaders.py": {
        "torch": {
            "DataLoader_44": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(4, 16)",
                            "Tuple"
                        ],
                        [
                            "batch_size or [1]",
                            "BoolOp"
                        ],
                        [
                            "tuple([batch_size])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/common/datasets.py": {
        "torch": {
            "DataLoader_175": {
                "variable": {
                    "value": "self.noise_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "noise_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dataset(root=self.data_dir, train=False, transform=noise_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_221": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CachedDatasetFolder(train_path, transform=train_transform, num_classes=self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_228": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CachedDatasetFolder(val_path, transform=val_transform, num_classes=self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/common/functions.py": {
        "torch": {
            "kthvalue_89": {
                "variable": {
                    "value": "(threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flatten_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(flatten_x.shape[1] - k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_95": {
                "variable": {
                    "value": "num_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tx > threshold",
                            "Compare"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "mean_duty_cycle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.duty_cycle",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "self.duty_cycle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "units_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.shape[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_67": {
                "variable": {
                    "value": "tx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone().detach()",
                            "Call"
                        ],
                        [
                            "torch.abs(tx)",
                            "Call"
                        ],
                        [
                            "tx * boosting",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_69": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/common/utils.py": {
        "torch": {
            "is_available_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/models/comparative.py": {
        "torch": {
            "kthvalue_108": {
                "variable": {
                    "value": "(pos_threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight[weight > 0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "int(zeta * len(weight_pos))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kthvalue_110": {
                "variable": {
                    "value": "(neg_threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight[weight < 0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "int((1 - zeta) * len(weight_neg))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "current_sparsity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_260": {
                "variable": {
                    "value": "nonzero_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_266": {
                "variable": {
                    "value": "grow_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "self.log[mask_sizes_l + str(idx)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(self.network.modules())",
                            "Call"
                        ],
                        [
                            "list(self.network.modules())",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_202": {
                "variable": {
                    "value": "available",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m.weight != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_246": {
                "variable": {
                    "value": "self.log[mask_sizes_l + str(idx)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(self.network.modules())",
                            "Call"
                        ],
                        [
                            "list(self.network.modules())",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "prune_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((weight >= pos_threshold) | (weight <= neg_threshold)).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_121": {
                "*size": {
                    "value": "weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_161": {
                "input": {
                    "value": "m.weight != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "count_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m.weight != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_174": {
                "variable": {
                    "value": "non_zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m.weight[m.weight != 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "kthvalue_175": {
                "variable": {
                    "value": "(val, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "non_zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(m.weight[m.weight != 0]).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "int(len(non_zero) * self.on_perc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_215": {
                "variable": {
                    "value": "total_added",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.added_synapses[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_216": {
                "variable": {
                    "value": "surviving",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.added_synapses[idx] & keep_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_263": {
                "n": {
                    "value": "len(nonzero_idxs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_273": {
                "input": {
                    "value": "keep_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(torch.abs(weight) > self.h).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "self.log[added_synapses_l + str(idx)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "new_synapses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs & (weight == 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_83": {
                "variable": {
                    "value": "total_added",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.added_synapses[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_84": {
                "variable": {
                    "value": "surviving",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.added_synapses[idx] & prune_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_272": {
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/models/dsnn.py": {
        "torch": {
            "sum_125": {
                "variable": {
                    "value": "total_active",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "active_synapses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight != 0",
                            "Compare"
                        ],
                        [
                            "weight != 0",
                            "Compare"
                        ],
                        [
                            "weight != 0",
                            "Compare"
                        ],
                        [
                            "weight != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_149": {
                "variable": {
                    "value": "total_active",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "active_synapses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight != 0",
                            "Compare"
                        ],
                        [
                            "weight != 0",
                            "Compare"
                        ],
                        [
                            "weight != 0",
                            "Compare"
                        ],
                        [
                            "weight != 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_209": {
                "variable": {
                    "value": "total_nonactive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nonactive_synapses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module.m.weight == 0",
                            "Compare"
                        ],
                        [
                            "module.m.weight == 0",
                            "Compare"
                        ],
                        [
                            "module.m.weight == 0",
                            "Compare"
                        ],
                        [
                            "module.m.weight == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "nonzero_221": {
                "variable": {
                    "value": "nonzero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nonactive_synapses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module.m.weight == 0",
                            "Compare"
                        ],
                        [
                            "module.m.weight == 0",
                            "Compare"
                        ],
                        [
                            "module.m.weight == 0",
                            "Compare"
                        ],
                        [
                            "module.m.weight == 0",
                            "Compare"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "variable": {
                    "value": "add_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nonactive_synapses.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_237": {
                "variable": {
                    "value": "total_nonactive",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nonactive_synapses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module.m.weight == 0",
                            "Compare"
                        ],
                        [
                            "module.m.weight == 0",
                            "Compare"
                        ],
                        [
                            "module.m.weight == 0",
                            "Compare"
                        ],
                        [
                            "module.m.weight == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "kthvalue_240": {
                "variable": {
                    "value": "(add_threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_nonactive",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr[nonactive_synapses]",
                            "Subscript"
                        ],
                        [
                            "corr[nonactive_synapses]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "kth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(prune_perc * total_active)",
                            "Call"
                        ],
                        [
                            "int((1 - prune_perc) * total_active)",
                            "Call"
                        ],
                        [
                            "int(total_nonactive - num_add)",
                            "Call"
                        ],
                        [
                            "int(num_add)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "hebbian_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kthvalue_252": {
                "variable": {
                    "value": "(add_threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_nonactive",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr[nonactive_synapses]",
                            "Subscript"
                        ],
                        [
                            "corr[nonactive_synapses]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "kth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(prune_perc * total_active)",
                            "Call"
                        ],
                        [
                            "int((1 - prune_perc) * total_active)",
                            "Call"
                        ],
                        [
                            "int(total_nonactive - num_add)",
                            "Call"
                        ],
                        [
                            "int(num_add)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_257": {
                "variable": {
                    "value": "add_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nonactive_synapses.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "hebbian_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kthvalue_138": {
                "variable": {
                    "value": "(keep_threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_active",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr[active_synapses]",
                            "Subscript"
                        ],
                        [
                            "corr[active_synapses]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "kth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(prune_perc * total_active)",
                            "Call"
                        ],
                        [
                            "int((1 - prune_perc) * total_active)",
                            "Call"
                        ],
                        [
                            "int(total_nonactive - num_add)",
                            "Call"
                        ],
                        [
                            "int(num_add)",
                            "Call"
                        ]
                    ]
                }
            },
            "kthvalue_162": {
                "variable": {
                    "value": "(keep_threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_active",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "corr[active_synapses]",
                            "Subscript"
                        ],
                        [
                            "corr[active_synapses]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "kth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(prune_perc * total_active)",
                            "Call"
                        ],
                        [
                            "int((1 - prune_perc) * total_active)",
                            "Call"
                        ],
                        [
                            "int(total_nonactive - num_add)",
                            "Call"
                        ],
                        [
                            "int(num_add)",
                            "Call"
                        ]
                    ]
                }
            },
            "kthvalue_180": {
                "variable": {
                    "value": "(pos_threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight[weight > 0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "pos_kth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(prune_perc * len(weight_pos))",
                            "Call"
                        ]
                    ]
                }
            },
            "kthvalue_193": {
                "variable": {
                    "value": "(neg_threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight[weight < 0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "neg_kth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int((1 - prune_perc) * len(weight_neg))",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_211": {
                "*size": {
                    "value": "nonactive_synapses.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_191": {
                "input": {
                    "value": "weight_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight[weight < 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "keep_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.prune(module)",
                            "Call"
                        ],
                        [
                            "self._get_magnitude_mask(weight, active_synapses, hebbian_prune_perc)",
                            "Call"
                        ],
                        [
                            "active_synapses.to(self.device)",
                            "Call"
                        ],
                        [
                            "hebbian_mask | magnitude_mask",
                            "BinOp"
                        ],
                        [
                            "hebbian_mask",
                            "Name"
                        ],
                        [
                            "magnitude_mask",
                            "Name"
                        ],
                        [
                            "active_synapses.to(self.device)",
                            "Call"
                        ],
                        [
                            "self._get_magnitude_mask(weight, active_synapses, weight_prune_perc)",
                            "Call"
                        ],
                        [
                            "active_synapses",
                            "Name"
                        ],
                        [
                            "hebbian_mask | magnitude_mask",
                            "BinOp"
                        ],
                        [
                            "hebbian_mask",
                            "Name"
                        ],
                        [
                            "magnitude_mask",
                            "Name"
                        ],
                        [
                            "active_synapses.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/models/loggers.py": {
        "torch": {
            "mean_87": {
                "variable": {
                    "value": "self.log[ltype + _ + str(idx) + _mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "std_88": {
                "variable": {
                    "value": "self.log[ltype + _ + str(idx) + _std]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_141": {
                "variable": {
                    "value": "zero_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mask.int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_207": {
                "variable": {
                    "value": "total_added",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "module.added_synapses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_208": {
                "variable": {
                    "value": "surviving",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "module.added_synapses & keep_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_179": {
                "input": {
                    "value": "keep_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "add_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "new_mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_192": {
                "input": {
                    "value": "hebbian_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_196": {
                "input": {
                    "value": "magnitude_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_151": {
                "input": {
                    "value": "module.m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/models/main.py": {
        "torch": {
            "device_69": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_109": {
                "variable": {
                    "value": "self.loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_71": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(network)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_100": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "self.lr_milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "self.network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, experiment_name + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, experiment_name + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_90": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.nesterov_momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_104": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.lr_step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_178": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.network(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_228": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, experiment_name + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, experiment_name + '.pth')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_175": {
                "mode": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_179": {
                "input": {
                    "value": "targets == preds",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_244": {
                "input": {
                    "value": "(m.weight.data == 0).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_247": {
                "input": {
                    "value": "(m.bias.data == 0).float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/models/modules.py": {
        "torch": {
            "zeros_140": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_234": {
                "variable": {
                    "value": "current_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.m.weight != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_96": {
                "input": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "self.m.coactivations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.m.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kthvalue_207": {
                "variable": {
                    "value": "(pos_threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight[weight > 0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "pos_kth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(to_prune_pos, len(weight_pos))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_211": {
                "input": {
                    "value": "prune_pos_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(weight <= pos_threshold) & (weight > 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "kthvalue_218": {
                "variable": {
                    "value": "(neg_threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight[weight < 0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "neg_kth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(weight_neg) - to_prune_neg + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_161": {
                "*size": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/models/pruning.py": {
        "torch": {
            "save_137": {
                "obj": {
                    "value": "self.network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_140": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/networks/gsc.py": {
        "torch": {
            "Conv2d_429": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_430": {
                "variable": {
                    "value": "maxp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_431": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_432": {
                "variable": {
                    "value": "maxp2",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_433": {
                "variable": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_434": {
                "variable": {
                    "value": "lin1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "25 * cnn_out_channels[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "large_sparse_params[2] / (25 * cnn_out_channels[1])",
                            "BinOp"
                        ],
                        [
                            "int(np.round(linear_units))",
                            "Call"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_435": {
                "variable": {
                    "value": "lin2",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "linear_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "large_sparse_params[2] / (25 * cnn_out_channels[1])",
                            "BinOp"
                        ],
                        [
                            "int(np.round(linear_units))",
                            "Call"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_437": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_97": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*linear_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "self.hidden_neurons_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "fin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "num_features": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_128": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "fin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_138": {
                "num_features": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_318": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_320": {
                "num_features": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_322": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_336": {
                "in_channels": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_338": {
                "num_features": {
                    "value": "cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_340": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_383": {
                "in_features": {
                    "value": "1600",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_384": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ger_185": {
                "variable": {
                    "value": "outer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev_act[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "vec2": {
                    "value": "curr_act[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/networks/hebbian.py": {
        "torch": {
            "device_140": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_222": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_278": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*linear_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "variable": {
                    "value": "linear_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_283": {
                "in_channels": {
                    "value": "fin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_284": {
                "num_features": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_285": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_64": {
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "batch_norm_affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_68": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/networks/hebbian_v0.py": {
        "torch": {
            "device_104": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_169": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*linear_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_245": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_260": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*linear_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "self.hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "self.hidden_neurons_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "fin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_190": {
                "num_features": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_191": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "in_features": {
                    "value": "fin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_201": {
                "num_features": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_257": {
                "in_features": {
                    "value": "self.hidden_neurons_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_138": {
                "num_features": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_141": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ger_77": {
                "variable": {
                    "value": "outer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_act[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "vec2": {
                    "value": "prev_act[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/networks/layers.py": {
        "torch": {
            "cat_401": {
                "variable": {
                    "value": "stacked_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "single_unit_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self._get_single_unit_weights(c, j, h) for (c, j, h) in self.filter_indxs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_402": {
                "variable": {
                    "value": "self.grouped_conv.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "stacked_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(single_unit_weights, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_431": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.weight.shape[1:]",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float16 if self.half_precision else torch.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_543": {
                "variable": {
                    "value": "new_coacts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.coactivations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_74": {
                "condition": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_166": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_483": {
                "variable": {
                    "value": "s1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grouped_input - mu_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_485": {
                "variable": {
                    "value": "s2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_tensor - mu_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_495": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s2.mul(s1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ger_256": {
                "input": {
                    "value": "curr_act[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "vec2": {
                    "value": "prev_act[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_524": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((s1 - mu_in) * (s2 - mu_out)).mean(dim=0) / (std_in * std_out)",
                            "BinOp"
                        ],
                        [
                            "corr.abs()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_538": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_proxy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(s1 != 0) * (s2 != 0)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_512": {
                "condition": {
                    "value": "(std_in == 0) | (std_out == 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/networks/main.py": {
        "torch": {
            "Linear_365": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "7 * 7 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_372": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "7 * 7 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config['num_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_396": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*new_features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_56": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_156": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "device_299": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_332": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "fin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "fin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "num_features": {
                    "value": "fout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_331": {
                "in_features": {
                    "value": "self.hidden_sizes[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_339": {
                "in_features": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_378": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_60": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_63": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_160": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_163": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_341": {
                "num_features": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_343": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "correlations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "prev_act.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_250": {
                "variable": {
                    "value": "correlations_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "correlations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(prev_act.shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/networks/resnet.py": {
        "torch": {
            "Linear_276": {
                "variable": {
                    "value": "net.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "*classifier_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.regular_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3(in_planes, planes, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.regular_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(in_planes, planes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv7x7(3, 64, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(in_planes, planes, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(in_planes, self.expansion * planes, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_231": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_122": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_187": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_189": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_194": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/networks/utils.py": {
        "torch": {
            "Sequential_91": {
                "variable": {
                    "value": "new_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "new_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "new_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "new_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "new_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "new_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_260": {
                "variable": {
                    "value": "new_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "new_seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "new_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "linear.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear.out_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "linear.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Sequential_229": {
                "variable": {
                    "value": "squashed",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "squashed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "new_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "conv.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "conv.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "conv.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse/networks/wideresnet.py": {
        "torch": {
            "Conv2d_41": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.regular_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_planes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "wide_conv3x3(3, n_stages[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_stages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "n_stages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_145": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse_compat/models/stochastic_synapses.py": {
        "torch": {
            "tensor_136": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.calc_loss(output, target, loader)",
                            "Call"
                        ],
                        [
                            "epoch_loss / len(loader.dataset)",
                            "BinOp"
                        ],
                        [
                            "self.loss_func(outputs, targets)",
                            "Call"
                        ],
                        [
                            "loss + dataset_percent * self.regularization()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_157": {
                "input": {
                    "value": "e_nz_by_unit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module.get_expected_nonzeros()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_159": {
                "input": {
                    "value": "i_nz_by_unit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module.get_inference_nonzeros()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse_compat/networks/binary_cnn.py": {
        "torch": {
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "self.cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "kernel_size": {
                    "value": "self.maxpool_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "num_features": {
                    "value": "self.cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "kernel_size": {
                    "value": "self.maxpool_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_124": {
                "num_features": {
                    "value": "self.linear_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/src/nupic/research/archive/dynamic_sparse_compat/networks/hard_concrete_cnn.py": {
        "torch": {
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "self.cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "kernel_size": {
                    "value": "self.maxpool_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "self.cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_106": {
                "kernel_size": {
                    "value": "self.maxpool_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_122": {
                "num_features": {
                    "value": "self.linear_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/archive/tests/unit/dendrite_layer_test.py": {
        "torch": {
            "randn_36": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_77": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradcheck_67": {
                "func": {
                    "value": "kw",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DendriteKWinners2d(c, k=1)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.x",
                            "Attribute"
                        ],
                        [
                            "self.x.requires_grad_(True).double()",
                            "Call"
                        ],
                        [
                            "torch.randn(8, 30)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages/archive/tests/unit/multihead_test.py": {
        "torch": {
            "Sequential_50": {
                "*args": {
                    "value": "Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_126": {
                "variable": {
                    "value": "targets_task_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_127": {
                "variable": {
                    "value": "targets_task_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_142": {
                "variable": {
                    "value": "targets_task_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_143": {
                "variable": {
                    "value": "targets_task_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_158": {
                "variable": {
                    "value": "targets_task_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_159": {
                "variable": {
                    "value": "targets_task_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "packages/ax/src/nupic/research/frameworks/ax/ax_service.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/ax/src/nupic/research/frameworks/ax/ray_ax/optimize_accuracy.py": {
        "torch": {
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/ax/src/nupic/research/frameworks/ax/ray_ax/optimize_accuracy_weightsparsity.py": {
        "torch": {
            "is_available_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/dataset_managers/gsc.py": {
        "torch": {
            "TensorDataset_33": {
                "*tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/dataset_managers/mnist.py": {
        "torch": {}
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/experiments/mixins/log_covariance.py": {
        "torch": {
            "cat_49": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_activations",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_50": {
                "input": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(layer_activations)",
                            "Call"
                        ],
                        [
                            "H - torch.mean(H, dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_54": {
                "n": {
                    "value": "cov.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/experiments/mixins/log_structure.py": {
        "torch": {
            "sum_39": {
                "input": {
                    "value": "i_nz_by_unit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer.get_inference_nonzeros()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/experiments/mixins/test_noise.py": {
        "torch": {
            "DataLoader_44": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset_manager.get_test_dataset(noise_level)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/experiments/supervised.py": {
        "torch": {
            "device_49": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_77": {
                "variable": {
                    "value": "self.loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset_manager.get_test_dataset()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset_manager.get_train_dataset(iteration)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.batch_size_train_first_epoch if iteration == 0 else self.batch_size_train",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "self.network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_170": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/model_conversion.py": {
        "torch": {}
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/modules/binary_layers.py": {
        "torch": {
            "Parameter_123": {
                "variable": {
                    "value": "self.exc_p1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.inh_p1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_148": {
                "variable": {
                    "value": "exc_p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.exc_p1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_149": {
                "variable": {
                    "value": "inh_p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inh_p1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_267": {
                "variable": {
                    "value": "multiplies",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nz_by_unit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_inference_nonzeros()",
                            "Call"
                        ],
                        [
                            "self.get_inference_nonzeros()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_335": {
                "variable": {
                    "value": "self.exc_p1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_337": {
                "variable": {
                    "value": "self.inh_p1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_406": {
                "variable": {
                    "value": "exc_p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.exc_p1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_407": {
                "variable": {
                    "value": "inh_p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inh_p1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_505": {
                "variable": {
                    "value": "multiplies_per_instance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nz_by_unit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_inference_nonzeros()",
                            "Call"
                        ],
                        [
                            "self.get_inference_nonzeros()",
                            "Call"
                        ]
                    ]
                }
            },
            "hardtanh_53": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.hardtanh(x, -1, 1)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ]
                    ]
                },
                "min_val": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_113": {
                "variable": {
                    "value": "exc_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_114": {
                "variable": {
                    "value": "inh_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.exc_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "exc_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(out_features, in_features)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_features, in_features)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_channels, in_channels // groups, *self.kernel_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.inh_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "inh_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(out_features, in_features)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_features, in_features)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_channels, in_channels // groups, *self.kernel_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_204": {
                "variable": {
                    "value": "exc_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exc_p1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.exc_p1.data, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "self.exc_p1.clone()",
                            "Call"
                        ],
                        [
                            "self.exc_p1.clone()",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.exc_p1.data, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "self.exc_p1.clone()",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.exc_p1, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.exc_p1.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_205": {
                "variable": {
                    "value": "inh_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inh_p1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.inh_p1.data, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "self.inh_p1.clone()",
                            "Call"
                        ],
                        [
                            "self.inh_p1.clone()",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.inh_p1.data, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "self.inh_p1.clone()",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.inh_p1, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.inh_p1.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_260": {
                "input": {
                    "value": "exc_mask.int() | inh_mask.int()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_324": {
                "variable": {
                    "value": "exc_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels // groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*self.kernel_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_326": {
                "variable": {
                    "value": "inh_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels // groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*self.kernel_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_330": {
                "variable": {
                    "value": "self.exc_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "exc_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(out_features, in_features)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_features, in_features)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_channels, in_channels // groups, *self.kernel_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_331": {
                "variable": {
                    "value": "self.inh_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "inh_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(out_features, in_features)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_features, in_features)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                            "Call"
                        ],
                        [
                            "torch.ones(out_channels, in_channels // groups, *self.kernel_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_343": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_426": {
                "variable": {
                    "value": "exc_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exc_p1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.exc_p1.data, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "self.exc_p1.clone()",
                            "Call"
                        ],
                        [
                            "self.exc_p1.clone()",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.exc_p1.data, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "self.exc_p1.clone()",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.exc_p1, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.exc_p1.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_427": {
                "variable": {
                    "value": "inh_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inh_p1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.inh_p1.data, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "self.inh_p1.clone()",
                            "Call"
                        ],
                        [
                            "self.inh_p1.clone()",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.inh_p1.data, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "self.inh_p1.clone()",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.inh_p1, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.inh_p1.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_473": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(1, x.size(0) * x.size(1), *x.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w.view(w.size(0) * w.size(1), *w.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "-w.sum(dim=-1) / 2",
                            "BinOp"
                        ],
                        [
                            "b + self.bias if b is not None else self.bias",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "-w.sum(dim=(-3, -2, -1)) / 2",
                            "BinOp"
                        ],
                        [
                            "b + self.bias if b is not None else self.bias",
                            "IfExp"
                        ],
                        [
                            "b.view(x.size(0) * self.out_channels)",
                            "Call"
                        ],
                        [
                            "b.repeat(x.size(0))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.size(0) * self.groups",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_498": {
                "input": {
                    "value": "exc_mask.int() | inh_mask.int()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "tuple(range(1, len(exc_mask.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_539": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.hardtanh(x, -1, 1)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.exc_weight * exc_p1 - self.inh_weight * inh_p1",
                            "BinOp"
                        ],
                        [
                            "self.exc_weight * exc_p1 - self.inh_weight * inh_p1",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias if self.use_bias else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "clamp_544": {
                "variable": {
                    "value": "exc_p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.exc_p1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_545": {
                "variable": {
                    "value": "inh_p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inh_p1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_548": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "w_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.exc_weight.pow(2) * exc_p1 * (1 - exc_p1) + self.inh_weight.pow(2) * inh_p1 * (1 - inh_p1)",
                            "BinOp"
                        ],
                        [
                            "self.exc_weight.pow(2) * exc_p1 * (1 - exc_p1) + self.inh_weight.pow(2) * inh_p1 * (1 - inh_p1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_577": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.hardtanh(x, -1, 1)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.exc_weight * exc_p1 - self.inh_weight * inh_p1",
                            "BinOp"
                        ],
                        [
                            "self.exc_weight * exc_p1 - self.inh_weight * inh_p1",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias if self.use_bias else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_582": {
                "variable": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "w_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.exc_weight.pow(2) * exc_p1 * (1 - exc_p1) + self.inh_weight.pow(2) * inh_p1 * (1 - inh_p1)",
                            "BinOp"
                        ],
                        [
                            "self.exc_weight.pow(2) * exc_p1 * (1 - exc_p1) + self.inh_weight.pow(2) * inh_p1 * (1 - inh_p1)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_164": {
                "input": {
                    "value": "exc_p1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "exc_p1.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_166": {
                "input": {
                    "value": "inh_p1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inh_p1.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_182": {
                "variable": {
                    "value": "exc_weight_l2_l0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(exc_weight_decay_ungated + self.l0_strength) * exc_p1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_184": {
                "variable": {
                    "value": "inh_weight_l2_l0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(inh_weight_decay_ungated + self.l0_strength) * inh_p1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_207": {
                "variable": {
                    "value": "(_, exc_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "exc_p1[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "exc_count1[i].item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_208": {
                "variable": {
                    "value": "(_, inh_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inh_p1[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "inh_count1[i].item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_239": {
                "tensors": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "linear_242": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.hardtanh(x, -1, 1)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_weight(self.exc_p1, self.exc_weight, self.deterministic) - sample_weight(self.inh_p1, self.inh_weight, self.deterministic)",
                            "BinOp"
                        ],
                        [
                            "exc_mask * self.exc_weight - inh_mask * self.inh_weight",
                            "BinOp"
                        ],
                        [
                            "sample_weight(self.exc_p1, self.exc_weight, self.deterministic, samples) - sample_weight(self.inh_p1, self.inh_weight, self.deterministic, samples)",
                            "BinOp"
                        ],
                        [
                            "exc_mask * self.exc_weight - inh_mask * self.inh_weight",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "-w.sum(dim=-1) / 2",
                            "BinOp"
                        ],
                        [
                            "b + self.bias if b is not None else self.bias",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "-w.sum(dim=(-3, -2, -1)) / 2",
                            "BinOp"
                        ],
                        [
                            "b + self.bias if b is not None else self.bias",
                            "IfExp"
                        ],
                        [
                            "b.view(x.size(0) * self.out_channels)",
                            "Call"
                        ],
                        [
                            "b.repeat(x.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_268": {
                "input": {
                    "value": "nz_by_unit > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Tensor_335": {},
            "Tensor_337": {},
            "clamp_376": {
                "input": {
                    "value": "exc_p1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "exc_p1.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_378": {
                "input": {
                    "value": "inh_p1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inh_p1.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_395": {
                "variable": {
                    "value": "exc_weight_l2_l0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(exc_weight_decay_ungated + self.l0_strength) * exc_p1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_397": {
                "variable": {
                    "value": "inh_weight_l2_l0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(inh_weight_decay_ungated + self.l0_strength) * inh_p1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_429": {
                "variable": {
                    "value": "(_, exc_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "exc_p1[i].flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "exc_count1[i].item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_431": {
                "variable": {
                    "value": "(_, inh_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inh_p1[i].flatten()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "inh_count1[i].item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_480": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.hardtanh(x, -1, 1)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_weight(self.exc_p1, self.exc_weight, self.deterministic) - sample_weight(self.inh_p1, self.inh_weight, self.deterministic)",
                            "BinOp"
                        ],
                        [
                            "exc_mask * self.exc_weight - inh_mask * self.inh_weight",
                            "BinOp"
                        ],
                        [
                            "sample_weight(self.exc_p1, self.exc_weight, self.deterministic, samples) - sample_weight(self.inh_p1, self.inh_weight, self.deterministic, samples)",
                            "BinOp"
                        ],
                        [
                            "exc_mask * self.exc_weight - inh_mask * self.inh_weight",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "-w.sum(dim=-1) / 2",
                            "BinOp"
                        ],
                        [
                            "b + self.bias if b is not None else self.bias",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "-w.sum(dim=(-3, -2, -1)) / 2",
                            "BinOp"
                        ],
                        [
                            "b + self.bias if b is not None else self.bias",
                            "IfExp"
                        ],
                        [
                            "b.view(x.size(0) * self.out_channels)",
                            "Call"
                        ],
                        [
                            "b.repeat(x.size(0))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_506": {
                "input": {
                    "value": "nz_by_unit > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_129": {},
            "mean_171": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "connections_per_unit.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_343": {},
            "mean_384": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "connections_per_unit.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "0.5 * self.l2_strength * self.bias.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_238": {
                "input": {
                    "value": "x[i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sample_weight(self.exc_p1, self.exc_weight, self.deterministic) - sample_weight(self.inh_p1, self.inh_weight, self.deterministic)",
                            "BinOp"
                        ],
                        [
                            "exc_mask * self.exc_weight - inh_mask * self.inh_weight",
                            "BinOp"
                        ],
                        [
                            "sample_weight(self.exc_p1, self.exc_weight, self.deterministic, samples) - sample_weight(self.inh_p1, self.inh_weight, self.deterministic, samples)",
                            "BinOp"
                        ],
                        [
                            "exc_mask * self.exc_weight - inh_mask * self.inh_weight",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "-w.sum(dim=-1) / 2",
                            "BinOp"
                        ],
                        [
                            "b + self.bias if b is not None else self.bias",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "-w.sum(dim=(-3, -2, -1)) / 2",
                            "BinOp"
                        ],
                        [
                            "b + self.bias if b is not None else self.bias",
                            "IfExp"
                        ],
                        [
                            "b.view(x.size(0) * self.out_channels)",
                            "Call"
                        ],
                        [
                            "b.repeat(x.size(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_400": {
                "input": {
                    "value": "0.5 * self.l2_strength * self.bias.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_554": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_590": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_173": {
                "input": {
                    "value": "connections_per_unit - mean / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_386": {
                "input": {
                    "value": "connections_per_unit - mean / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/modules/reparameterization_layers.py": {
        "torch": {
            "Parameter_72": {
                "variable": {
                    "value": "self.loga",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_110": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.log(x) - torch.log(1 - x) + self.loga) / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_124": {
                "variable": {
                    "value": "weight_l2_l0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(weight_decay_ungated + self.l0_strength) * (1 - self.cdf_qz(0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_135": {
                "variable": {
                    "value": "multiplies",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nz_by_unit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_inference_nonzeros()",
                            "Call"
                        ],
                        [
                            "self.get_inference_nonzeros()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_149": {
                "variable": {
                    "value": "ppos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - self.cdf_qz(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "hardtanh_185": {
                "variable": {
                    "value": "inference_gates",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(self.loga) * (LIMIT_B - LIMIT_A) + LIMIT_A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_251": {
                "variable": {
                    "value": "self.loga",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_291": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.log(x) - torch.log(1 - x) + self.loga) / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_304": {
                "variable": {
                    "value": "weight_l2_l0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(weight_decay_ungated + self.l0_strength) * (1 - self.cdf_qz(0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_314": {
                "variable": {
                    "value": "multiplies_per_instance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nz_by_unit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_inference_nonzeros()",
                            "Call"
                        ],
                        [
                            "self.get_inference_nonzeros()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_338": {
                "variable": {
                    "value": "ppos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - self.cdf_qz(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "hardtanh_398": {
                "variable": {
                    "value": "inference_gates",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(self.loga) * (LIMIT_B - LIMIT_A) + LIMIT_A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(out_features, in_features)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_77": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "input": {
                    "value": "logits * self.temperature - self.loga",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_102": {
                "min": {
                    "value": "EPSILON",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "1 - EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "hardtanh_167": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.quantile_concrete(self.get_eps(self.floatTensor(self.loga.size())))",
                            "Call"
                        ],
                        [
                            "self.quantile_concrete(self.get_eps(self.floatTensor(self.loga.size())))",
                            "Call"
                        ]
                    ]
                },
                "min_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_169": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.loga",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "hardtanh_170": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi * (LIMIT_B - LIMIT_A) + LIMIT_A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_176": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.sample_weight()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias if self.use_bias else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_248": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(out_features, in_features)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_257": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_283": {
                "input": {
                    "value": "logits * self.temperature - self.loga",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_283": {
                "min": {
                    "value": "EPSILON",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "1 - EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "hardtanh_376": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.quantile_concrete(self.get_eps(self.floatTensor(self.loga.size())))",
                            "Call"
                        ],
                        [
                            "self.quantile_concrete(self.get_eps(self.floatTensor(self.loga.size())))",
                            "Call"
                        ]
                    ]
                },
                "min_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_378": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.loga",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "hardtanh_379": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi * (LIMIT_B - LIMIT_A) + LIMIT_A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_387": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.sample_weight()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias if self.use_bias else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_72": {},
            "Parameter_79": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(out_features)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(out_channels)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_127": {
                "input": {
                    "value": "0.5 * self.l2_strength * self.bias.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "nz_by_unit > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Tensor_251": {},
            "Parameter_259": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(out_features)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(out_channels)",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_307": {
                "input": {
                    "value": "0.5 * self.l2_strength * self.bias.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_315": {
                "input": {
                    "value": "nz_by_unit > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_186": {
                "input": {
                    "value": "self.loga",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_399": {
                "input": {
                    "value": "self.loga",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_111": {
                "input": {
                    "value": "1 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_292": {
                "input": {
                    "value": "1 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/modules/vdrop_layers.py": {
        "torch": {
            "linear_608": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.square()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "get_w_var()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_648": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.square()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "get_w_var()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.z_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat(self.all_z_mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.z_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat(self.all_z_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "self.z_num_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.all_num_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_interleave_110": {
                "variable": {
                    "value": "self.z_num_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(self.z_chunk_sizes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "self.z_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.all_z_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_346": {
                "variable": {
                    "value": "self.w_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_347": {
                "variable": {
                    "value": "self.w_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_416": {
                "variable": {
                    "value": "self.w_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_419": {
                "variable": {
                    "value": "self.w_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_622": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "get_w_mu()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_668": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "get_w_mu()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_714": {
                "variable": {
                    "value": "sig",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K2 + K3 * logalpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_169": {
                "variable": {
                    "value": "z_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_mu.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_218": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_281": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_349": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_423": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "self.all_z_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "self.all_z_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "self.z_chunk_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_255": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.get_w_mu()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_328": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.get_w_mu()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_382": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.get_w_mu()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_479": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.get_w_mu()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_580": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_218": {},
            "is_available_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_281": {},
            "is_available_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_349": {},
            "is_available_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_423": {},
            "is_available_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_499": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_564": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_680": {
                "input": {
                    "value": "k2 + k3 * logalpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_681": {
                "input": {
                    "value": "-logalpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_703": {
                "input": {
                    "value": "K2 + K3 * logalpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_704": {
                "input": {
                    "value": "-logalpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_716": {
                "input": {
                    "value": "-logalpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/networks/alexnet.py": {
        "torch": {
            "Conv2d_43": {
                "in_channels": {
                    "value": "input_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "64 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "64 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "192 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "192 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "384 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "384 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "256 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "256 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_80": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_95": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_98": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_103": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_106": {
                "num_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/networks/alexnet_binaryactivation.py": {
        "torch": {
            "Conv2d_50": {
                "in_channels": {
                    "value": "input_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "64 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "64 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "192 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "192 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "384 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "384 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "256 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "256 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_97": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_104": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_111": {
                "num_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/networks/alexnet_binaryactivation_kwinners.py": {
        "torch": {
            "hardtanh_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.hardtanh(x, -1, 1)",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ]
                    ]
                },
                "min_val": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "input_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_75": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "64 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "64 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_92": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "192 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "192 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "384 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "384 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "256 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "256 * ratio_infl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_141": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_158": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_159": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_173": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_174": {
                "num_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_189": {
                "num_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/networks/alexnet_kwinners.py": {
        "torch": {
            "Conv2d_67": {
                "in_channels": {
                    "value": "input_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_70": {
                "kernel_size": {
                    "value": "maxpool_stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_89": {
                "kernel_size": {
                    "value": "maxpool_stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "feature_map_sidelength ** 2 * cnn_out_channels[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_109": {
                "num_features": {
                    "value": "linear_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "linear_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/networks/lenet_backpropstructure.py": {
        "torch": {
            "MaxPool2d_81": {
                "kernel_size": {
                    "value": "maxpool_stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_102": {
                "kernel_size": {
                    "value": "maxpool_stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "num_features": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_107": {
                "num_features": {
                    "value": "cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_128": {
                "num_features": {
                    "value": "linear_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/networks/lenet_vdrop.py": {
        "torch": {
            "MaxPool2d_68": {
                "kernel_size": {
                    "value": "maxpool_stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_88": {
                "kernel_size": {
                    "value": "maxpool_stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_113": {
                "num_features": {
                    "value": "linear_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "packages/backprop_structure/src/nupic/research/frameworks/backprop_structure/networks/vdrop_lenet.py": {
        "torch": {
            "MaxPool2d_78": {
                "kernel_size": {
                    "value": "maxpool_stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_108": {
                "kernel_size": {
                    "value": "maxpool_stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_115": {
                "num_features": {
                    "value": "cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_143": {
                "num_features": {
                    "value": "linear_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn_track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "packages/continual_learning/src/nupic/research/frameworks/continual_learning/distributed/experiments/cl_experiment.py": {
        "torch": {
            "DistributedDataParallel_47": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_49": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "packages/continual_learning/src/nupic/research/frameworks/continual_learning/experiments/cl_experiment.py": {
        "torch": {}
    },
    "packages/continual_learning/src/nupic/research/frameworks/continual_learning/mixins/ewc.py": {
        "torch": {
            "cat_87": {
                "variable": {
                    "value": "loglikelihoods",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loglikelihoods",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loglikelihoods).unbind()",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_87": {
                "variable": {
                    "value": "loglikelihoods",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_94": {
                "tensors": {
                    "value": "gs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_78": {
                "input": {
                    "value": "self.model(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_89": {
                "outputs": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "i < len(loglikelihoods)",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "packages/continual_learning/src/nupic/research/frameworks/continual_learning/mixins/si.py": {
        "torch": {
            "tensor_114": {
                "variable": {
                    "value": "surrogate_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "self.small_omega[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "param.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "self.delta[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "param.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "self.big_omega[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "param.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clone_93": {
                "variable": {
                    "value": "self.delta[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "param - self.stable_params[name]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_135": {
                "variable": {
                    "value": "param_change",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param - self.unstable_params[name]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_142": {
                "variable": {
                    "value": "self.stable_params[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clone_146": {
                "variable": {
                    "value": "self.unstable_params[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_94": {
                "input": {
                    "value": "self.small_omega[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "packages/continual_learning/src/nupic/research/frameworks/continual_learning/samplers.py": {
        "torch": {
            "Generator_56": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_61": {
                "n": {
                    "value": "len(indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/apply_dendrites_hook.py": {
        "torch": {
            "tensor_43": {
                "variable": {
                    "value": "self.dendrite_activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "self.winning_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "self.winning_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(winning_mask, self.winning_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "self.dendrite_activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dendrite_activations, self.dendrite_activations)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/functional/apply_dendrites.py": {
        "torch": {
            "gather_81": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(dendrite_activations, dim=2, index=unsqueezed)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "unsqueezed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "indices.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_155": {
                "variable": {
                    "value": "sigmoid_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "winning_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gather_activations(dendrite_activations, indices)",
                            "Call"
                        ],
                        [
                            "gather_activations(dendrite_activations, indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_156": {
                "variable": {
                    "value": "y_gated",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bijk,bi->bijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_106": {
                "input": {
                    "value": "winning_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gather_activations(dendrite_activations, indices)",
                            "Call"
                        ],
                        [
                            "gather_activations(dendrite_activations, indices)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/metrics/metrics.py": {
        "torch": {
            "zeros_50": {
                "variable": {
                    "value": "percent_active",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_units, num_segments, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "msa",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_units, num_segments, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "selected_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "habu",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, num_units)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "variable": {
                    "value": "cbc",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, dim_context)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bmm_262": {
                "variable": {
                    "value": "overlap_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "percent_active.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "percent_active",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((num_units, num_segments, 0))",
                            "Call"
                        ],
                        [
                            "percent_active.to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((percent_active, percent_active_t), dim=2)",
                            "Call"
                        ],
                        [
                            "percent_active_dendrites(winning_mask, targets)",
                            "Call"
                        ],
                        [
                            "percent_active / l2_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_300": {
                "variable": {
                    "value": "ltril_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_categories, num_categories)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_386": {
                "variable": {
                    "value": "overlap_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_categories, num_categories)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_54": {
                "variable": {
                    "value": "inds_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(targets == t).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "percent_active",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(percent_active, percent_active_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_96": {
                "variable": {
                    "value": "inds_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(targets == t).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "msa",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(msa, msa_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_143": {
                "variable": {
                    "value": "inds_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(targets == t).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_151": {
                "variable": {
                    "value": "selected_activations_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "selected_activations_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "raw_winners[inds_t]",
                            "Subscript"
                        ],
                        [
                            "selected_activations_t.sum(dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(selected_activations_t)",
                            "Call"
                        ],
                        [
                            "selected_activations_t.mean(dim=0)",
                            "Call"
                        ],
                        [
                            "selected_activations_t.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_155": {
                "variable": {
                    "value": "selected_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(selected_activations, selected_activations_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_190": {
                "variable": {
                    "value": "inds_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(targets == t).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "habu",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(habu, habu_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_230": {
                "variable": {
                    "value": "inds_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(targets == t).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "cbc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cbc, contexts_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_443": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_456": {
                "variable": {
                    "value": "inds_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(targets == t1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_460": {
                "variable": {
                    "value": "inds_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(targets == t2).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_464": {
                "variable": {
                    "value": "overlap_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activations_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "activations[inds_1]",
                            "Subscript"
                        ],
                        [
                            "(activations_1 != 0.0).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "activations_2.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/metrics/plotting.py": {
        "torch": {
            "randperm_586": {
                "variable": {
                    "value": "units",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "winning_mask.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "generator": {
                    "value": "get_random_generator(seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Generator_612": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_92": {
                "variable": {
                    "value": "winning_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "winning_mask[:, unit_to_plot, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/metrics/visualize_demo.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-0.2114, 0.1766, 0.605, 0.66, -0.953, 0.4609, -0.1015]], [[-0.2442, -0.7882, 0.3758, -0.0182, -0.5847, 0.036, -0.2504]], [[0.8437, 0.2504, 0.2197, 0.4834, 0.2731, -0.3862, -0.1709]], [[-0.3383, 0.7264, 0.1994, -0.6035, 0.3236, 0.079, 0.2049]], [[0.5494, -0.4031, 0.6324, 0.1556, -0.2197, 0.2124, 0.0208]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "winning_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]], [[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]], [[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], [[0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]], [[0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/mixins/context_signal.py": {
        "torch": {
            "tensor_97": {
                "variable": {
                    "value": "self.context_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "self.context_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target, self.context_targets]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/mixins/dendrite_metrics.py": {
        "torch": {
            "tensor_140": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target, self.targets]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/mixins/hidden_activations.py": {
        "torch": {
            "tensor_94": {
                "variable": {
                    "value": "self.ha_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "self.ha_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target, self.ha_targets]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/mixins/prototype_context.py": {
        "torch": {
            "zeros_153": {
                "variable": {
                    "value": "prototype_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_335": {
                "variable": {
                    "value": "cov1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(set1 - mean1).T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "set1 - mean1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_338": {
                "variable": {
                    "value": "cov2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(set2 - mean2).T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "set2 - mean2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_346": {
                "variable": {
                    "value": "t_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(mean1 - mean2).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.pinverse(cov)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_347": {
                "variable": {
                    "value": "t_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_squared",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul((mean1 - mean2).unsqueeze(0), torch.pinverse(cov))",
                            "Call"
                        ],
                        [
                            "torch.matmul(t_squared, mean1 - mean2)",
                            "Call"
                        ],
                        [
                            "n1 * n2 / (n1 + n2) * t_squared",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "mean1 - mean2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "self.contexts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, self.model.dim_context)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cdist_286": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, subindices]",
                            "Subscript"
                        ],
                        [
                            "data[:, subindices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_126": {
                "variable": {
                    "value": "self.contexts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.contexts, self.context_vector.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "contexts[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(contexts[0], data.mean(dim=0).unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pinverse_346": {
                "input": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(n1 - 1) * cov1 + (n2 - 1) * cov2",
                            "BinOp"
                        ],
                        [
                            "cov / (n1 + n2 - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_260": {
                "variable": {
                    "value": "clusters[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(clusters[j][retain_inds], data[new_inds])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/mixins/prototype_figure_1b.py": {
        "torch": {
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cdist_93": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "self.contexts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x2": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.flatten(start_dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_65": {
                "obj": {
                    "value": "hidden_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f'x_{filename}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.ha_targets[:self.ha_max_samples]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "f'y_{filename}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "self.ha_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target, self.ha_targets]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/mixins/representation_overlap.py": {
        "torch": {
            "tensor_103": {
                "variable": {
                    "value": "self.ro_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "self.ro_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target, self.ro_targets]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/mixins/sp_context.py": {
        "torch": {
            "Linear_48": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/model_utils.py": {
        "torch": {
            "tensor_186": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "true_divide_227": {
                "dividend": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(0, device=device)",
                            "Call"
                        ],
                        [
                            "correct + pred.eq(target.view_as(pred)).sum()",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "total + len(data)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/modules/apply_dendrites.py": {
        "torch": {}
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/modules/boosted_dendrites.py": {
        "torch": {
            "tensor_114": {
                "variable": {
                    "value": "boost_strength",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boost_strength",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(boost_strength, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "duty_cycles",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_units, num_segments)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_138": {
                "input": {
                    "value": "-self.boost_strength * self.duty_cycles",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/modules/dendrite_segments.py": {
        "torch": {
            "ones_159": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_65": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(num_units, num_segments, dim_context)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_121": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,bk->bij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_70": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(num_units, num_segments)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/modules/dendritic_layers.py": {
        "torch": {
            "Linear_175": {
                "in_features": {
                    "value": "dim_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "module.weight.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "dendrite_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_198": {
                "input": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.segments(context)",
                            "Call"
                        ],
                        [
                            "self.segments(context)",
                            "Call"
                        ],
                        [
                            "self.segments(context)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/modules/dendritic_mlp.py": {
        "torch": {
            "ModuleList_116": {
                "variable": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "variable": {
                    "value": "self._activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_181": {
                "variable": {
                    "value": "self._output_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_170": {
                "variable": {
                    "value": "curr_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "new_dendritic_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_units, num_segments, dim_context)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_274": {
                "*size": {
                    "value": "(num_units, num_segments, dim_context)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden_sizes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden_sizes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Name"
                        ]
                    ]
                }
            },
            "randperm_287": {
                "n": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_304": {
                "n": {
                    "value": "num_contexts",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/routing/init_functions.py": {
        "torch": {
            "device_71": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_172": {
                "variable": {
                    "value": "routing_test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "routing_test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RoutingDataset(routing_function=routing_function, input_size=routing_function.sparse_weights.module.in_features, context_vectors=context_vectors, device=device, x_min=x_min, x_max=x_max)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "dendrite_layer_forward_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_136": {
                "*size": {
                    "value": "dendrite_layer.zero_mask.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_182": {
                "params": {
                    "value": "layer.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "dendrite_layer_forward_module",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_115": {
                "n": {
                    "value": "num_contexts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_184": {
                "params": {
                    "value": "layer.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_186": {
                "params": {
                    "value": "list(layer.parameters()) + list(context_model.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/routing/routing.py": {
        "torch": {
            "randn_206": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_174": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.get_output_mask(j) for j in output_mask_inds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_93": {
                "seed": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, context)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "in_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_157": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_95": {
                "*size": {
                    "value": "(self.input_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/src/nupic/research/frameworks/dendrites/routing/utils.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "context_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros((num_contexts, num_zeros)), torch.ones((num_contexts, num_ones)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_86": {
                "variable": {
                    "value": "binary_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(k, n_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_87": {
                "variable": {
                    "value": "binary_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "binary_vectors > sparsity_level",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones((k, n_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros((k, n_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "context_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_units, num_dendrites, dim_context)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "mean_abs_err",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_38": {
                "start": {
                    "value": "num_contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_38": {
                "input": {
                    "value": "num_contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_89": {
                "*size": {
                    "value": "(k, n_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "(k, n_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_258": {
                "variable": {
                    "value": "abs_err",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "(num_contexts, num_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_64": {
                "*size": {
                    "value": "(num_contexts, num_ones)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_259": {
                "input": {
                    "value": "abs_err",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(output - target)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_69": {
                "n": {
                    "value": "n_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.manual_seed(seed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages/dendrites/tests/unit/apply_dendrites_modules_test.py": {
        "torch": {
            "rand_44": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_45": {
                "variable": {
                    "value": "self.dendrite_activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_segments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_47": {
                "variable": {
                    "value": "self.y_2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_48": {
                "variable": {
                    "value": "self.dendrite_activations_2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "packages/dendrites/tests/unit/boosted_dendrites_test.py": {
        "torch": {
            "tensor_61": {
                "variable": {
                    "value": "self.dendrite_segments.weights.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.0, 0.5414, -0.2743], [-0.3823, -0.269, 0.0], [0.0, -0.3561, -0.5487], [-0.5041, 0.0, 0.2422]], [[-0.3117, 0.123, 0.0], [-0.0781, 0.0, 0.4663], [0.3242, 0.5495, 0.0], [0.0, -0.1231, 0.0379]], [[0.0, -0.1057, 0.0344], [0.4062, 0.0, -0.5166], [0.0, -0.3438, -0.491], [0.1749, 0.0, -0.5589]]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "NUM_UNITS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "NUM_SEGMENTS",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.3539, -0.5627, -0.4905, -0.3609], [-0.1737, 0.0956, 0.7448, -0.0891], [-0.0759, 0.1772, -0.4598, -0.0426]], [[0.2239, -0.3209, -0.3698, -0.1477], [-0.0672, 0.108, 0.4547, -0.0584], [-0.0495, 0.0209, -0.3452, -0.0937]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "expected_boosted",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.3539, -0.5627, -0.4905, -0.3609], [-0.1737, 0.0956, 0.7448, -0.0891], [-0.0759, 0.1772, -0.4598, -0.0426]], [[0.2239, -0.3209, -0.3698, -0.1477], [-0.0672, 0.108, 0.4547, -0.0584], [-0.0495, 0.0209, -0.3452, -0.0937]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.3539, -0.5627, -0.4905, -0.3609], [-0.1737, 0.0956, 0.7448, -0.0891], [-0.0759, 0.1772, -0.4598, -0.0426]], [[0.2239, -0.3209, -0.3698, -0.1477], [-0.0672, 0.108, 0.4547, -0.0584], [-0.0495, 0.0209, -0.3452, -0.0937]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5737, 0.0753, 0.0143], [0.5244, 0.785, 0.5987]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "expected_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[False, True, False, False], [False, False, True, False], [False, False, True, False]], [[False, False, True, False], [False, False, True, False], [False, False, True, False]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.3539, -0.5627, -0.4905, -0.3609], [-0.1737, 0.0956, 0.7448, -0.0891], [-0.0759, 0.1772, -0.4598, -0.0426]], [[0.2239, -0.3209, -0.3698, -0.1477], [-0.0672, 0.108, 0.4547, -0.0584], [-0.0495, 0.0209, -0.3452, -0.0937]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5737, 0.0753, 0.0143], [0.5244, 0.785, 0.5987]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "expected_duty_cycles",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.5, 0.5, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5871, 0.9978, 0.5153], [0.8176, 0.8115, 0.5413]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.6483, 0.0565, 0.1324, 0.4405], [0.6355, 0.1367, 0.3567, 0.2174], [0.2007, 0.8239, 0.1598, 0.0793]], [[0.2204, 0.6325, 0.1207, 0.5185], [0.2294, 0.9949, 0.791, 0.8001], [0.8268, 0.2881, 0.2339, 0.4337]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "expected_duty_cycles",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.25, 0.25, 0.25, 0.25], [0.25, 0.25, 0.5, 0.0], [0.25, 0.25, 0.5, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.7358, 0.0697, 0.2366, 0.5241], [0.7539, 0.9194, 0.9102, 0.9367], [0.5127, 0.9793, 0.3772, 0.3956]], [[0.0988, 0.5655, 0.3606, 0.4948], [0.9216, 0.6567, 0.3888, 0.7455], [0.536, 0.8731, 0.0628, 0.0343]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.3009, 0.592, 0.586], [0.9896, 0.9888, 0.4689]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_295": {
                "variable": {
                    "value": "expected_duty_cycles",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.375, 0.375, 0.125, 0.125], [0.125, 0.125, 0.25, 0.5], [0.125, 0.625, 0.25, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_309": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.8858, 0.8328, 0.3534], [0.4397, 0.5681, 0.3052]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5737, 0.0753, 0.0143], [0.5244, 0.785, 0.5987]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_325": {
                "variable": {
                    "value": "expected_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 2], [2, 2, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "expected_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.0, 0.0, 0.0], [0.1175, 0.1105, 0.0469], [0.0557, 0.072, 0.0387], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0965, 0.1196, 0.0627], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0669, 0.0854, 0.0455], [0.0, 0.0, 0.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_370": {
                "variable": {
                    "value": "all_close",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dendrite_segments.weights.grad",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[0.0, 0.0, 0.0], [0.1175, 0.1105, 0.0469], [0.0557, 0.072, 0.0387], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0965, 0.1196, 0.0627], [0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0669, 0.0854, 0.0455], [0.0, 0.0, 0.0]]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/tests/unit/dendrite_metric_mixins_test.py": {
        "torch": {
            "Flatten_48": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_62": {
                "variable": {
                    "value": "dendritic_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_segments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/tests/unit/dendritric_layer_test.py": {
        "torch": {
            "rand_47": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "dendrite_segments.dim_context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_86": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "dendrite_segments.dim_context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_124": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_layer.module.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer.module.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer.module.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_125": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "context_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_layer.segments.weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer.segments.weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer.segments.weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "linear.weight.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.04, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, -0.26], [0.0, 0.0, 0.0, -0.13], [0.0, 0.0, 0.0, 0.41]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "dendrite_layer.segments.weights.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-0.26, 0.0, 0.0, 0.0], [0.09, 0.0, 0.0, 0.0], [-0.34, 0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0, 0.36], [0.0, 0.0, 0.0, -0.32], [0.0, 0.0, 0.0, 0.41]], [[0.0, 0.0, 0.0, 0.18], [0.0, 0.0, 0.38, 0.0], [0.0, 0.0, 0.23, 0.0]], [[0.0, 0.0, 0.0, 0.23], [-0.3, 0.0, 0.0, 0.0], [0.0, 0.0, -0.24, 0.0]]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.79, 0.36, 0.47, 0.3], [0.55, 0.64, 0.5, 0.5]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.84, 0.63, 0.67, 0.42], [0.3, 0.07, 0.52, 0.15]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "expected_dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-0.2184, 0.0756, -0.2856], [0.1512, -0.1344, 0.1722], [0.0756, 0.2546, 0.1541], [0.0966, -0.252, -0.1608]], [[-0.078, 0.027, -0.102], [0.054, -0.048, 0.0615], [0.027, 0.1976, 0.1196], [0.0345, -0.09, -0.1248]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "biasing_dendrites",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0756, 0.1722, 0.2546, 0.0966], [0.027, 0.0615, 0.1976, 0.0345]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_234": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, -0.1, 0.5], [0.2, 0.3, -0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_248": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.43, 1.64, 1.49], [-0.79, 0.53, 1.08], [0.02, 0.04, 0.57]], [[1.79, -0.48, -0.38], [-0.15, 0.76, -1.13], [1.04, -0.58, -0.31]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_256": {
                "variable": {
                    "value": "max_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.64, 1.08, 0.57], [1.79, 0.76, 1.04]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_271": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_299": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_313": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_layer.module.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer.module.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer.module.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_314": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "context_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_layer.segments.weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer.segments.weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer.segments.weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_325": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_336": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.73, 0.72, 0.62], [0.26, 0.24, 0.65]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_339": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-1.15, -0.49], [0.87, -0.58], [-0.36, -0.93]], [[-0.08, -1.0], [-0.71, 0.08], [0.15, 0.4]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "max_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.49, 0.87, -0.36], [-0.08, 0.08, 0.4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_360": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_373": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_layer.module.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer.module.weight.shape[1]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer.module.weight.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_374": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "context_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_layer.segments.weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer.segments.weights.shape[2]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer.segments.weights.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_381": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_400": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_411": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, -0.1, 0.5], [0.2, 0.3, -0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_414": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.43, -1.64, 1.49], [-0.79, 0.53, 1.08], [0.02, 0.04, -0.57]], [[1.79, -0.48, -0.38], [-0.15, 0.76, -1.13], [1.04, -0.58, -0.31]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_422": {
                "variable": {
                    "value": "absolute_max_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-1.64, 1.08, -0.57], [1.79, -1.13, 1.04]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_440": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_451": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, -0.1, 0.5], [0.2, 0.3, -0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_454": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.43, -1.64, 1.49], [-0.79, 0.53, 1.08], [0.02, 0.04, -0.57]], [[1.79, -0.48, -0.38], [-0.15, 0.76, -1.13], [1.04, -0.58, -0.31]]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_465": {
                "variable": {
                    "value": "expected_grad_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0]], [[1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_482": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_497": {
                "variable": {
                    "value": "conv_layer.weight.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0.0, 0.3105], [-0.1523, 0.0]], [[0.0, 0.0083], [-0.2167, 0.0483]]], [[[0.1621, 0.0], [-0.3283, 0.0101]], [[-0.1045, 0.0261], [0.0, 0.0]]], [[[0.0, -0.0968], [0.0499, 0.0]], [[0.085, 0.0], [0.2646, -0.3485]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_513": {
                "variable": {
                    "value": "conv_layer.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.2027, -0.1821, 0.2152]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_518": {
                "variable": {
                    "value": "dendrite_layer.segments.weights.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-0.4933, 0.0, 0.0, 0.0], [0.0, 0.0, 0.3805, 0.0], [0.0, 0.0, 0.0, -0.1641]], [[0.0, 0.0, 0.0, 0.3555], [0.0, 0.0, 0.0, 0.1892], [0.0, 0.0, -0.4274, 0.0]], [[0.0, 0.0, 0.0, 0.0957], [0.0, 0.0, -0.0689, 0.0], [0.0, 0.0, 0.0, -0.3192]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_537": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0.1553, 0.3405, 0.2367], [0.7661, 0.1383, 0.6675], [0.6464, 0.1559, 0.9777]], [[0.4114, 0.6362, 0.702], [0.2617, 0.2275, 0.4238], [0.6374, 0.827, 0.7528]]], [[[0.8331, 0.7792, 0.4369], [0.7947, 0.2609, 0.1992], [0.1527, 0.3006, 0.5496]], [[0.6811, 0.6871, 0.0148], [0.6084, 0.8351, 0.5382], [0.7421, 0.8639, 0.7444]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_565": {
                "variable": {
                    "value": "context_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_598": {
                "variable": {
                    "value": "expected_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[-0.1509338, -0.10293911], [-0.21057076, -0.094148]], [[-0.2167, -0.10685], [-0.145, -0.10685]], [[0.1227, 0.0829], [0.0684, 0.0671]]], [[[-0.0838, -0.1308], [-0.1285, -0.1667]], [[-0.1793, -0.1054], [-0.0711, -0.1531]], [[0.0536, 0.1389], [0.0723, 0.1256]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_615": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_628": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0.3, 0.4], [-0.2, 0.1]], [[-0.3, 0.5], [-0.1, 0.1]], [[0.0, 0.1], [0.3, 0.2]]], [[[0.1, -0.2], [-0.2, 0.1]], [[0.0, 0.1], [-0.4, -0.1]], [[-0.3, 0.0], [0.2, 0.4]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_642": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.4, 0.9, -0.1], [-0.8, 0.7, 0.0], [0.6, -0.6, -0.7]], [[0.2, 0.8, 0.8], [-0.1, -0.4, -0.5], [0.0, 0.0, 0.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_654": {
                "variable": {
                    "value": "expected_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0.2133, 0.2844], [-0.1422, 0.0711]], [[-0.2005, 0.3341], [-0.0668, 0.0668]], [[0.0, 0.0646], [0.1937, 0.1291]]], [[[0.069, -0.138], [-0.138, 0.069]], [[0.0, 0.0475], [-0.19, -0.0475]], [[-0.15, 0.0], [0.1, 0.2]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_668": {
                "variable": {
                    "value": "all_matches",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expected_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y + max_activation",
                            "BinOp"
                        ],
                        [
                            "y * torch.sigmoid(max_activation)",
                            "BinOp"
                        ],
                        [
                            "y * torch.sigmoid(absolute_max_activations)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[[[-0.1509338, -0.10293911], [-0.21057076, -0.094148]], [[-0.2167, -0.10685], [-0.145, -0.10685]], [[0.1227, 0.0829], [0.0684, 0.0671]]], [[[-0.0838, -0.1308], [-0.1285, -0.1667]], [[-0.1793, -0.1054], [-0.0711, -0.1531]], [[0.0536, 0.1389], [0.0723, 0.1256]]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[0.2133, 0.2844], [-0.1422, 0.0711]], [[-0.2005, 0.3341], [-0.0668, 0.0668]], [[0.0, 0.0646], [0.1937, 0.1291]]], [[[0.069, -0.138], [-0.138, 0.069]], [[0.0, 0.0475], [-0.19, -0.0475]], [[-0.15, 0.0], [0.1, 0.2]]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[-0.0963335, -0.06570089], [-0.13439679, -0.06008996]], [[-0.17108351, -0.08435751], [-0.11447673, -0.08435751]], [[0.11847466, 0.08004522], [0.06604455, 0.06478932]]], [[[-0.0838, -0.1308], [-0.1285, -0.1667]], [[-0.1793, -0.1054], [-0.0711, -0.1531]], [[0.0536, 0.1389], [0.0723, 0.1256]]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[0.2133, 0.2844], [-0.1422, 0.0711]], [[-0.093, 0.155], [-0.031, 0.031]], [[0.0, 0.0332], [0.0995, 0.0664]]], [[[0.069, -0.138], [-0.138, 0.069]], [[0.0, 0.0622], [-0.249, -0.0622]], [[-0.15, 0.0], [0.1, 0.2]]]])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "actual_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer(x, context_vectors)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer(x, context_vectors)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_677": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_690": {
                "variable": {
                    "value": "dendrite_layer.segments.weights.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-0.4933, 0.0, 0.0, 0.0], [0.0, 0.0, 0.3805, 0.0], [0.0, 0.0, 0.0, -0.1641]], [[0.0, 0.0, 0.0, 0.3555], [0.0, 0.0, 0.0, 0.1892], [0.0, 0.0, -0.4274, 0.0]], [[0.0, 0.0, 0.0, 0.0957], [0.0, 0.0, -0.0689, 0.0], [0.0, 0.0, 0.0, -0.3192]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_709": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_712": {
                "variable": {
                    "value": "context_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_732": {
                "variable": {
                    "value": "expected_grad_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0]], [[1.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]], [[1.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_748": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_763": {
                "variable": {
                    "value": "conv_layer.weight.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0.0, 0.3105], [-0.1523, 0.0]], [[0.0, 0.0083], [-0.2167, 0.0483]]], [[[0.1621, 0.0], [-0.3283, 0.0101]], [[-0.1045, 0.0261], [0.0, 0.0]]], [[[0.0, -0.0968], [0.0499, 0.0]], [[0.085, 0.0], [0.2646, -0.3485]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_779": {
                "variable": {
                    "value": "conv_layer.bias.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.2027, -0.1821, 0.2152]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_784": {
                "variable": {
                    "value": "dendrite_layer.segments.weights.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-0.4933, 0.0, 0.0, 0.0], [0.0, 0.0, 0.3805, 0.0], [0.0, 0.0, 0.0, -0.1641]], [[0.0, 0.0, 0.0, 0.3555], [0.0, 0.0, 0.0, 0.1892], [0.0, 0.0, -0.4274, 0.0]], [[0.0, 0.0, 0.0, 0.0957], [0.0, 0.0, -0.0689, 0.0], [0.0, 0.0, 0.0, -0.3192]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_803": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0.1553, 0.3405, 0.2367], [0.7661, 0.1383, 0.6675], [0.6464, 0.1559, 0.9777]], [[0.4114, 0.6362, 0.702], [0.2617, 0.2275, 0.4238], [0.6374, 0.827, 0.7528]]], [[[0.8331, 0.7792, 0.4369], [0.7947, 0.2609, 0.1992], [0.1527, 0.3006, 0.5496]], [[0.6811, 0.6871, 0.0148], [0.6084, 0.8351, 0.5382], [0.7421, 0.8639, 0.7444]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_831": {
                "variable": {
                    "value": "context_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_864": {
                "variable": {
                    "value": "expected_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[-0.0963335, -0.06570089], [-0.13439679, -0.06008996]], [[-0.17108351, -0.08435751], [-0.11447673, -0.08435751]], [[0.11847466, 0.08004522], [0.06604455, 0.06478932]]], [[[-0.0838, -0.1308], [-0.1285, -0.1667]], [[-0.1793, -0.1054], [-0.0711, -0.1531]], [[0.0536, 0.1389], [0.0723, 0.1256]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_881": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_894": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0.3, 0.4], [-0.2, 0.1]], [[-0.3, 0.5], [-0.1, 0.1]], [[0.0, 0.1], [0.3, 0.2]]], [[[0.1, -0.2], [-0.2, 0.1]], [[0.0, 0.1], [-0.4, -0.1]], [[-0.3, 0.0], [0.2, 0.4]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_908": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.4, 0.9, -0.1], [-0.8, 0.7, 0.0], [0.6, -0.6, -0.7]], [[0.2, 0.8, 0.8], [-0.1, -0.4, 0.5], [0.0, 0.0, 0.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_920": {
                "variable": {
                    "value": "expected_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[0.2133, 0.2844], [-0.1422, 0.0711]], [[-0.093, 0.155], [-0.031, 0.031]], [[0.0, 0.0332], [0.0995, 0.0664]]], [[[0.069, -0.138], [-0.138, 0.069]], [[0.0, 0.0622], [-0.249, -0.0622]], [[-0.15, 0.0], [0.1, 0.2]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_934": {
                "variable": {
                    "value": "all_matches",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expected_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y + max_activation",
                            "BinOp"
                        ],
                        [
                            "y * torch.sigmoid(max_activation)",
                            "BinOp"
                        ],
                        [
                            "y * torch.sigmoid(absolute_max_activations)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[[[-0.1509338, -0.10293911], [-0.21057076, -0.094148]], [[-0.2167, -0.10685], [-0.145, -0.10685]], [[0.1227, 0.0829], [0.0684, 0.0671]]], [[[-0.0838, -0.1308], [-0.1285, -0.1667]], [[-0.1793, -0.1054], [-0.0711, -0.1531]], [[0.0536, 0.1389], [0.0723, 0.1256]]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[0.2133, 0.2844], [-0.1422, 0.0711]], [[-0.2005, 0.3341], [-0.0668, 0.0668]], [[0.0, 0.0646], [0.1937, 0.1291]]], [[[0.069, -0.138], [-0.138, 0.069]], [[0.0, 0.0475], [-0.19, -0.0475]], [[-0.15, 0.0], [0.1, 0.2]]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[-0.0963335, -0.06570089], [-0.13439679, -0.06008996]], [[-0.17108351, -0.08435751], [-0.11447673, -0.08435751]], [[0.11847466, 0.08004522], [0.06604455, 0.06478932]]], [[[-0.0838, -0.1308], [-0.1285, -0.1667]], [[-0.1793, -0.1054], [-0.0711, -0.1531]], [[0.0536, 0.1389], [0.0723, 0.1256]]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[0.2133, 0.2844], [-0.1422, 0.0711]], [[-0.093, 0.155], [-0.031, 0.031]], [[0.0, 0.0332], [0.0995, 0.0664]]], [[[0.069, -0.138], [-0.138, 0.069]], [[0.0, 0.0622], [-0.249, -0.0622]], [[-0.15, 0.0], [0.1, 0.2]]]])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "actual_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer(x, context_vectors)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer(x, context_vectors)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_943": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_956": {
                "variable": {
                    "value": "dendrite_layer.segments.weights.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[-0.4933, 0.0, 0.0, 0.0], [0.0, 0.0, 0.3805, 0.0], [0.0, 0.0, 0.0, -0.1641]], [[0.0, 0.0, 0.0, 0.3555], [0.0, 0.0, 0.0, 0.1892], [0.0, 0.0, -0.4274, 0.0]], [[0.0, 0.0, 0.0, 0.0957], [0.0, 0.0, -0.0689, 0.0], [0.0, 0.0, 0.0, -0.3192]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_975": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_978": {
                "variable": {
                    "value": "context_vectors",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0, 1.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_998": {
                "variable": {
                    "value": "expected_grad_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 1.0, 0.0]], [[0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_95": {
                "variable": {
                    "value": "expected_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand(batch_size, dendrite_segments.dim_context)",
                            "Call"
                        ],
                        [
                            "torch.rand(batch_size, dendrite_segments.dim_context)",
                            "Call"
                        ],
                        [
                            "torch.rand(batch_size, context_dim)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.84, 0.63, 0.67, 0.42], [0.3, 0.07, 0.52, 0.15]])",
                            "Call"
                        ],
                        [
                            "torch.rand(batch_size, context_dim)",
                            "Call"
                        ],
                        [
                            "torch.rand(batch_size, context_dim)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "unit_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights[unit, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "unit_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "biases[unit, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "allclose_97": {
                "variable": {
                    "value": "same_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actual_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out[:, unit, :]",
                            "Subscript"
                        ],
                        [
                            "dendrite_layer(x, context)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(context, unit_weight, unit_bias)",
                            "Call"
                        ],
                        [
                            "linear(x) + biasing_dendrites",
                            "BinOp"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_350": {
                "input": {
                    "value": "max_activation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1.64, 1.08, 0.57], [1.79, 0.76, 1.04]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[-0.49, 0.87, -0.36], [-0.08, 0.08, 0.4]])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_428": {
                "input": {
                    "value": "absolute_max_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[-1.64, 1.08, -0.57], [1.79, -1.13, 1.04]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_612": {
                "input": {
                    "value": "expected_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y + max_activation",
                            "BinOp"
                        ],
                        [
                            "y * torch.sigmoid(max_activation)",
                            "BinOp"
                        ],
                        [
                            "y * torch.sigmoid(absolute_max_activations)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[[[-0.1509338, -0.10293911], [-0.21057076, -0.094148]], [[-0.2167, -0.10685], [-0.145, -0.10685]], [[0.1227, 0.0829], [0.0684, 0.0671]]], [[[-0.0838, -0.1308], [-0.1285, -0.1667]], [[-0.1793, -0.1054], [-0.0711, -0.1531]], [[0.0536, 0.1389], [0.0723, 0.1256]]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[0.2133, 0.2844], [-0.1422, 0.0711]], [[-0.2005, 0.3341], [-0.0668, 0.0668]], [[0.0, 0.0646], [0.1937, 0.1291]]], [[[0.069, -0.138], [-0.138, 0.069]], [[0.0, 0.0475], [-0.19, -0.0475]], [[-0.15, 0.0], [0.1, 0.2]]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[-0.0963335, -0.06570089], [-0.13439679, -0.06008996]], [[-0.17108351, -0.08435751], [-0.11447673, -0.08435751]], [[0.11847466, 0.08004522], [0.06604455, 0.06478932]]], [[[-0.0838, -0.1308], [-0.1285, -0.1667]], [[-0.1793, -0.1054], [-0.0711, -0.1531]], [[0.0536, 0.1389], [0.0723, 0.1256]]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[0.2133, 0.2844], [-0.1422, 0.0711]], [[-0.093, 0.155], [-0.031, 0.031]], [[0.0, 0.0332], [0.0995, 0.0664]]], [[[0.069, -0.138], [-0.138, 0.069]], [[0.0, 0.0622], [-0.249, -0.0622]], [[-0.15, 0.0], [0.1, 0.2]]]])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "actual_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer(x, context_vectors)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer(x, context_vectors)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_878": {
                "input": {
                    "value": "expected_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y + max_activation",
                            "BinOp"
                        ],
                        [
                            "y * torch.sigmoid(max_activation)",
                            "BinOp"
                        ],
                        [
                            "y * torch.sigmoid(absolute_max_activations)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[[[-0.1509338, -0.10293911], [-0.21057076, -0.094148]], [[-0.2167, -0.10685], [-0.145, -0.10685]], [[0.1227, 0.0829], [0.0684, 0.0671]]], [[[-0.0838, -0.1308], [-0.1285, -0.1667]], [[-0.1793, -0.1054], [-0.0711, -0.1531]], [[0.0536, 0.1389], [0.0723, 0.1256]]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[0.2133, 0.2844], [-0.1422, 0.0711]], [[-0.2005, 0.3341], [-0.0668, 0.0668]], [[0.0, 0.0646], [0.1937, 0.1291]]], [[[0.069, -0.138], [-0.138, 0.069]], [[0.0, 0.0475], [-0.19, -0.0475]], [[-0.15, 0.0], [0.1, 0.2]]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[-0.0963335, -0.06570089], [-0.13439679, -0.06008996]], [[-0.17108351, -0.08435751], [-0.11447673, -0.08435751]], [[0.11847466, 0.08004522], [0.06604455, 0.06478932]]], [[[-0.0838, -0.1308], [-0.1285, -0.1667]], [[-0.1793, -0.1054], [-0.0711, -0.1531]], [[0.0536, 0.1389], [0.0723, 0.1256]]]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[[[0.2133, 0.2844], [-0.1422, 0.0711]], [[-0.093, 0.155], [-0.031, 0.031]], [[0.0, 0.0332], [0.0995, 0.0664]]], [[[0.069, -0.138], [-0.138, 0.069]], [[0.0, 0.0622], [-0.249, -0.0622]], [[-0.15, 0.0], [0.1, 0.2]]]])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "actual_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer(x, context_vectors)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ],
                        [
                            "dendrite_layer(x, context_vectors)",
                            "Call"
                        ],
                        [
                            "dendrite_layer.apply_dendrites(y, dendrite_activations)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/tests/unit/hardcoded_test.py": {
        "torch": {
            "stack_86": {
                "variable": {
                    "value": "context_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_vectors[j, :] for j in context_inds_test]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_94": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target - actual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_94": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_84": {
                "*size": {
                    "value": "(batch_size, dim_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/tests/unit/hidden_activations_test.py": {
        "torch": {
            "Flatten_46": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/tests/unit/learn_to_route_test.py": {
        "torch": {}
    },
    "packages/dendrites/tests/unit/one_segment_layer_test.py": {
        "torch": {
            "Linear_36": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "11",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_47": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "context_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, -0.1, 0.5], [0.2, 0.3, -0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.43, -1.64, 1.49], [1.79, -0.48, -0.38]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "input": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.43, -1.64, 1.49], [1.79, -0.48, -0.38]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages/dendrites/tests/unit/representation_overlap_test.py": {
        "torch": {
            "Flatten_46": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dendrites/tests/unit/routing_test.py": {
        "torch": {
            "randn_53": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, dim_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, dim_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dynamic_sparse/src/nupic/research/frameworks/dynamic_sparse/global_pruning.py": {
        "torch": {
            "parameters_to_vector_51": {
                "variable": {
                    "value": "flattened_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[m.weight for m in sparse_modules]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "parameters_to_vector_52": {
                "variable": {
                    "value": "flattened_off_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[m.zero_mask for m in sparse_modules]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "parameters_to_vector_93": {
                "variable": {
                    "value": "flattened_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[m.weight.grad for m in sparse_modules]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "parameters_to_vector_94": {
                "variable": {
                    "value": "flattened_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[m.zero_mask for m in sparse_modules]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dynamic_sparse/src/nupic/research/frameworks/dynamic_sparse/gmp_lr_scheduler.py": {
        "torch": {}
    },
    "packages/dynamic_sparse/tests/unit/global_pruning_test.py": {
        "torch": {
            "Flatten_43": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_67": {
                "input": {
                    "value": "tensor1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "tensor2",
                    "type": "Variable",
                    "possible_values": []
                },
                "atol": {
                    "value": "atol",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "model.lin1.module.weight.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.34, 0.0, -0.45], [-0.37, 0.0, 0.0, -0.45], [-0.31, 0.02, 0.0, 0.0], [0.42, -0.15, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "self.initial_lin1_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0, 1.0, 0.0], [0.0, 1.0, 1.0, 0.0], [0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "model.lin2.module.weight.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.09, 0.22, 0.0, 0.0], [0.13, 0.28, 0.0, 0.0], [0.0, 0.24, 0.0, -0.16], [0.0, 0.0, 0.01, 0.02]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "self.initial_lin2_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 1.0, 1.0], [0.0, 0.0, 1.0, 1.0], [1.0, 0.0, 1.0, 0.0], [1.0, 1.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "model.lin3.module.weight.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.14, 0.0, 0.0, -0.08], [0.0, -0.36, 0.0, -0.43], [0.0, 0.33, 0.0, -0.5], [0.22, 0.0, 0.41, 0.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "self.initial_lin3_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0, 1.0, 0.0], [1.0, 0.0, 1.0, 0.0], [1.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "expected_w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.34, 0.0, -0.45], [-0.37, 0.0, 0.0, -0.45], [-0.31, 0.0, 0.0, 0.0], [0.42, 0.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "expected_w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 0.0, 0.0], [0.0, 0.28, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "expected_w3",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 0.0, 0.0], [0.0, -0.36, 0.0, -0.43], [0.0, 0.33, 0.0, -0.5], [0.0, 0.0, 0.41, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parameters_to_vector_187": {
                "variable": {
                    "value": "zero_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.model.buffers()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parameters_to_vector_188": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.35, 0.94, 0.1, 0.31], [0.05, 0.16, 0.46, 0.11]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "variable": {
                    "value": "expected_w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.34, 0.0, -0.45], [-0.37, 0.0, 0.0, -0.45], [-0.31, 0.0, 0.0, 0.0], [0.42, 0.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "expected_w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 0.0, 0.0], [0.0, 0.28, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "expected_w3",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 0.0, 0.0], [0.0, -0.36, 0.0, -0.43], [0.0, 0.33, 0.0, -0.5], [0.0, 0.0, 0.41, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parameters_to_vector_243": {
                "variable": {
                    "value": "zero_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.model.buffers()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parameters_to_vector_244": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "packages/dynamic_sparse/tests/unit/local_pruning_test.py": {
        "torch": {
            "Sequential_30": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SparseWeights(nn.Linear(100, 100), sparsity=0.25)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/experiments/block_model_experiment.py": {
        "torch": {
            "stack_176": {
                "variable": {
                    "value": "log",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.multiple_module_loss_history",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/experiments/data_parallel_block_model_experiment.py": {
        "torch": {
            "DataParallel_38": {
                "variable": {
                    "value": "self.encoder_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder_classifier",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_39": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/experiments/greedy_infomax_experiment.py": {
        "torch": {
            "DataLoader_153": {
                "variable": {
                    "value": "sample_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "sample_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.load_dataset(config, dataset_type='supervised')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_173": {
                "variable": {
                    "value": "log",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.multiple_module_loss_history",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/models/bilinear_info.py": {
        "torch": {
            "ModuleList_64": {
                "variable": {
                    "value": "self.W_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Conv2d(in_channels, out_channels, 1, bias=False) for _ in range(self.k_predictions))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_201": {
                "variable": {
                    "value": "self.W_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(VDropConv2d(in_channels, out_channels, kernel_size=1, central_data=central_data, bias=False) for _ in range(self.k_predictions))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "ModuleList_259": {
                "variable": {
                    "value": "self.W_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Conv2d(in_channels, out_channels, 1, bias=False) for _ in range(self.k_predictions))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "randint_100": {
                "variable": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "ztwk_shuf.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "high": {
                    "value": "(ztwk_shuf.shape[0] * self.negative_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.device",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_108": {
                "variable": {
                    "value": "ztwk_shuf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ztwk_shuf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ztwk.view(ztwk.shape[0] * ztwk.shape[1] * ztwk.shape[2], ztwk.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.gather(ztwk_shuf, dim=0, index=rand_index, out=None)",
                            "Call"
                        ],
                        [
                            "ztwk_shuf.view(ztwk.shape[0], ztwk.shape[1], ztwk.shape[2], self.negative_samples, ztwk.shape[3]).permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "ztwk.view(ztwk.shape[0] * ztwk.shape[1] * ztwk.shape[2], ztwk.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.gather(ztwk_shuf, dim=0, index=rand_index, out=None)",
                            "Call"
                        ],
                        [
                            "ztwk_shuf.view(ztwk.shape[0], ztwk.shape[1], ztwk.shape[2], self.negative_samples, ztwk.shape[3]).permute(0, 1, 2, 4, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randint(ztwk_shuf.shape[0], (ztwk_shuf.shape[0] * self.negative_samples, 1), dtype=torch.long, device=device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "rand_index.repeat(1, ztwk_shuf.shape[1])",
                            "Call"
                        ],
                        [
                            "torch.randint(ztwk_shuf.shape[0], (ztwk_shuf.shape[0] * self.negative_samples, 1), dtype=torch.long, device=ztwk_shuf.device)",
                            "Call"
                        ],
                        [
                            "rand_index.repeat(1, ztwk_shuf.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "log_fk_main",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c[:, :, :-(k + skip_step), :].permute(2, 3, 0, 1).unsqueeze(-2).to(device)",
                            "Call"
                        ],
                        [
                            "c[:, :, :-(k + skip_step), :].permute(2, 3, 0, 1).unsqueeze(-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ztwk.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_124": {
                "variable": {
                    "value": "log_fk_main",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "log_fk_shuf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c[:, :, :-(k + skip_step), :].permute(2, 3, 0, 1).unsqueeze(-2).to(device)",
                            "Call"
                        ],
                        [
                            "c[:, :, :-(k + skip_step), :].permute(2, 3, 0, 1).unsqueeze(-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ztwk_shuf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ztwk.view(ztwk.shape[0] * ztwk.shape[1] * ztwk.shape[2], ztwk.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.gather(ztwk_shuf, dim=0, index=rand_index, out=None)",
                            "Call"
                        ],
                        [
                            "ztwk_shuf.view(ztwk.shape[0], ztwk.shape[1], ztwk.shape[2], self.negative_samples, ztwk.shape[3]).permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "ztwk.view(ztwk.shape[0] * ztwk.shape[1] * ztwk.shape[2], ztwk.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.gather(ztwk_shuf, dim=0, index=rand_index, out=None)",
                            "Call"
                        ],
                        [
                            "ztwk_shuf.view(ztwk.shape[0], ztwk.shape[1], ztwk.shape[2], self.negative_samples, ztwk.shape[3]).permute(0, 1, 2, 4, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "log_fk_shuf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "log_fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_fk_main, log_fk_shuf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "softmax_fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((log_fk_main, log_fk_shuf), 3)",
                            "Call"
                        ],
                        [
                            "log_fk.permute(2, 3, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((log_fk_main, log_fk_shuf), 3)",
                            "Call"
                        ],
                        [
                            "log_fk.permute(2, 3, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_135": {
                "variable": {
                    "value": "log_softmax_fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_fk + 1e-11",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "true_fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(log_fk.shape[0], log_fk.shape[-2], log_fk.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.device",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_145": {
                "variable": {
                    "value": "k_step_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.nll_loss(log_softmax_fk, true_fk, reduction='mean')",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.k_predictions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_149": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.add(total_loss, k_step_loss)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k_step_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.div(F.nll_loss(log_softmax_fk, true_fk, reduction='mean'), self.k_predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_296": {
                "variable": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "ztwk_shuf.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "high": {
                    "value": "(ztwk_shuf.shape[0] * self.negative_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ztwk_shuf.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_303": {
                "variable": {
                    "value": "ztwk_shuf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ztwk_shuf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ztwk.view(ztwk.shape[0] * ztwk.shape[1] * ztwk.shape[2], ztwk.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.gather(ztwk_shuf, dim=0, index=rand_index, out=None)",
                            "Call"
                        ],
                        [
                            "ztwk_shuf.view(ztwk.shape[0], ztwk.shape[1], ztwk.shape[2], self.negative_samples, ztwk.shape[3]).permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "ztwk.view(ztwk.shape[0] * ztwk.shape[1] * ztwk.shape[2], ztwk.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.gather(ztwk_shuf, dim=0, index=rand_index, out=None)",
                            "Call"
                        ],
                        [
                            "ztwk_shuf.view(ztwk.shape[0], ztwk.shape[1], ztwk.shape[2], self.negative_samples, ztwk.shape[3]).permute(0, 1, 2, 4, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randint(ztwk_shuf.shape[0], (ztwk_shuf.shape[0] * self.negative_samples, 1), dtype=torch.long, device=device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "rand_index.repeat(1, ztwk_shuf.shape[1])",
                            "Call"
                        ],
                        [
                            "torch.randint(ztwk_shuf.shape[0], (ztwk_shuf.shape[0] * self.negative_samples, 1), dtype=torch.long, device=ztwk_shuf.device)",
                            "Call"
                        ],
                        [
                            "rand_index.repeat(1, ztwk_shuf.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "matmul_321": {
                "variable": {
                    "value": "log_fk_main",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c[:, :, :-(k + skip_step), :].permute(2, 3, 0, 1).unsqueeze(-2).to(device)",
                            "Call"
                        ],
                        [
                            "c[:, :, :-(k + skip_step), :].permute(2, 3, 0, 1).unsqueeze(-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ztwk.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_321": {
                "variable": {
                    "value": "log_fk_main",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_325": {
                "variable": {
                    "value": "log_fk_shuf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c[:, :, :-(k + skip_step), :].permute(2, 3, 0, 1).unsqueeze(-2).to(device)",
                            "Call"
                        ],
                        [
                            "c[:, :, :-(k + skip_step), :].permute(2, 3, 0, 1).unsqueeze(-2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ztwk_shuf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ztwk.view(ztwk.shape[0] * ztwk.shape[1] * ztwk.shape[2], ztwk.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.gather(ztwk_shuf, dim=0, index=rand_index, out=None)",
                            "Call"
                        ],
                        [
                            "ztwk_shuf.view(ztwk.shape[0], ztwk.shape[1], ztwk.shape[2], self.negative_samples, ztwk.shape[3]).permute(0, 1, 2, 4, 3)",
                            "Call"
                        ],
                        [
                            "ztwk.view(ztwk.shape[0] * ztwk.shape[1] * ztwk.shape[2], ztwk.shape[3])",
                            "Call"
                        ],
                        [
                            "torch.gather(ztwk_shuf, dim=0, index=rand_index, out=None)",
                            "Call"
                        ],
                        [
                            "ztwk_shuf.view(ztwk.shape[0], ztwk.shape[1], ztwk.shape[2], self.negative_samples, ztwk.shape[3]).permute(0, 1, 2, 4, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_325": {
                "variable": {
                    "value": "log_fk_shuf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "log_fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_fk_main, log_fk_shuf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_332": {
                "variable": {
                    "value": "true_fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, log_fk.shape[-2], log_fk.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "log_fk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nll_loss_145": {
                "input": {
                    "value": "log_softmax_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(softmax_fk + 1e-11)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "true_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((log_fk.shape[0], log_fk.shape[-2], log_fk.shape[-1]), dtype=torch.long, device=device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros((batch_size, log_fk.shape[-2], log_fk.shape[-1]), dtype=torch.long, device=log_fk.device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_260": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/models/block_model.py": {
        "torch": {
            "ModuleList_53": {
                "variable": {
                    "value": "self.module_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "modules",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_71": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/models/classification_model.py": {
        "torch": {
            "AvgPool2d_45": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "variable": {
                    "value": "self.classifiers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Classifier(in_channels=self.in_channels[i], num_classes=self.num_classes) for i in range(len(self.in_channels))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.classifiers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[FlattenClassifier(in_channels=self.in_channels[i], num_patches=self.num_patches, num_classes=self.num_classes) for i in range(len(self.in_channels))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_160": {
                "tensors": {
                    "value": "[classifier(encoding) for (classifier, encoding) in zip(self.classifiers, encodings)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "self.in_channels * self.num_patches",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/models/full_model.py": {
        "torch": {
            "ModuleList_101": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_233": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_341": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_439": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_562": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_718": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_887": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_452": {
                "in_channels": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_246": {
                "in_channels": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_575": {
                "in_channels": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_731": {
                "in_channels": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "in_channels": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_566": {
                "in_channels": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_722": {
                "in_channels": {
                    "value": "input_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "[64, 128, 256]",
                            "List"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/models/gim_block.py": {
        "torch": {
            "adaptive_avg_pool2d_113": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/models/gim_model.py": {
        "torch": {}
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/models/resnet_encoder.py": {
        "torch": {
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.nonlinearity1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity3(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity3(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(z, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, n_patches_x, n_patches_y, out.shape[1])",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(z, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, n_patches_x, n_patches_y, out.shape[1])",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(z, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, n_patches_x, n_patches_y, out.shape[1])",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(z, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, n_patches_x, n_patches_y, out.shape[1])",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_197": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_201": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_210": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_393": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_423": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_468": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_572": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_595": {
                "variable": {
                    "value": "self.bilinear_models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_653": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_714": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_759": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sparse_weights_class(self.shortcut._modules['0'], sparsity=sparsity['shortcut'], allow_extremes=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "VDropConv2d(in_planes, self.expansion * planes, kernel_size=1, central_data=central_data, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sparse_weights_class(self.shortcut._modules['0'], sparsity=sparsity['shortcut'], allow_extremes=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_324": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "VDropConv2d(in_planes, self.expansion * planes, kernel_size=1, central_data=central_data, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_419": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_539": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_647": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_665": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_755": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_213": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.nonlinearity1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity3(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity3(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(z, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, n_patches_x, n_patches_y, out.shape[1])",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(z, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, n_patches_x, n_patches_y, out.shape[1])",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(z, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, n_patches_x, n_patches_y, out.shape[1])",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(z, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, n_patches_x, n_patches_y, out.shape[1])",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_214": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "self.nonlinearity1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity2(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity3(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.nonlinearity3(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(z, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, n_patches_x, n_patches_y, out.shape[1])",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(z, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, n_patches_x, n_patches_y, out.shape[1])",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(z, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, n_patches_x, n_patches_y, out.shape[1])",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(z, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, n_patches_x, n_patches_y, out.shape[1])",
                            "Call"
                        ],
                        [
                            "out.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_204": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/models/resnets.py": {
        "torch": {
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/models/utility_layers.py": {
        "torch": {
            "adaptive_avg_pool2d_52": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/utils/loss_utils.py": {
        "torch": {
            "tensor_37": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "outputs[0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_63": {
                "variable": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "outputs[0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_96": {
                "variable": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(0, requires_grad=True, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat([module_losses, module_loss.view(1)])",
                            "Call"
                        ],
                        [
                            "torch.stack(module_losses, 1).view(-1, len(module_losses))",
                            "Call"
                        ],
                        [
                            "torch.mean(module_losses, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(module_losses, -1).view(-1, len(module_losses))",
                            "Call"
                        ],
                        [
                            "torch.mean(module_losses, 0)",
                            "Call"
                        ],
                        [
                            "torch.empty(0, requires_grad=True, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat([module_losses, F.cross_entropy(outputs[i], targets, reduction=reduction).view(1)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(0, requires_grad=True, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat([module_losses, module_loss.view(1)])",
                            "Call"
                        ],
                        [
                            "torch.stack(module_losses, 1).view(-1, len(module_losses))",
                            "Call"
                        ],
                        [
                            "torch.mean(module_losses, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(module_losses, -1).view(-1, len(module_losses))",
                            "Call"
                        ],
                        [
                            "torch.mean(module_losses, 0)",
                            "Call"
                        ],
                        [
                            "torch.empty(0, requires_grad=True, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat([module_losses, F.cross_entropy(outputs[i], targets, reduction=reduction).view(1)])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(0, requires_grad=True, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat([module_losses, module_loss.view(1)])",
                            "Call"
                        ],
                        [
                            "torch.stack(module_losses, 1).view(-1, len(module_losses))",
                            "Call"
                        ],
                        [
                            "torch.mean(module_losses, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(module_losses, -1).view(-1, len(module_losses))",
                            "Call"
                        ],
                        [
                            "torch.mean(module_losses, 0)",
                            "Call"
                        ],
                        [
                            "torch.empty(0, requires_grad=True, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat([module_losses, F.cross_entropy(outputs[i], targets, reduction=reduction).view(1)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(0, requires_grad=True, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat([module_losses, module_loss.view(1)])",
                            "Call"
                        ],
                        [
                            "torch.stack(module_losses, 1).view(-1, len(module_losses))",
                            "Call"
                        ],
                        [
                            "torch.mean(module_losses, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(module_losses, -1).view(-1, len(module_losses))",
                            "Call"
                        ],
                        [
                            "torch.mean(module_losses, 0)",
                            "Call"
                        ],
                        [
                            "torch.empty(0, requires_grad=True, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat([module_losses, F.cross_entropy(outputs[i], targets, reduction=reduction).view(1)])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_117": {
                "variable": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "outputs[0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(log_f_module_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "outputs[0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "outputs[0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "outputs[0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "module_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "outputs[0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_83": {
                "variable": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[module_losses, module_loss.view(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[module_losses, F.cross_entropy(outputs[i], targets, reduction=reduction).view(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "true_fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(log_fk.shape[0], log_fk.shape[-2], log_fk.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "log_fk.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "true_fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(log_fk.shape[0], log_fk.shape[-2], log_fk.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "outputs[0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ],
                        [
                            "log_f_module_list[0][0].device",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_77": {
                "variable": {
                    "value": "softmax_fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_f_list",
                            "Name"
                        ],
                        [
                            "log_f_list",
                            "Name"
                        ],
                        [
                            "log_fk.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_78": {
                "variable": {
                    "value": "log_softmax_fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_fk + 1e-11",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "softmax_fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_f_list",
                            "Name"
                        ],
                        [
                            "log_f_list",
                            "Name"
                        ],
                        [
                            "log_fk.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_152": {
                "variable": {
                    "value": "log_softmax_fk",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softmax_fk + 1e-11",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_176": {
                "variable": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_fk[:, 1:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_176": {
                "variable": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_192": {
                "input": {
                    "value": "log_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_f_list",
                            "Name"
                        ],
                        [
                            "log_f_list",
                            "Name"
                        ],
                        [
                            "log_fk.to(device)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "true_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((log_fk.shape[0], log_fk.shape[-2], log_fk.shape[-1]), dtype=torch.long, device=log_fk.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros((log_fk.shape[0], log_fk.shape[-2], log_fk.shape[-1]), dtype=torch.long, device=device, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'sum'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_49": {
                "input": {
                    "value": "log_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_f_list",
                            "Name"
                        ],
                        [
                            "log_f_list",
                            "Name"
                        ],
                        [
                            "log_fk.to(device)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "true_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((log_fk.shape[0], log_fk.shape[-2], log_fk.shape[-1]), dtype=torch.long, device=log_fk.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros((log_fk.shape[0], log_fk.shape[-2], log_fk.shape[-1]), dtype=torch.long, device=device, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'sum'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "nll_loss_79": {
                "input": {
                    "value": "log_softmax_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(softmax_fk + 1e-11)",
                            "Call"
                        ],
                        [
                            "torch.log(softmax_fk + 1e-11)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "true_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((log_fk.shape[0], log_fk.shape[-2], log_fk.shape[-1]), dtype=torch.long, device=log_fk.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros((log_fk.shape[0], log_fk.shape[-2], log_fk.shape[-1]), dtype=torch.long, device=device, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'sum'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_122": {
                "input": {
                    "value": "outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'sum'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "nll_loss_153": {
                "input": {
                    "value": "log_softmax_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(softmax_fk + 1e-11)",
                            "Call"
                        ],
                        [
                            "torch.log(softmax_fk + 1e-11)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "true_fk",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((log_fk.shape[0], log_fk.shape[-2], log_fk.shape[-1]), dtype=torch.long, device=log_fk.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros((log_fk.shape[0], log_fk.shape[-2], log_fk.shape[-1]), dtype=torch.long, device=device, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'sum'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/utils/model_utils.py": {
        "torch": {}
    },
    "packages/greedy_infomax/src/nupic/research/frameworks/greedy_infomax/utils/train_utils.py": {
        "torch": {
            "zeros_260": {
                "variable": {
                    "value": "module_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_emit_encoding_modules",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.encoder.count_emit_encoding_modules()",
                            "Call"
                        ],
                        [
                            "model.encoder.count_emit_encoding_modules()",
                            "Call"
                        ],
                        [
                            "results[0].get('num_emit_encoding_modules', 3)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "module_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_emit_encoding_modules",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module.encoder.count_emit_encoding_modules()",
                            "Call"
                        ],
                        [
                            "model.encoder.count_emit_encoding_modules()",
                            "Call"
                        ],
                        [
                            "results[0].get('num_emit_encoding_modules', 3)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/greedy_infomax/tests/unit/test_gradient_block.py": {
        "torch": {
            "DataLoader_42": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FakeData(size=10, image_size=(1, 10, 10), num_classes=10, transform=ToTensor())",
                            "Call"
                        ],
                        [
                            "FakeData(size=10, image_size=(1, 10, 10), num_classes=10, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FakeData(size=10, image_size=(1, 10, 10), num_classes=10, transform=ToTensor())",
                            "Call"
                        ],
                        [
                            "FakeData(size=10, image_size=(1, 10, 10), num_classes=10, transform=ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=1, out_channels=1, kernel_size=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_52": {
                "variable": {
                    "value": "error_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_75": {
                "variable": {
                    "value": "error_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/lightning/src/nupic/research/frameworks/lightning/mixins/knowledge_distillation.py": {
        "torch": {
            "cross_entropy_246": {
                "variable": {
                    "value": "true_error_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_276": {
                "input": {
                    "value": "torch.sum(-target * F.log_softmax(output, dim=1), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_163": {
                "variable": {
                    "value": "one_hot_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_276": {
                "input": {
                    "value": "-target * F.log_softmax(output, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_278": {
                "input": {
                    "value": "-target * F.log_softmax(output, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_221": {
                "input": {
                    "value": "tmodel(data) / self.kd_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_276": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_156": {
                "input": {
                    "value": "tmodel(data) / self.kd_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "input": {
                    "value": "tmodel(data) / self.kd_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_278": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/lightning/src/nupic/research/frameworks/lightning/models/supervised_model.py": {
        "torch": {
            "argmax_98": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "dataset": {
                    "value": "self.val_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.get('val_batch_size', self.config.get('batch_size', 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_196": {
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.config.get('batch_size', 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "self.config.get('train_loader_drop_last', True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_99": {
                "input": {
                    "value": "pred == target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/mandp/src/nupic/research/frameworks/mandp/autoencoder.py": {
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "viewport_height * viewport_width",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_modules * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "view_as_complex_70": {
                "variable": {
                    "value": "complex_encodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encodings.view(encodings.shape[0], encodings.shape[1], -1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_85": {
                "variable": {
                    "value": "phases",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.imag(complex_encodings)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.real(complex_encodings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_89": {
                "variable": {
                    "value": "delta_phases",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "delta_phases <= -math.pi",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "delta_phases + 2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta_phases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "phases[:, 1:, :] - phases[:, :-1, :]",
                            "BinOp"
                        ],
                        [
                            "torch.where(delta_phases <= -math.pi, delta_phases + 2 * math.pi, delta_phases)",
                            "Call"
                        ],
                        [
                            "torch.where(delta_phases > math.pi, delta_phases - 2 * math.pi, delta_phases)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_92": {
                "variable": {
                    "value": "delta_phases",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "delta_phases > math.pi",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "delta_phases - 2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta_phases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "phases[:, 1:, :] - phases[:, :-1, :]",
                            "BinOp"
                        ],
                        [
                            "torch.where(delta_phases <= -math.pi, delta_phases + 2 * math.pi, delta_phases)",
                            "Call"
                        ],
                        [
                            "torch.where(delta_phases > math.pi, delta_phases - 2 * math.pi, delta_phases)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_108": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(self.parameters(), lr=0.01)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_modules * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "viewport_height * viewport_width",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linear_64": {
                "variable": {
                    "value": "decodings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self(batch)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.encoder.weight.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FoliageDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_67": {
                "input": {
                    "value": "decodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder(encodings)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.linear(encodings, self.encoder.weight.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "imag_85": {
                "input": {
                    "value": "complex_encodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.view_as_complex(encodings.view(encodings.shape[0], encodings.shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "real_86": {
                "input": {
                    "value": "complex_encodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.view_as_complex(encodings.view(encodings.shape[0], encodings.shape[1], -1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "var_81": {
                "input": {
                    "value": "mags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "complex_encodings.abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "var_99": {
                "input": {
                    "value": "delta_phases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "phases[:, 1:, :] - phases[:, :-1, :]",
                            "BinOp"
                        ],
                        [
                            "torch.where(delta_phases <= -math.pi, delta_phases + 2 * math.pi, delta_phases)",
                            "Call"
                        ],
                        [
                            "torch.where(delta_phases > math.pi, delta_phases - 2 * math.pi, delta_phases)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/mandp/src/nupic/research/frameworks/mandp/foliage.py": {
        "torch": {
            "stack_259": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.render(camera_top, camera_left) for (camera_top, camera_left) in zip(np.linspace(start_top, end_top, num=num_steps, endpoint=True), np.linspace(start_left, end_left, num=num_steps, endpoint=True))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "rand_49": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_50": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_187": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_188": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_51": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_52": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_194": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_245": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/meta_continual_learning/src/nupic/research/frameworks/meta_continual_learning/distributed/experiments/meta_cl_experiment.py": {
        "torch": {
            "grad_70": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(named_params.values())",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_51": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_53": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_120": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clone_model(self.model.module, keep_as_reference=None)",
                            "Call"
                        ],
                        [
                            "DataParallel(model)",
                            "Call"
                        ],
                        [
                            "clone if clone is not None else self.model",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "packages/meta_continual_learning/src/nupic/research/frameworks/meta_continual_learning/experiments/meta_cl_experiment.py": {
        "torch": {
            "cat_357": {
                "variable": {
                    "value": "slow_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "slow_data + [replay_data]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "slow_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "slow_target + [replay_target]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_267": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.get('batch_size', 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.create_train_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_train_slow_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_replay_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_validation_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.get('train_loader_drop_last', True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_281": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.get('slow_batch_size', 64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.create_train_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_train_slow_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_replay_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_validation_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_294": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.get('replay_batch_size', 64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.create_train_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_train_slow_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_replay_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_validation_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_307": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.get('val_batch_size', config.get('batch_size', 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.create_train_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_train_slow_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_replay_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_validation_sampler(config, dataset, class_indices=class_indices)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_447": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.error_loss(output, slow_target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(named_params.values())",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_452": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.error_loss(output, slow_target)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(named_params.values())",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_419": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/meta_continual_learning/src/nupic/research/frameworks/meta_continual_learning/mixins/oml.py": {
        "torch": {
            "DataLoader_159": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.get('test_train_batch_size', 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.create_test_train_sampler(config, dataset, class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_test_train_sampler(config, dataset, class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_test_test_sampler(config, dataset, class_indices)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.get('test_train_eval_batch_size', config.get('test_test_batch_size', 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.create_test_train_sampler(config, dataset, class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_test_train_sampler(config, dataset, class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_test_test_sampler(config, dataset, class_indices)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_188": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.get('test_test_batch_size', 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.create_test_train_sampler(config, dataset, class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_test_train_sampler(config, dataset, class_indices)",
                            "Call"
                        ],
                        [
                            "cls.create_test_test_sampler(config, dataset, class_indices)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_357": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "test_train_param.values()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lr_sweep_range",
                            "Attribute"
                        ],
                        [
                            "self.find_best_lr(num_classes_learned)",
                            "Call"
                        ],
                        [
                            "self.lr_sweep_range[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_294": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "test_train_param.values()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lr_sweep_range",
                            "Attribute"
                        ],
                        [
                            "self.find_best_lr(num_classes_learned)",
                            "Call"
                        ],
                        [
                            "self.lr_sweep_range[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/meta_continual_learning/src/nupic/research/frameworks/meta_continual_learning/models.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_block(1, 8, 5)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.representation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_block(1, 256, 3, 2, 0)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.adaptation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2304, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.representation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.adaptation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_60": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "2304",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "int(np.prod(input_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_153": {
                "in_features": {
                    "value": "hidden_sizes[idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/meta_continual_learning/tests/unit/meta_continual_learning_test.py": {
        "torch": {
            "Parameter_42": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([[0.94, 0.07], [0.4, 0.21]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.right_input",
                            "Attribute"
                        ],
                        [
                            "self.right_input",
                            "Attribute"
                        ],
                        [
                            "torch.rand(2, 2)",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.weight, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.weight.transpose(1, 0), out)",
                            "Call"
                        ],
                        [
                            "quad_clone(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "self.left_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "self.right_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.32], [0.72]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "self.expected_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.3972, 0.6762], [0.2869, 0.4458]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quadratic().weight",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.right_input",
                            "Attribute"
                        ],
                        [
                            "self.right_input",
                            "Attribute"
                        ],
                        [
                            "torch.rand(2, 2)",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(weight, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(weight.transpose(1, 0), loss)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, loss)",
                            "Call"
                        ],
                        [
                            "out.sum()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.left_input",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(weight, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(weight.transpose(1, 0), loss)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, loss)",
                            "Call"
                        ],
                        [
                            "out.sum()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight - lr * weight.grad",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.right_input",
                            "Attribute"
                        ],
                        [
                            "self.right_input",
                            "Attribute"
                        ],
                        [
                            "torch.rand(2, 2)",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_119": {
                "variable": {
                    "value": "loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight2.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "loss2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(weight2, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(weight2.transpose(1, 0), loss2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, loss2)",
                            "Call"
                        ],
                        [
                            "out2.sum()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "loss2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.left_input",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "loss2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(weight2, x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(weight2.transpose(1, 0), loss2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, loss2)",
                            "Call"
                        ],
                        [
                            "out2.sum()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_141": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.right_input",
                            "Attribute"
                        ],
                        [
                            "self.right_input",
                            "Attribute"
                        ],
                        [
                            "torch.rand(2, 2)",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.left_input",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_143": {
                "variable": {
                    "value": "w2_grad_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight - lr * weight.grad",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, a)",
                            "Call"
                        ],
                        [
                            "m + m.transpose(1, 0)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(x, a)",
                            "Call"
                        ],
                        [
                            "m + m.transpose(1, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_144": {
                "variable": {
                    "value": "w_grad_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2_grad_expected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(weight2, m)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.eye(2) - lr * m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_226": {
                "variable": {
                    "value": "quad",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_236": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_250": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.right_input",
                            "Attribute"
                        ],
                        [
                            "self.right_input",
                            "Attribute"
                        ],
                        [
                            "torch.rand(2, 2)",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.left_input",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "w_grad_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Quadratic().weight",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, a)",
                            "Call"
                        ],
                        [
                            "m + m.transpose(1, 0)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(x, a)",
                            "Call"
                        ],
                        [
                            "m + m.transpose(1, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_42": {
                "data": {
                    "value": "[[0.94, 0.07], [0.4, 0.21]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_174": {
                "input": {
                    "value": "quad.weight.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.expected_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_144": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages/meta_continual_learning/tests/unit/rezero_weights_test.py": {
        "torch": {
            "Flatten_51": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "packages/meta_continual_learning/tests/unit/track_representation_sparsity_test.py": {
        "torch": {
            "Flatten_48": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "packages/quantization/src/nupic/research/frameworks/quantization/mixins/quantization_aware.py": {
        "torch": {
            "sum_192": {
                "input": {
                    "value": "torch.isnan(i[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_214": {
                "input": {
                    "value": "torch.isnan(o[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_195": {
                "input": {
                    "value": "i[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "std_195": {
                "input": {
                    "value": "i[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_217": {
                "input": {
                    "value": "o[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "std_217": {
                "input": {
                    "value": "o[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_192": {
                "input": {
                    "value": "i[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_214": {
                "input": {
                    "value": "o[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "packages/ray/src/nupic/research/frameworks/ray/ray_utils.py": {
        "torch": {}
    },
    "packages/ray/src/nupic/research/frameworks/ray/run_with_raytune.py": {
        "torch": {
            "device_count_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/self_supervised_learning/src/nupic/research/frameworks/self_supervised_learning/experiments/self_supervised_experiment.py": {
        "torch": {
            "DataLoader_203": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.get('batch_size', config.get('unsupervised_batch_size', 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.create_unsupervised_sampler(config, dataset)",
                            "Call"
                        ],
                        [
                            "cls.create_supervised_sampler(config, dataset)",
                            "Call"
                        ],
                        [
                            "cls.create_validation_sampler(config, dataset)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "config.get('pin_memory', torch.cuda.is_available())",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.get('train_loader_drop_last', config.get('unsupervised_loader_drop_last', True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_230": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.get('batch_size_supervised', 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.create_unsupervised_sampler(config, dataset)",
                            "Call"
                        ],
                        [
                            "cls.create_supervised_sampler(config, dataset)",
                            "Call"
                        ],
                        [
                            "cls.create_validation_sampler(config, dataset)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "config.get('pin_memory', torch.cuda.is_available())",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.get('supervised_loader_drop_last', True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_249": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.get('val_batch_size', config.get('batch_size', 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.create_unsupervised_sampler(config, dataset)",
                            "Call"
                        ],
                        [
                            "cls.create_supervised_sampler(config, dataset)",
                            "Call"
                        ],
                        [
                            "cls.create_validation_sampler(config, dataset)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "config.get('pin_memory', torch.cuda.is_available())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/self_supervised_learning/src/nupic/research/frameworks/self_supervised_learning/utils.py": {
        "torch": {
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages/self_supervised_learning/tests/unit/self_supervised_learning_test.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "784",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "packages/sigopt/src/nupic/research/frameworks/sigopt/mixins/one_cycle_lr_params.py": {
        "torch": {}
    },
    "packages/sigopt/src/nupic/research/frameworks/sigopt/mixins/sgd_params.py": {
        "torch": {}
    },
    "packages/sigopt/src/nupic/research/frameworks/sigopt/mixins/step_lr_params.py": {
        "torch": {}
    },
    "projects/archive/continuous_learning/cont_speech_experiment.py": {
        "torch": {
            "is_available_124": {
                "variable": {
                    "value": "self.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_422": {
                "variable": {
                    "value": "combined_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[data[k][0] for k in range(len(training_classes))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_423": {
                "variable": {
                    "value": "combined_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[data[k][1] for k in range(len(training_classes))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "DataLoader_434": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClasswiseDataset(cachefilepath=os.path.split(f.name)[0], basename=os.path.split(f.name)[1], qualifiers=['tmp'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_460": {
                "variable": {
                    "value": "self.validation_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClasswiseDataset(cachefilepath=self.data_dir, basename='data_valid', qualifiers=[''])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_474": {
                "variable": {
                    "value": "self.gen_test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.gen_test_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_488": {
                "variable": {
                    "value": "self.full_train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_127": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_130": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_135": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LeSparseNet(input_shape=config.get('input_shape', (1, 32, 32)), cnn_out_channels=config['cnn_out_channels'], cnn_activity_percent_on=config['cnn_percent_on'], cnn_weight_percent_on=config['cnn_weight_sparsity'], linear_n=config['linear_n'], linear_activity_percent_on=config['linear_percent_on'], linear_weight_percent_on=config['weight_sparsity'], dendrites_per_cell=config['dendrites_per_cell'], use_dendrites=config['use_dendrites'], boost_strength=config['boost_strength'], boost_strength_factor=config['boost_strength_factor'], duty_cycle_period=config['duty_cycle_period'], use_batch_norm=config['use_batch_norm'], dropout=config.get('dropout', 0.0), num_classes=self.num_classes, k_inference_factor=config['k_inference_factor'], activation_fct_before_max_pool=config.get('activation_fct_before_max_pool', False), consolidated_sparse_weights=config.get('consolidated_sparse_weights', False), use_kwinners_local=config.get('use_kwinner_local', False))",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_146": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_186": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['learning_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "params['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_427": {
                "obj": {
                    "value": "combined_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list((combined_samples, combined_labels))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.combine_classes(training_classes)",
                            "Call"
                        ],
                        [
                            "tempfile.NamedTemporaryFile(delete=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_152": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_193": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_526": {
                "f": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.path, self.basename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.path, self.basename + '{}.npz'.format(qualifier))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_418": {
                "f": {
                    "value": "self.data_dir + '/data_train_{}.npz'.format(k + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_503": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClasswiseDataset(cachefilepath=self.data_dir, basename='data_test_0noise', qualifiers=[class_ + 1])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/continuous_learning/exp_lesparse.py": {
        "torch": {
            "Conv2d_79": {
                "variable": {
                    "value": "cnn",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(current_input_shape)",
                            "Call"
                        ],
                        [
                            "linear_n[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "linear_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_100": {
                "variable": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_118": {
                "variable": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_168": {
                "num_features": {
                    "value": "linear_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_187": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_216": {
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogSoftmax_358": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/continuous_learning/multihead/model.py": {
        "torch": {
            "Linear_61": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "28 * 28",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_79": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(self.flatten(x))",
                            "Call"
                        ],
                        [
                            "self.kw1(output) if self.is_sparse else F.relu(output)",
                            "IfExp"
                        ],
                        [
                            "self.fc2(output)",
                            "Call"
                        ],
                        [
                            "self.kw2(output) if self.is_sparse else F.relu(output)",
                            "IfExp"
                        ],
                        [
                            "self.fc3(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_81": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1(self.flatten(x))",
                            "Call"
                        ],
                        [
                            "self.kw1(output) if self.is_sparse else F.relu(output)",
                            "IfExp"
                        ],
                        [
                            "self.fc2(output)",
                            "Call"
                        ],
                        [
                            "self.kw2(output) if self.is_sparse else F.relu(output)",
                            "IfExp"
                        ],
                        [
                            "self.fc3(output)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "projects/archive/continuous_learning/multihead/train_model.py": {
        "torch": {
            "device_65": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/continuous_learning/process_gsc_byclass.py": {
        "torch": {
            "zeros_44": {
                "variable": {
                    "value": "data_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "data_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "data_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_tensor, torch.Tensor(dataset.tensors[0][class_indices, :, :, :]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "data_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "data_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_tensor, torch.Tensor(dataset.tensors[0][class_indices, :, :, :]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_60": {
                "obj": {
                    "value": "out_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list((data_tensor, labels_tensor))",
                            "Call"
                        ],
                        [
                            "list((data_tensor, labels_tensor))",
                            "Call"
                        ],
                        [
                            "list((data_tensor, labels_tensor))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "out_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list((data_tensor, labels_tensor))",
                            "Call"
                        ],
                        [
                            "list((data_tensor, labels_tensor))",
                            "Call"
                        ],
                        [
                            "list((data_tensor, labels_tensor))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "data_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_tensor, torch.Tensor(dataset.tensors[0][class_indices, :, :, :]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_99": {
                "variable": {
                    "value": "labels_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_108": {
                "obj": {
                    "value": "out_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list((data_tensor, labels_tensor))",
                            "Call"
                        ],
                        [
                            "list((data_tensor, labels_tensor))",
                            "Call"
                        ],
                        [
                            "list((data_tensor, labels_tensor))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_72": {},
            "Tensor_53": {},
            "Tensor_93": {}
        }
    },
    "projects/archive/continuous_learning/run_dendrite_experiment.py": {
        "torch": {
            "SGD_129": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "conv_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_122": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_168": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_170": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "n_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000 * dpc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_143": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "eye_118": {
                "n": {
                    "value": "self.n_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_119": {
                "input": {
                    "value": "self.cat(yhat.cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_208": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_197": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/experiments/imagenet.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(train_path, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(val_path, transform=val_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "network.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_layer_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/experiments/timing_imagenet.py": {
        "torch": {
            "DataLoader_90": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CachedDatasetFolder(train_path, transform=train_transform, num_classes=num_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CachedDatasetFolder(val_path, transform=val_transform, num_classes=num_classes)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/mcaporale/run_dsconv.py": {
        "torch": {
            "device_count_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/mcaporale/run_dsnn_plots.py": {
        "torch": {
            "device_count_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/mcaporale/run_gsc_dsnn.py": {
        "torch": {
            "device_count_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/mcaporale/run_gsc_dsnn_pruneperc_search.py": {
        "torch": {
            "device_count_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/mcaporale/run_gsc_dsnn_sparse_levels.py": {
        "torch": {
            "device_count_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/mcaporale/run_gsc_small_dense.py": {
        "torch": {
            "device_count_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/mcaporale/run_mlpheb_coacts_comparison.py": {
        "torch": {
            "device_count_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/run_boosting.py": {
        "torch": {
            "manual_seed_37": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/run_cnn.py": {
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/run_decay.py": {
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/run_dyre.py": {
        "torch": {
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/run_gs_hebbian.py": {
        "torch": {
            "manual_seed_37": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/run_gsc.py": {
        "torch": {
            "manual_seed_32": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/run_hebbian.py": {
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/run_non_binary_coacts.py": {
        "torch": {
            "device_count_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/run_sparse.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/runs/run_vgg19_mag_pruning.py": {
        "torch": {
            "device_count_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/dynamic_sparse/validation/run_blackbox.py": {
        "torch": {
            "device_count_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/ray_tune_example/mnist/mnist_ray.py": {
        "torch": {
            "DataLoader_89": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(datadir, download=True, train=True)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(datadir, train=True, transform=xforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(datadir, train=False, transform=xforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['test_batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "self.first_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(datadir, download=True, train=True)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(datadir, train=True, transform=xforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "first_epoch_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['first_epoch_batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cnn_output_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels * ((w - kernel_size + 1) // 2) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['n']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_159": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['learning_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['momentum']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_78": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_81": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['out_channels']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['kernel_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "MaxPool2d_126": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['n']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['output_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LogSoftmax_156": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/archive/tensorflow/gsc/import_pytorch_gsc.py": {
        "torch": {}
    },
    "projects/backprop_structure/dynamic_sparse_compat/runs/run_stochastic_synapses_gsc.py": {
        "torch": {
            "device_count_35": {
                "variable": {
                    "value": "cuda_device_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/backprop_structure/dynamic_sparse_compat/runs/run_stochastic_synapses_mnist.py": {
        "torch": {
            "device_count_34": {
                "variable": {
                    "value": "cuda_device_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/backprop_structure/runs/ax_lenet_vdrop_gsc.py": {
        "torch": {}
    },
    "projects/backprop_structure/runs/ax_ln_bps_batchnorm_mnist.py": {
        "torch": {}
    },
    "projects/backprop_structure/runs/ax_ln_bps_gsc.py": {
        "torch": {}
    },
    "projects/backprop_structure/runs/ax_ln_bps_mnist.py": {
        "torch": {}
    },
    "projects/backprop_structure/runs/ax_ln_gsc.py": {
        "torch": {}
    },
    "projects/backprop_structure/runs/ax_ln_mnist.py": {
        "torch": {}
    },
    "projects/backprop_structure/runs/run_alexnet_binaryactivation_gsc.py": {
        "torch": {
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/backprop_structure/runs/run_alexnet_binaryactivation_kwinners_gsc.py": {
        "torch": {
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/backprop_structure/runs/run_alexnet_gsc.py": {
        "torch": {
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/backprop_structure/runs/run_lenet_kwinners_gsc.py": {
        "torch": {
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/backprop_structure/runs/run_lenet_kwinners_mnist.py": {
        "torch": {
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/backprop_structure/runs/run_lenet_staticstructure_gsc.py": {
        "torch": {
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/backprop_structure/runs/run_lenet_staticstructure_kwinners_gsc.py": {
        "torch": {
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/backprop_structure/runs/run_lenet_staticstructure_kwinners_mnist.py": {
        "torch": {
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/backprop_structure/runs/run_lenet_staticstructure_mnist.py": {
        "torch": {
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/backprop_structure/runs/run_vdrop_mnist.py": {
        "torch": {
            "Adam_84": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self._get_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001 * ((NUM_TRAINING_ITERATIONS - iteration) / NUM_TRAINING_ITERATIONS)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/backprop_structure/runs/sig_lenet_vdrop_gsc.py": {
        "torch": {}
    },
    "projects/backprop_structure/runs/sig_resnet_mnist.py": {
        "torch": {
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/dendrites/gaussian_classification/gaussian.py": {
        "torch": {
            "manual_seed_52": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.data[class_id] for class_id in range(self.num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[class_id for n in range(examples_per_class)] for class_id in range(self.num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "repeat_interleave_81": {
                "variable": {
                    "value": "self.contexts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._contexts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "repeats": {
                    "value": "num_repeats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(num_classes * examples_per_class / num_tasks)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_54": {
                "*size": {
                    "value": "(dim_x,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.manual_seed(seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_59": {
                "loc": {
                    "value": "self.means[class_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "self.covs[class_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_57": {
                "n": {
                    "value": "dim_x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_56": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.manual_seed(seed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "projects/dendrites/gaussian_classification/run_dendritic_network.py": {
        "torch": {
            "tensor_94": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "exp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "exp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_80": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "exp.model(data, context)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(output)",
                            "Call"
                        ],
                        [
                            "exp.model(data, context)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "true_divide_112": {
                "dividend": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(0, device=exp.device)",
                            "Call"
                        ],
                        [
                            "correct + pred.eq(target.view_as(pred)).sum()",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "total + len(data)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "projects/dendrites/permutedMNIST/archive/baseline.py": {
        "torch": {
            "tensor_85": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "exp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "exp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_72": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "exp.model(*forward_args)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(output)",
                            "Call"
                        ],
                        [
                            "exp.model(*forward_args)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "true_divide_112": {
                "dividend": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(0, device=exp.device)",
                            "Call"
                        ],
                        [
                            "correct + pred.eq(target.view_as(pred)).sum()",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "total + len(data)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "repeat_interleave_66": {
                "input": {
                    "value": "exp.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "repeats": {
                    "value": "data.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_interleave_101": {
                "input": {
                    "value": "exp.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "repeats": {
                    "value": "data.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "projects/dendrites/permutedMNIST/archive/run_dendritic_network.py": {
        "torch": {
            "tensor_78": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "exp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "exp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "true_divide_102": {
                "dividend": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(0, device=exp.device)",
                            "Call"
                        ],
                        [
                            "correct + pred.eq(target.view_as(pred)).sum()",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "total + len(data)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "projects/dendrites/permutedMNIST/experiments/base.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/batch.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/batch_mnist.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/cluster.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/dendrites_xor_sparsity.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/hyperparameter_search.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/input_as_context.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/mlp.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/no_dendrites.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/profiler.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/prototype.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/prototype_ten_segments.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/si_prototype.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/sp_context.py": {
        "torch": {}
    },
    "projects/dendrites/permutedMNIST/experiments/sp_context_search.py": {
        "torch": {
            "Linear_65": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "projects/dendrites/profiling/dendritic_speed_experiments.py": {
        "torch": {
            "Linear_81": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_90": {
                "variable": {
                    "value": "dummy_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, input_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_91": {
                "variable": {
                    "value": "dummy_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, dim_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_45": {
                "variable": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dendrite_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(dendrite_activations, dim=2, index=unsqueezed)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "unsqueezed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "indices.unsqueeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_115": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_117": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "profile_94": {
                "record_shapes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "use_cuda": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.type == 'cuda'",
                            "Compare"
                        ]
                    ]
                }
            },
            "sigmoid_48": {
                "input": {
                    "value": "winning_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_65": {
                "input": {
                    "value": "winning_activations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "dendrite_activations.squeeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "projects/dendrites/profiling/forward_profile.py": {
        "torch": {
            "rand_35": {
                "variable": {
                    "value": "dummy_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, input_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_69": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_71": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "dummy_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, model.dim_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "profile_42": {
                "record_shapes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "use_cuda": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.type == 'cuda'",
                            "Compare"
                        ]
                    ]
                }
            },
            "profile_47": {
                "record_shapes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "use_cuda": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.type == 'cuda'",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "projects/dendrites/profiling/models/multiheaded_dendrite_mlp.py": {
        "torch": {
            "ModuleList_79": {
                "variable": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self._activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self._output_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "linear_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "prev_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "hidden_sizes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "variable": {
                    "value": "curr_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "prev_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "hidden_sizes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "projects/dendrites/profiling/models/multiheaded_sparse_mlp.py": {
        "torch": {
            "Sequential_52": {
                "variable": {
                    "value": "self._hidden_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self._output_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "linear_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_sizes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Flatten_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/dendrites/routing/hardcoded.py": {
        "torch": {
            "stack_106": {
                "variable": {
                    "value": "context_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_vectors[j, :] for j in context_inds_test]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_131": {
                "variable": {
                    "value": "mean_abs_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target - actual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_131": {
                "variable": {
                    "value": "mean_abs_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_104": {
                "*size": {
                    "value": "(batch_size, dim_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "projects/dendrites/routing/learn.py": {
        "torch": {
            "save_167": {
                "obj": {
                    "value": "dendrite_layer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + 'dendrite_' + str(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "context_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + 'context_' + str(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "projects/dendrites/routing/regular_network.py": {
        "torch": {
            "DataLoader_111": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RoutingDataset(routing_function=r, input_size=r.sparse_weights.module.in_features, context_vectors=context_vectors, device=model.device, concat=True, x_min=-2.0, x_max=2.0)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RoutingDataset(routing_function=r, input_size=r.sparse_weights.module.in_features, context_vectors=context_vectors, device=model.device, concat=True, x_min=2.0, x_max=6.0)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_44": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/dendrites/supermasks/random_supermasks.py": {
        "torch": {
            "device_386": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_168": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_interleave_177": {
                "variable": {
                    "value": "self.contexts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.contexts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "repeats": {
                    "value": "self.num_examples_per_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_163": {
                "*size": {
                    "value": "(self.num_examples, input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "projects/dqn/main/algorithms.py": {
        "torch": {
            "tensor_121": {
                "variable": {
                    "value": "act_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "act",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "rew_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rew",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "obs_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "next_obs_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_obs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "done",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "projects/dqn/main/data_utils.py": {
        "torch": {}
    },
    "projects/dqn/main/networks.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, 32, kernel_size=8, stride=4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "18",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_43": {
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "7 * 7 * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/dqn/main/rl_experiment.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_226": {
                "dataset": {
                    "value": "self.replay_buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.buffer_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(subset_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_229": {
                "indices": {
                    "value": "subset_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.choice(np.arange(0, len(self.replay_buffer)), size=self.buffer_batch_size * self.gradient_steps_per_epoch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "projects/greedy_infomax/experiments/block_resnet50_optimization.py": {
        "torch": {}
    },
    "projects/greedy_infomax/experiments/block_sparse_optimization.py": {
        "torch": {}
    },
    "projects/greedy_infomax/experiments/block_wise_training.py": {
        "torch": {}
    },
    "projects/greedy_infomax/experiments/default_base.py": {
        "torch": {
            "Subset_63": {
                "variable": {
                    "value": "unsupervised_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "unsupervised_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.load_dataset(config, dataset_type='unsupervised')",
                            "Call"
                        ],
                        [
                            "Subset(unsupervised_data, unsupervised_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "unsupervised_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.choice(len(unsupervised_data), num_unsupervised_samples, replace=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_70": {
                "variable": {
                    "value": "supervised_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "supervised_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "unsupervised_data",
                            "Name"
                        ],
                        [
                            "self.load_dataset(config, dataset_type='supervised')",
                            "Call"
                        ],
                        [
                            "Subset(supervised_data, supervised_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "supervised_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.choice(len(supervised_data), num_supervised_samples, replace=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_77": {
                "variable": {
                    "value": "validation_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.load_dataset(config, dataset_type='validation')",
                            "Call"
                        ],
                        [
                            "Subset(validation_data, validation_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "validation_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.choice(len(validation_data), num_validation_samples, replace=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "projects/greedy_infomax/experiments/linear_classification.py": {
        "torch": {
            "Flatten_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "projects/greedy_infomax/experiments/new_model.py": {
        "torch": {}
    },
    "projects/greedy_infomax/experiments/small_sparse.py": {
        "torch": {}
    },
    "projects/greedy_infomax/experiments/sparse_resnets.py": {
        "torch": {}
    },
    "projects/greedy_infomax/experiments/super_greedy_blockwise.py": {
        "torch": {}
    },
    "projects/greedy_infomax/local_run.py": {
        "torch": {}
    },
    "projects/gsc/experiments/base.py": {
        "torch": {}
    },
    "projects/gsc/experiments/gsc_onecyclelr.py": {
        "torch": {}
    },
    "projects/gsc/experiments/gsc_onecyclelr_sigopt.py": {
        "torch": {}
    },
    "projects/gsc/experiments/gsc_vdrop_pruning.py": {
        "torch": {}
    },
    "projects/gsc/experiments/sampled_kwinners/sampled_kwinner_functions.py": {
        "torch": {
            "softmax_55": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Multinomial_70": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "total_count": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax(x / temperature, dim=-1)",
                            "Call"
                        ],
                        [
                            "softmax(logits / temperature, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Multinomial_127": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "total_count": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "softmax(x / temperature, dim=-1)",
                            "Call"
                        ],
                        [
                            "softmax(logits / temperature, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_54": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_108": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "projects/gsc/experiments/sampled_kwinners/sampled_kwinner_gsc_cnn.py": {
        "torch": {
            "BatchNorm2d_100": {
                "num_features": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_113": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_129": {
                "num_features": {
                    "value": "cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_142": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_154": {
                "num_features": {
                    "value": "linear_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_168": {
                "in_features": {
                    "value": "linear_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_169": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "25 * cnn_out_channels[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "linear_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "cnn_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cnn_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "projects/gsc/experiments/sampled_kwinners/sampled_kwinner_le_sparse_net.py": {
        "torch": {
            "Conv2d_66": {
                "variable": {
                    "value": "cnn",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(current_input_shape)",
                            "Call"
                        ],
                        [
                            "linear_n[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "linear_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_83": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "variable": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_105": {
                "variable": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_158": {
                "num_features": {
                    "value": "linear_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_176": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_282": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(current_input_shape)",
                            "Call"
                        ],
                        [
                            "linear_n[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_284": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "projects/gsc/experiments/sampled_kwinners/sampled_kwinners.py": {
        "torch": {}
    },
    "projects/gsc/experiments/test_sigopt.py": {
        "torch": {}
    },
    "projects/gsc/gsc_profile.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "the_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preprocessed_gsc(root=DATA_ROOT, train=train, download=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[4, 16, 64, 256, 512, 1024, 8192]",
                            "List"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_134": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/imagenet/experiments/base.py": {
        "torch": {}
    },
    "projects/imagenet/experiments/composed_lr.py": {
        "torch": {}
    },
    "projects/imagenet/experiments/custom_super.py": {
        "torch": {}
    },
    "projects/imagenet/experiments/magnitude_pruning.py": {
        "torch": {}
    },
    "projects/imagenet/experiments/snr_pruning.py": {
        "torch": {}
    },
    "projects/imagenet/experiments/sparse_r1.py": {
        "torch": {}
    },
    "projects/imagenet/experiments/super_convergence.py": {
        "torch": {}
    },
    "projects/imagenet/local_run.py": {
        "torch": {}
    },
    "projects/imagenet/pytorch/train_imagenet.py": {
        "torch": {
            "device_count_81": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_154": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_156": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_214": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_223": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_210": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_367": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_134": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_141": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_423": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_127": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_143": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_148": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_151": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_168": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_172": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "projects/imagenet/pytorch_quantize.py": {
        "torch": {
            "save_140": {
                "obj": {
                    "value": "torch.jit.script(q_model)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_file_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output, f'{args.name}.{args.backend}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_42": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "buffer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "script_140": {
                "obj": {
                    "value": "q_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(model)",
                            "Call"
                        ],
                        [
                            "torch.quantization.convert(q_model, inplace=True)",
                            "Call"
                        ],
                        [
                            "quantize(config)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "projects/imagenet/quantize_weights_only.py": {
        "torch": {
            "Parameter_52": {
                "variable": {
                    "value": "conv2d.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-bn_2d.running_mean * t * bn_w + bn_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "zero_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "min_vals.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_45": {
                "variable": {
                    "value": "bn_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_2d.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "bn_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_2d.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_63": {
                "input": {
                    "value": "max_vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(-min_vals, max_vals)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_64": {
                "variable": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "min_vals.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_66": {
                "variable": {
                    "value": "max_vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-min_vals",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_68": {
                "variable": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(min_vals.size(), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "max_vals / ((qmax - qmin) / 2)",
                            "BinOp"
                        ],
                        [
                            "torch.max(scales, torch.tensor([1e-08], device=scales.device, dtype=scales.dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "quantize_per_channel_72": {
                "input": {
                    "value": "weight.data.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "scales": {
                    "value": "scales.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "zero_points": {
                    "value": "zero_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(min_vals.size(), dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.qint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[1e-08]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "scales.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "scales.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "projects/lightning/experiments/imagenet.py": {
        "torch": {}
    },
    "projects/lightning/experiments/mnist.py": {
        "torch": {}
    },
    "projects/lightning/run.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/meta_cl/experiments/anml_replicate.py": {
        "torch": {}
    },
    "projects/meta_cl/experiments/dendrite_variants.py": {
        "torch": {
            "initial_seed_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/meta_cl/experiments/metacl.py": {
        "torch": {}
    },
    "projects/meta_cl/experiments/metacl_track_stats.py": {
        "torch": {}
    },
    "projects/meta_cl/networks/anml_networks.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_block(3, 256, 3, 1, 0)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.neuromodulation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_block(3, 112, 3, 1, 0)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2304",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.representation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_block(3, 256, 3, 1, 0)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.adaptation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2304, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_47": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_49": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "1008",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2304",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_85": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "2304",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/meta_cl/networks/dendritic_networks.py": {
        "torch": {
            "Sequential_71": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_block(1, 256, 3, 2, 0)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.modulation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_block(1, 256, 3, 2, 0)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2304",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_block(3, 256, 3, 1, 0)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.modulation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_block(3, 112, 3, 1, 0)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2304",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_block(3, 256, 3, 1, 0)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_263": {
                "variable": {
                    "value": "self.modulation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_block(3, 112, 3, 1, 0)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_75": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_83": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_156": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_158": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_160": {
                "output_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_166": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_168": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_170": {
                "output_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_172": {
                "in_features": {
                    "value": "1008",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_192": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_196": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_255": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_257": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_259": {
                "output_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_265": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_267": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_269": {
                "output_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_290": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_294": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/meta_cl/networks/oml_networks.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "self.representation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.conv_block(1, 256, 3, 2, 0)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.adaptation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "KWinners(n=2304, percent_on=0.25, k_inference_factor=1.0, boost_strength=1.0, boost_strength_factor=boost_strength_factor, duty_cycle_period=1000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Flatten_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "2304",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/meta_cl/tests/custom_dendrites_metrics_test.py": {
        "torch": {
            "Flatten_52": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_65": {
                "variable": {
                    "value": "dendritic_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_segments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "initial_seed_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/rsm/active_dendrite.py": {
        "torch": {
            "rand_102": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.lc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[deepcopy(nn.Linear(kernel_size, local_features, bias=bias)) for _ in range(fold_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.lc[i](x[:, i, :]) for i in range(fold_num)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_dend(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "total_dendrites",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "n_dendrites * n_cells",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "local_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "projects/rsm/baseline_models.py": {
        "torch": {
            "Dropout_38": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_43": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "rnn_input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "650",
                            "MethodArgument"
                        ],
                        [
                            "650",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_104": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RNN_109": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "rnn_input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "650",
                            "MethodArgument"
                        ],
                        [
                            "650",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "projects/rsm/k_winners.py": {
        "torch": {
            "zeros_192": {
                "*size": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "projects/rsm/mnist/smnist_lstm.py": {
        "torch": {
            "DataLoader_308": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rsm_samplers.MNISTBufferedDataset(expanduser('~/nta/datasets'), download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rsm_samplers.MNISTSequenceSampler(dataset, sequences=PAGI9, batch_size=BSZ, noise_buffer=opts.noise, random_mnist_images=not opts.fixed)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "rsm_samplers.pred_sequence_collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_81": {
                "variable": {
                    "value": "self.predictor_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "self.pred_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.predictor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_87": {
                "variable": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_129": {
                "variable": {
                    "value": "(_, class_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_distr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_102": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_107": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_104": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.randint(0, 10000)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__222": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "projects/rsm/mnist/smnist_sequences.py": {
        "torch": {
            "zeros_27": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "digits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "repeat_interleave_29": {
                "variable": {
                    "value": "first_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(start_digits)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "reps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(np.ceil(digits / len(start_digits)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_32": {
                "variable": {
                    "value": "column",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "digits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randperm_33": {
                "variable": {
                    "value": "idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "digits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_29": {
                "data": {
                    "value": "start_digits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0, 1]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "projects/rsm/ptb/lang_util.py": {
        "torch": {
            "zeros_77": {
                "variable": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tokens + len(words)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "projects/rsm/rsm.py": {
        "torch": {
            "zeros_like_37": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, d_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_816": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "winners.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "28 * 28",
                            "MethodArgument"
                        ],
                        [
                            "28 * 28",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_817": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "winners.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "28 * 28",
                            "MethodArgument"
                        ],
                        [
                            "28 * 28",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_821": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_822": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.d_in, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_372": {
                "variable": {
                    "value": "self.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "decay_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(self.total_cells, dtype=torch.float32).uniform_(-3.0, 3.0)",
                            "Call"
                        ],
                        [
                            "torch.ones(self.total_cells, dtype=torch.float32).uniform_(-3.0, 3.0)",
                            "Call"
                        ],
                        [
                            "self.eps * torch.ones(self.total_cells, dtype=torch.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "self.trainable_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_499": {
                "variable": {
                    "value": "self.linear_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "decode_d_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.total_cells if self.decode_from_full_memory else self.m",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.d_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.decode_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_570": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "updated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "decay_param * psi_last",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_753": {
                "variable": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi * self.gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_362": {
                "variable": {
                    "value": "decay_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.total_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_438": {
                "variable": {
                    "value": "self.linear_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m_ff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(round(pct_ff * self.m))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.input_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_439": {
                "variable": {
                    "value": "self.linear_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.total_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m_rec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(round(pct_rec * self.m))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.input_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_451": {
                "variable": {
                    "value": "self.linear_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.input_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_502": {
                "variable": {
                    "value": "self.linear_decay_rec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.total_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.total_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_577": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[param.new_zeros((batch_size, tc), dtype=torch.float32, requires_grad=False) for tc in self.total_cells]",
                            "ListComp"
                        ],
                        [
                            "phi * mask",
                            "BinOp"
                        ],
                        [
                            "torch.max(phi * self.gamma, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_597": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[param.new_zeros((batch_size, tc), dtype=torch.float32, requires_grad=False) for tc in self.total_cells]",
                            "ListComp"
                        ],
                        [
                            "y / alpha_y",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_670": {
                "variable": {
                    "value": "m_pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "phi.size(0)",
                            "Call"
                        ],
                        [
                            "pi.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.total_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sigma.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "self.d_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_57": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_367": {
                "variable": {
                    "value": "decay_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.total_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_375": {
                "*size": {
                    "value": "self.total_cells",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_445": {
                "variable": {
                    "value": "self.linear_a_int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.m - m_ff - m_rec",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.input_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_446": {
                "variable": {
                    "value": "self.linear_b_int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.total_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "m_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.m - m_ff - m_rec",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.input_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_474": {
                "variable": {
                    "value": "self.linear_b_above",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_above",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.total_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.input_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_613": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_a, z_int, z_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_617": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_a, z_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_470": {
                "variable": {
                    "value": "self.linear_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d1 + self.m",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.input_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_559": {
                "input": {
                    "value": "self.linear_decay_rec(psi_last)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_576": {
                "*size": {
                    "value": "bsz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "phi.size(0)",
                            "Call"
                        ],
                        [
                            "pi.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_629": {
                "variable": {
                    "value": "z_b_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_b_in, self._group_max(x_b))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_371": {
                "*size": {
                    "value": "self.total_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_563": {
                "input": {
                    "value": "self.decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_708": {
                "tensors": {
                    "value": "winners",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_708": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/rsm/rsm_experiment.py": {
        "torch": {
            "set_detect_anomaly_52": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "one_hot_492": {
                "variable": {
                    "value": "labels_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_targets.flatten()",
                            "Call"
                        ],
                        [
                            "pred_targets.to(self.device)",
                            "Call"
                        ],
                        [
                            "pred_targets[:bsz]",
                            "Subscript"
                        ],
                        [
                            "pred_targets.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predictor_dist_size[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_497": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictor_dist",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_235": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "self.train_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "pred_sequence_collate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_240": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.val_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "self.val_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "pred_sequence_collate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_310": {
                "variable": {
                    "value": "self.predictor_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_314": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "l2_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_338": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_342": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_419": {
                "variable": {
                    "value": "self.word_cache",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.eval_batch_size, self.vocab_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_427": {
                "variable": {
                    "value": "self.kn5_distr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.data_dir + '/PTB/KN5/kn5_distr_remapped.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "predictor_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_556": {
                "variable": {
                    "value": "(_, class_predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictor_dist",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_944": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, self.pred_model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.pred_model_filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_951": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, self.pred_model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.pred_model_filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_1074": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(image_batch.shape[0] + compare_with.shape[0], image_batch.shape[1], side, side)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_290": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "corpus.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PTBSequenceSampler(corpus.train, batch_size=self.batch_size, max_batches=self.batches_in_epoch)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "partial(ptb_pred_sequence_collate, vector_dict=embedding)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_299": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "corpus.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "val_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PTBSequenceSampler(corpus.test, batch_size=self.eval_batch_size, max_batches=self.eval_batches_in_epoch, uniform_offsets=True)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "partial(ptb_pred_sequence_collate, vector_dict=embedding)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_316": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "l2_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_339": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.get('seed', random.randint(0, 10000))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__481": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_663": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_918": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, self.pred_model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.pred_model_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_920": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, self.pred_model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.pred_model_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_1126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_924": {
                "obj": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, self.pred_model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.pred_model_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_926": {
                "obj": {
                    "value": "self.predictor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, self.pred_model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.pred_model_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_929": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_947": {
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, self.pred_model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.pred_model_filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_954": {
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, self.pred_model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.model_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, self.pred_model_filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_968": {
                "variable": {
                    "value": "metrics[metric_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(current, val)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_529": {
                "input": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(predictor_dist)",
                            "Call"
                        ],
                        [
                            "predictions + mass_pct * self.kn5_distr[loader.batch_sampler.batch_idxs, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_517": {
                "input": {
                    "value": "predictor_dist",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "variable": {
                    "value": "embedding[word_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "ft_model[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "projects/rsm/rsm_ptb_predict.py": {
        "torch": {
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/rsm/rsm_ray.py": {
        "torch": {
            "device_count_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/rsm/rsm_samplers.py": {
        "torch": {
            "stack_217": {
                "variable": {
                    "value": "inp_images_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item[0] for item in inp_tuples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_218": {
                "variable": {
                    "value": "tgt_images_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[item[0] for item in tgt_tuples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "inp_labels_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[item[1] for item in inp_tuples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "tgt_labels_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[item[1] for item in tgt_tuples]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "self.seq_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(subseq) for subseq in self.sequences]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "self.sequence_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self._init_sequence_ids(), self._init_sequence_ids())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_113": {
                "variable": {
                    "value": "self.sequence_cursor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(first_batch_cursors, first_batch_cursors)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_sequence_118": {
                "variable": {
                    "value": "self.sequences_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequences": {
                    "value": "torch.tensor(self.sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "-99",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_263": {
                "tensors": {
                    "value": "vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "cursors",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.bsz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "self.sequences",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_198": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.label_indices[digit])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_127": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "mask.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_240": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_243": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "projects/rsm/stochastic_mnist_test.py": {
        "torch": {
            "DataLoader_79": {
                "variable": {
                    "value": "self.random_digit_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "self.random_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "self.fixed_digit_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "self.fixed_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "all_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inputs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "all_input_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_input_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_input_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_113": {
                "variable": {
                    "value": "all_target_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_target_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_target_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_156": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "random_seq_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MNISTSequenceSampler(self.dataset, sequences=self.SEQ, batch_size=self.BSZ, random_mnist_images=True)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "self.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_168": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inputs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "flatten_168": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bincount_168": {
                "variable": {
                    "value": "counts",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/sdr_math/scalar_sdrs.py": {
        "torch": {
            "Tensor_70": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "projects/vernon_continual/experiments/ewc.py": {
        "torch": {
            "ModuleList_73": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Flatten(), nn.Linear(self.input_size, self.hidden_size), nn.ReLU(), nn.Dropout(self.input_dropout_prob), *(nn.Linear(self.hidden_size, self.hidden_size), nn.ReLU(), nn.Dropout(self.hidden_dropout_prob)) * self.hidden_layer_num, nn.Linear(self.hidden_size, self.output_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Flatten_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "p": {
                    "value": "self.input_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "p": {
                    "value": "self.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "projects/vernon_continual/experiments/si.py": {
        "torch": {
            "tensor_75": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "true_divide_99": {
                "dividend": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(0, device=device)",
                            "Call"
                        ],
                        [
                            "correct + pred.eq(target.view_as(pred)).sum()",
                            "BinOp"
                        ]
                    ]
                },
                "divisor": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "total + len(data)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "projects/vernon_examples/simple_example.py": {
        "torch": {}
    },
    "projects/visual_recognition_grid_cells/SDR_CNN.py": {
        "torch": {
            "device_65": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "seed_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_284": {
                "variable": {
                    "value": "first_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('data', train=True, download=True, transform=normalize)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST('data', train=True, download=True, transform=normalize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FIRST_EPOCH_BATCH_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSubSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_287": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('data', train=True, download=True, transform=normalize)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST('data', train=True, download=True, transform=normalize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "TRAIN_BATCH_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSubSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_290": {
                "variable": {
                    "value": "test_cnn_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('data', train=True, download=True, transform=normalize)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST('data', train=True, download=True, transform=normalize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "TEST_BATCH_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_cnn_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSubSampler(test_cnn_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_293": {
                "variable": {
                    "value": "test_sdrc_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST('data', train=False, download=True, transform=normalize)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST('data', train=False, download=True, transform=normalize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "TEST_BATCH_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sdr_classifier_sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSubSampler(range(test_sdr_class_len))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_201": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_202": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_204": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_210": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_213": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_215": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_224": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_225": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_332": {
                "variable": {
                    "value": "sgd",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sdr_cnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "MOMENTUM",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_352": {
                "obj": {
                    "value": "sdr_cnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_networks/sdr_cnn.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_356": {
                "f": {
                    "value": "saved_networks/sdr_cnn.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "projects/visual_recognition_grid_cells/SDR_decoder.py": {
        "torch": {
            "manual_seed_37": {
                "seed": {
                    "value": "seed_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "training_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('python2_htm_docker/docker_dir/training_and_testing_data/' + DATASET + '_SDRs_base_net_training.npy')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "testing_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('python2_htm_docker/docker_dir/training_and_testing_data/' + DATASET + '_SDRs_SDR_classifiers_training.npy')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "training_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('python2_htm_docker/docker_dir/training_and_testing_data/' + DATASET + '_labels_base_net_training.npy')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "testing_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('python2_htm_docker/docker_dir/training_and_testing_data/' + DATASET + '_labels_SDR_classifiers_training.npy')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_121": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "28 * 28",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_networks/ + DATASET + _decoder.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_153": {
                "f": {
                    "value": "saved_networks/ + DATASET + _decoder.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "projects/visual_recognition_grid_cells/auto_encoder_sequential.py": {
        "torch": {
            "manual_seed_40": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_255": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_256": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_304": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_305": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clone_382": {
                "variable": {
                    "value": "input_images_copy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_images",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.dense1_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.dense2_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.dense1_decode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense1_encode(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense2_encode(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense1_decode(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.dense1_decode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.dense2_decode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dense2_decode(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_266": {
                "variable": {
                    "value": "shuffle_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "np.shape(training_sdr_sources)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_295": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_networks/ + data_set + _patch_decoder.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_341": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "saved_networks/ + data_set + _patch_autoencoder.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_351": {
                "f": {
                    "value": "saved_networks/ + data_set + _patch_autoencoder.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_377": {
                "f": {
                    "value": "saved_networks/ + data_set + _patch_autoencoder.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "projects/visual_recognition_grid_cells/visualise_GridCellNet_predictions.py": {
        "torch": {
            "manual_seed_41": {
                "seed": {
                    "value": "seed_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "input_sdr",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.reshape(input_sdr, 128 * 5 * 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_226": {
                "variable": {
                    "value": "random_input_sdr",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.reshape(random_input_sdr, 128 * 5 * 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "current_input_sdr",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_sdr[:, patch_width_iter, patch_height_iter]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_288": {
                "f": {
                    "value": "saved_networks/ + DATASET + _patch_decoder.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_294": {
                "f": {
                    "value": "saved_networks/ + DATASET + _decoder.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/cifar-100/cifar_experiment.py": {
        "torch": {
            "DataLoader_220": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(datasets, self.dataset)(self.data_dir, train=True, transform=self.transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_223": {
                "variable": {
                    "value": "self.first_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(datasets, self.dataset)(self.data_dir, train=True, transform=self.transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "first_epoch_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.get('first_epoch_batch_size', batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_344": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "self.cnn_out_channels[ly]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_389": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_180": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.get('seed', random.randint(0, 10000))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_183": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_187": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_319": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, self.model_filename)",
                            "Call"
                        ],
                        [
                            "checkpoint_path",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_415": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_units",
                            "Name"
                        ],
                        [
                            "self.linear_n[ly]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "linear_n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(datasets, dataset)(root=data_dir, train=False, transform=transform_noise_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_184": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.get('seed', random.randint(0, 10000))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_299": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.model_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_301": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.model_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_441": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_units",
                            "Name"
                        ],
                        [
                            "self.linear_n[ly]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_454": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_322": {
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, self.model_filename)",
                            "Call"
                        ],
                        [
                            "checkpoint_path",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_351": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_375": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_461": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_477": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Adam'",
                            "MethodArgument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.learning_rate_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_356": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_360": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_436": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_481": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Adam'",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "factor": {
                    "value": "self.learning_rate_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/cifar-100/cifar_tune.py": {
        "torch": {
            "device_count_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/cifar/cifar_experiment.py": {
        "torch": {
            "DataLoader_188": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(self.data_dir, train=True, transform=self.transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "self.first_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(self.data_dir, train=True, transform=self.transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "first_epoch_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.get('first_epoch_batch_size', batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_155": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.get('seed', random.randint(0, 10000))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_158": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_162": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_289": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, self.model_filename)",
                            "Call"
                        ],
                        [
                            "checkpoint_path",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_317": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, transform=transform_noise_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_159": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.get('seed', random.randint(0, 10000))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_270": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.model_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_272": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, self.model_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_327": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.learning_rate_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_292": {
                "f": {
                    "value": "checkpoint_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, self.model_filename)",
                            "Call"
                        ],
                        [
                            "checkpoint_path",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/cifar/cifar_noise_test.py": {
        "torch": {
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/cifar/cifar_run.py": {
        "torch": {
            "device_count_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/cifar/cifar_tune.py": {
        "torch": {
            "device_count_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/cifar/mobilenet_cifar.py": {
        "torch": {
            "RMSprop_88": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': self.model.conv.parameters()}, {'params': self.model.deepwise.parameters(), 'weight_decay': 0}, {'params': self.model.classifier.parameters()}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "StepLR_92": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "config['lr_step_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config['learning_rate_gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(data_dir, train=True, transform=transforms.Compose(transform))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_196": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(data_dir, train=False, transform=transforms.Compose(transform[2:]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['test_batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_76": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_79": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_98": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_148": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_201": {
                "variable": {
                    "value": "self.first_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(data_dir, train=True, transform=transforms.Compose(transform))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "first_epoch_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['first_epoch_batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_154": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/cifar/mobilenet_noise_test.py": {
        "torch": {
            "device_count_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/cifar/mobilenet_run.py": {
        "torch": {}
    },
    "projects/whydense/cifar/mobilenet_tune.py": {
        "torch": {
            "device_count_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/cifar/not_so_dense_experiment.py": {
        "torch": {
            "DataLoader_83": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose(data_augmentation + normalize_tensor))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=False, transform=transforms.Compose(normalize_tensor))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_120": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "config['nesterov']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_115": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_118": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MultiStepLR_128": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config['learning_scheduler_gamma']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "milestones": {
                    "value": "config['learning_scheduler_milestones']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "StepLR_133": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config['learning_scheduler_gamma']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step_size": {
                    "value": "config['learning_scheduler_step_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_174": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/cifar/not_so_dense_tune.py": {
        "torch": {
            "device_count_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/gsc/run.py": {
        "torch": {
            "device_count_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/gsc/sparse_speech_experiment.py": {
        "torch": {
            "is_available_127": {
                "variable": {
                    "value": "self.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_312": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PreprocessedDataset(cachefilepath=self.data_dir, basename='gsc_train', qualifiers=range(30))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_317": {
                "variable": {
                    "value": "self.validation_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PreprocessedDataset(cachefilepath=self.data_dir, basename='gsc_valid', qualifiers=[''])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_322": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PreprocessedDataset(cachefilepath=self.data_dir, basename='gsc_test_noise', qualifiers=['{:02d}'.format(int(100 * n)) for n in self.noise_values])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_130": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_133": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_138": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LeSparseNet(input_shape=config.get('input_shape', (1, 32, 32)), cnn_out_channels=config['cnn_out_channels'], cnn_activity_percent_on=config['cnn_percent_on'], cnn_weight_percent_on=config['cnn_weight_sparsity'], linear_n=config['linear_n'], linear_activity_percent_on=config['linear_percent_on'], linear_weight_percent_on=config['weight_sparsity'], boost_strength=config['boost_strength'], boost_strength_factor=config['boost_strength_factor'], use_batch_norm=config['use_batch_norm'], dropout=config.get('dropout', 0.0), num_classes=self.num_classes, k_inference_factor=config['k_inference_factor'], activation_fct_before_max_pool=config.get('activation_fct_before_max_pool', False), consolidated_sparse_weights=config.get('consolidated_sparse_weights', False), use_kwinners_local=config.get('use_kwinner_local', False))",
                            "Call"
                        ],
                        [
                            "resnet9(num_classes=self.num_classes, in_channels=1)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "GSCSparseCNN()",
                            "Call"
                        ],
                        [
                            "GSCSuperSparseCNN()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_151": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_192": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['learning_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "params['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_count_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_157": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_199": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['learning_rate']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_count_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/gsc/speech_commands_dataset.py": {
        "torch": {}
    },
    "projects/whydense/mnist/mnist_sparse_experiment.py": {
        "torch": {
            "DataLoader_278": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(self.data_dir, train=False, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_106": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_109": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_113": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LeSparseNet(input_shape=(1, 28, 28), cnn_out_channels=config['cnn_out_channels'], cnn_activity_percent_on=config['cnn_percent_on'], cnn_weight_percent_on=config['cnn_weight_sparsity'], linear_n=config['linear_n'], linear_activity_percent_on=config['linear_percent_on'], linear_weight_percent_on=config['weight_sparsity'], boost_strength=config['boost_strength'], boost_strength_factor=config['boost_strength_factor'], use_batch_norm=config['use_batch_norm'], dropout=config.get('dropout', 0.0), num_classes=self.num_classes, k_inference_factor=config['k_inference_factor'], activation_fct_before_max_pool=config.get('activation_fct_before_max_pool', False), consolidated_sparse_weights=config.get('consolidated_sparse_weights', False), use_kwinners_local=config.get('use_kwinner_local', False))",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_199": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_233": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(self.data_dir, train=False, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_260": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(self.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.train_sampler",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_264": {
                "variable": {
                    "value": "self.validation_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(self.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.validation_sampler",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_274": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(self.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_285": {
                "variable": {
                    "value": "self.first_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(self.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.first_epoch_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_317": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_205": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_path, 'model.pt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_321": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/mnist/run.py": {
        "torch": {
            "device_count_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "projects/whydense/scalar_sdrs.py": {
        "torch": {
            "Tensor_68": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/htm/temporal_memory/examples/hello_tm.py": {
        "torch": {
            "zeros_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, tm.num_minicolumns)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tensor_100": {
                "variable": {
                    "value": "active_minicolumns",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_76": {
                "variable": {
                    "value": "active_minicolumns",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/htm/temporal_memory/examples/tm_higher_order.py": {
        "torch": {
            "zeros_200": {
                "variable": {
                    "value": "seq1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, tm.num_minicolumns)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "seq2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, tm.num_minicolumns)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_212": {
                "variable": {
                    "value": "seq_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(6, tm.num_minicolumns)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "v2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(v1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "current_minicolumns",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tm.num_minicolumns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "predicted_minicolumns",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tm.num_minicolumns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tensor_109": {
                "variable": {
                    "value": "current_minicolumns",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_115": {
                "variable": {
                    "value": "predicted_minicolumns",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "count_nonzero_55": {
                "input": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_160": {
                "variable": {
                    "value": "current_minicolumns",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_166": {
                "variable": {
                    "value": "predicted_minicolumns",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dot_56": {
                "input": {
                    "value": "current",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "count_nonzero_57": {
                "input": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nonzero_122": {
                "input": {
                    "value": "current_minicolumns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1 if i in active_minicolumn_indices else 0 for i in range(tm.num_minicolumns)])",
                            "Call"
                        ],
                        [
                            "torch.zeros(tm.num_minicolumns, dtype=int_type)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([1 if i in active_minicolumn_indices else 0 for i in range(tm.num_minicolumns)])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_123": {
                "input": {
                    "value": "predicted_minicolumns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1 if i in predicted_minicolumn_indices else 0 for i in range(tm.num_minicolumns)])",
                            "Call"
                        ],
                        [
                            "torch.zeros(tm.num_minicolumns, dtype=int_type)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([1 if i in predicted_minicolumn_indices else 0 for i in range(tm.num_minicolumns)])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/htm/temporal_memory/pair_memory_apical_tiebreak.py": {
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_96": {
                "variable": {
                    "value": "apical_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unique_140": {
                "input": {
                    "value": "self.map_segments_to_cells('basal', self.active_basal_segments)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_149": {
                "input": {
                    "value": "self.map_segments_to_cells('apical', self.active_apical_segments)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/htm/temporal_memory/sequence_memory_apical_tiebreak.py": {
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_103": {
                "variable": {
                    "value": "self.previous_apical_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_104": {
                "variable": {
                    "value": "self.previous_apical_growth_candidates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_107": {
                "variable": {
                    "value": "self.previous_predicted_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tensor_148": {
                "variable": {
                    "value": "apical_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unique_208": {
                "input": {
                    "value": "self.map_basal_segments_to_cells(self.active_basal_segments)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_217": {
                "input": {
                    "value": "self.map_apical_segments_to_cells(self.active_apical_segments)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/htm/temporal_memory/temporal_memory_apical_tiebreak.py": {
        "torch": {
            "cat_1263": {
                "variable": {
                    "value": "(uniques, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_1263": {
                "variable": {
                    "value": "(uniques, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_1317": {
                "variable": {
                    "value": "unique_groups",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_167": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "self.basal_connections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, self.basal_input_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "real_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_174": {
                "variable": {
                    "value": "self.apical_connections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, self.apical_input_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "real_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_181": {
                "variable": {
                    "value": "self.active_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_182": {
                "variable": {
                    "value": "self.learning_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_183": {
                "variable": {
                    "value": "self.predicted_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_184": {
                "variable": {
                    "value": "self.predicted_active_cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_185": {
                "variable": {
                    "value": "self.active_basal_segments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_186": {
                "variable": {
                    "value": "self.active_apical_segments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_187": {
                "variable": {
                    "value": "self.matching_basal_segments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_188": {
                "variable": {
                    "value": "self.matching_apical_segments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_189": {
                "variable": {
                    "value": "self.basal_potential_overlaps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_190": {
                "variable": {
                    "value": "self.apical_potential_overlaps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_318": {
                "variable": {
                    "value": "active_cells",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[correctly_predicted_cells, get_cells_in_minicolumns(bursting_minicolumns, self.num_cells_per_minicolumn)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_421": {
                "variable": {
                    "value": "apical_input_sdr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.apical_input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_430": {
                "variable": {
                    "value": "active_apical_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps >= self.activation_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_430": {
                "variable": {
                    "value": "active_apical_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_439": {
                "variable": {
                    "value": "matching_apical_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "apical_potential_overlaps >= self.matching_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_439": {
                "variable": {
                    "value": "matching_apical_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_478": {
                "variable": {
                    "value": "basal_input_sdr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.basal_input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_488": {
                "variable": {
                    "value": "fully_active_basal_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps >= self.activation_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_488": {
                "variable": {
                    "value": "fully_active_basal_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_526": {
                "variable": {
                    "value": "matching_basal_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "basal_potential_overlaps >= self.matching_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_526": {
                "variable": {
                    "value": "matching_basal_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unique_662": {
                "variable": {
                    "value": "unique_cells_with_matching_basal_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cells_with_matching_basal_segments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.map_segments_to_cells('basal', self.matching_basal_segments)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_771": {
                "variable": {
                    "value": "(unique_minicolumns, num_candidates_in_minicolumns)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cells_to_minicolumns(cells_in_bursting_minicolumns_with_no_matching_basal_segments, self.num_cells_per_minicolumn)",
                    "type": "Call",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_814": {
                "variable": {
                    "value": "learning_cells",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[correctly_predicted_cells, self.map_segments_to_cells('basal', learning_matching_basal_segments), cells_with_new_basal_segments]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_1047": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "segments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "segments[synapse_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "meshgrid_1180": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "segments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "segments[synapse_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "seed_163": {
                "variable": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_497": {
                "variable": {
                    "value": "potentially_active_basal_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(overlaps < self.activation_threshold) & (overlaps >= self.reduced_basal_threshold)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_510": {
                "variable": {
                    "value": "active_basal_segments",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fully_active_basal_segments, potentially_active_basal_segments[isin(potentially_active_cells, reduced_threshold_basal_cells)].squeeze()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_586": {
                "tensors": {
                    "value": "[fully_depolarized_cells, partly_depolarized_cells[~inhibited_mask]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_791": {
                "variable": {
                    "value": "one_cell_per_minicolumn_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_994": {
                "variable": {
                    "value": "max_new_synapses",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "max_new_synapses <= max_synapses_to_reach",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "max_new_synapses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "growth_candidates.numel()",
                            "Call"
                        ],
                        [
                            "self.sample_size - potential_overlaps[learning_segments]",
                            "BinOp"
                        ],
                        [
                            "torch.where(max_new_synapses <= max_synapses_to_reach, max_new_synapses, max_synapses_to_reach)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([max_new_synapses]).repeat(segments.numel()).to(device)",
                            "Call"
                        ],
                        [
                            "max_new_synapses[synapse_mask].to(int_type)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_synapses_to_reach",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.max_synapses_per_segment - synapse_counts",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_1033": {
                "variable": {
                    "value": "max_new_synapses",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_1121": {
                "variable": {
                    "value": "self.basal_connections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.basal_connections, torch.zeros((len(new_segments), self.basal_input_size), dtype=int_type).to(device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_1314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_1327": {
                "input": {
                    "value": "max_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(values + 1).view(-1, 1) * (groups.view(-1, 1) == unique_groups)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_397": {
                "input": {
                    "value": "active_cells",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([correctly_predicted_cells, get_cells_in_minicolumns(bursting_minicolumns, self.num_cells_per_minicolumn)])",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_398": {
                "input": {
                    "value": "learning_cells",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([correctly_predicted_cells, self.map_segments_to_cells('basal', learning_matching_basal_segments), cells_with_new_basal_segments])",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_764": {
                "input": {
                    "value": "(basal_segment_counts == min_basal_segment_counts).ravel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_764": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1140": {
                "variable": {
                    "value": "self.apical_connections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.apical_connections, torch.zeros((len(new_segments), self.apical_input_size), dtype=int_type).to(device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_1153": {},
            "arange_969": {
                "start": {
                    "value": "connections.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_1071": {
                "n": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1289": {
                "start": {
                    "value": "num_cells_per_minicolumn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_1124": {
                "*size": {
                    "value": "(len(new_segments), self.basal_input_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_795": {
                "size": {
                    "value": "(one_cell_per_minicolumn_filter.numel(),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1143": {
                "*size": {
                    "value": "(len(new_segments), self.apical_input_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int64",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/audio_transforms.py": {
        "torch": {
            "unsqueeze_371": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[self.tensor_name]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(data, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/dataset_utils/common.py": {
        "torch": {
            "SubsetRandomSampler_76": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices[:training_count]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.random.permutation(len(dataset))",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_77": {
                "variable": {
                    "value": "validate",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices[training_count:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.random.permutation(len(dataset))",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_194": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_492": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "BytesIO(image_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "data": {
                    "value": "union_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "label.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "label.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_497": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.transform(sample) for _ in range(self.replicas_per_sample)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/dataset_utils/hdf5_utils.py": {
        "torch": {
            "save_37": {
                "obj": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor.detach().cpu()",
                            "Call"
                        ],
                        [
                            "tensor.detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "byte_io",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "io.BytesIO()",
                            "Call"
                        ],
                        [
                            "io.BytesIO()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/datasets/permuted_mnist.py": {
        "torch": {
            "manual_seed_55": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "self.contexts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros((num_contexts, num_zeros)), torch.ones((num_contexts, num_ones)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_175": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "self.contexts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_tasks, 28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_206": {
                "variable": {
                    "value": "self.contexts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_tasks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.num_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "(img, context)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_58": {
                "n": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.manual_seed(seed)",
                            "Call"
                        ],
                        [
                            "torch.manual_seed(seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "(num_contexts, num_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_170": {
                "*size": {
                    "value": "(num_contexts, num_ones)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_178": {
                "n": {
                    "value": "self.dim_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.manual_seed(seed)",
                            "Call"
                        ],
                        [
                            "torch.manual_seed(seed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/datasets/torchvision_factory.py": {
        "torch": {
            "DataLoader_142": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset_class(root=root, train=train, transform=transform, target_transform=target_transform, download=download)",
                            "Call"
                        ],
                        [
                            "dataset_class(root=root, background=train, transform=transform, target_transform=target_transform, download=download)",
                            "Call"
                        ],
                        [
                            "dataset_class(root=root, train=True, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "sys.maxsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_145": {
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "std_146": {
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/distributed_sampler.py": {
        "torch": {
            "Generator_97": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_99": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/functions/mish.py": {
        "torch": {
            "tanh_35": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_35": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/hooks/track_gradients.py": {
        "torch": {
            "tensor_39": {
                "variable": {
                    "value": "self._gradients",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "self._gradients",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_in[1].reshape(1, -1), self._gradients)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/hooks/track_hidden_activations.py": {
        "torch": {
            "tensor_40": {
                "variable": {
                    "value": "self._activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "self._activations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y, self._activations)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/lr_scheduler.py": {
        "torch": {}
    },
    "src/nupic/research/frameworks/pytorch/mask_utils.py": {
        "torch": {
            "zeros_47": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "indices.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "indices.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_51": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(shape, dtype=bool, layout=indices.layout, device=indices.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_92": {
                "variable": {
                    "value": "top_values_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/model_compare.py": {
        "torch": {
            "randn_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_samples,) + input_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next(model1.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/model_utils.py": {
        "torch": {
            "tensor_236": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_339": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_376": {
                "obj": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fileobj",
                    "type": "Variable",
                    "possible_values": []
                },
                "pickle_protocol": {
                    "value": "pickle.HIGHEST_PROTOCOL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_404": {
                "f": {
                    "value": "fileobj",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_341": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_400": {
                "f": {
                    "value": "fin",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/models/common_models.py": {
        "torch": {
            "Sequential_53": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Flatten_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "int(np.prod(input_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Flatten_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_sizes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "hidden_sizes[idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/models/le_sparse_net.py": {
        "torch": {
            "Conv2d_73": {
                "variable": {
                    "value": "cnn",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(current_input_shape)",
                            "Call"
                        ],
                        [
                            "linear_n[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "linear_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_95": {
                "variable": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_113": {
                "variable": {
                    "value": "maxpool",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_167": {
                "num_features": {
                    "value": "linear_n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_185": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_294": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(current_input_shape)",
                            "Call"
                        ],
                        [
                            "linear_n[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_296": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/models/mobilenetv1.py": {
        "torch": {
            "Sequential_46": {
                "*args": {
                    "value": "nn.Conv2d(in_channels=in_channels, out_channels=in_channels, kernel_size=kernel_size, stride=stride, padding=1, groups=in_channels, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=3, out_channels=int(32 * width_mult), kernel_size=3, stride=first_stride, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.deepwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "separable_convolution2d(in_channels=32, out_channels=64, stride=1, width_mult=width_mult)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(avgpool_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * width_mult)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * width_mult)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * width_mult)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * width_mult)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * width_mult)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_channels * width_mult)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_channels * width_mult)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(32 * width_mult)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "first_stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "num_features": {
                    "value": "int(32 * width_mult)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_153": {
                "kernel_size": {
                    "value": "avgpool_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "int(1024 * width_mult)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1001",
                            "MethodArgument"
                        ],
                        [
                            "1001",
                            "MethodArgument"
                        ],
                        [
                            "1001",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/models/not_so_densenet.py": {
        "torch": {
            "Conv2d_120": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "growth_rate * 2",
                            "BinOp"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "growth_rate * 2",
                            "BinOp"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_features",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_145": {
                "kernel_size": {
                    "value": "avg_pool_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(num_features * 16 / (avg_pool_size * avg_pool_size))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/models/pretrained_models.py": {
        "torch": {
            "load_63": {
                "f": {
                    "value": "facebookresearch/semi-supervised-ImageNet1K-models",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "resnet50_swsl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "facebookresearch/semi-supervised-ImageNet1K-models",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "resnext50_32x4d_swsl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_108": {
                "f": {
                    "value": "facebookresearch/WSL-Images",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "resnext101_32x16d_wsl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_126": {
                "f": {
                    "value": "facebookresearch/WSL-Images",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "resnext101_32x48d_wsl",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/models/resnet_models.py": {
        "torch": {
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_62": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/models/resnets.py": {
        "torch": {
            "Sequential_53": {
                "variable": {
                    "value": "self.regular_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', conv_layer(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False, **conv_args['conv3x3_1'])), ('bn1', norm_layer(planes, **norm_args['bn1'])), ('act1', act_layer(planes, **act_args['act1'])), ('conv2', conv_layer(planes, planes, kernel_size=3, padding=1, bias=False, **conv_args['conv3x3_2'])), ('bn2', norm_layer(planes, **norm_args['bn2']))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.regular_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', conv_layer(in_planes, planes, kernel_size=1, bias=False, **conv_args['conv1x1_1'])), ('bn1', norm_layer(planes, **norm_args['bn1'])), ('act1', act_layer(planes, **act_args['act1'])), ('conv2', conv_layer(planes, planes, stride=stride, kernel_size=3, padding=1, bias=False, **conv_args['conv3x3_2'])), ('bn2', norm_layer(planes, **norm_args['bn2'])), ('act2', act_layer(planes, kernel_size=3, **act_args['act2'])), ('conv3', conv_layer(planes, self.expansion * planes, kernel_size=1, bias=False, **conv_args['conv1x1_3'])), ('bn3', norm_layer(self.expansion * planes, **norm_args['bn3']))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_220": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_370": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', conv_layer(in_planes, planes, kernel_size=1, stride=stride, bias=False, **conv_args['shortcut'])), ('bn', norm_layer(planes, **norm_args['shortcut']))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_72": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', conv_layer(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False, **conv_args['shortcut'])), ('bn', norm_layer(self.expansion * planes, **norm_args['shortcut']))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_158": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_404": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_340": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_367": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/models/sparse_resnets.py": {
        "torch": {
            "Linear_176": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_267": {
                "variable": {
                    "value": "base_activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_283": {
                "*args": {
                    "value": "base_activation",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/models/vgg_sparse_net.py": {
        "torch": {
            "Conv2d_155": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cnn_out_channels[ly]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_units",
                            "Name"
                        ],
                        [
                            "linear_n",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "linear_n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_units",
                            "Name"
                        ],
                        [
                            "linear_n",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_162": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_186": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_167": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_171": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/modules/common_layers.py": {
        "torch": {
            "Linear_104": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_74": {
                "*args": {
                    "value": "nn.ReLU(inplace=inplace)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "nn.Identity()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/modules/consolidated_sparse_weights.py": {
        "torch": {
            "Sequential_192": {
                "variable": {
                    "value": "model2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConsolidatedSparseWeights2D(nn.Conv2d(in_channels=64, out_channels=64, kernel_size=5, padding=0, stride=1), 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "ndarray": {
                    "value": "zero_indices.transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_176": {
                "ndarray": {
                    "value": "zero_indices.transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_194": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/modules/mish.py": {
        "torch": {}
    },
    "src/nupic/research/frameworks/pytorch/modules/sgdw.py": {
        "torch": {
            "clone_146": {
                "variable": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/modules/weight_mask_layers.py": {
        "torch": {
            "Parameter_50": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_102": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "module.out_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "module.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "module.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "module.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_71": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight * self.weight_mask",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight * self.weight_mask",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_138": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight * self.weight_mask",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight * self.weight_mask",
                            "BinOp"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_55": {},
            "Tensor_115": {}
        }
    },
    "src/nupic/research/frameworks/pytorch/regularization.py": {
        "torch": {
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_59": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/remove_batchnorm.py": {
        "torch": {
            "Parameter_46": {
                "variable": {
                    "value": "folded.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv2d.weight * (bn_w * t).reshape((-1, 1, 1, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "folded.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(linear.bias - bn_linear.running_mean) * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "folded.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "linear.weight * t.reshape((-1, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_41": {
                "variable": {
                    "value": "bn_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_2d.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "bn_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_2d.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "folded.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(conv2d.bias - bn_2d.running_mean) * t * bn_w + bn_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Identity_101": {
                "variable": {
                    "value": "new_mod[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "modules",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/restore_utils.py": {
        "torch": {
            "zeros_329": {
                "variable": {
                    "value": "new_buffer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "saved_buffer.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "init_buffer.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "init_buffer.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "init_buffer.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/pytorch/speech_commands_dataset.py": {
        "torch": {}
    },
    "src/nupic/research/frameworks/pytorch/test_utils/fake_data.py": {
        "torch": {}
    },
    "src/nupic/research/frameworks/pytorch/test_utils/temp_fake_data.py": {
        "torch": {
            "DataLoader_110": {
                "variable": {
                    "value": "self.train_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "self.val_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.val_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/distributed/experiments/components/distributed_base.py": {
        "torch": {}
    },
    "src/nupic/research/frameworks/vernon/distributed/experiments/supervised_experiment.py": {
        "torch": {
            "DistributedDataParallel_52": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "config.get('find_unused_parameters', False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "config.get('device_ids', None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_68": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/distributed/mixins/log_every_loss.py": {
        "torch": {
            "Tensor_42": {
                "variable": {
                    "value": "loss_by_process_and_batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "loss_by_process_and_batch[rank, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "result[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/experiment_utils.py": {
        "torch": {}
    },
    "src/nupic/research/frameworks/vernon/experiments/supervised_experiment.py": {
        "torch": {
            "device_74": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_306": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.load_dataset(config, train=True)",
                            "Call"
                        ],
                        [
                            "cls.load_dataset(config, train=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.get('batch_size', 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.create_train_sampler(config, dataset)",
                            "Call"
                        ],
                        [
                            "cls.create_validation_sampler(config, dataset)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.get('train_loader_drop_last', True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_330": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.load_dataset(config, train=True)",
                            "Call"
                        ],
                        [
                            "cls.load_dataset(config, train=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.get('val_batch_size', config.get('batch_size', 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cls.create_train_sampler(config, dataset)",
                            "Call"
                        ],
                        [
                            "cls.create_validation_sampler(config, dataset)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/composite_loss.py": {
        "torch": {
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/configure_optimizer_param_groups.py": {
        "torch": {}
    },
    "src/nupic/research/frameworks/vernon/mixins/cutmix.py": {
        "torch": {
            "randperm_89": {
                "variable": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_96": {
                "variable": {
                    "value": "ohe_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.to(self.device, non_blocking=non_blocking)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_97": {
                "variable": {
                    "value": "ohe_target_patches",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target[rand_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_188": {
                "variable": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_200": {
                "variable": {
                    "value": "soft_target_patches",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target[rand_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_197": {
                "variable": {
                    "value": "soft_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.teacher_model(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_267": {
                "input": {
                    "value": "torch.sum(-target * F.log_softmax(output, dim=1), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_267": {
                "input": {
                    "value": "-target * F.log_softmax(output, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_269": {
                "input": {
                    "value": "-target * F.log_softmax(output, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_267": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_269": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/gradient_metrics.py": {
        "torch": {
            "tensor_99": {
                "variable": {
                    "value": "self.gradient_metric_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argsort_185": {
                "variable": {
                    "value": "order_by_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gradient_metric_targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "self.gradient_metric_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target, self.gradient_metric_targets]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "stats",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.cosine_similarity(x, y, dim=0) if not torch.equal(x, y) else 0 for x in gradients for y in gradients]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(stats)",
                            "Call"
                        ],
                        [
                            "stats.view(gradient_dim, gradient_dim)",
                            "Call"
                        ],
                        [
                            "[x.dot(y) if not torch.equal(x, y) else 0 for x in gradients for y in gradients]",
                            "ListComp"
                        ],
                        [
                            "[torch.cosine_similarity(x - x.mean(), y - y.mean(), dim=0) if not torch.equal(x, y) else 0 for x in gradients for y in gradients]",
                            "ListComp"
                        ],
                        [
                            "stats[order_by_class, :][:, order_by_class]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sign_156": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sign(gradients)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.sign(gradients))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_158": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(gradients)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_158": {
                "input": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sign(gradients)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.sign(gradients))",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_162": {
                "x1": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_163": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_168": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cosine_similarity_173": {
                "x1": {
                    "value": "x - x.mean()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "y - y.mean()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_174": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/knowledge_distillation.py": {
        "torch": {
            "cross_entropy_254": {
                "variable": {
                    "value": "true_error_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.to(self.device, non_blocking=non_blocking)",
                            "Call"
                        ],
                        [
                            "target.to(self.device, non_blocking=non_blocking)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_284": {
                "input": {
                    "value": "torch.sum(-target * F.log_softmax(output, dim=1), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_167": {
                "variable": {
                    "value": "one_hot_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.to(self.device, non_blocking=non_blocking)",
                            "Call"
                        ],
                        [
                            "target.to(self.device, non_blocking=non_blocking)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_284": {
                "input": {
                    "value": "-target * F.log_softmax(output, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_286": {
                "input": {
                    "value": "-target * F.log_softmax(output, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_229": {
                "input": {
                    "value": "tmodel(data) / self.kd_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_284": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "input": {
                    "value": "tmodel(data) / self.kd_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_162": {
                "input": {
                    "value": "tmodel(data) / self.kd_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_286": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/legacy_imagenet_config.py": {
        "torch": {}
    },
    "src/nupic/research/frameworks/vernon/mixins/log_backprop_structure.py": {
        "torch": {
            "sum_60": {
                "input": {
                    "value": "i_nz_by_unit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer.get_inference_nonzeros()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/log_covariance.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_activations",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_54": {
                "input": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(layer_activations)",
                            "Call"
                        ],
                        [
                            "H - torch.mean(H, dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_58": {
                "n": {
                    "value": "cov.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/log_every_loss.py": {
        "torch": {
            "stack_58": {
                "variable": {
                    "value": "log",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.error_loss_history",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_65": {
                "variable": {
                    "value": "log",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.complexity_loss_history",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/maxup.py": {
        "torch": {
            "stack_123": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_125": {
                "variable": {
                    "value": "max_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(losses)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_147": {
                "input": {
                    "value": "-target * F.log_softmax(output)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_147": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(data_variant)",
                            "Call"
                        ],
                        [
                            "self.model(data_variant)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_119": {
                "variable": {
                    "value": "one_hot_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.to(self.device, non_blocking=non_blocking)",
                            "Call"
                        ],
                        [
                            "target.to(self.device, non_blocking=non_blocking)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "output.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/multi_cycle_lr.py": {
        "torch": {}
    },
    "src/nupic/research/frameworks/vernon/mixins/noise_robustness_test.py": {
        "torch": {
            "bernoulli_133": {
                "variable": {
                    "value": "noise_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(tensor) * self.noise_level",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_134": {
                "mean": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "generator": {
                    "value": "tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_133": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/profile_autograd.py": {
        "torch": {}
    },
    "src/nupic/research/frameworks/vernon/mixins/prune_low_magnitude.py": {
        "torch": {
            "ones_71": {
                "variable": {
                    "value": "off_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "module.zero_mask.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "module.zero_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/prune_low_snr.py": {
        "torch": {
            "equal_145": {
                "input": {
                    "value": "z_num_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.vdrop_central_data.z_num_weights",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.ones_like(z_num_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_145": {
                "input": {
                    "value": "z_num_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.vdrop_central_data.z_num_weights",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/regularize_loss.py": {
        "torch": {
            "stack_83": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[module.regularization() for module in self._regularized_modules]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_83": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "result[model_complexity_history]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.model_complexity_history",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/mixins/sync_batchnorm.py": {
        "torch": {}
    },
    "src/nupic/research/frameworks/vernon/mixins/torch_profiler.py": {
        "torch": {}
    },
    "src/nupic/research/frameworks/vernon/network_utils.py": {
        "torch": {
            "Parameter_43": {
                "variable": {
                    "value": "m.bn2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros_like(m.bn2.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "m.bn3.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros_like(m.bn3.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_43": {
                "input": {
                    "value": "m.bn2.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_46": {
                "input": {
                    "value": "m.bn3.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/parser_utils.py": {
        "torch": {
            "device_count_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_num_interop_threads_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/nupic/research/frameworks/vernon/run.py": {
        "torch": {}
    },
    "tests/integration/frameworks/dendrites/dendrite_integration_tests.py": {
        "torch": {
            "tensor_58": {
                "variable": {
                    "value": "regularization_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/integration/frameworks/dendrites/metacl_dendrite_metric_mixins_test.py": {
        "torch": {
            "Flatten_48": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_61": {
                "variable": {
                    "value": "dendritic_activations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_segments",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/integration/frameworks/dynamic_sparse/global_snr_pruning_test.py": {
        "torch": {
            "Flatten_46": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/htm/apical_tiebreak_test_base.py": {
        "torch": {
            "Tensor_335": {
                "variable": {
                    "value": "active_minicolumns",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_336": {
                "variable": {
                    "value": "basal_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_337": {
                "variable": {
                    "value": "apical_input",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/htm/sequence_memory_apical_tiebreak_test_base.py": {
        "torch": {
            "Tensor_453": {
                "variable": {
                    "value": "active_minicolumns",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_454": {
                "variable": {
                    "value": "apical_input",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/htm/sequence_memory_test_base.py": {
        "torch": {
            "Tensor_1010": {
                "variable": {
                    "value": "active_minicolumns",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/imagenet/imagenet_experiment_test.py": {
        "torch": {}
    },
    "tests/unit/frameworks/pytorch/dataset_utils_test.py": {
        "torch": {}
    },
    "tests/unit/frameworks/pytorch/filter_modules_test.py": {
        "torch": {}
    },
    "tests/unit/frameworks/pytorch/filter_params_test.py": {
        "torch": {}
    },
    "tests/unit/frameworks/pytorch/le_sparse_net_test.py": {
        "torch": {
            "randn_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2,) + (1, 32, 32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2,) + (1, 32, 32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2,) + (1, 32, 32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2,) + (1, 32, 32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/pytorch/lr_scheduler_test.py": {
        "torch": {
            "SGD_33": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[torch.zeros(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[torch.zeros(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[torch.zeros(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/pytorch/mask_utils_test.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "self.tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.7076, 0.8986, 0.0251, 0.4676], [0.0481, 0.6182, 0.3293, 0.3704], [0.0445, 0.5824, 0.7674, 0.8352]], [[0.3773, 0.2216, 0.4702, 0.3802], [0.2974, 0.259, 0.0205, 0.3885], [0.2964, 0.2388, 0.2593, 0.9136]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "expected_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 1, 0, 1], [0, 1, 1, 0], [0, 1, 1, 0]], [[0, 0, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "expected_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 1, 0, 0], [0, 0, 0, 0], [0, 0, 1, 1]], [[1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "expected_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0, 1, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]], [[0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_101": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5086, 0.5467, 0.2095], [0.9721, 0.254, 0.2837], [0.4696, 0.9867, 0.6543]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[True, True, False], [True, True, False], [True, False, True]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "expected_submask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[False, True, False], [True, False, False], [False, False, True]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.5184, 0.1562, 0.3428], [0.7742, 0.8507, 0.0986], [0.3525, 0.8384, 0.4315]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[True, False, True], [True, True, False], [True, False, False]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "expected_submask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[True, False, True], [False, False, False], [True, False, False]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_like_103": {
                "input": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand(5, 6, 7)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5086, 0.5467, 0.2095], [0.9721, 0.254, 0.2837], [0.4696, 0.9867, 0.6543]])",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.5184, 0.1562, 0.3428], [0.7742, 0.8507, 0.0986], [0.3525, 0.8384, 0.4315]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/unit/frameworks/pytorch/model_compare_test.py": {
        "torch": {
            "Sequential_32": {
                "*args": {
                    "value": "torch.nn.Linear(32, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "*args": {
                    "value": "torch.nn.Conv2d(1, 3, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "588",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/pytorch/model_util_test.py": {
        "torch": {
            "Sequential_37": {
                "*args": {
                    "value": "torch.nn.Linear(32, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "torch.nn.Conv2d(1, 3, 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_47": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "111",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/pytorch/regularization_test.py": {
        "torch": {
            "zeros_36": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10, 10))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[-0.4884, -0.2566, 0.3548], [0.2883, -0.5463, 0.0184], [0.2392, 0.0, 0.3523]])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((7, 7))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((3, 11))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([-0.4757, -0.4825, -0.0])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((7,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((11,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_51": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10, 10))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[-0.4884, -0.2566, 0.3548], [0.2883, -0.5463, 0.0184], [0.2392, 0.0, 0.3523]])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((7, 7))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((3, 11))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_58": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([-0.4757, -0.4825, -0.0])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((7,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((11,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_63": {
                "variable": {
                    "value": "expected_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_69": {
                "variable": {
                    "value": "expected_bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_78": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10, 10))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[-0.4884, -0.2566, 0.3548], [0.2883, -0.5463, 0.0184], [0.2392, 0.0, 0.3523]])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((7, 7))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((3, 11))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_81": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(7,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([-0.4757, -0.4825, -0.0])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((7,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((11,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_97": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 11)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10, 10))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[-0.4884, -0.2566, 0.3548], [0.2883, -0.5463, 0.0184], [0.2392, 0.0, 0.3523]])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((7, 7))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((3, 11))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_100": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(11,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([-0.4757, -0.4825, -0.0])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((7,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((11,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "allclose_71": {
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10, 10))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[-0.4884, -0.2566, 0.3548], [0.2883, -0.5463, 0.0184], [0.2392, 0.0, 0.3523]])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((7, 7))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((3, 11))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[-0.4509, -0.2191, 0.3173], [0.2508, -0.5088, -0.0191], [0.2017, 0.0, 0.3148]])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_72": {
                "input": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([-0.4757, -0.4825, -0.0])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((7,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((11,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor([-0.4382, -0.445, 0.0])",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_90": {
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10, 10))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[-0.4884, -0.2566, 0.3548], [0.2883, -0.5463, 0.0184], [0.2392, 0.0, 0.3523]])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((7, 7))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((3, 11))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight_original",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(weight)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_91": {
                "input": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([-0.4757, -0.4825, -0.0])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((7,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((11,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bias_original",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(bias)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_110": {
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10, 10))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[-0.4884, -0.2566, 0.3548], [0.2883, -0.5463, 0.0184], [0.2392, 0.0, 0.3523]])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((7, 7))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ],
                        [
                            "torch.randn((3, 11))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight_original",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(weight)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_111": {
                "input": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((10,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([-0.4757, -0.4825, -0.0])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((7,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias)",
                            "Call"
                        ],
                        [
                            "torch.randn((11,))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(bias, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "bias_original",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(bias)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(bias)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/unit/frameworks/pytorch/remove_batchnorm_test.py": {
        "torch": {
            "randn_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_samples,) + (in_channels, 32, 32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randint_67": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "nll_loss_74": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randint(0, 12, (num_samples,))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/unit/frameworks/pytorch/resnet_quantization_test.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/pytorch/resnet_serialize_test.py": {
        "torch": {
            "device_42": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/pytorch/resnets_test.py": {
        "torch": {
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_103": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_111": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_118": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_126": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_129": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_172": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_189": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_205": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_261": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_387": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_397": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_403": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/pytorch/restore_utils_test.py": {
        "torch": {
            "rand_84": {
                "variable": {
                    "value": "self.in_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_85": {
                "variable": {
                    "value": "self.in_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_221": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(8, 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "KWinners(8, percent_on=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_222": {
                "in_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_248": {
                "in_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/pytorch/sparse_mlp_test.py": {
        "torch": {
            "rand_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tests/unit/frameworks/pytorch/track_sparsity_hook_test.py": {
        "torch": {
            "rand_51": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_36": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Identity_92": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "relu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/vernon/configure_optim_per_group_test.py": {
        "torch": {}
    },
    "tests/unit/frameworks/vernon/gradient_metric_mixin_test.py": {
        "torch": {
            "Flatten_44": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/vernon/multi_cycle_lr_test.py": {
        "torch": {
            "Flatten_40": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/vernon/noise_robustness_mixin_test.py": {
        "torch": {
            "Flatten_42": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/vernon/report_max_accuracy_test.py": {
        "torch": {
            "Flatten_41": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/vernon/rezero_weights_test.py": {
        "torch": {
            "Flatten_43": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unit/frameworks/vernon/track_representation_sparsity_test.py": {
        "torch": {
            "Flatten_45": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(input_shape)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}