{
    "MATLAB/software/gae/gae/train.py": {
        "sklearn": {
            "roc_auc_score_140": {
                "variable": {
                    "value": "roc_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(len(preds)), np.zeros(len(preds))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_141": {
                "variable": {
                    "value": "ap_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(len(preds)), np.zeros(len(preds))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Session_109": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_placeholder_70": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_71": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_72": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_73": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_93": {
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_96": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Python/util_functions.py": {
        "sklearn": {
            "roc_curve_257": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "node_label(subgraph)",
                            "Call"
                        ],
                        [
                            "1 + np.minimum(dist_to_0, dist_to_1).astype(int) + d_over_2 * (d_over_2 + d_mod_2 - 1)",
                            "BinOp"
                        ],
                        [
                            "np.concatenate((np.array([1, 1]), labels))",
                            "Call"
                        ],
                        [
                            "np.hstack([np.ones(len(pos_scores)), np.zeros(len(neg_scores))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([pos_scores, neg_scores])",
                            "Call"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "auc_258": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "MATLAB/software/gae/gae/initializations.py": {
        "tensorflow": {
            "Variable_11": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([input_dim, output_dim], minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "MATLAB/software/gae/gae/layers.py": {
        "tensorflow": {
            "cast_28": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_28": {
                "x": {
                    "value": "random_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MATLAB/software/gae/gae/model.py": {
        "tensorflow": {
            "get_collection_33": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_112": {
                "x": {
                    "value": "self.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MATLAB/software/gae/gae/optimizer.py": {
        "tensorflow": {
            "AdamOptimizer_13": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_18": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(preds_sub), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(labels_sub, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_20": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_29": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_40": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(preds_sub), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(labels_sub, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_42": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_12": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=preds_sub, targets=labels_sub, pos_weight=pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_18": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(preds_sub), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_19": {
                "x": {
                    "value": "labels_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_20": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_28": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=preds_sub, targets=labels_sub, pos_weight=pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_33": {
                "input_tensor": {
                    "value": "tf.reduce_sum(1 + 2 * model.z_log_std - tf.square(model.z_mean) - tf.square(tf.exp(model.z_log_std)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(preds_sub), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_41": {
                "x": {
                    "value": "labels_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_42": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_12": {
                "logits": {
                    "value": "preds_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_equal_18": {
                "x": {
                    "value": "tf.sigmoid(preds_sub)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_28": {
                "logits": {
                    "value": "preds_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "input_tensor": {
                    "value": "1 + 2 * model.z_log_std - tf.square(model.z_mean) - tf.square(tf.exp(model.z_log_std))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_40": {
                "x": {
                    "value": "tf.sigmoid(preds_sub)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_18": {
                "x": {
                    "value": "preds_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                }
            },
            "sigmoid_40": {
                "x": {
                    "value": "preds_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                }
            },
            "square_34": {
                "x": {
                    "value": "tf.exp(model.z_log_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_33": {
                "x": {
                    "value": "model.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_34": {
                "x": {
                    "value": "model.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Python/Main.py": {
        "torch": {
            "manual_seed_56": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_63": {
                "seed": {
                    "value": "cmd_args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(predictions, 0).unsqueeze(1).numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_192": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "classifier.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'data/{}_model.pth'.format(args.data_name)",
                            "Call"
                        ],
                        [
                            "'data/{}_model.pth'.format(args.data_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_183": {
                "f": {
                    "value": "model_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'data/{}_model.pth'.format(args.data_name)",
                            "Call"
                        ],
                        [
                            "'data/{}_model.pth'.format(args.data_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}