{
    "attacks.py": {
        "torch": {
            "load_72": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.attack.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_94": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.attack.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_134": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.attack.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_155": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.attack.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_180": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.attack.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_12": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_50": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(X_cvae)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_15": {
                "*size": {
                    "value": "*norm.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "enable_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_111": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(X[:, i, :, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasets/make_cifar_c.py": {
        "torch": {}
    },
    "eval.py": {
        "torch": {
            "load_204": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "Call",
                    "possible_values": [
                        [
                            "config.resume",
                            "Attribute"
                        ],
                        [
                            "os.path.join(output_dir, 'checkpoints', 'checkpoint_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'checkpoints', 'checkpoint_latest.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, 'checkpoints', 'checkpoint_latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "oae",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_241": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_242": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_22": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_67": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_cvae",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z).detach()",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "hX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_83": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_44": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_cvae",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z).detach()",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "hX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_69": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_cvae",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z).detach()",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "hX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mse_loss_96": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_cvae",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z).detach()",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "hX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mse_loss_114": {
                "input": {
                    "value": "X_cvae",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z).detach()",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "hX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_25": {
                "*size": {
                    "value": "*norm.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_46": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_cvae",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z).detach()",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "hX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_98": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_cvae",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z).detach()",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "hX",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_116": {
                "input": {
                    "value": "X_cvae",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z).detach()",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ],
                        [
                            "cvae.decode(X, z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "hX",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "latent_distances.py": {
        "torch": {
            "cat_137": {
                "variable": {
                    "value": "norms_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "norms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_81": {
                "variable": {
                    "value": "hcomparison",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inner for outer in l for inner in outer]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "z12",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(t * z1 + (1 - t) * z2).unsqueeze(0) for t in torch.linspace(0, 1, n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "z34",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(t * z3 + (1 - t) * z4).unsqueeze(0) for t in torch.linspace(0, 1, n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "z1234",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(t * z12 + (1 - t) * z34).unsqueeze(0) for t in torch.linspace(0, 1, n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_28": {
                "f": {
                    "value": "f'experiments/{name}/checkpoints/checkpoint_latest.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "hcomparison",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[:n], hdata[:n], recon_hbatch.view(*hdata.size())[:n]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "repeat_hsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[model.sample(data)[:8].unsqueeze(1) for i in range(8)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_130": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar_prior",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_48": {
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(125, 187)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_91": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(data.size(0), 8)",
                            "Call"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_92": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(data.size(0), 8)",
                            "Call"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_93": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(data.size(0), 8)",
                            "Call"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "perturbation_learning/STNModule.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "self.localization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Flatten()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_61": {
                "variable": {
                    "value": "affine_grid_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.localization(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((x.size(0), self._in_ch, self._h, self._w))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_63": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "affine_grid_points",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.affine_grid(x, torch.Size((x.size(0), self._in_ch, self._h, self._w)))",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._h * self._w * self._in_ch",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "[1, 0, 0, 0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "perturbation_learning/cifar10_rectangle.py": {
        "torch": {
            "BatchNorm2d_9": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.kernel_size",
                            "Attribute"
                        ],
                        [
                            "config.model.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.padding",
                            "Attribute"
                        ],
                        [
                            "config.model.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.kernel_size",
                            "Attribute"
                        ],
                        [
                            "config.model.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.padding",
                            "Attribute"
                        ],
                        [
                            "config.model.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "small_ch * 32 * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "config.model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "small_ch * 32 * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "config.model.latent_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_73": {
                "variable": {
                    "value": "x_hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, hx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.latent_dim",
                            "Attribute"
                        ],
                        [
                            "config.model.latent_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32 * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "x_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_28": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_106": {
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder(x_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "input_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "big_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.big_ch",
                            "Attribute"
                        ],
                        [
                            "config.model.big_ch",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.kernel_size",
                            "Attribute"
                        ],
                        [
                            "config.model.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.padding",
                            "Attribute"
                        ],
                        [
                            "config.model.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "big_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.big_ch",
                            "Attribute"
                        ],
                        [
                            "config.model.big_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "big_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.big_ch",
                            "Attribute"
                        ],
                        [
                            "config.model.big_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "small_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.small_ch",
                            "Attribute"
                        ],
                        [
                            "config.model.small_ch",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.kernel_size",
                            "Attribute"
                        ],
                        [
                            "config.model.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.padding",
                            "Attribute"
                        ],
                        [
                            "config.model.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "small_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.small_ch",
                            "Attribute"
                        ],
                        [
                            "config.model.small_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "big_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.big_ch",
                            "Attribute"
                        ],
                        [
                            "config.model.big_ch",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.kernel_size",
                            "Attribute"
                        ],
                        [
                            "config.model.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.padding",
                            "Attribute"
                        ],
                        [
                            "config.model.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "big_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.big_ch",
                            "Attribute"
                        ],
                        [
                            "config.model.big_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_96": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "big_ch",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.big_ch",
                            "Attribute"
                        ],
                        [
                            "config.model.big_ch",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.kernel_size",
                            "Attribute"
                        ],
                        [
                            "config.model.kernel_size",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "config.model.padding",
                            "Attribute"
                        ],
                        [
                            "config.model.padding",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "perturbation_learning/cvae.py": {
        "torch": {
            "exp_101": {
                "variable": {
                    "value": "var0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_102": {
                "variable": {
                    "value": "var1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_39": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataParallel_59": {
                "variable": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.prior",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_60": {
                "variable": {
                    "value": "self.recognition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.recognition",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_61": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_108": {
                "variable": {
                    "value": "neg_ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_hx.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "hx.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_108": {
                "variable": {
                    "value": "neg_ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_like_41": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_110": {
                "variable": {
                    "value": "neg_ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_hx.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "hx.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "neg_ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "perturbation_learning/datasets.py": {
        "torch": {
            "get_rng_state_75": {
                "variable": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.eval.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(config.dataset.data_path, train=False, transform=t)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.eval.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_181": {
                "variable": {
                    "value": "perturbation_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "datasets/mnist_rts20.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_182": {
                "variable": {
                    "value": "(train_X, train_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "datasets/mnist_tensors.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_183": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(train_X, (7, 7, 7, 7), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_data.data)",
                            "Call"
                        ],
                        [
                            "train_X.permute(0, 3, 1, 2).float() / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(7, 7, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_rng_state_192": {
                "variable": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_198": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_200": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.eval.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(config.dataset.data_path, train=False, transform=t)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.eval.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_rng_state_231": {
                "variable": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_236": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_242": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.eval.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_255": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(config.dataset.data_path, train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.eval.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_289": {
                "variable": {
                    "value": "train_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_data.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_290": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_312": {
                "variable": {
                    "value": "test_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_data.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_313": {
                "variable": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_rng_state_325": {
                "variable": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_330": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_337": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.eval.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_344": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DatasetType(test_X, test_y, test_perturb_data, k=config.dataset.k)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.eval.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_565": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "D(config.dataset.data_path, subset='train', transform=t, joint_transform=jt_train, split=config.dataset.split, mip=config.dataset.mip)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.training.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_570": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "D(config.dataset.data_path, subset='val', transform=t, joint_transform=jt_test, split=config.dataset.split, mip=config.dataset.mip)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.eval.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_575": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "D(config.dataset.data_path, subset='test', transform=t, joint_transform=jt_test, split=config.dataset.split, mip=config.dataset.mip)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.eval.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_rng_state_78": {
                "new_state": {
                    "value": "seed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ],
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ],
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ],
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_104": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorDataset_151": {
                "variable": {
                    "value": "self.Xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_193": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_rng_state_195": {
                "new_state": {
                    "value": "seed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ],
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ],
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ],
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_232": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_rng_state_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "[torch.from_numpy(td).unsqueeze(-1) for td in perturbation_data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_326": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_rng_state_328": {
                "new_state": {
                    "value": "seed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ],
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ],
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ],
                        [
                            "torch.get_rng_state()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_489": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.transform(s).unsqueeze(0) for s in sample]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "permute_61": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randperm_113": {
                "n": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_122": {
                "n": {
                    "value": "self.k + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_274": {
                "ndarray": {
                    "value": "td",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_274": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "perturbation_learning/mi_unet.py": {
        "torch": {
            "ModuleList_59": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.AdaptiveAvgPool2d(p) for p in pool]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(ch, reduce_ch, kernel_size=1) for ch in chs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(reduce_ch * h * w, ld) for ((h, w), ld) in zip(pool, ldims)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(reduce_ch * h * w, ld) for ((h, w), ld) in zip(pool, ldims)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "x_hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, hx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_133": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(ld, h * w) for (ld, (h, w)) in zip(ldims, pool)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "xz1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, z1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "xz2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "xz3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x3, z3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "xz4",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x4, z4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "xz5",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x5, z5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_168": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.outc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_78": {
                "input": {
                    "value": "conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "logvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_154": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_59": {
                "output_size": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduce_ch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "reduce_ch * h * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ld",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "reduce_ch * h * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ld",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "ld",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "perturbation_learning/mnist_conv.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_ch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_11": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv31",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "x_hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, hx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.downsample3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.downsample4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_41": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "x_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.downsample3(x), z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "x_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.downsample4(x), self.upsample(x_z)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "x_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "x_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, self.upsample(x_z)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "input": {
                    "value": "self.conv5(x_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_17": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_18": {
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "perturbation_learning/mnist_fc.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_17": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "x_hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, hx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "x_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.view(-1, 784), z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "input": {
                    "value": "self.fc4(x_z)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "perturbation_learning/mnist_stn.py": {
        "torch": {
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nch",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_11": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc31",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * w * input_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * w * input_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "x_hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, hx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "42 * 42",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.stns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SpatialTransformer(1, (42, 42)) for _ in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_53": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "x_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[stn(x, z) for stn in self.stns]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_60": {
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv(self.pad(self.block(x_z)))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_15": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_16": {
                "input": {
                    "value": "self.bn2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "perturbation_learning/perturbations.py": {
        "torch": {
            "zeros_like_5": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_6": {
                "input": {
                    "value": "x + d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "config.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "config.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_16": {
                "tensors": {
                    "value": "[t(x[i]) for i in range(x.size(0))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_16": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_27": {
                "tensors": {
                    "value": "[t(x[i]) for i in range(x.size(0))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_27": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "perturbation_learning/scaled_tanh.py": {
        "torch": {}
    },
    "perturbation_learning/unet_parts.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.maxpool_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_64": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, [diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_51": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_54": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "robust_eval.py": {
        "torch": {
            "SGD_159": {
                "variable": {
                    "value": "dummy_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "Call",
                    "possible_values": [
                        [
                            "config.resume",
                            "Attribute"
                        ],
                        [
                            "os.path.join(output_dir, '../checkpoints', 'checkpoint_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, '../checkpoints', 'checkpoint_latest.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, '../checkpoints', 'checkpoint_latest.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_198": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "classifiers.models[config.model.type](config)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_229": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_230": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_170": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "robust_train.py": {
        "torch": {
            "save_47": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'epoch': epoch, 'test_loss': test_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_55": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "tar",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_168": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_181": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "classifiers.models[config.model.type](config)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_229": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_230": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.training.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_90": {
                "variable": {
                    "value": "overall_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "criterion(output, target)",
                            "Call"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_90": {
                "variable": {
                    "value": "overall_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "hcomparison",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[:n], hdata[:n], data[n:2 * n], hdata[n:2 * n]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_175": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'checkpoints', 'checkpoint_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_35": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.training.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.training.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target[:n], output.max(1)[1][:n], robust_output.max(1)[1][:n]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ToTensor()(cmap[s]).unsqueeze(0) for s in seg]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "robustness/classifiers.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, 4, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "CIFAR10Normalize()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "64 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "robustness/preactresnet.py": {
        "torch": {
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_93": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_117": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_34": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_61": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "input": {
                    "value": "self.bn3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "robustness/smoothing_core.py": {
        "torch": {
            "Normal_60": {
                "variable": {
                    "value": "std_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*NA.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_149": {
                "input": {
                    "value": "count",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_65": {},
            "randn_118": {
                "*size": {
                    "value": "this_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(batch_size, num)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "latent_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prior_params[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "robustness/unet_model.py": {
        "torch": {}
    },
    "robustness/unet_parts.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.maxpool_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_64": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, [diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_51": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_54": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "robustness/wideresnet.py": {
        "torch": {
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_81": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_29": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_31": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_41": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_21": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.training.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_32": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'epoch': epoch, 'val_loss': val_loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.training.optimizer",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_137": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_197": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_198": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_24": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.training.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.training.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "hcomparison",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[:n], hdata[:n], recon_hbatch.view(*hdata.size())[:n]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "repeat_hsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[model.sample(data)[:8].unsqueeze(1) for i in range(8)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_144": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'checkpoints', 'checkpoint_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_122": {
                "f": {
                    "value": "config.model.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utilities.py": {
        "torch": {
            "from_numpy_11": {
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "truncnorm.rvs(-r, r, size=numel)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}