{
    "util.py": {
        "sklearn": {
            "VarianceThreshold_170": {
                "variable": {
                    "value": "sel",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "variance_threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "embed_model.py": {
        "tensorflow": {
            "dense_29": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(last_hidden, size, activation=hidden_activation, name='{}_hidden_{}'.format(name, index), reuse=tf.AUTO_REUSE)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "target_dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_397": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_24": {
                "variable": {
                    "value": "last_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(last_hidden, size, activation=hidden_activation, name='{}_hidden_{}'.format(name, index), reuse=tf.AUTO_REUSE)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_hidden_{}'.format(name, index)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_403": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.input_embeddingG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(BATCH_SIZE, self.args.NODE_COUNT, self.args.EMBEDDING_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_embeddingG",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.connectionG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(BATCH_SIZE, self.args.NODE_COUNT, self.args.NODE_COUNT)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "connectionG",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.input_embeddingA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(BATCH_SIZE, self.args.NODE_COUNT, self.args.EMBEDDING_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_embeddingA",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.connectionA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(BATCH_SIZE, self.args.NODE_COUNT, self.args.NODE_COUNT)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "connectionA",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(BATCH_SIZE,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "self.prediction_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.prediction_logit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.prediction_logit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_67": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.prediction_logit",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embeddingG, embeddingA]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_84": {
                "values": {
                    "value": "embedding_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "update_neighbours",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "connection",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "update_child",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basic_MLP(current_embedding, prefix + 'update_child_{}'.format(i), self.args.EMBEDDING_SIZE, self.args.HIDDEN_LAYERS, self.args.HIDDEN_ACTIVATION, self.args.END_ACTIVATION, residual=self.args.RESIDUAL)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_104": {
                "variable": {
                    "value": "update_parent",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "connection",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "update_parent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basic_MLP(current_embedding, prefix + 'update_parent_{}'.format(i), self.args.EMBEDDING_SIZE, self.args.HIDDEN_LAYERS, self.args.HIDDEN_ACTIVATION, self.args.END_ACTIVATION, residual=self.args.RESIDUAL)",
                            "Call"
                        ],
                        [
                            "tf.matmul(connection, update_parent, transpose_a=True)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_106": {
                "variable": {
                    "value": "update_all",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[update_self, update_neighbours, update_parent]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_117": {
                "variable": {
                    "value": "current_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "current_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basic_MLP(input_embedding, prefix + 'initial_embedding', self.args.EMBEDDING_SIZE, self.args.HIDDEN_LAYERS, self.args.HIDDEN_ACTIVATION, self.args.END_ACTIVATION, residual=self.args.RESIDUAL)",
                            "Call"
                        ],
                        [
                            "basic_MLP(update_all, prefix + 'updated_embedding_{}'.format(i), self.args.EMBEDDING_SIZE, self.args.HIDDEN_LAYERS, self.args.HIDDEN_ACTIVATION, self.args.END_ACTIVATION, residual=False)",
                            "Call"
                        ],
                        [
                            "tf.gather(current_embedding, [0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(mask, current_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(current_embedding, axis=1, keepdims=False)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_119": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(connection + tf.transpose(connection, perm=[0, 2, 1]), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "variable": {
                    "value": "current_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_sum(connection + tf.transpose(connection, perm=[0, 2, 1]), axis=1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "current_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basic_MLP(input_embedding, prefix + 'initial_embedding', self.args.EMBEDDING_SIZE, self.args.HIDDEN_LAYERS, self.args.HIDDEN_ACTIVATION, self.args.END_ACTIVATION, residual=self.args.RESIDUAL)",
                            "Call"
                        ],
                        [
                            "basic_MLP(update_all, prefix + 'updated_embedding_{}'.format(i), self.args.EMBEDDING_SIZE, self.args.HIDDEN_LAYERS, self.args.HIDDEN_ACTIVATION, self.args.END_ACTIVATION, residual=False)",
                            "Call"
                        ],
                        [
                            "tf.gather(current_embedding, [0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(mask, current_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(current_embedding, axis=1, keepdims=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_121": {
                "variable": {
                    "value": "current_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "current_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "basic_MLP(input_embedding, prefix + 'initial_embedding', self.args.EMBEDDING_SIZE, self.args.HIDDEN_LAYERS, self.args.HIDDEN_ACTIVATION, self.args.END_ACTIVATION, residual=self.args.RESIDUAL)",
                            "Call"
                        ],
                        [
                            "basic_MLP(update_all, prefix + 'updated_embedding_{}'.format(i), self.args.EMBEDDING_SIZE, self.args.HIDDEN_LAYERS, self.args.HIDDEN_ACTIVATION, self.args.END_ACTIVATION, residual=False)",
                            "Call"
                        ],
                        [
                            "tf.gather(current_embedding, [0], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(mask, current_embedding)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(current_embedding, axis=1, keepdims=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_399": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "predictor",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_402": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_119": {
                "input_tensor": {
                    "value": "connection + tf.transpose(connection, perm=[0, 2, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_119": {
                "a": {
                    "value": "connection",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "embed_policy.py": {
        "tensorflow": {
            "flatten_137": {
                "variable": {
                    "value": "pi_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.concat(pis, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_128": {
                "variable": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embeddingG, embeddingA]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "embA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embAs[:, i]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_134": {
                "variable": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "flag > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([embeddingG, embeddingA], axis=1)",
                            "Call"
                        ],
                        [
                            "activ(linear(pi_h, 'pi_fc' + str(j), n_hidden=layer_size, init_scale=np.sqrt(2)))",
                            "Call"
                        ],
                        [
                            "linear(pi_h, 'pi_fc_last', n_hidden=1, init_scale=0.01)",
                            "Call"
                        ],
                        [
                            "tf.where(flag > 0, pi_h, pi_h * 0 - 10000000.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pi_h * 0 - 10000000.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_137": {
                "values": {
                    "value": "pis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.compat.v1.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "embed_test.py": {
        "tensorflow": {
            "ConfigProto_33": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_35": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_44": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "ppo.py": {
        "tensorflow": {
            "Graph_102": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_198": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "variable": {
                    "value": "lrmult",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lrmult",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_134": {
                "variable": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kloldnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_pi.proba_distribution.kl(self.policy_pi.proba_distribution)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_135": {
                "variable": {
                    "value": "meanent",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_pi.proba_distribution.entropy()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_140": {
                "variable": {
                    "value": "meanklmcts",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "klmcts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_pi.proba_distribution.kl(self.policy_pi.mcts_distribution)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_144": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.policy_pi.proba_distribution.logp(action_ph) - old_pi.proba_distribution.logp(action_ph)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_153": {
                "variable": {
                    "value": "vf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.policy_pi.value_flat - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "oldpi",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_158": {
                "name": {
                    "value": "entropy_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pol_entpen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-self.entcoeff * meanent",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_159": {
                "name": {
                    "value": "mcts_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pol_mctspen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 * self.entcoeff * meanklmcts",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_160": {
                "name": {
                    "value": "policy_gradient_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pol_surr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_mean(tf.minimum(surr1, surr2))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "scalar_161": {
                "name": {
                    "value": "value_function_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "vf_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(self.policy_pi.value_flat - ret))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_162": {
                "name": {
                    "value": "approximate_kullback-leibler",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "meankl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(kloldnew)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_163": {
                "name": {
                    "value": "mcts_approximate_kullback-leibler",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "meanklmcts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(klmcts)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_164": {
                "name": {
                    "value": "clip_factor",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "clip_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clip_param * lrmult",
                            "BinOp"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_165": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pol_surr + pol_entpen + vf_loss + pol_mctspen",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "Adam_mpi",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "input_info",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_177": {
                "name": {
                    "value": "discounted_rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_178": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.optim_stepsize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_179": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(atarg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_180": {
                "name": {
                    "value": "clip_range",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.clip_param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_149": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.policy_pi.proba_distribution.logp(action_ph) - old_pi.proba_distribution.logp(action_ph))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - clip_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + clip_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_152": {
                "input_tensor": {
                    "value": "tf.minimum(surr1, surr2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_153": {
                "x": {
                    "value": "self.policy_pi.value_flat - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_177": {
                "input_tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_178": {
                "input_tensor": {
                    "value": "self.optim_stepsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_179": {
                "input_tensor": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None])",
                            "Call"
                        ],
                        [
                            "(atarg - atarg.mean()) / atarg.std()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_180": {
                "input_tensor": {
                    "value": "self.clip_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_183": {
                "name": {
                    "value": "discounted_rewards",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None])",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_184": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.optim_stepsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_185": {
                "name": {
                    "value": "advantage",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[None])",
                            "Call"
                        ],
                        [
                            "(atarg - atarg.mean()) / atarg.std()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "histogram_186": {
                "name": {
                    "value": "clip_range",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.clip_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_152": {
                "x": {
                    "value": "surr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio * atarg",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "surr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(ratio, 1.0 - clip_param, 1.0 + clip_param) * atarg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "image_188": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_pi.obs_ph",
                            "Attribute"
                        ]
                    ]
                }
            },
            "histogram_190": {
                "name": {
                    "value": "observation",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "obs_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.policy_pi.obs_ph",
                            "Attribute"
                        ]
                    ]
                }
            },
            "assign_170": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RunOptions_294": {
                "variable": {
                    "value": "run_options",
                    "type": "variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_295": {
                "variable": {
                    "value": "run_metadata",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ppo_model.py": {
        "tensorflow": {
            "flatten_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(x, filters=latent_dim, kernel_size=1, strides=1, padding='valid', data_format='channels_last', name='toLatent')",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_97": {
                "variable": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.concat(pis, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_98": {
                "variable": {
                    "value": "vf_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.concat(vfs, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_119": {
                "variable": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.concat(pis, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_120": {
                "variable": {
                    "value": "vf_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.concat(vfs, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_142": {
                "variable": {
                    "value": "vf_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.concat(vfs, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_174": {
                "variable": {
                    "value": "vf_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.gather(x, state_indices, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_202": {
                "variable": {
                    "value": "pi_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.concat(pis, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_152": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(x, filters=latent_dim, kernel_size=1, strides=1, padding='valid', data_format='channels_last', name='toLatent')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "action_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(self.args.n_action_slots))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_153": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(x, action_indices, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(actions, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_154": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(x, filters=latent_dim, kernel_size=1, strides=1, padding='valid', data_format='channels_last', name='toLatent')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "state_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x + self.args.n_action_slots for x in range(self.args.state_dim)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_155": {
                "variable": {
                    "value": "vf_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.concat([actions, state], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(x, filters=latent_dim, kernel_size=1, strides=1, padding='valid', data_format='channels_last', name='toLatent')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "toLatent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_97": {
                "values": {
                    "value": "pis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_98": {
                "values": {
                    "value": "vfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_119": {
                "values": {
                    "value": "pis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_120": {
                "values": {
                    "value": "vfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_136": {
                "variable": {
                    "value": "x_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.gather(x, ind, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_142": {
                "values": {
                    "value": "vfs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "actor_critic",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.compat.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_174": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(x, filters=latent_dim, kernel_size=1, strides=1, padding='valid', data_format='channels_last', name='toLatent')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "state_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x + self.args.n_action_slots for x in range(self.args.state_dim)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_191": {
                "variable": {
                    "value": "x_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(x, filters=latent_dim, kernel_size=1, strides=1, padding='valid', data_format='channels_last', name='toLatent')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i]",
                            "List"
                        ],
                        [
                            "np.array(ind, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "[i]",
                            "List"
                        ],
                        [
                            "np.array(ind, dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_192": {
                "variable": {
                    "value": "x_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, i, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, i, :]",
                            "Subscript"
                        ],
                        [
                            "tf.layers.flatten(tf.gather(x, ind, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.gather(x, ind, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(x_prime)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_198": {
                "variable": {
                    "value": "flag",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_199": {
                "variable": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "flag > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(tf.concat(pis, axis=1))",
                            "Call"
                        ],
                        [
                            "x_prime",
                            "variable"
                        ],
                        [
                            "activ(linear(pi_h, 'pi_fc' + str(i), n_hidden=layer_size, init_scale=np.sqrt(2)))",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(tf.concat(pis, axis=1))",
                            "Call"
                        ],
                        [
                            "x_prime",
                            "variable"
                        ],
                        [
                            "activ(linear(pi_h, 'pi_fc' + str(j), n_hidden=layer_size, init_scale=np.sqrt(2)))",
                            "Call"
                        ],
                        [
                            "x_prime",
                            "variable"
                        ],
                        [
                            "activ(linear(pi_h, 'pi_fc' + str(j), n_hidden=layer_size, init_scale=np.sqrt(2)))",
                            "Call"
                        ],
                        [
                            "linear(pi_h, 'pi_fc_last', n_hidden=1, init_scale=np.sqrt(2))",
                            "Call"
                        ],
                        [
                            "tf.where(flag > 0, pi_h, pi_h * 0 - 10000000.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pi_h * 0 - 10000000.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_202": {
                "values": {
                    "value": "pis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_33": {
                "x": {
                    "value": "1 - mcts_probs + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.compat.v1.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "actor_critic",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.compat.v1.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "actor_critic",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.compat.v1.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "actor_critic",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.compat.v1.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_155": {
                "values": {
                    "value": "[actions, state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "actor_critic",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.compat.v1.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_136": {
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(x, filters=latent_dim, kernel_size=1, strides=1, padding='valid', data_format='channels_last', name='toLatent')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i]",
                            "List"
                        ],
                        [
                            "np.array(ind, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "[i]",
                            "List"
                        ],
                        [
                            "np.array(ind, dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}