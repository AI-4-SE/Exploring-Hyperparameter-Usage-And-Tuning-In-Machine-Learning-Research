{
    "model_emotion/train_emotion.py": {
        "torch": {
            "DataLoader_110": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "not args.distributed",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(valid_dataset) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.valid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(test_dataset) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.valid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_150": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_170": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_checkpoint)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset[input_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_106": {
                "*tensors": {
                    "value": "*tensor_datasets['test']",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DistributedSampler_107": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_108": {
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_109": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_149": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_251": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tb_logger.writer.logdir + '/model_training_args.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__187": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__190": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_229": {
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_baseline.py": {
        "torch": {
            "DataLoader_109": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "not args.distributed",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(valid_dataset) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.valid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(test_dataset) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.valid_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_149": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_169": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_checkpoint)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset[input_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TensorDataset_105": {
                "*tensors": {
                    "value": "*tensor_datasets['test']",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DistributedSampler_106": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_107": {
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_108": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_148": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_250": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tb_logger.writer.logdir + '/model_training_args.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__186": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__189": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_228": {
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "load_36": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dataset_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_cache + '_' + type(tokenizer).__name__",
                            "BinOp"
                        ],
                        [
                            "dataset_cache + '_' + type(tokenizer).__name__",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_62": {
                "variable": {
                    "value": "personachat",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dataset_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_cache + '_' + type(tokenizer).__name__",
                            "BinOp"
                        ],
                        [
                            "dataset_cache + '_' + type(tokenizer).__name__",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_77": {
                "obj": {
                    "value": "personachat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(dataset_cache)",
                            "Call"
                        ],
                        [
                            "json.loads(f.read())",
                            "Call"
                        ],
                        [
                            "tokenize(personachat)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dataset_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_cache + '_' + type(tokenizer).__name__",
                            "BinOp"
                        ],
                        [
                            "dataset_cache + '_' + type(tokenizer).__name__",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_53": {
                "obj": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(dataset_cache)",
                            "Call"
                        ],
                        [
                            "json.loads(f.read())",
                            "Call"
                        ],
                        [
                            "tokenize(dataset)",
                            "Call"
                        ],
                        [
                            "personachat.values()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dataset_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_cache + '_' + type(tokenizer).__name__",
                            "BinOp"
                        ],
                        [
                            "dataset_cache + '_' + type(tokenizer).__name__",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}