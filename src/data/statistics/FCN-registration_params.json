{
    "FCN_registration_2D/models/WarpST.py": {
        "tensorflow": {
            "transpose_20": {
                "variable": {
                    "value": "rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_22": {
                "variable": {
                    "value": "rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_23": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_35": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * height_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_36": {
                "variable": {
                    "value": "height_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(U)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_37": {
                "variable": {
                    "value": "width_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(U)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_41": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_42": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_49": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_54": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_55": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_56": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_57": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_71": {
                "variable": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_72": {
                "variable": {
                    "value": "Ia",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_73": {
                "variable": {
                    "value": "Ib",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_74": {
                "variable": {
                    "value": "Ic",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_75": {
                "variable": {
                    "value": "Id",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_78": {
                "variable": {
                    "value": "x0_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_79": {
                "variable": {
                    "value": "x1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "y0_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_81": {
                "variable": {
                    "value": "y1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_82": {
                "variable": {
                    "value": "wa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_83": {
                "variable": {
                    "value": "wb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "variable": {
                    "value": "wc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_85": {
                "variable": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_86": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * Ia, wb * Ib, wc * Ic, wd * Id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_104": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t_flat, y_t_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_115": {
                "variable": {
                    "value": "height_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(U)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_116": {
                "variable": {
                    "value": "width_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(U)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 2, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_121": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 2, -1]))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.stack([num_batch])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 2, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, 2, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_126": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "V",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bicubic_interp_2d(V, out_size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, [num_batch, 2, -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bicubic_interp_2d(V, out_size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, [num_batch, 2, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_batch, 2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_128": {
                "variable": {
                    "value": "T_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "V",
                    "type": "Call",
                    "possible_values": [
                        [
                            "bicubic_interp_2d(V, out_size)",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, [num_batch, 2, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat([x_t_flat, y_t_flat], 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([num_batch]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([num_batch, 2, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_130": {
                "variable": {
                    "value": "x_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "T_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(V, grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_131": {
                "variable": {
                    "value": "y_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "T_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(V, grid)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "x_s_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(T_g, [0, 0, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "y_s_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(T_g, [0, 1, 0], [-1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_transformed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_interpolate(U, x_s_flat, y_s_flat, out_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([num_batch, out_height, out_width, num_channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'DeformableTransformer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "_repeat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "_interpolate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "_meshgrid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "_transform",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_21": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_23": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_29": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_30": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_32": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "floor_49": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_51": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * height_f / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_70": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_96": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_97": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_98": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_99": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_109": {
                "input": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_110": {
                "input": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_112": {
                "input": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_121": {
                "values": {
                    "value": "[num_batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_122": {
                "values": {
                    "value": "[num_batch, 2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_136": {
                "values": {
                    "value": "[num_batch, out_height, out_width, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_21": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_97": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_98": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(U)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_41": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_42": {
                "input": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_96": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_97": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(U)[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_99": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_21": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_2D/models/bicubic_interpolation.py": {
        "tensorflow": {
            "gather_nd_96": {
                "variable": {
                    "value": "p_00",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_00",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, -1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_97": {
                "variable": {
                    "value": "p_10",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_10",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, +0, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_98": {
                "variable": {
                    "value": "p_20",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_20",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, +1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_99": {
                "variable": {
                    "value": "p_30",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_30",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, +2, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_101": {
                "variable": {
                    "value": "p_01",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_01",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, -1, +0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_102": {
                "variable": {
                    "value": "p_11",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_11",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, +0, +0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_103": {
                "variable": {
                    "value": "p_21",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_21",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, +1, +0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_104": {
                "variable": {
                    "value": "p_31",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_31",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, +2, +0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_106": {
                "variable": {
                    "value": "p_02",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_02",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, -1, +1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_107": {
                "variable": {
                    "value": "p_12",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_12",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, +0, +1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_108": {
                "variable": {
                    "value": "p_22",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_22",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, +1, +1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_109": {
                "variable": {
                    "value": "p_32",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_32",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, +2, +1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_111": {
                "variable": {
                    "value": "p_03",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_03",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, -1, +2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_112": {
                "variable": {
                    "value": "p_13",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_13",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, +0, +2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_113": {
                "variable": {
                    "value": "p_23",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_23",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, +1, +2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_114": {
                "variable": {
                    "value": "p_33",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i_33",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_index_tensor(grid, +2, +2)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_57": {
                "value": {
                    "value": "new_grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(grid)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_2D/models/fcn.py": {
        "tensorflow": {
            "placeholder_48": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_batch_size, _img_height, _img_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_batch_size, _img_height, _img_width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_50": {
                "variable": {
                    "value": "xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.x, self.y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool_16": {
                "variable": {
                    "value": "x_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(x, 'Conv1', 32, 3, 2, 'SAME', True, tf.nn.relu, self._is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pooling1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool_18": {
                "variable": {
                    "value": "x_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(x_2, 'Conv2', 64, 3, 2, 'SAME', True, tf.nn.relu, self._is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pooling2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_29": {
                "variable": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_30": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_74": {
                "variable": {
                    "value": "_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_2D/models/test.py": {
        "tensorflow": {
            "placeholder_18": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, 128, 128, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_21": {
                "variable": {
                    "value": "x_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(x, 'Conv1', 32, 3, 2, 'SAME', True, tf.nn.relu, self._is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pooling1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool_23": {
                "variable": {
                    "value": "x_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv2d(x_2, 'Conv2', 64, 3, 2, 'SAME', True, tf.nn.relu, self._is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pooling2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_2D/models/utils.py": {
        "tensorflow": {
            "reduce_mean_56": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, w, [1, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape, [1, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, [1, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "variable": {
                    "value": "mean_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "variable": {
                    "value": "mean_x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "variable": {
                    "value": "mean_y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "variable": {
                    "value": "stddev_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(mean_x2 - tf.square(mean_x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_61": {
                "variable": {
                    "value": "stddev_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(mean_y2 - tf.square(mean_y))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_7": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, x.get_shape()[-1], dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_9": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, w, [1, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape, [1, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, [1, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, dim, x.get_shape()[-1]], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, dim, x.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, w, [1, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape, [1, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, [1, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, dim, x.get_shape()[-1]], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_39": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, x.get_shape()[-1], dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, w, [1, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape, [1, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, [1, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, dim, x.get_shape()[-1]], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "input_tensor": {
                    "value": "(x - mean_x) * (y - mean_y) / (stddev_x * stddev_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "input_tensor": {
                    "value": "tf.square(x - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_58": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, w, [1, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape, [1, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, [1, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_59": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_60": {
                "x": {
                    "value": "mean_x2 - tf.square(mean_x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_61": {
                "x": {
                    "value": "mean_y2 - tf.square(mean_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_66": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_8": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_24": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_40": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_60": {
                "x": {
                    "value": "mean_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, [1, 2, 3], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_61": {
                "x": {
                    "value": "mean_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(y, [1, 2, 3], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_13": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_30": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_2D/trainNet/gen_batches.py": {
        "tensorflow": {
            "slice_input_producer_27": {
                "variable": {
                    "value": "input_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[x_arr, y_arr]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config['shuffle_batch']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_28": {
                "variable": {
                    "value": "(batch_x, batch_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_queue",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.slice_input_producer([x_arr, y_arr], shuffle=config['shuffle_batch'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "py_func_39": {
                "variable": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[batch_x, config['batch_size'], *config['image_size'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_40": {
                "variable": {
                    "value": "batch_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[batch_y, config['batch_size'], *config['image_size'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_2D/trainNet/train.py": {
        "tensorflow": {
            "Session_48": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_51": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_52": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_3D/models/bicubic_interpolation_3d.py": {
        "tensorflow": {
            "reshape_23": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, h, w, d * c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bicubic_24": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, H * W, d, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bicubic_26": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H * W, D]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "tensor": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, H, W, D, c]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_3D/models/fcn.py": {
        "tensorflow": {
            "placeholder_56": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_batch_size, _img_height, _img_width, _img_depth, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_batch_size, _img_height, _img_width, _img_depth, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_58": {
                "variable": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.x, self.y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_65": {
                "variable": {
                    "value": "self._v1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.fcn_out[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "variable": {
                    "value": "self._v2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.fcn_out[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "self._v3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.fcn_out[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool3d_24": {
                "variable": {
                    "value": "x_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv3d(x, 'Conv1', 32, 3, 2, 'SAME', True, tf.nn.relu, self._is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pooling1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool3d_26": {
                "variable": {
                    "value": "x_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv3d(x_2, 'Conv2', 64, 3, 2, 'SAME', True, tf.nn.relu, self._is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pooling2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_37": {
                "variable": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_38": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_88": {
                "variable": {
                    "value": "_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "a": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_3D/models/spatial_transformer_3d.py": {
        "tensorflow": {
            "expand_dims_38": {
                "variable": {
                    "value": "x_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(x_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_39": {
                "variable": {
                    "value": "y_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(y_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(y_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_40": {
                "variable": {
                    "value": "z_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(z_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_42": {
                "variable": {
                    "value": "x_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(x_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_43": {
                "variable": {
                    "value": "y_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(y_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(y_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_44": {
                "variable": {
                    "value": "z_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(z_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_52": {
                "variable": {
                    "value": "rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_54": {
                "variable": {
                    "value": "rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_59": {
                "variable": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(0.0, tf.cast(width, tf.float32) - 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(0.0, tf.cast(height, tf.float32) - 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_67": {
                "variable": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x_t, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_68": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(y_t, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_70": {
                "variable": {
                    "value": "z_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(depth, tf.float32) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "depth",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[3]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_71": {
                "input": {
                    "value": "z_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, tf.cast(depth, tf.float32) - 1.0, depth)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z_t, 0), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_t, [height, width, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_72": {
                "variable": {
                    "value": "z_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, tf.cast(depth, tf.float32) - 1.0, depth)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z_t, 0), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_t, [height, width, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[height, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_77": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(z, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_97": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_98": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_99": {
                "variable": {
                    "value": "max_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "depth - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_101": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_103": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_105": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_108": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, 0, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(width - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_109": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, 0, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(width - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_110": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, 0, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(height - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_111": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, 0, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(height - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_112": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(z), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z0, 0, max_z)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(depth - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_113": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(z1, 0, max_z)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(depth - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_135": {
                "variable": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_137": {
                "variable": {
                    "value": "Ia",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x0 * dim3 + z0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_138": {
                "variable": {
                    "value": "Ib",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x0 * dim3 + z0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_139": {
                "variable": {
                    "value": "Ic",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x1 * dim3 + z0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_140": {
                "variable": {
                    "value": "Id",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x1 * dim3 + z0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_141": {
                "variable": {
                    "value": "Ie",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x0 * dim3 + z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_142": {
                "variable": {
                    "value": "If",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x0 * dim3 + z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_143": {
                "variable": {
                    "value": "Ig",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x1 * dim3 + z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_144": {
                "variable": {
                    "value": "Ih",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x1 * dim3 + z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_147": {
                "variable": {
                    "value": "x1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, 0, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_148": {
                "variable": {
                    "value": "y1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, 0, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_149": {
                "variable": {
                    "value": "z1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(z1, 0, max_z)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_155": {
                "variable": {
                    "value": "wa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz * dx * dy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_156": {
                "variable": {
                    "value": "wb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz * dx * (1 - dy)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_157": {
                "variable": {
                    "value": "wc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz * (1 - dx) * dy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_158": {
                "variable": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz * (1 - dx) * (1 - dy)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_159": {
                "variable": {
                    "value": "we",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dz) * dx * dy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_160": {
                "variable": {
                    "value": "wf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dz) * dx * (1 - dy)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_161": {
                "variable": {
                    "value": "wg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dz) * (1 - dx) * dy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_162": {
                "variable": {
                    "value": "wh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dz) * (1 - dx) * (1 - dy)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_164": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * Ia, wb * Ib, wc * Ic, wd * Id, we * Ie, wf * If, wg * Ig, wh * Ih]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add_n([wa * Ia, wb * Ib, wc * Ic, wd * Id, we * Ie, wf * If, wg * Ig, wh * Ih])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, tf.stack([-1, out_height, out_width, out_depth, channels]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, out_height, out_width, out_depth, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_vec[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "x1_f - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_32": {
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_vec[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "x1_f - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_33": {
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_vec[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "x1_f - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_34": {
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_vec[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "x1_f - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_53": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_60": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(0.0, tf.cast(width, tf.float32) - 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "input": {
                    "value": "tf.linspace(0.0, tf.cast(height, tf.float32) - 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_65": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "input": {
                    "value": "x_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(0.0, tf.cast(width, tf.float32) - 1.0, width), 1), [1, 0]))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(x_t, 2), [1, 1, depth])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "input": {
                    "value": "y_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(0.0, tf.cast(height, tf.float32) - 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(y_t, 2), [1, 1, depth])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_80": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_81": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_82": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_83": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_85": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_86": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_87": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_93": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_95": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(z, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "floor_101": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_103": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_105": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(z, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_134": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_166": {
                "values": {
                    "value": "[-1, out_height, out_width, out_depth, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_53": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "input": {
                    "value": "tf.linspace(0.0, tf.cast(width, tf.float32) - 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_64": {
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(height, tf.float32) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_70": {
                "x": {
                    "value": "depth",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[3]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[3]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_60": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_61": {
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(width, tf.float32) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_65": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_53": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_64": {
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_61": {
                "x": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_3D/models/test.py": {
        "tensorflow": {
            "placeholder_21": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 64, 64, 64, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool3d_24": {
                "variable": {
                    "value": "x_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv3d(x, 'Conv1', 32, 3, 2, 'SAME', True, tf.nn.relu, self._is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pooling1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool3d_26": {
                "variable": {
                    "value": "x_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv3d(x_2, 'Conv2', 64, 3, 2, 'SAME', True, tf.nn.relu, self._is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pooling2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_3D/models/utils.py": {
        "tensorflow": {
            "reduce_mean_60": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "variable": {
                    "value": "mean_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "variable": {
                    "value": "mean_x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "variable": {
                    "value": "mean_y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_64": {
                "variable": {
                    "value": "stddev_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(mean_x2 - tf.square(mean_x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "variable": {
                    "value": "stddev_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(mean_y2 - tf.square(mean_y))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_70": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_71": {
                "variable": {
                    "value": "mean_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_72": {
                "variable": {
                    "value": "mean_x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "mean_y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "variable": {
                    "value": "stddev_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(mean_x2 - tf.square(mean_x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "variable": {
                    "value": "stddev_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(mean_y2 - tf.square(mean_y))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_104": {
                "variable": {
                    "value": "grad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, :, :img_width - 1, :] - v[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_105": {
                "variable": {
                    "value": "grad_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, :img_height - 1, :, :] - v[:, 1:, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_114": {
                "variable": {
                    "value": "grad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, :, 1:, :, :] - v[:, :, :img_width - 1, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "variable": {
                    "value": "grad_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, 1:, :, :, :] - v[:, :img_height - 1, :, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "variable": {
                    "value": "grad_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, :, :, 1:, :] - v[:, :, :, :img_depth - 1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_12": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, k, x.get_shape()[-1], dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_14": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, k, dim, x.get_shape()[-1]], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, k, dim, x.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_transpose_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, k, dim, x.get_shape()[-1]], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, k, x.get_shape()[-1], dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, k, dim, x.get_shape()[-1]], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "input_tensor": {
                    "value": "(x - mean_x) * (y - mean_y) / (stddev_x * stddev_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_76": {
                "input_tensor": {
                    "value": "(x - mean_x) * (y - mean_y) / (stddev_x * stddev_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_79": {
                "input_tensor": {
                    "value": "tf.square(x - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_62": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_63": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_64": {
                "x": {
                    "value": "mean_x2 - tf.square(mean_x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_65": {
                "x": {
                    "value": "mean_y2 - tf.square(mean_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_72": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_73": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_74": {
                "x": {
                    "value": "mean_x2 - tf.square(mean_x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_75": {
                "x": {
                    "value": "mean_y2 - tf.square(mean_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_79": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_104": {
                "x": {
                    "value": "v[:, :, :img_width - 1, :] - v[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_105": {
                "x": {
                    "value": "v[:, :img_height - 1, :, :] - v[:, 1:, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_114": {
                "x": {
                    "value": "v[:, :, 1:, :, :] - v[:, :, :img_width - 1, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_115": {
                "x": {
                    "value": "v[:, 1:, :, :, :] - v[:, :img_height - 1, :, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_116": {
                "x": {
                    "value": "v[:, :, :, 1:, :] - v[:, :, :, :img_depth - 1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_13": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_29": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_44": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_64": {
                "x": {
                    "value": "mean_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, [1, 2, 3], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, [1, 2, 3, 4], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_65": {
                "x": {
                    "value": "mean_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(y, [1, 2, 3], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2, 3, 4], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_74": {
                "x": {
                    "value": "mean_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, [1, 2, 3], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, [1, 2, 3, 4], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_75": {
                "x": {
                    "value": "mean_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(y, [1, 2, 3], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2, 3, 4], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_18": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_34": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_3D/trainNet/gen_batches.py": {
        "tensorflow": {
            "slice_input_producer_35": {
                "variable": {
                    "value": "input_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[x_arr, y_arr]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config['shuffle_batch']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_36": {
                "variable": {
                    "value": "(batch_x, batch_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_queue",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.slice_input_producer([x_arr, y_arr], shuffle=config['shuffle_batch'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "py_func_52": {
                "variable": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[batch_x, config['batch_size'], *config['image_size'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_53": {
                "variable": {
                    "value": "batch_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[batch_y, config['batch_size'], *config['image_size'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FCN_registration_3D/trainNet/train.py": {
        "tensorflow": {
            "Session_57": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_60": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_61": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ResNet_registration_3D/model/ResNet.py": {
        "tensorflow": {
            "placeholder_60": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_batch_size, _img_height, _img_width, _img_depth, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_batch_size, _img_height, _img_width, _img_depth, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.x, self.y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_68": {
                "variable": {
                    "value": "self._v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.resnet_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool3d_28": {
                "variable": {
                    "value": "x_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv3d(x, 'Conv1', 32, 3, 1, 'SAME', True, tf.nn.relu, self._is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pooling1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_40": {
                "variable": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_41": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_78": {
                "variable": {
                    "value": "_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "a": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ResNet_registration_3D/model/bicubic_interpolation_3d.py": {
        "tensorflow": {
            "reshape_23": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, h, w, d * c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bicubic_24": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, H * W, d, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bicubic_26": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H * W, D]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "tensor": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, H, W, D, c]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ResNet_registration_3D/model/spatial_transformer_3d.py": {
        "tensorflow": {
            "expand_dims_38": {
                "variable": {
                    "value": "x_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(x_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_39": {
                "variable": {
                    "value": "y_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(y_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(y_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_40": {
                "variable": {
                    "value": "z_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(z_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_42": {
                "variable": {
                    "value": "x_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(x_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_43": {
                "variable": {
                    "value": "y_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(y_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(y_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_44": {
                "variable": {
                    "value": "z_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(z_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_52": {
                "variable": {
                    "value": "rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_54": {
                "variable": {
                    "value": "rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_59": {
                "variable": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(0.0, tf.cast(width, tf.float32) - 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(0.0, tf.cast(height, tf.float32) - 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_67": {
                "variable": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x_t, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_68": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(y_t, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_70": {
                "variable": {
                    "value": "z_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(depth, tf.float32) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "depth",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[3]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_71": {
                "input": {
                    "value": "z_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, tf.cast(depth, tf.float32) - 1.0, depth)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z_t, 0), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_t, [height, width, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_72": {
                "variable": {
                    "value": "z_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, tf.cast(depth, tf.float32) - 1.0, depth)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z_t, 0), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_t, [height, width, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[height, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_77": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(z, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_97": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_98": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_99": {
                "variable": {
                    "value": "max_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "depth - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_101": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_103": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_105": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_108": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, 0, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(width - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_109": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, 0, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(width - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_110": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, 0, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(height - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_111": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, 0, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(height - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_112": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(z), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z0, 0, max_z)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(depth - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_113": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(z1, 0, max_z)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(depth - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_135": {
                "variable": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_137": {
                "variable": {
                    "value": "Ia",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x0 * dim3 + z0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_138": {
                "variable": {
                    "value": "Ib",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x0 * dim3 + z0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_139": {
                "variable": {
                    "value": "Ic",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x1 * dim3 + z0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_140": {
                "variable": {
                    "value": "Id",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x1 * dim3 + z0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_141": {
                "variable": {
                    "value": "Ie",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x0 * dim3 + z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_142": {
                "variable": {
                    "value": "If",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x0 * dim3 + z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_143": {
                "variable": {
                    "value": "Ig",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x1 * dim3 + z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_144": {
                "variable": {
                    "value": "Ih",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x1 * dim3 + z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_147": {
                "variable": {
                    "value": "x1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, 0, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_148": {
                "variable": {
                    "value": "y1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, 0, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_149": {
                "variable": {
                    "value": "z1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(z1, 0, max_z)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_155": {
                "variable": {
                    "value": "wa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz * dx * dy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_156": {
                "variable": {
                    "value": "wb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz * dx * (1 - dy)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_157": {
                "variable": {
                    "value": "wc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz * (1 - dx) * dy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_158": {
                "variable": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz * (1 - dx) * (1 - dy)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_159": {
                "variable": {
                    "value": "we",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dz) * dx * dy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_160": {
                "variable": {
                    "value": "wf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dz) * dx * (1 - dy)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_161": {
                "variable": {
                    "value": "wg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dz) * (1 - dx) * dy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_162": {
                "variable": {
                    "value": "wh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dz) * (1 - dx) * (1 - dy)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_164": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * Ia, wb * Ib, wc * Ic, wd * Id, we * Ie, wf * If, wg * Ig, wh * Ih]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add_n([wa * Ia, wb * Ib, wc * Ic, wd * Id, we * Ie, wf * If, wg * Ig, wh * Ih])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, tf.stack([-1, out_height, out_width, out_depth, channels]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, out_height, out_width, out_depth, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_vec[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "x1_f - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_32": {
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_vec[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "x1_f - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_33": {
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_vec[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "x1_f - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_34": {
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_vec[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "x1_f - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_53": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_60": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(0.0, tf.cast(width, tf.float32) - 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "input": {
                    "value": "tf.linspace(0.0, tf.cast(height, tf.float32) - 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_65": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "input": {
                    "value": "x_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(0.0, tf.cast(width, tf.float32) - 1.0, width), 1), [1, 0]))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(x_t, 2), [1, 1, depth])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "input": {
                    "value": "y_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(0.0, tf.cast(height, tf.float32) - 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(y_t, 2), [1, 1, depth])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_80": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_81": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_82": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_83": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_85": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_86": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_87": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_93": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_95": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(z, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "floor_101": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_103": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_105": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(z, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_134": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_166": {
                "values": {
                    "value": "[-1, out_height, out_width, out_depth, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_53": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "input": {
                    "value": "tf.linspace(0.0, tf.cast(width, tf.float32) - 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_64": {
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(height, tf.float32) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_70": {
                "x": {
                    "value": "depth",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[3]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[3]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_60": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_61": {
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(width, tf.float32) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_65": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_53": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_64": {
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_61": {
                "x": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ResNet_registration_3D/model/test.py": {
        "tensorflow": {
            "placeholder_21": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 64, 64, 64, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool3d_24": {
                "variable": {
                    "value": "x_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv3d(x, 'Conv1', 64, 5, 1, 'SAME', True, tf.nn.relu, self._is_train)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pooling1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ResNet_registration_3D/model/utils.py": {
        "tensorflow": {
            "reduce_mean_107": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w1, [1, 2, 2, 2, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w1, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "mean_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "mean_x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "variable": {
                    "value": "mean_y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "stddev_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(mean_x2 - tf.square(mean_x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "variable": {
                    "value": "stddev_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(mean_y2 - tf.square(mean_y))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_120": {
                "variable": {
                    "value": "grad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, :, 1:, :, :] - v[:, :, :img_width - 1, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "variable": {
                    "value": "grad_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, 1:, :, :, :] - v[:, :img_height - 1, :, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_122": {
                "variable": {
                    "value": "grad_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, :, :, 1:, :] - v[:, :, :, :img_depth - 1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, k, x.get_shape()[-1], dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_16": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w1, [1, 2, 2, 2, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w1, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight1', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight1', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, k, x.get_shape()[-1], dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w1, [1, 2, 2, 2, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w1, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight2', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight2', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, k, x.get_shape()[-1], dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w1, [1, 2, 2, 2, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w1, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight1', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight1', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, k, x.get_shape()[-1], dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w1, [1, 2, 2, 2, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w1, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight2', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight2', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_63": {
                "variable": {
                    "value": "add",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w1, [1, 2, 2, 2, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w1, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_shortcut",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "relu_64": {
                "variable": {
                    "value": "add_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "add",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add(x, x_shortcut)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_74": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, k, x.get_shape()[-1], dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w1, [1, 2, 2, 2, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w1, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, k, x.get_shape()[-1], dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_91": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w1, [1, 2, 2, 2, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w1, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "input_tensor": {
                    "value": "(x - mean_x) * (y - mean_y) / (stddev_x * stddev_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_109": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w1, [1, 2, 2, 2, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w1, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn1', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w2, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn2', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_110": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_111": {
                "x": {
                    "value": "mean_x2 - tf.square(mean_x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_112": {
                "x": {
                    "value": "mean_y2 - tf.square(mean_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_120": {
                "x": {
                    "value": "v[:, :, 1:, :, :] - v[:, :, :img_width - 1, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_121": {
                "x": {
                    "value": "v[:, 1:, :, :, :] - v[:, :img_height - 1, :, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_122": {
                "x": {
                    "value": "v[:, :, :, 1:, :] - v[:, :, :, :img_depth - 1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_14": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_26": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_43": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_55": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_75": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_90": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_111": {
                "x": {
                    "value": "mean_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, [1, 2, 3, 4], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_112": {
                "x": {
                    "value": "mean_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(y, [1, 2, 3, 4], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_20": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_31": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_49": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_60": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_80": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ResNet_registration_3D/trainNet/gen_batches.py": {
        "tensorflow": {
            "slice_input_producer_35": {
                "variable": {
                    "value": "input_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[x_arr, y_arr]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config['shuffle_batch']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_36": {
                "variable": {
                    "value": "(batch_x, batch_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_queue",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.slice_input_producer([x_arr, y_arr], shuffle=config['shuffle_batch'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "py_func_52": {
                "variable": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[batch_x, config['batch_size'], *config['image_size'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_53": {
                "variable": {
                    "value": "batch_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[batch_y, config['batch_size'], *config['image_size'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ResNet_registration_3D/trainNet/train.py": {
        "tensorflow": {
            "Session_57": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_60": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_61": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "UNet_registration_3D/models/bicubic_interpolation_3d.py": {
        "tensorflow": {
            "reshape_23": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, h, w, d * c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bicubic_24": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, H * W, d, c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bicubic_26": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[H * W, D]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "tensor": {
                    "value": "arr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(arr, [n, h, w, d * c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H, W], True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(arr, [n, H * W, d, c])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic(arr, [H * W, D], True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, H, W, D, c]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "UNet_registration_3D/models/spatial_transformer_3d.py": {
        "tensorflow": {
            "expand_dims_38": {
                "variable": {
                    "value": "x_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(x_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_39": {
                "variable": {
                    "value": "y_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(y_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(y_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_40": {
                "variable": {
                    "value": "z_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(z_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_42": {
                "variable": {
                    "value": "x_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(x_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(x_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_43": {
                "variable": {
                    "value": "y_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(y_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(y_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_44": {
                "variable": {
                    "value": "z_mesh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_mesh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(z_mesh, 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_mesh, [batch_size, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_52": {
                "variable": {
                    "value": "rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_54": {
                "variable": {
                    "value": "rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rep",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(tf.expand_dims(tf.ones(shape=tf.stack([n_repeats])), 1), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(rep, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_59": {
                "variable": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(0.0, tf.cast(width, tf.float32) - 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(0.0, tf.cast(height, tf.float32) - 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_67": {
                "variable": {
                    "value": "x_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x_t, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_68": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(y_t, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_70": {
                "variable": {
                    "value": "z_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(depth, tf.float32) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "depth",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[3]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_71": {
                "input": {
                    "value": "z_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, tf.cast(depth, tf.float32) - 1.0, depth)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z_t, 0), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_t, [height, width, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_72": {
                "variable": {
                    "value": "z_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, tf.cast(depth, tf.float32) - 1.0, depth)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(z_t, 0), 0)",
                            "Call"
                        ],
                        [
                            "tf.tile(z_t, [height, width, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[height, width, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_77": {
                "variable": {
                    "value": "im",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(z, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_97": {
                "variable": {
                    "value": "max_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_98": {
                "variable": {
                    "value": "max_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_99": {
                "variable": {
                    "value": "max_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "depth - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_101": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_103": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_105": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_108": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, 0, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(width - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_109": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, 0, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(width - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_110": {
                "variable": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, 0, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(height - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_111": {
                "variable": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, 0, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(height - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_112": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(z), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(z0, 0, max_z)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(depth - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_113": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "z1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(z1, 0, max_z)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(depth - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_135": {
                "variable": {
                    "value": "im_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_137": {
                "variable": {
                    "value": "Ia",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x0 * dim3 + z0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_138": {
                "variable": {
                    "value": "Ib",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x0 * dim3 + z0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_139": {
                "variable": {
                    "value": "Ic",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x1 * dim3 + z0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_140": {
                "variable": {
                    "value": "Id",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x1 * dim3 + z0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_141": {
                "variable": {
                    "value": "Ie",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x0 * dim3 + z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_142": {
                "variable": {
                    "value": "If",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x0 * dim3 + z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_143": {
                "variable": {
                    "value": "Ig",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y0 + x1 * dim3 + z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_144": {
                "variable": {
                    "value": "Ih",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_y1 + x1 * dim3 + z1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_147": {
                "variable": {
                    "value": "x1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, 0, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_148": {
                "variable": {
                    "value": "y1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, 0, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_149": {
                "variable": {
                    "value": "z1_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(z1, 0, max_z)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_155": {
                "variable": {
                    "value": "wa",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz * dx * dy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_156": {
                "variable": {
                    "value": "wb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz * dx * (1 - dy)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_157": {
                "variable": {
                    "value": "wc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz * (1 - dx) * dy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_158": {
                "variable": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz * (1 - dx) * (1 - dy)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_159": {
                "variable": {
                    "value": "we",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dz) * dx * dy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_160": {
                "variable": {
                    "value": "wf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dz) * dx * (1 - dy)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_161": {
                "variable": {
                    "value": "wg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dz) * (1 - dx) * dy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_162": {
                "variable": {
                    "value": "wh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dz) * (1 - dx) * (1 - dy)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_164": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * Ia, wb * Ib, wc * Ic, wd * Id, we * Ie, wf * If, wg * Ig, wh * Ih]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add_n([wa * Ia, wb * Ib, wc * Ic, wd * Id, we * Ie, wf * If, wg * Ig, wh * Ih])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, tf.stack([-1, out_height, out_width, out_depth, channels]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, out_height, out_width, out_depth, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_vec[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "x1_f - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_32": {
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_vec[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "x1_f - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_33": {
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_vec[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "x1_f - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_34": {
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "def_vec[:, :, :, :, 0]",
                            "Subscript"
                        ],
                        [
                            "x1_f - x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_53": {
                "input": {
                    "value": "tf.ones(shape=tf.stack([n_repeats]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_60": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(0.0, tf.cast(width, tf.float32) - 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "input": {
                    "value": "tf.linspace(0.0, tf.cast(height, tf.float32) - 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_65": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "input": {
                    "value": "x_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(0.0, tf.cast(width, tf.float32) - 1.0, width), 1), [1, 0]))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(x_t, 2), [1, 1, depth])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "input": {
                    "value": "y_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(0.0, tf.cast(height, tf.float32) - 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(y_t, 2), [1, 1, depth])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_80": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_81": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_82": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_83": {
                "input": {
                    "value": "im",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(im, [[0, 0], [1, 1], [1, 1], [1, 1], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_85": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_86": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_87": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_93": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_95": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(z, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "floor_101": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(x, (-1, 1)), rep)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_103": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_105": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(z, 'float32') + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_134": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_166": {
                "values": {
                    "value": "[-1, out_height, out_width, out_depth, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_53": {
                "shape": {
                    "value": "tf.stack([n_repeats])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "input": {
                    "value": "tf.linspace(0.0, tf.cast(width, tf.float32) - 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_64": {
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(height, tf.float32) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_70": {
                "x": {
                    "value": "depth",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[3]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[3]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_60": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_61": {
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(width, tf.float32) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_65": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_53": {
                "values": {
                    "value": "[n_repeats]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_64": {
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_61": {
                "x": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.shape(dx)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "UNet_registration_3D/models/test_for_UNet.py": {
        "tensorflow": {
            "placeholder_21": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 128, 128, 128, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_30": {
                "variable": {
                    "value": "x_6_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_6, x_4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_32": {
                "variable": {
                    "value": "x_7_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_7, x_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_34": {
                "variable": {
                    "value": "x_8_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_8, x_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_37": {
                "variable": {
                    "value": "x_10_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_10, x_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "UNet_registration_3D/models/unet.py": {
        "tensorflow": {
            "placeholder_60": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_batch_size, _img_height, _img_width, _img_depth, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_batch_size, _img_height, _img_width, _img_depth, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.x, self.y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_67": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.unet_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_31": {
                "variable": {
                    "value": "x_6_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_6, x_4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "CA1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_33": {
                "variable": {
                    "value": "x_7_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_7, x_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "CA2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_35": {
                "variable": {
                    "value": "x_8_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_8, x_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "CA3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "x_10_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_10, x_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "CA4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_42": {
                "variable": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_43": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_80": {
                "variable": {
                    "value": "_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self._reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "a": {
                    "value": "self.xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "UNet_registration_3D/models/utils.py": {
        "tensorflow": {
            "reduce_mean_55": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "variable": {
                    "value": "mean_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "variable": {
                    "value": "mean_x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "variable": {
                    "value": "mean_y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "variable": {
                    "value": "stddev_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(mean_x2 - tf.square(mean_x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "variable": {
                    "value": "stddev_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(mean_y2 - tf.square(mean_y))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_65": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "variable": {
                    "value": "mean_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_67": {
                "variable": {
                    "value": "mean_x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "mean_y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "variable": {
                    "value": "stddev_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(mean_x2 - tf.square(mean_x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "variable": {
                    "value": "stddev_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(mean_y2 - tf.square(mean_y))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "variable": {
                    "value": "grad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, :, :img_width - 1, :] - v[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "grad_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, :img_height - 1, :, :] - v[:, 1:, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "variable": {
                    "value": "grad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, :, 1:, :, :] - v[:, :, :img_width - 1, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_110": {
                "variable": {
                    "value": "grad_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, 1:, :, :, :] - v[:, :img_height - 1, :, :, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "grad_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(v[:, :, :, 1:, :] - v[:, :, :, :img_depth - 1, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_7": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, k, x.get_shape()[-1], dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_9": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, k, dim, x.get_shape()[-1]], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k, k, k, dim, x.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_transpose_25": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [k, k, k, x.get_shape()[-1], dim], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', [k, k, k, dim, x.get_shape()[-1]], initializer=tf.truncated_normal_initializer(stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "input_tensor": {
                    "value": "(x - mean_x) * (y - mean_y) / (stddev_x * stddev_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_71": {
                "input_tensor": {
                    "value": "(x - mean_x) * (y - mean_y) / (stddev_x * stddev_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "input_tensor": {
                    "value": "tf.square(x - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_57": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_58": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_59": {
                "x": {
                    "value": "mean_x2 - tf.square(mean_x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_60": {
                "x": {
                    "value": "mean_y2 - tf.square(mean_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_67": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x, w, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "x + b",
                            "BinOp"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(x, w, output_shape, [1, s, s, s, 1], p)",
                            "Call"
                        ],
                        [
                            "batch_norm(x, 'bn', is_train=is_train)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_68": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_69": {
                "x": {
                    "value": "mean_x2 - tf.square(mean_x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_70": {
                "x": {
                    "value": "mean_y2 - tf.square(mean_y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_74": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_99": {
                "x": {
                    "value": "v[:, :, :img_width - 1, :] - v[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_100": {
                "x": {
                    "value": "v[:, :img_height - 1, :, :] - v[:, 1:, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_109": {
                "x": {
                    "value": "v[:, :, 1:, :, :] - v[:, :, :img_width - 1, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_110": {
                "x": {
                    "value": "v[:, 1:, :, :, :] - v[:, :img_height - 1, :, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_111": {
                "x": {
                    "value": "v[:, :, :, 1:, :] - v[:, :, :, :img_depth - 1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_8": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_24": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_59": {
                "x": {
                    "value": "mean_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, [1, 2, 3], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, [1, 2, 3, 4], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_60": {
                "x": {
                    "value": "mean_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(y, [1, 2, 3], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2, 3, 4], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_69": {
                "x": {
                    "value": "mean_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, [1, 2, 3], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, [1, 2, 3, 4], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_70": {
                "x": {
                    "value": "mean_y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(y, [1, 2, 3], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, [1, 2, 3, 4], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_13": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_29": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "UNet_registration_3D/trainNet/gen_batches.py": {
        "tensorflow": {
            "slice_input_producer_34": {
                "variable": {
                    "value": "input_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[x_arr, y_arr]",
                    "type": "List",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config['shuffle_batch']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_35": {
                "variable": {
                    "value": "(batch_x, batch_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_queue",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.slice_input_producer([x_arr, y_arr], shuffle=config['shuffle_batch'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "py_func_51": {
                "variable": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[batch_x, config['batch_size'], *config['image_size'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_52": {
                "variable": {
                    "value": "batch_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[batch_y, config['batch_size'], *config['image_size'], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "UNet_registration_3D/trainNet/train.py": {
        "tensorflow": {
            "Session_55": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_58": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_59": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}