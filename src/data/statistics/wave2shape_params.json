{
    "notebooks/interpolate_shape.py": {
        "sklearn": {
            "MinMaxScaler_126": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "randn_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KLDivLoss_56": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_74": {
                "variable": {
                    "value": "err",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Sx - Sy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "backward_86": {
                "tensors": {
                    "value": "err",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.norm(Sx - Sy)",
                            "Call"
                        ],
                        [
                            "torch.sum(Sx_normalized * torch.log(Sx_normalized / Sy_normalized))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "nag_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "momentum * signal_update + x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "err",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Sx_normalized * torch.log(Sx_normalized / Sy_normalized)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_84": {
                "input": {
                    "value": "Sy_normalized",
                    "type": "Name",
                    "possible_values": [
                        [
                            "normalize(Sy)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_82": {
                "input": {
                    "value": "Sx_normalized / Sy_normalized",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/plot_and_regress_synthetic.py": {
        "sklearn": {},
        "torch": {}
    },
    "scripts/02_train.py": {
        "sklearn": {
            "MinMaxScaler_126": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Sequential_50": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_52": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(input_x, input_y)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Conv1D_53": {
                "filters": {
                    "value": "nchan_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(k_size,)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_56": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_63": {
                "pool_size": {
                    "value": "(pool,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_80": {
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_83": {
                "units": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1D_67": {
                "filters": {
                    "value": "nchan_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(k_size,)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_70": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_73": {
                "pool_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling1D_75": {
                "pool_size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "scripts/03_train_film.py": {
        "sklearn": {
            "MinMaxScaler_184": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "enable_eager_execution_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_106": {
                "variable": {
                    "value": "Sc_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "Sc_input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Sy.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Input_107": {
                "variable": {
                    "value": "u_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "u_input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Model_147": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[Sc_input, u_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "FiLM(input_shape=[Sc_input_shape, u_input_shape], name='FiLM_layer', dynamic=True)([Sc_input, u_input])",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x[0])",
                            "Call"
                        ],
                        [
                            "Conv1D(filters=nchan_out, kernel_size=kernel_size, padding='same', name='conv1')(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling1D(pool_size=(pool,))(x)",
                            "Call"
                        ],
                        [
                            "Conv1D(filters=nchan_out, kernel_size=kernel_size, padding='same')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Flatten()(x)",
                            "Call"
                        ],
                        [
                            "Dense(64, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Dense(5, activation=activation)(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling1D(pool_size=(4,))(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling1D(pool_size=(2,))(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_63": {
                "variable": {
                    "value": "FiLM_tns",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "FiLM_tns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "u_input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "K.dot(FiLM_tns, self.kernel)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(FiLM_tns, axis=[1])",
                            "Call"
                        ],
                        [
                            "K.tile(FiLM_tns, [1, self.height, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "variable": {
                    "value": "FiLM_tns",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FiLM_tns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "u_input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "K.dot(FiLM_tns, self.kernel)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(FiLM_tns, axis=[1])",
                            "Call"
                        ],
                        [
                            "K.tile(FiLM_tns, [1, self.height, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_68": {
                "variable": {
                    "value": "FiLM_tns",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FiLM_tns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "u_input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "K.dot(FiLM_tns, self.kernel)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(FiLM_tns, axis=[1])",
                            "Call"
                        ],
                        [
                            "K.tile(FiLM_tns, [1, self.height, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clear_session_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1D_113": {
                "filters": {
                    "value": "nchan_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(k_size,)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_115": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_123": {
                "pool_size": {
                    "value": "(pool,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_140": {
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_143": {
                "units": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1D_127": {
                "filters": {
                    "value": "nchan_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(k_size,)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_130": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_133": {
                "pool_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling1D_136": {
                "pool_size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "scripts/04_train_multitask.py": {
        "sklearn": {
            "MinMaxScaler_126": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Sequential_50": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_52": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(input_x, input_y)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Conv1D_53": {
                "filters": {
                    "value": "nchan_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(k_size,)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_56": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_63": {
                "pool_size": {
                    "value": "(pool,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_80": {
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_83": {
                "units": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1D_67": {
                "filters": {
                    "value": "nchan_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(k_size,)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_70": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_73": {
                "pool_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling1D_75": {
                "pool_size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "scripts/05_train_film_batchfirst.py": {
        "sklearn": {
            "MinMaxScaler_186": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "enable_eager_execution_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_106": {
                "variable": {
                    "value": "Sc_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "Sc_input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Sy.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Input_107": {
                "variable": {
                    "value": "u_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "u_input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Model_149": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[Sc_input, u_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "FiLM(input_shape=[Sc_input_shape, u_input_shape], name='FiLM_layer', dynamic=True)([Sc_input_batched, u_input])",
                            "Call"
                        ],
                        [
                            "Conv1D(filters=nchan_out, kernel_size=kernel_size, padding='same', name='conv1')(x[0])",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling1D(pool_size=(pool,))(x)",
                            "Call"
                        ],
                        [
                            "Conv1D(filters=nchan_out, kernel_size=kernel_size, padding='same')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Flatten()(x)",
                            "Call"
                        ],
                        [
                            "Dense(64, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Dense(5, activation=activation)(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling1D(pool_size=(4,))(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling1D(pool_size=(2,))(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_63": {
                "variable": {
                    "value": "FiLM_tns",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "FiLM_tns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "u_input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "K.dot(FiLM_tns, self.kernel)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(FiLM_tns, axis=[1])",
                            "Call"
                        ],
                        [
                            "K.tile(FiLM_tns, [1, self.height, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "variable": {
                    "value": "FiLM_tns",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FiLM_tns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "u_input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "K.dot(FiLM_tns, self.kernel)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(FiLM_tns, axis=[1])",
                            "Call"
                        ],
                        [
                            "K.tile(FiLM_tns, [1, self.height, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_68": {
                "variable": {
                    "value": "FiLM_tns",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FiLM_tns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "u_input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "K.dot(FiLM_tns, self.kernel)",
                            "Call"
                        ],
                        [
                            "K.expand_dims(FiLM_tns, axis=[1])",
                            "Call"
                        ],
                        [
                            "K.tile(FiLM_tns, [1, self.height, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clear_session_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1D_115": {
                "filters": {
                    "value": "nchan_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(k_size,)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_117": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_125": {
                "pool_size": {
                    "value": "(pool,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_142": {
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_145": {
                "units": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1D_129": {
                "filters": {
                    "value": "nchan_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(k_size,)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_132": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_135": {
                "pool_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling1D_138": {
                "pool_size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "scripts/06_train_film_deep.py": {
        "sklearn": {
            "MinMaxScaler_231": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "enable_eager_execution_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_150": {
                "variable": {
                    "value": "Sc_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "Sc_input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Sy.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Input_151": {
                "variable": {
                    "value": "u_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "u_input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Model_194": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[Sc_input, u_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "FiLM(input_shape=[Sc_input_shape, u_input_shape], name='FiLM_layer', dynamic=True, depth=depth, units=units)([Sc_input_batched, u_input])",
                            "Call"
                        ],
                        [
                            "Conv1D(filters=nchan_out, kernel_size=kernel_size, padding='same', name='conv1')(x[0])",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling1D(pool_size=(pool,))(x)",
                            "Call"
                        ],
                        [
                            "Conv1D(filters=nchan_out, kernel_size=kernel_size, padding='same')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Flatten()(x)",
                            "Call"
                        ],
                        [
                            "Dense(64, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Dense(5, activation=activation)(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling1D(pool_size=(4,))(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling1D(pool_size=(2,))(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_68": {
                "variable": {
                    "value": "u_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "u_input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2,)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "dimension_value_69": {
                "variable": {
                    "value": "last_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dimension": {
                    "value": "u_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dot_104": {
                "variable": {
                    "value": "FiLM_tns_agg",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "FiLM_tns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "u_input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "K.expand_dims(FiLM_tns_agg, axis=[1])",
                            "Call"
                        ],
                        [
                            "K.tile(FiLM_tns, [1, self.height, 1])",
                            "Call"
                        ],
                        [
                            "K.dot(FiLM_tns, self.dense[d])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_109": {
                "variable": {
                    "value": "FiLM_tns",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FiLM_tns_agg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K.dot(FiLM_tns, self.kernel)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_111": {
                "variable": {
                    "value": "FiLM_tns",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FiLM_tns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "u_input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "K.expand_dims(FiLM_tns_agg, axis=[1])",
                            "Call"
                        ],
                        [
                            "K.tile(FiLM_tns, [1, self.height, 1])",
                            "Call"
                        ],
                        [
                            "K.dot(FiLM_tns, self.dense[d])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clear_session_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1D_160": {
                "filters": {
                    "value": "nchan_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(k_size,)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_162": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_170": {
                "pool_size": {
                    "value": "(pool,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_187": {
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_190": {
                "units": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dot_101": {
                "variable": {
                    "value": "FiLM_tns",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "FiLM_tns",
                    "type": "Call",
                    "possible_values": [
                        [
                            "u_input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "K.expand_dims(FiLM_tns_agg, axis=[1])",
                            "Call"
                        ],
                        [
                            "K.tile(FiLM_tns, [1, self.height, 1])",
                            "Call"
                        ],
                        [
                            "K.dot(FiLM_tns, self.dense[d])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.dense[d]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1D_174": {
                "filters": {
                    "value": "nchan_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(k_size,)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_177": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_180": {
                "pool_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling1D_183": {
                "pool_size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "scripts/102-compute_nbrs_mean_dist.py": {
        "sklearn": {
            "NearestNeighbors_142": {
                "variable": {
                    "value": "nbrs_fold",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_nbr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "scripts/105-compute_metrics.py": {
        "sklearn": {
            "NearestNeighbors_125": {
                "variable": {
                    "value": "nbrs_fold",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_nbr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "algorithm": {
                    "value": "ball_tree",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Isomap_130": {
                "variable": {
                    "value": "isomap_fold",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_nbr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {},
        "torch": {}
    },
    "scripts/preliminary_test.py": {
        "sklearn": {
            "MinMaxScaler_80": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Sequential_118": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1D_119": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Sy.shape",
                            "Attribute"
                        ]
                    ]
                },
                "filters": {
                    "value": "nchan_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(8,)",
                            "Tuple"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_121": {
                "pool_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1D_122": {
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(8,)",
                            "Tuple"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_124": {
                "pool_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1D_125": {
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(8,)",
                            "Tuple"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_127": {
                "pool_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1D_128": {
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(8,)",
                            "Tuple"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_130": {
                "pool_size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_134": {
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_137": {
                "units": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "EarlyStopping_151": {
                "patience": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_152": {
                "filepath": {
                    "value": "model_filepath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, 'model.h5')",
                            "Call"
                        ]
                    ]
                },
                "save_best_only": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CSVLogger_153": {
                "filename": {
                    "value": "log_filepath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, 'train_log.csv')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "scripts/preliminary_test_alt.py": {
        "sklearn": {
            "MinMaxScaler_81": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Sequential_117": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1D_118": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Sy.shape",
                            "Attribute"
                        ]
                    ]
                },
                "filters": {
                    "value": "nchan_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(8,)",
                            "Tuple"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_120": {
                "pool_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1D_121": {
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(8,)",
                            "Tuple"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_123": {
                "pool_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1D_124": {
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(8,)",
                            "Tuple"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_126": {
                "pool_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1D_127": {
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(8,)",
                            "Tuple"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_129": {
                "pool_size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_133": {
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_136": {
                "units": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "EarlyStopping_150": {
                "patience": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_151": {
                "filepath": {
                    "value": "model_filepath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, 'model.h5')",
                            "Call"
                        ]
                    ]
                },
                "save_best_only": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CSVLogger_152": {
                "filename": {
                    "value": "log_filepath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, 'train_log.csv')",
                            "Call"
                        ]
                    ]
                }
            },
            "list_physical_devices_72": {
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "scripts/train.py": {
        "sklearn": {
            "MinMaxScaler_124": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_87": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "ConfigProto_135": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_137": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "EarlyStopping_355": {
                "variable": {
                    "value": "early_stopping",
                    "type": "Variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_359": {
                "variable": {
                    "value": "model_checkpoint_callback",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "os.path.join(checkpoint_path, 'ckpt')",
                    "type": "Call",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_365": {
                "variable": {
                    "value": "reduce_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorBoard_367": {
                "variable": {
                    "value": "tensorboard_callback",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(checkpoint_path, 'ts_board_logs')",
                    "type": "Call",
                    "possible_values": []
                },
                "histogram_freq": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CSVLogger_369": {
                "variable": {
                    "value": "recordloss_callback",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(checkpoint_path, 'training.log')",
                    "type": "Call",
                    "possible_values": []
                },
                "separator": {
                    "value": ",",
                    "type": "Constant",
                    "possible_values": []
                },
                "append": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clear_session_442": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "src/test_training.py": {
        "sklearn": {
            "MinMaxScaler_110": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_135": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "ConfigProto_168": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_170": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "EarlyStopping_290": {
                "variable": {
                    "value": "early_stopping",
                    "type": "Variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_294": {
                "variable": {
                    "value": "model_checkpoint_callback",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "os.path.join(checkpoint_path, 'ckpt')",
                    "type": "Call",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_300": {
                "variable": {
                    "value": "reduce_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorBoard_302": {
                "variable": {
                    "value": "tensorboard_callback",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(checkpoint_path, 'ts_board_logs')",
                    "type": "Call",
                    "possible_values": []
                },
                "histogram_freq": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CSVLogger_304": {
                "variable": {
                    "value": "recordloss_callback",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(checkpoint_path, 'training.log')",
                    "type": "Call",
                    "possible_values": []
                },
                "separator": {
                    "value": ",",
                    "type": "Constant",
                    "possible_values": []
                },
                "append": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "scripts/103-predice_test.py": {
        "tensorflow": {
            "is_gpu_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/104-quicktest.py": {
        "tensorflow": {}
    },
    "src/cnn.py": {
        "tensorflow": {
            "Input_35": {
                "variable": {
                    "value": "S_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "S_input_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(nfreq, ntime, nchan_in)",
                            "Tuple"
                        ],
                        [
                            "(nfreq, ntime, nchan_in)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Model_79": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[S_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Conv1D(filters=128, kernel_size=(8,), padding='same', name='conv1')(S_input)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling2D(pool_size=(1, 4), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv1D(filters=64, kernel_size=(4,), padding='same', name='conv1_2')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv1D(filters=64, kernel_size=(4,), padding='same', name='conv1_3')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling2D(pool_size=(1, 4), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv1D(filters=8, kernel_size=(1,), padding='same', name='conv1_4')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Flatten()(x)",
                            "Call"
                        ],
                        [
                            "Dense(64)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Dense(n_out, kernel_constraint=nonneg(), bias_constraint=nonneg())(x)",
                            "Call"
                        ],
                        [
                            "Activation(activation)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(S_input)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=128, kernel_size=(bins_per_oct, 8), padding='same', kernel_regularizer=None, name='conv1')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling2D(pool_size=(1, 8), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=64, kernel_size=(bins_per_oct, 4), padding='same', kernel_regularizer=None, name='conv1_2')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=64, kernel_size=(bins_per_oct, 4), padding='same', kernel_regularizer=None, name='conv1_3')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling2D(pool_size=(1, 8), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=8, kernel_size=(bins_per_oct, 1), padding='same', kernel_regularizer=None, name='conv1_4')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Flatten()(x)",
                            "Call"
                        ],
                        [
                            "Dense(64, kernel_regularizer=None)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Dense(n_out, kernel_regularizer=None, kernel_constraint=nonneg(), bias_constraint=nonneg())(x)",
                            "Call"
                        ],
                        [
                            "Activation(activation)(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_96": {
                "variable": {
                    "value": "S_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "S_input_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(nfreq, ntime, nchan_in)",
                            "Tuple"
                        ],
                        [
                            "(nfreq, ntime, nchan_in)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Adam_146": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Model_147": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[S_input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Conv1D(filters=128, kernel_size=(8,), padding='same', name='conv1')(S_input)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling2D(pool_size=(1, 4), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv1D(filters=64, kernel_size=(4,), padding='same', name='conv1_2')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv1D(filters=64, kernel_size=(4,), padding='same', name='conv1_3')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling2D(pool_size=(1, 4), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv1D(filters=8, kernel_size=(1,), padding='same', name='conv1_4')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Flatten()(x)",
                            "Call"
                        ],
                        [
                            "Dense(64)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Dense(n_out, kernel_constraint=nonneg(), bias_constraint=nonneg())(x)",
                            "Call"
                        ],
                        [
                            "Activation(activation)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(S_input)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=128, kernel_size=(bins_per_oct, 8), padding='same', kernel_regularizer=None, name='conv1')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling2D(pool_size=(1, 8), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=64, kernel_size=(bins_per_oct, 4), padding='same', kernel_regularizer=None, name='conv1_2')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=64, kernel_size=(bins_per_oct, 4), padding='same', kernel_regularizer=None, name='conv1_3')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling2D(pool_size=(1, 8), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=8, kernel_size=(bins_per_oct, 1), padding='same', kernel_regularizer=None, name='conv1_4')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Flatten()(x)",
                            "Call"
                        ],
                        [
                            "Dense(64, kernel_regularizer=None)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(momentum=momentum)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Dense(n_out, kernel_regularizer=None, kernel_constraint=nonneg(), bias_constraint=nonneg())(x)",
                            "Call"
                        ],
                        [
                            "Activation(activation)(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_201": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clear_session_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1D_39": {
                "filters": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(8,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_41": {
                "momentum": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_42": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling2D_43": {
                "pool_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1D_46": {
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_48": {
                "momentum": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_49": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1D_52": {
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_54": {
                "momentum": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_55": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling2D_56": {
                "pool_size": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1D_59": {
                "filters": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_61": {
                "momentum": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_62": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_66": {
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_67": {
                "momentum": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_68": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_74": {
                "units": {
                    "value": "n_out",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel_constraint": {
                    "value": "nonneg()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "nonneg()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_76": {
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNormalization_99": {
                "momentum": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2D_102": {
                "filters": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(bins_per_oct, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_104": {
                "momentum": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_105": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling2D_107": {
                "pool_size": {
                    "value": "(1, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_110": {
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(bins_per_oct, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_112": {
                "momentum": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_113": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_116": {
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(bins_per_oct, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_118": {
                "momentum": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_119": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling2D_122": {
                "pool_size": {
                    "value": "(1, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_126": {
                "filters": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(bins_per_oct, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_128": {
                "momentum": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_129": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_133": {
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_134": {
                "momentum": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_135": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_142": {
                "units": {
                    "value": "n_out",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "nonneg()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "nonneg()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_144": {
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNormalization_168": {
                "input_shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Sy.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv1D_169": {
                "filters": {
                    "value": "nchan_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(k_size,)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_172": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_179": {
                "pool_size": {
                    "value": "(pool,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNormalization_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_195": {
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_198": {
                "units": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1D_183": {
                "filters": {
                    "value": "nchan_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(k_size,)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_186": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling1D_189": {
                "pool_size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling1D_191": {
                "pool_size": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/ddsp/data.py": {
        "tensorflow": {
            "TensorSpec_91": {
                "shape": {
                    "value": "(self.N,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/ddsp/encoder.py": {
        "tensorflow": {
            "BatchNormalization_39": {
                "variable": {
                    "value": "self.batchnorm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNormalization_40": {
                "variable": {
                    "value": "self.batchnorm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNormalization_41": {
                "variable": {
                    "value": "self.batchnorm_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNormalization_42": {
                "variable": {
                    "value": "self.batchnorm_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNormalization_43": {
                "variable": {
                    "value": "self.batchnorm_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNormalization_44": {
                "variable": {
                    "value": "self.batchnorm_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2D_46": {
                "variable": {
                    "value": "self.conv2d_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.bins_per_oct, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_49": {
                "variable": {
                    "value": "self.relu_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling2D_50": {
                "variable": {
                    "value": "self.avgpool2d_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(1, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_51": {
                "variable": {
                    "value": "self.conv2d_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.bins_per_oct, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_53": {
                "variable": {
                    "value": "self.conv2d_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.bins_per_oct, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_56": {
                "variable": {
                    "value": "self.conv2d_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.bins_per_oct, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_60": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_61": {
                "variable": {
                    "value": "self.dense_mid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_63": {
                "variable": {
                    "value": "self.dense_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_constraint": {
                    "value": "nonneg()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_constraint": {
                    "value": "nonneg()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Activation_64": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/ddsp/ftm.py": {
        "tensorflow": {
            "sqrt_76": {
                "variable": {
                    "value": "omega",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(beta - alpha ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y * K[None, None, :, None] / N[None, :, None, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_11": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_13": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_18": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_20": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_72": {
                "x": {
                    "value": "mu2 * pi * x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_76": {
                "x": {
                    "value": "beta - alpha ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_81": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop": {
                    "value": "dur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n_samples",
                            "Attribute"
                        ]
                    ]
                },
                "num": {
                    "value": "dur",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.n_samples",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exp_82": {
                "x": {
                    "value": "-alpha[..., None] * time_steps[None, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_82": {
                "x": {
                    "value": "omega[..., None] * time_steps[None, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_118": {
                "value": {
                    "value": "np.array(alpha_est)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_79": {
                "x": {
                    "value": "mu[None, :] * pi * x1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_86": {
                "input_tensor": {
                    "value": "y",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.math.exp(-alpha[..., None] * time_steps[None, :]) * tf.sin(omega[..., None] * time_steps[None, :])",
                            "BinOp"
                        ],
                        [
                            "yi[..., None] * y",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(y * K[None, None, :, None] / N[None, :, None, None], axis=-2)",
                            "Call"
                        ],
                        [
                            "tf_float64(y) / tf.reduce_max(y, axis=-1)[..., None]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/ddsp/preprocesser.py": {
        "tensorflow": {
            "run_functions_eagerly_5": {
                "run_eagerly": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log1p_33": {
                "variable": {
                    "value": "features[scattering_scaled]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "(features['scattering'] > 0) * features['scattering'] / self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_60": {
                "value": {
                    "value": "cqt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.cqt(audio.numpy(), sr=self.sr, n_bins=self.n_oct * self.Q, hop_length=256, bins_per_octave=self.Q)",
                            "Call"
                        ],
                        [
                            "np.log1p(cqt / self.eps)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/layers.py": {
        "tensorflow": {
            "constant_73": {
                "variable": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "K.constant(vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_91": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reduce_mean(inputs, axis=i + 2)",
                            "Call"
                        ],
                        [
                            "inputs / tf.reduce_sum(inputs, axis=[0, 1], keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "inputs * vector[None, :, None]",
                            "BinOp"
                        ],
                        [
                            "inputs / tf.reduce_sum(inputs, axis=[0, 1, 2], keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "inputs * vector[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(inputs, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, tf.reduce_prod(inputs.shape[1:])])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reduce_mean(inputs, axis=i + 2)",
                            "Call"
                        ],
                        [
                            "inputs / tf.reduce_sum(inputs, axis=[0, 1], keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "inputs * vector[None, :, None]",
                            "BinOp"
                        ],
                        [
                            "inputs / tf.reduce_sum(inputs, axis=[0, 1, 2], keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "inputs * vector[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(inputs, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, tf.reduce_prod(inputs.shape[1:])])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.reduce_prod(inputs.shape[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_99": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reduce_mean(inputs, axis=i + 2)",
                            "Call"
                        ],
                        [
                            "inputs / tf.reduce_sum(inputs, axis=[0, 1], keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "inputs * vector[None, :, None]",
                            "BinOp"
                        ],
                        [
                            "inputs / tf.reduce_sum(inputs, axis=[0, 1, 2], keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "inputs * vector[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(inputs, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, tf.reduce_prod(inputs.shape[1:])])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[rank - 1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reduce_mean(inputs, axis=i + 2)",
                            "Call"
                        ],
                        [
                            "inputs / tf.reduce_sum(inputs, axis=[0, 1], keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "inputs * vector[None, :, None]",
                            "BinOp"
                        ],
                        [
                            "inputs / tf.reduce_sum(inputs, axis=[0, 1, 2], keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "inputs * vector[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(inputs, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, tf.reduce_prod(inputs.shape[1:])])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_103": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "input_tensor": {
                    "value": "inputs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reduce_mean(inputs, axis=i + 2)",
                            "Call"
                        ],
                        [
                            "inputs / tf.reduce_sum(inputs, axis=[0, 1], keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "inputs * vector[None, :, None]",
                            "BinOp"
                        ],
                        [
                            "inputs / tf.reduce_sum(inputs, axis=[0, 1, 2], keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "inputs * vector[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(inputs, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, tf.reduce_prod(inputs.shape[1:])])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "input_tensor": {
                    "value": "inputs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.reduce_mean(inputs, axis=i + 2)",
                            "Call"
                        ],
                        [
                            "inputs / tf.reduce_sum(inputs, axis=[0, 1], keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "inputs * vector[None, :, None]",
                            "BinOp"
                        ],
                        [
                            "inputs / tf.reduce_sum(inputs, axis=[0, 1, 2], keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "inputs * vector[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(inputs, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, tf.reduce_prod(inputs.shape[1:])])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_prod_94": {
                "input_tensor": {
                    "value": "inputs.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss.py": {
        "tensorflow": {
            "mean_7": {
                "a": {
                    "value": "K.sum(K.square(y_pred - y_true), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_7": {
                "a": {
                    "value": "K.square(y_pred - y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_7": {
                "x": {
                    "value": "y_pred - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/autograd.py": {
        "torch": {
            "randn_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "backward_36": {
                "tensors": {
                    "value": "torch.norm(Sx - Sy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_36": {
                "input": {
                    "value": "Sx - Sy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_48": {
                "input": {
                    "value": "Sx - Sy",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/01_compute-scattering.py": {
        "torch": {
            "Tensor_53": {
                "variable": {
                    "value": "torch_waveform",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/07_compute-scattering_diffstrike.py": {
        "torch": {
            "Tensor_63": {
                "variable": {
                    "value": "torch_waveform",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/101-compute-features_ver2.py": {
        "torch": {}
    },
    "src/features.py": {
        "torch": {
            "Tensor_24": {
                "variable": {
                    "value": "torch_waveform",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_45": {
                "variable": {
                    "value": "torch_waveform",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}