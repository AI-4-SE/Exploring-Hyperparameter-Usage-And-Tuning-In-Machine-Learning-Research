{
    "Code/Functions.py": {
        "torch": {
            "Dataset_45": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.names": {
                    "value": "names",
                    "possible_values": []
                },
                "self.norm": {
                    "value": "norm",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.iterations": {
                    "value": "iterations",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Models.py": {
        "torch": {
            "ModelFlow_stride_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channel": {
                    "value": "in_channel",
                    "possible_values": []
                },
                "self.n_classes": {
                    "value": "n_classes",
                    "possible_values": []
                },
                "self.start_channel": {
                    "value": "start_channel",
                    "possible_values": []
                }
            },
            "SpatialTransform_123": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "abs_148": {
                "variable": {
                    "value": "dy",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred[:, :, 1:, :, :] - y_pred[:, :, :-1, :, :]",
                    "possible_values": []
                }
            },
            "abs_149": {
                "variable": {
                    "value": "dx",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred[:, :, :, 1:, :] - y_pred[:, :, :, :-1, :]",
                    "possible_values": []
                }
            },
            "abs_150": {
                "variable": {
                    "value": "dz",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred[:, :, :, :, 1:] - y_pred[:, :, :, :, :-1]",
                    "possible_values": []
                }
            },
            "mul_157": {
                "variable": {
                    "value": "mse",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "y_true_f - y_pred_f",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "diff",
                    "possible_values": [
                        [
                            "y_true_f - y_pred_f",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_157": {
                "variable": {
                    "value": "mse",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "layer",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, output_padding=output_padding, bias=bias)",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "x_in",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "d0",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.up1(e4), e3)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "d1",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.up2(d0), e2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "d2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.up3(d1), e1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "d3",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.up4(d2), e0)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grid_sample_132": {
                "variable": {
                    "value": "flow",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "grid": {
                    "value": "sample_grid",
                    "possible_values": [
                        [
                            "sample_grid + flow",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "layer",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias)",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "layer",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias)",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "layer",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias)",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "layer",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias)",
                    "possible_values": []
                }
            },
            "relu_141": {
                "input": {
                    "value": "dy",
                    "possible_values": [
                        [
                            "y_pred[:, :, :-1, :, :] - y_pred[:, :, 1:, :, :] - 1",
                            "BinOp"
                        ],
                        [
                            "F.relu(dy) * torch.abs(dy * dy)",
                            "BinOp"
                        ],
                        [
                            "torch.abs(y_pred[:, :, 1:, :, :] - y_pred[:, :, :-1, :, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_141": {
                "input": {
                    "value": "dy * dy",
                    "possible_values": []
                }
            },
            "relu_142": {
                "input": {
                    "value": "dx",
                    "possible_values": [
                        [
                            "y_pred[:, :, :, :-1, :] - y_pred[:, :, :, 1:, :] - 1",
                            "BinOp"
                        ],
                        [
                            "F.relu(dx) * torch.abs(dx * dx)",
                            "BinOp"
                        ],
                        [
                            "torch.abs(y_pred[:, :, :, 1:, :] - y_pred[:, :, :, :-1, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_142": {
                "input": {
                    "value": "dx * dx",
                    "possible_values": []
                }
            },
            "relu_143": {
                "input": {
                    "value": "dz",
                    "possible_values": [
                        [
                            "y_pred[:, :, :, :, :-1] - y_pred[:, :, :, :, 1:] - 1",
                            "BinOp"
                        ],
                        [
                            "F.relu(dz) * torch.abs(dz * dz)",
                            "BinOp"
                        ],
                        [
                            "torch.abs(y_pred[:, :, :, :, 1:] - y_pred[:, :, :, :, :-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_143": {
                "input": {
                    "value": "dz * dz",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_57": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_144": {
                "input": {
                    "value": "dy",
                    "possible_values": [
                        [
                            "y_pred[:, :, :-1, :, :] - y_pred[:, :, 1:, :, :] - 1",
                            "BinOp"
                        ],
                        [
                            "F.relu(dy) * torch.abs(dy * dy)",
                            "BinOp"
                        ],
                        [
                            "torch.abs(y_pred[:, :, 1:, :, :] - y_pred[:, :, :-1, :, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_151": {
                "input": {
                    "value": "dy * dy",
                    "possible_values": []
                }
            },
            "Conv3d_44": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_45": {
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv3d_49": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv3d_67": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_68": {
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "Tanh_69": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv3d_72": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_73": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Test.py": {
        "torch": {
            "load_35": {
                "f": {
                    "value": "opt.modelpath",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "ndarray": {
                    "value": "np.reshape(grid, (1,) + grid.shape)",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "load_5D(opt.fixed)",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "load_5D(opt.moving)",
                    "possible_values": []
                }
            }
        }
    },
    "Code/Train.py": {
        "torch": {
            "Adam_61": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "opt.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "training_generator",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(names, iteration, True)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "save_98": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "modelname",
                    "possible_values": [
                        [
                            "model_dir + '/' + str(step) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "np.reshape(grid, (1,) + grid.shape)",
                    "possible_values": []
                }
            }
        }
    }
}