{
    "models/rating_prediction/afm.py": {
        "sklearn": {
            "mean_squared_error_156": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(test_data['Y'], (num_example,))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions_bounded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.maximum(y_pred, np.ones(num_example) * min(y_true))",
                            "Call"
                        ],
                        [
                            "np.minimum(predictions_bounded, np.ones(num_example) * max(y_true))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_43": {
                "variable": {
                    "value": "self.train_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.dropout_keep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.feature_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([feature_M, num_factor], mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "self.feature_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([feature_M, 1], 0.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_51": {
                "variable": {
                    "value": "self.pred_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.ones((num_factor, 1), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "self.attention_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.normal(loc=0, scale=glorot, size=(num_factor, num_factor))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_54": {
                "variable": {
                    "value": "self.attention_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.normal(loc=0, scale=glorot, size=(1, num_factor))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "self.attention_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.normal(loc=0, scale=1, size=num_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_57": {
                "variable": {
                    "value": "nonzero_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.feature_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.train_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "self.element_wise_product",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "element_wise_product_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_68": {
                "variable": {
                    "value": "self.element_wise_product",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.element_wise_product",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "variable": {
                    "value": "self.interactions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.element_wise_product",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "self.element_wise_product",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "variable": {
                    "value": "self.attention_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.attention_p, tf.nn.relu(self.attention_mul + self.attention_b))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "self.attention_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.attention_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_76": {
                "variable": {
                    "value": "self.attention_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.attention_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_78": {
                "variable": {
                    "value": "self.AFM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.attention_out, self.element_wise_product)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_80": {
                "variable": {
                    "value": "self.AFM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.AFM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.AFM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.pred_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "bilinear",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "variable": {
                    "value": "self.f_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.embedding_lookup(self.feature_bias, self.train_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_103": {
                "variable": {
                    "value": "self.pred_rating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[bilinear, self.f_b, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_109": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_162": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_172": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_50": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "a": {
                    "value": "tf.reshape(self.element_wise_product, shape=[-1, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.attention_W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_74": {
                "x": {
                    "value": "self.attention_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(self.attention_mul + self.attention_b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_78": {
                "x": {
                    "value": "self.attention_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.element_wise_product",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "input_tensor": {
                    "value": "self.element_wise_product",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_101": {
                "params": {
                    "value": "self.feature_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.train_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_102": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_105": {
                "t": {
                    "value": "tf.subtract(self.y, self.pred_rating)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_74": {
                "features": {
                    "value": "self.attention_mul + self.attention_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_105": {
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.pred_rating",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_64": {
                "x": {
                    "value": "nonzero_embeddings[:, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "nonzero_embeddings[:, j, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/rating_prediction/fm.py": {
        "sklearn": {
            "mean_squared_error_114": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(test_data['Y'], (num_example,))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions_bounded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.maximum(y_pred, np.ones(num_example) * min(y_true))",
                            "Call"
                        ],
                        [
                            "np.minimum(predictions_bounded, np.ones(num_example) * max(y_true))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_43": {
                "variable": {
                    "value": "self.train_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.dropout_keep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.feature_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([feature_M, num_factor], mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "self.feature_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([feature_M, 1], 0.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_53": {
                "variable": {
                    "value": "nonzero_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.feature_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.train_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_55": {
                "variable": {
                    "value": "self.summed_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nonzero_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.feature_embeddings, self.train_features)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_56": {
                "variable": {
                    "value": "self.squared_summed_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.summed_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_57": {
                "variable": {
                    "value": "self.squared_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "nonzero_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.feature_embeddings, self.train_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_58": {
                "variable": {
                    "value": "self.summed_squared_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.squared_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_63": {
                "variable": {
                    "value": "self.FM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.FM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "variable": {
                    "value": "bilinear",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.FM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "variable": {
                    "value": "self.f_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.embedding_lookup(self.feature_bias, self.train_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_68": {
                "variable": {
                    "value": "self.pred_rating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[bilinear, self.f_b, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_74": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_120": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_130": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_50": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "subtract_60": {
                "x": {
                    "value": "self.summed_squared_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.squared_summed_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_66": {
                "params": {
                    "value": "self.feature_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.train_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_67": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_70": {
                "t": {
                    "value": "tf.subtract(self.y, self.pred_rating)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_70": {
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.pred_rating",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/rating_prediction/nfm.py": {
        "sklearn": {
            "mean_squared_error_129": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(test_data['Y'], (num_example,))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions_bounded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.maximum(y_pred, np.ones(num_example) * min(y_true))",
                            "Call"
                        ],
                        [
                            "np.minimum(predictions_bounded, np.ones(num_example) * max(y_true))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_43": {
                "variable": {
                    "value": "self.train_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.dropout_keep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.feature_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([feature_M, num_factor], mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "self.feature_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([feature_M, 1], 0.0, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_51": {
                "variable": {
                    "value": "self.pred_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.normal(loc=0, scale=np.sqrt(2.0 / (num_factor + num_hidden)), size=(num_hidden, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_54": {
                "variable": {
                    "value": "nonzero_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.feature_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.train_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_56": {
                "variable": {
                    "value": "self.summed_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nonzero_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.feature_embeddings, self.train_features)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_57": {
                "variable": {
                    "value": "self.squared_summed_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.summed_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_58": {
                "variable": {
                    "value": "self.squared_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "nonzero_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.feature_embeddings, self.train_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_59": {
                "variable": {
                    "value": "self.summed_squared_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.squared_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.FM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "self.FM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.dropout(layer_1, 0.8)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.pred_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "variable": {
                    "value": "bilinear",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.FM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "variable": {
                    "value": "self.f_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.embedding_lookup(self.feature_bias, self.train_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_76": {
                "variable": {
                    "value": "self.pred_rating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[bilinear, self.f_b, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_82": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_135": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_145": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_50": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "subtract_61": {
                "x": {
                    "value": "self.squared_summed_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.summed_squared_features_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_69": {
                "x": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=self.FM, units=num_hidden, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "embedding_lookup_74": {
                "params": {
                    "value": "self.feature_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.train_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_78": {
                "t": {
                    "value": "tf.subtract(self.y, self.pred_rating)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_78": {
                "x": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.pred_rating",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test/process_data.py": {
        "sklearn": {
            "train_test_split_23": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {}
    },
    "utils/evaluation/RankingMetrics.py": {
        "sklearn": {
            "TSNE_23": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/load_data/load_data_cikm.py": {
        "sklearn": {}
    },
    "utils/load_data/load_data_content.py": {
        "sklearn": {}
    },
    "utils/load_data/load_data_my.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_71": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_169": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_240": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_343": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/load_data/load_data_ranking.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_71": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/load_data/load_data_rating.py": {
        "sklearn": {
            "train_test_split_24": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/load_data/load_data_seq.py": {
        "sklearn": {}
    },
    "models/item_ranking/NeuMF_cikm.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "variable": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_45": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_46": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "variable": {
                    "value": "mlp_user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "mlp_item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_50": {
                "variable": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(d, d1, scope='user_low')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(e, e1, scope='item_low')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_52": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_56": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=user_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_59": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_65": {
                "variable": {
                    "value": "MLP",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='item_feature', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='user_feature', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.concat([GMF, MLP], axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_78": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "self.target_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "self.hot_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hot_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "self.long_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "long_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_218": {
                "variable": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(d, d1, scope='user_low')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(e, e1, scope='item_low')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_220": {
                "variable": {
                    "value": "GMF_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(d, d1, scope='user_low')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.input_from_feature_columns(f, e1, scope='item_low')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_255": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.concat([GMF, 5 * tf.multiply(user_feature, item_feature)], axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_270": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.pred_y, labels=self.y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_282": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_406": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_427": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_438": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_83": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "item_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_88": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=user_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_92": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_96": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "item_feature",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_100": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='item_feature', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='user_feature', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_105": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "user_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_110": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=user_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_114": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_118": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "user_feature",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_122": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='item_feature', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='user_feature', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_column_159": {
                "variable": {
                    "value": "shared_embedding_columns1",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='user', hash_bucket_size=190000)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_column_165": {
                "variable": {
                    "value": "shared_embedding_columns2",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='item', hash_bucket_size=120000)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_column_195": {
                "variable": {
                    "value": "shared_embedding_columns3",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='user_low', hash_bucket_size=190000)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_column_201": {
                "variable": {
                    "value": "shared_embedding_columns4",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='item_low', hash_bucket_size=120000)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_496": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(cov_source, cov_target))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "tf.concat([GMF, MLP], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "item_side",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "user_side",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_255": {
                "input_tensor": {
                    "value": "tf.concat([GMF, 5 * tf.multiply(user_feature, item_feature)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_270": {
                "logits": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_regularization_loss_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_488": {
                "input_tensor": {
                    "value": "h_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_src - tf.reduce_mean(h_src, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_489": {
                "input_tensor": {
                    "value": "h_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_trg - tf.reduce_mean(h_trg, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_490": {
                "a": {
                    "value": "h_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_src - tf.reduce_mean(h_src, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "h_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_src - tf.reduce_mean(h_src, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_492": {
                "a": {
                    "value": "h_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_trg - tf.reduce_mean(h_trg, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "h_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_trg - tf.reduce_mean(h_trg, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_496": {
                "x": {
                    "value": "tf.subtract(cov_source, cov_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_52": {
                "values": {
                    "value": "[mlp_item_latent_factor, mlp_user_latent_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_69": {
                "values": {
                    "value": "[GMF, MLP]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_regularization_loss_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_255": {
                "values": {
                    "value": "[GMF, 5 * tf.multiply(user_feature, item_feature)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_496": {
                "x": {
                    "value": "cov_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (batch_size_s - 1) * tf.matmul(h_src, h_src, transpose_a=True)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "cov_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (batch_size_t - 1) * tf.matmul(h_trg, h_trg, transpose_a=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_73": {
                "input_tensor": {
                    "value": "self.y * tf.log(self.pred_y + 1e-10) + (1 - self.y) * tf.log(1 - self.pred_y + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_76": {
                "t": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_244": {
                "tensor": {
                    "value": "self.resort_label[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multiply_255": {
                "x": {
                    "value": "user_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.user_side(mlp_user_latent_factor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.item_side(mlp_item_latent_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_74": {
                "x": {
                    "value": "1 - self.pred_y + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/item_ranking/NeuMF_cikm_p.py": {
        "tensorflow": {
            "placeholder_38": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_49": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_50": {
                "variable": {
                    "value": "mlp_user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_51": {
                "variable": {
                    "value": "mlp_item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_53": {
                "variable": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(d, d1, scope='user_low')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(e, e1, scope='item_low')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_55": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_59": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=user_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_65": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_68": {
                "variable": {
                    "value": "MLP",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='item_feature', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='user_feature', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_72": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.concat([GMF, MLP], axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_81": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_135": {
                "variable": {
                    "value": "self.target_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "self.hot_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hot_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "self.long_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "long_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "self.par",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_224": {
                "variable": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(d, d1, scope='user_low')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(e, e1, scope='item_low')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_226": {
                "variable": {
                    "value": "GMF_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(d, d1, scope='user_low')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.input_from_feature_columns(f, e1, scope='item_low')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_261": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.concat([GMF, 5 * tf.multiply(user_feature, item_feature)], axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_263": {
                "variable": {
                    "value": "avg_GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(user_latent_factor, item_latent_factor)",
                            "Call"
                        ],
                        [
                            "tf.multiply(user_latent_factor, item_latent_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_265": {
                "variable": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "avg_GMF + tf.reduce_sum(5 * tf.multiply(user_feature, target_item_feature), 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_270": {
                "tensor": {
                    "value": "tf.where(tf.less(self.pred_long, 0.2))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_271": {
                "tensor": {
                    "value": "tf.where(tf.greater(self.pred_long, 0.8))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_272": {
                "variable": {
                    "value": "self.tar1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_mean(-self.p1 * tf.log(tf.clip_by_value(self.p1, 0.005, 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_274": {
                "variable": {
                    "value": "self.tar2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_mean(-self.p2 * tf.log(tf.clip_by_value(self.p2, 0.005, 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_280": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.pred_y, labels=self.y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_293": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_421": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_442": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_454": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_86": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "item_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_91": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=user_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_95": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_99": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "item_feature",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_103": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='item_feature', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='user_feature', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_108": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "user_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_113": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=user_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_117": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_121": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "user_feature",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_125": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='item_feature', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='user_feature', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_column_165": {
                "variable": {
                    "value": "shared_embedding_columns1",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='user', hash_bucket_size=190000)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_column_171": {
                "variable": {
                    "value": "shared_embedding_columns2",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='item', hash_bucket_size=120000)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_column_201": {
                "variable": {
                    "value": "shared_embedding_columns3",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='user_low', hash_bucket_size=190000)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_column_207": {
                "variable": {
                    "value": "shared_embedding_columns4",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='item_low', hash_bucket_size=120000)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_512": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(cov_source, cov_target))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "input_tensor": {
                    "value": "tf.concat([GMF, MLP], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "item_side",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "user_side",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_261": {
                "input_tensor": {
                    "value": "tf.concat([GMF, 5 * tf.multiply(user_feature, item_feature)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_270": {
                "params": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.less(self.pred_long, 0.2)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_271": {
                "params": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.greater(self.pred_long, 0.8)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_272": {
                "input_tensor": {
                    "value": "-self.p1 * tf.log(tf.clip_by_value(self.p1, 0.005, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_275": {
                "input_tensor": {
                    "value": "-self.p2 * tf.log(tf.clip_by_value(self.p2, 0.005, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_280": {
                "logits": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_regularization_loss_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_504": {
                "input_tensor": {
                    "value": "h_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_src - tf.reduce_mean(h_src, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_505": {
                "input_tensor": {
                    "value": "h_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_trg - tf.reduce_mean(h_trg, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_506": {
                "a": {
                    "value": "h_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_src - tf.reduce_mean(h_src, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "h_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_src - tf.reduce_mean(h_src, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_508": {
                "a": {
                    "value": "h_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_trg - tf.reduce_mean(h_trg, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "h_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_trg - tf.reduce_mean(h_trg, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_512": {
                "x": {
                    "value": "tf.subtract(cov_source, cov_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_55": {
                "values": {
                    "value": "[mlp_item_latent_factor, mlp_user_latent_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_72": {
                "values": {
                    "value": "[GMF, MLP]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_regularization_loss_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_261": {
                "values": {
                    "value": "[GMF, 5 * tf.multiply(user_feature, item_feature)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_266": {
                "input_tensor": {
                    "value": "5 * tf.multiply(user_feature, target_item_feature)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_512": {
                "x": {
                    "value": "cov_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (batch_size_s - 1) * tf.matmul(h_src, h_src, transpose_a=True)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "cov_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (batch_size_t - 1) * tf.matmul(h_trg, h_trg, transpose_a=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_76": {
                "input_tensor": {
                    "value": "self.y * tf.log(self.pred_y + 1e-10) + (1 - self.y) * tf.log(1 - self.pred_y + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_79": {
                "t": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "tensor": {
                    "value": "self.resort_label[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_270": {
                "condition": {
                    "value": "tf.less(self.pred_long, 0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_271": {
                "condition": {
                    "value": "tf.greater(self.pred_long, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_273": {
                "x": {
                    "value": "tf.clip_by_value(self.p1, 0.005, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_275": {
                "x": {
                    "value": "tf.clip_by_value(self.p2, 0.005, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_266": {
                "x": {
                    "value": "user_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.user_side(mlp_user_latent_factor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_item_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.item_side(mlp_target_item_latent_factor, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_270": {
                "x": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_271": {
                "x": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_273": {
                "t": {
                    "value": "self.p1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_275": {
                "t": {
                    "value": "self.p2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_261": {
                "x": {
                    "value": "user_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.user_side(mlp_user_latent_factor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.item_side(mlp_item_latent_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_77": {
                "x": {
                    "value": "1 - self.pred_y + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/item_ranking/NeuMF_cikm_que.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "variable": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_45": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_46": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "variable": {
                    "value": "mlp_user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "mlp_item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_50": {
                "variable": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(d, d1, scope='user_low')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(e, e1, scope='item_low')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_52": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_56": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=user_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_59": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_65": {
                "variable": {
                    "value": "MLP",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='item_feature', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='user_feature', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.concat([GMF, MLP], axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_78": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "self.query_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "query_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "self.target_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "self.hot_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hot_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_135": {
                "variable": {
                    "value": "self.long_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "long_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_232": {
                "variable": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(d, d1, scope='user_low')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(e, e1, scope='item_low')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_234": {
                "variable": {
                    "value": "GMF_target",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ],
                        [
                            "layers.input_from_feature_columns(d, d1, scope='user_low')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.input_from_feature_columns(f, e1, scope='item_low')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_265": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.concat([GMF, 5 * tf.multiply(user_feature, item_feature)], axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_266": {
                "variable": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.concat([GMF_target, 5 * tf.multiply(user_feature, target_item_feature)], axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_270": {
                "tensor": {
                    "value": "tf.where(tf.less(self.pred_long, 0.2))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_271": {
                "tensor": {
                    "value": "tf.where(tf.greater(self.pred_long, 0.8))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_272": {
                "variable": {
                    "value": "self.tar1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_mean(-self.p1 * tf.log(tf.clip_by_value(self.p1, 0.005, 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_274": {
                "variable": {
                    "value": "self.tar2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_mean(-self.p2 * tf.log(tf.clip_by_value(self.p2, 0.005, 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_280": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.pred_y, labels=self.y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_292": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_418": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_439": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_450": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_83": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "item_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_88": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=user_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_92": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_96": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "item_feature",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_100": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='item_feature', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='user_feature', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_105": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "user_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_110": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=user_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_114": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_118": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "user_feature",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_122": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='item_feature', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='user_feature', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_column_161": {
                "variable": {
                    "value": "shared_embedding_columns_query",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='query', hash_bucket_size=1300)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_column_172": {
                "variable": {
                    "value": "shared_embedding_columns1",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='user', hash_bucket_size=190000)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_column_178": {
                "variable": {
                    "value": "shared_embedding_columns2",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='item', hash_bucket_size=120000)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_column_209": {
                "variable": {
                    "value": "shared_embedding_columns3",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='user_low', hash_bucket_size=190000)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_column_215": {
                "variable": {
                    "value": "shared_embedding_columns4",
                    "type": "variable",
                    "possible_values": []
                },
                "categorical_column": {
                    "value": "id_feature4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.sparse_column_with_hash_bucket(column_name='item_low', hash_bucket_size=120000)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "combiner": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_508": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(cov_source, cov_target))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "tf.concat([GMF, MLP], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "item_side",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "user_side",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_265": {
                "input_tensor": {
                    "value": "tf.concat([GMF, 5 * tf.multiply(user_feature, item_feature)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_266": {
                "input_tensor": {
                    "value": "tf.concat([GMF_target, 5 * tf.multiply(user_feature, target_item_feature)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_270": {
                "params": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.less(self.pred_long, 0.2)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_271": {
                "params": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.greater(self.pred_long, 0.8)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_272": {
                "input_tensor": {
                    "value": "-self.p1 * tf.log(tf.clip_by_value(self.p1, 0.005, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_275": {
                "input_tensor": {
                    "value": "-self.p2 * tf.log(tf.clip_by_value(self.p2, 0.005, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_280": {
                "logits": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_regularization_loss_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_500": {
                "input_tensor": {
                    "value": "h_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_src - tf.reduce_mean(h_src, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_501": {
                "input_tensor": {
                    "value": "h_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_trg - tf.reduce_mean(h_trg, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_502": {
                "a": {
                    "value": "h_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_src - tf.reduce_mean(h_src, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "h_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_src - tf.reduce_mean(h_src, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_504": {
                "a": {
                    "value": "h_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_trg - tf.reduce_mean(h_trg, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "h_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_trg - tf.reduce_mean(h_trg, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_508": {
                "x": {
                    "value": "tf.subtract(cov_source, cov_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_52": {
                "values": {
                    "value": "[mlp_item_latent_factor, mlp_user_latent_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_69": {
                "values": {
                    "value": "[GMF, MLP]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_regularization_loss_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_265": {
                "values": {
                    "value": "[GMF, 5 * tf.multiply(user_feature, item_feature)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_266": {
                "values": {
                    "value": "[GMF_target, 5 * tf.multiply(user_feature, target_item_feature)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_508": {
                "x": {
                    "value": "cov_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (batch_size_s - 1) * tf.matmul(h_src, h_src, transpose_a=True)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "cov_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (batch_size_t - 1) * tf.matmul(h_trg, h_trg, transpose_a=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_73": {
                "input_tensor": {
                    "value": "self.y * tf.log(self.pred_y + 1e-10) + (1 - self.y) * tf.log(1 - self.pred_y + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_76": {
                "t": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_258": {
                "tensor": {
                    "value": "self.resort_label[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_270": {
                "condition": {
                    "value": "tf.less(self.pred_long, 0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_271": {
                "condition": {
                    "value": "tf.greater(self.pred_long, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_273": {
                "x": {
                    "value": "tf.clip_by_value(self.p1, 0.005, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_275": {
                "x": {
                    "value": "tf.clip_by_value(self.p2, 0.005, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_270": {
                "x": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_271": {
                "x": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_273": {
                "t": {
                    "value": "self.p1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_275": {
                "t": {
                    "value": "self.p2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_265": {
                "x": {
                    "value": "user_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.user_side(mlp_user_latent_factor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.item_side(mlp_item_latent_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_266": {
                "x": {
                    "value": "user_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.user_side(mlp_user_latent_factor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_item_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.item_side(mlp_target_item_latent_factor, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_74": {
                "x": {
                    "value": "1 - self.pred_y + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/item_ranking/bprmf.py": {
        "tensorflow": {
            "placeholder_39": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "rating",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_49": {
                "variable": {
                    "value": "neg_item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(user_latent_factor, item_latent_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "variable": {
                    "value": "self.pred_y_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(user_latent_factor, neg_item_latent_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_57": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_112": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_122": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_51": {
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_52": {
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "neg_item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.neg_item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_54": {
                "input_tensor": {
                    "value": "tf.log(tf.sigmoid(self.pred_y - self.pred_y_neg))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_54": {
                "x": {
                    "value": "tf.sigmoid(self.pred_y - self.pred_y_neg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_55": {
                "t": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_54": {
                "x": {
                    "value": "self.pred_y - self.pred_y_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/item_ranking/cdae.py": {
        "tensorflow": {
            "placeholder_38": {
                "variable": {
                    "value": "self.corrupted_rating_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_item]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.rating_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_item]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, hidden_neuron], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "W_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_neuron, self.num_item], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, hidden_neuron], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_neuron], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "b_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_51": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.corrupted_rating_matrix, W) + tf.nn.embedding_lookup(V, self.user_id) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_52": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(layer_1, W_prime) + b_prime",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_59": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_100": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_110": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "self.corrupted_interact_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_user]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "self.interact_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_user]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_156": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, hidden_neuron], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_157": {
                "variable": {
                    "value": "W_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_neuron, self.num_user], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_158": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, hidden_neuron], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_160": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_neuron], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_161": {
                "variable": {
                    "value": "b_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_164": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(self.corrupted_interact_matrix, W) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_165": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(layer_1, W_prime) + b_prime",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_172": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_213": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_222": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_49": {
                "a": {
                    "value": "self.corrupted_rating_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, hidden_neuron], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_user, hidden_neuron], stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_50": {
                "params": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, hidden_neuron], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item, hidden_neuron], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "a": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(self.corrupted_rating_matrix, W) + tf.nn.embedding_lookup(V, self.user_id) + b)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.matmul(self.corrupted_interact_matrix, W) + b)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_item], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_user], stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_54": {
                "input_tensor": {
                    "value": "self.rating_matrix * tf.log(self.layer_2) + (1 - self.rating_matrix) * tf.log(1 - self.layer_2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_164": {
                "a": {
                    "value": "self.corrupted_interact_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, hidden_neuron], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_user, hidden_neuron], stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_165": {
                "a": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(self.corrupted_rating_matrix, W) + tf.nn.embedding_lookup(V, self.user_id) + b)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.matmul(self.corrupted_interact_matrix, W) + b)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_item], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_user], stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_167": {
                "input_tensor": {
                    "value": "self.interact_matrix * tf.log(self.layer_2) + (1 - self.interact_matrix) * tf.log(1 - self.layer_2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "a": {
                    "value": "self.corrupted_rating_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, hidden_neuron], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_user, hidden_neuron], stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_51": {
                "params": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, hidden_neuron], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item, hidden_neuron], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_57": {
                "t": {
                    "value": "W_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_item], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_user], stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_170": {
                "t": {
                    "value": "W_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_item], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_user], stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_55": {
                "x": {
                    "value": "1 - self.layer_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_168": {
                "x": {
                    "value": "1 - self.layer_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/item_ranking/cml.py": {
        "tensorflow": {
            "placeholder_39": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "variable": {
                    "value": "user_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "item_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_49": {
                "variable": {
                    "value": "neg_item_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "variable": {
                    "value": "self.pred_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.dropout(tf.squared_difference(user_embedding, item_embedding), self.keep_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "variable": {
                    "value": "self.pred_distance_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.dropout(tf.squared_difference(user_embedding, neg_item_embedding), self.keep_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_56": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(self.pred_distance - self.pred_distance_neg + margin, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_58": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_59": {
                "variable": {
                    "value": "self.clip_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.clip_by_norm(P, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_60": {
                "variable": {
                    "value": "self.clip_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.clip_by_norm(Q, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_118": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_128": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_171": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_172": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_174": {
                "variable": {
                    "value": "user_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_175": {
                "variable": {
                    "value": "item_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_176": {
                "variable": {
                    "value": "neg_item_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_178": {
                "variable": {
                    "value": "self.pred_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(user_embedding, item_embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_179": {
                "variable": {
                    "value": "self.pred_distance_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(user_embedding, neg_item_embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_181": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(self.pred_distance - self.pred_distance_neg + margin, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_183": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_184": {
                "variable": {
                    "value": "self.clip_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.clip_by_norm(P, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_185": {
                "variable": {
                    "value": "self.clip_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.clip_by_norm(Q, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_241": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_251": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_52": {
                "x": {
                    "value": "tf.squared_difference(user_embedding, item_embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_54": {
                "x": {
                    "value": "tf.squared_difference(user_embedding, neg_item_embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_56": {
                "x": {
                    "value": "self.pred_distance - self.pred_distance_neg + margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_norm_59": {
                "t": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_norm_60": {
                "t": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squared_difference_178": {
                "x": {
                    "value": "user_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(P, self.user_id)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(Q, self.item_id)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(Q, self.item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_179": {
                "x": {
                    "value": "user_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(P, self.user_id)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "neg_item_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(Q, self.neg_item_id)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(Q, self.neg_item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_181": {
                "x": {
                    "value": "self.pred_distance - self.pred_distance_neg + margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_norm_184": {
                "t": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_norm_185": {
                "t": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=1 / num_factor ** 0.5))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squared_difference_52": {
                "x": {
                    "value": "user_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(P, self.user_id)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(Q, self.item_id)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(Q, self.item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "squared_difference_54": {
                "x": {
                    "value": "user_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(P, self.user_id)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "neg_item_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(Q, self.neg_item_id)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(Q, self.neg_item_id)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/item_ranking/dssm.py": {
        "tensorflow": {
            "placeholder_39": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "rating",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "self.user_side_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "user_side_info",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_45": {
                "variable": {
                    "value": "self.item_side_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "item_side_info",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_50": {
                "variable": {
                    "value": "user_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.user_side_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_51": {
                "variable": {
                    "value": "item_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.item_side_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_52": {
                "variable": {
                    "value": "neg_item_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.item_side_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_54": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "user_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.user_side_info, self.user_id, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "user_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(user_side_info[0])",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_58": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=user_input, units=user_input_dim, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, activation=tf.sigmoid, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_input, units=item_input_dim, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, activation=tf.sigmoid, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dim, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dim, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_66": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dim, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dim, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_70": {
                "variable": {
                    "value": "user_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dim, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dim, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_75": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "item_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.item_side_info, self.item_id, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "item_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(item_side_info[0])",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_79": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=user_input, units=user_input_dim, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, activation=tf.sigmoid, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_input, units=item_input_dim, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, activation=tf.sigmoid, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_83": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dim, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dim, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_87": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dim, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dim, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_91": {
                "variable": {
                    "value": "item_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dim, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dim, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "self.pred_rating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_98": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_99": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_100": {
                "variable": {
                    "value": "neg_item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(user_latent_factor, item_latent_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "variable": {
                    "value": "self.pred_y_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(user_latent_factor, neg_item_latent_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_108": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_163": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_173": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_102": {
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_103": {
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "neg_item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.neg_item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_105": {
                "input_tensor": {
                    "value": "tf.log(tf.sigmoid(self.pred_y - self.pred_y_neg))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_105": {
                "x": {
                    "value": "tf.sigmoid(self.pred_y - self.pred_y_neg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_106": {
                "tensor": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_105": {
                "x": {
                    "value": "self.pred_y - self.pred_y_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/item_ranking/gmf.py": {
        "tensorflow": {
            "placeholder_40": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_49": {
                "variable": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_51": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(GMF, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_57": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_129": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_139": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(user_latent_factor, item_latent_factor)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "input_tensor": {
                    "value": "self.y * tf.log(self.pred_y + 1e-10) + (1 - self.y) * tf.log(1 - self.pred_y + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_55": {
                "t": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_54": {
                "x": {
                    "value": "1 - self.pred_y + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/item_ranking/jrl.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_51": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_52": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_53": {
                "variable": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_55": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(user_latent_factor, item_latent_factor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_58": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=GMF, units=num_factor, kernel_initializer=tf.random_normal_initializer, activation=tf.sigmoid, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_61": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension, activation=tf.sigmoid, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension, activation=tf.sigmoid, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_67": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension, activation=tf.sigmoid, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(output, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_78": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_150": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_160": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_4, units=hidden_dimension, activation=tf.sigmoid, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_regularization_loss_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "input_tensor": {
                    "value": "self.y * tf.log(self.pred_y + 1e-10) + (1 - self.y) * tf.log(1 - self.pred_y + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_76": {
                "t": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_74": {
                "x": {
                    "value": "1 - self.pred_y + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/item_ranking/lrml.py": {
        "tensorflow": {
            "placeholder_90": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "neg_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "self.keep_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor], stddev=init)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_96": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor], stddev=init)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_98": {
                "variable": {
                    "value": "user_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=init), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_99": {
                "variable": {
                    "value": "item_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=init), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_100": {
                "variable": {
                    "value": "neg_item_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=init), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_127": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(self.pred_distance - self.pred_distance_neg + margin, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_129": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_130": {
                "variable": {
                    "value": "self.clip_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=init), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.clip_by_norm(P, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_131": {
                "variable": {
                    "value": "self.clip_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=init), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.clip_by_norm(Q, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_189": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_199": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_118": {
                "variable": {
                    "value": "pos_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(energy_pos), 1) + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_119": {
                "variable": {
                    "value": "neg_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(energy_neg), 1) + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "lrml",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "key_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "key_matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_dim, k]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "memories",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "memory",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[_dim, k]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "key_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "user_item_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a * b",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "key_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('key_matrix', [_dim, k], initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "key_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "key_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(user_item_key, key_matrix)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(key_attention)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_attention, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_121": {
                "variable": {
                    "value": "pos_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(energy_pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_122": {
                "variable": {
                    "value": "neg_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(energy_neg)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_127": {
                "x": {
                    "value": "self.pred_distance - self.pred_distance_neg + margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_norm_130": {
                "t": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor], stddev=init), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_norm_131": {
                "t": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor], stddev=init), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "key_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(user_item_key, key_matrix)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(key_attention)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_attention, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "memories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('memory', [_dim, k], initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_104": {
                "mean": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / num_factor ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.global_variables_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_79": {
                "variable": {
                    "value": "key_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(user_item_key, key_matrix)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(key_attention)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_attention, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(key_attention, memories)",
                            "Call"
                        ],
                        [
                            "key_attention * memories",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(relation, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_normal_initializer_109": {
                "mean": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / num_factor ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.global_variables_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "tf.square(energy_pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_119": {
                "input_tensor": {
                    "value": "tf.square(energy_neg)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_121": {
                "x": {
                    "value": "energy_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item_embedding - (user_embedding + selected_memory)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_122": {
                "x": {
                    "value": "energy_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neg_item_embedding - (user_embedding + selected_memory_neg)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_118": {
                "x": {
                    "value": "energy_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item_embedding - (user_embedding + selected_memory)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_119": {
                "x": {
                    "value": "energy_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neg_item_embedding - (user_embedding + selected_memory_neg)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/item_ranking/mlp.py": {
        "tensorflow": {
            "placeholder_40": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "variable": {
                    "value": "mlp_user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "mlp_item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_50": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_54": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_57": {
                "variable": {
                    "value": "MLP",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(MLP, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_70": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_142": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_152": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_61": {
                "input_tensor": {
                    "value": "MLP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_50": {
                "values": {
                    "value": "[mlp_item_latent_factor, mlp_user_latent_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_regularization_loss_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "input_tensor": {
                    "value": "self.y * tf.log(self.pred_y + 1e-10) + (1 - self.y) * tf.log(1 - self.pred_y + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_68": {
                "t": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_66": {
                "x": {
                    "value": "1 - self.pred_y + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/item_ranking/neumf.py": {
        "tensorflow": {
            "placeholder_40": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_50": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_51": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_52": {
                "variable": {
                    "value": "mlp_user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_53": {
                "variable": {
                    "value": "mlp_item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_55": {
                "variable": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_57": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_61": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_67": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_70": {
                "variable": {
                    "value": "MLP",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_74": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.concat([GMF, MLP], axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_83": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_155": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_165": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "input_tensor": {
                    "value": "tf.concat([GMF, MLP], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_57": {
                "values": {
                    "value": "[mlp_item_latent_factor, mlp_user_latent_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_74": {
                "values": {
                    "value": "[GMF, MLP]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_regularization_loss_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_78": {
                "input_tensor": {
                    "value": "self.y * tf.log(self.pred_y + 1e-10) + (1 - self.y) * tf.log(1 - self.pred_y + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_81": {
                "t": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_79": {
                "x": {
                    "value": "1 - self.pred_y + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/item_ranking/neumf_my.py": {
        "tensorflow": {
            "placeholder_40": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_50": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_51": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_52": {
                "variable": {
                    "value": "mlp_user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_53": {
                "variable": {
                    "value": "mlp_item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_55": {
                "variable": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_57": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_61": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_64": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_67": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_70": {
                "variable": {
                    "value": "MLP",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_74": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.concat([GMF, MLP], axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_86": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_158": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_168": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "input_tensor": {
                    "value": "tf.concat([GMF, MLP], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_regularization_loss_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_57": {
                "values": {
                    "value": "[mlp_item_latent_factor, mlp_user_latent_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_74": {
                "values": {
                    "value": "[GMF, MLP]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_78": {
                "input_tensor": {
                    "value": "self.y * tf.log(self.pred_y + 1e-10) + (1 - self.y) * tf.log(1 - self.pred_y + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_79": {
                "x": {
                    "value": "1 - self.pred_y + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/item_ranking/neumf_my_tail.py": {
        "tensorflow": {
            "placeholder_33": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_43": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_44": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_45": {
                "variable": {
                    "value": "mlp_user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_46": {
                "variable": {
                    "value": "mlp_item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_48": {
                "variable": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_50": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_54": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=user_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_57": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_60": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_63": {
                "variable": {
                    "value": "MLP",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='item_feature', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='user_feature', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_67": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.concat([GMF, MLP], axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_76": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_127": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_128": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "self.hot_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "self.long_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_136": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_137": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_139": {
                "variable": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_140": {
                "variable": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor_mlp])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_142": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_143": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_144": {
                "variable": {
                    "value": "mlp_user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_145": {
                "variable": {
                    "value": "mlp_item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_148": {
                "variable": {
                    "value": "mlp_hot_item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.hot_item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_149": {
                "variable": {
                    "value": "mlp_long_item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.mlp_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.long_item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_151": {
                "variable": {
                    "value": "GMF",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_163": {
                "variable": {
                    "value": "self.pred_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.concat([GMF, 5 * tf.multiply(user_feature, item_feature)], axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_164": {
                "variable": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.concat([GMF, 5 * tf.multiply(user_feature, long_item_feature)], axis=1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "tf.where(tf.less(self.pred_long, 0.2))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "tensor": {
                    "value": "tf.where(tf.greater(self.pred_long, 0.8))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_170": {
                "variable": {
                    "value": "self.tar1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_mean(-self.p1 * tf.log(tf.clip_by_value(self.p1, 0.005, 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_172": {
                "variable": {
                    "value": "self.tar2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_mean(-self.p2 * tf.log(tf.clip_by_value(self.p2, 0.005, 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_179": {
                "variable": {
                    "value": "self.DAloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "KMMD(hot_item_feature, long_item_feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_184": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_320": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_335": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_346": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_81": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "item_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_86": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=user_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_90": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_94": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "item_feature",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_98": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='item_feature', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='user_feature', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_103": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "user_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_factor_mlp * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_108": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=tf.concat([mlp_item_latent_factor, mlp_user_latent_factor], axis=1), units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=item_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=user_emb, units=num_factor_mlp * 2, kernel_initializer=tf.random_normal_initializer, activation=tf.nn.relu, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_112": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension * 8, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "l3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_116": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension * 4, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='l3', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "user_feature",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_normalize_120": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension * 2, activation=tf.nn.relu, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='item_feature', reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=layer_3, units=128, activation=None, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), name='user_feature', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_404": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(cov_source, cov_target))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "tf.concat([GMF, MLP], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "item_side",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "user_side",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_163": {
                "input_tensor": {
                    "value": "tf.concat([GMF, 5 * tf.multiply(user_feature, item_feature)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_164": {
                "input_tensor": {
                    "value": "tf.concat([GMF, 5 * tf.multiply(user_feature, long_item_feature)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_168": {
                "params": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.less(self.pred_long, 0.2)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_169": {
                "params": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.greater(self.pred_long, 0.8)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_170": {
                "input_tensor": {
                    "value": "-self.p1 * tf.log(tf.clip_by_value(self.p1, 0.005, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_173": {
                "input_tensor": {
                    "value": "-self.p2 * tf.log(tf.clip_by_value(self.p2, 0.005, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_396": {
                "input_tensor": {
                    "value": "h_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_src - tf.reduce_mean(h_src, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_397": {
                "input_tensor": {
                    "value": "h_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_trg - tf.reduce_mean(h_trg, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_398": {
                "a": {
                    "value": "h_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_src - tf.reduce_mean(h_src, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "h_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_src - tf.reduce_mean(h_src, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_400": {
                "a": {
                    "value": "h_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_trg - tf.reduce_mean(h_trg, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "h_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_trg - tf.reduce_mean(h_trg, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_404": {
                "x": {
                    "value": "tf.subtract(cov_source, cov_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_50": {
                "values": {
                    "value": "[mlp_item_latent_factor, mlp_user_latent_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_67": {
                "values": {
                    "value": "[GMF, MLP]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_regularization_loss_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_163": {
                "values": {
                    "value": "[GMF, 5 * tf.multiply(user_feature, item_feature)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_164": {
                "values": {
                    "value": "[GMF, 5 * tf.multiply(user_feature, long_item_feature)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_regularization_loss_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "subtract_404": {
                "x": {
                    "value": "cov_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (batch_size_s - 1) * tf.matmul(h_src, h_src, transpose_a=True)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "cov_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (batch_size_t - 1) * tf.matmul(h_trg, h_trg, transpose_a=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_71": {
                "input_tensor": {
                    "value": "self.y * tf.log(self.pred_y + 1e-10) + (1 - self.y) * tf.log(1 - self.pred_y + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_74": {
                "t": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_168": {
                "condition": {
                    "value": "tf.less(self.pred_long, 0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_169": {
                "condition": {
                    "value": "tf.greater(self.pred_long, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_171": {
                "x": {
                    "value": "tf.clip_by_value(self.p1, 0.005, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_173": {
                "x": {
                    "value": "tf.clip_by_value(self.p2, 0.005, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_175": {
                "input_tensor": {
                    "value": "self.y * tf.log(self.pred_y + 1e-10) + (1 - self.y) * tf.log(1 - self.pred_y + 1e-10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_178": {
                "t": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_168": {
                "x": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_169": {
                "x": {
                    "value": "self.pred_long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_171": {
                "t": {
                    "value": "self.p1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_173": {
                "t": {
                    "value": "self.p2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_163": {
                "x": {
                    "value": "user_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.user_side(mlp_user_latent_factor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.item_side(mlp_item_latent_factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_164": {
                "x": {
                    "value": "user_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.user_side(mlp_user_latent_factor)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "long_item_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.item_side(mlp_long_item_latent_factor, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_72": {
                "x": {
                    "value": "1 - self.pred_y + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_176": {
                "x": {
                    "value": "1 - self.pred_y + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/rating_prediction/autorec.py": {
        "tensorflow": {
            "placeholder_40": {
                "variable": {
                    "value": "self.rating_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_user, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.rating_matrix_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_user, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.keep_rate_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.keep_rate_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_neuron, self.num_user], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, hidden_neuron], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_neuron], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sigmoid(tf.expand_dims(mu, 1) + tf.matmul(V, self.rating_matrix))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_rate_net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_56": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_96": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_107": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "self.rating_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_item, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self.rating_matrix_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_item, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_141": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_neuron, self.num_item], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, hidden_neuron], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_144": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_neuron], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_145": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_146": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(mu, 1) + tf.matmul(V, self.rating_matrix)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_151": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_190": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_199": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_50": {
                "x": {
                    "value": "tf.expand_dims(mu, 1) + tf.matmul(V, self.rating_matrix)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "a": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, hidden_neuron], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item, hidden_neuron], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.sigmoid(tf.expand_dims(mu, 1) + tf.matmul(V, self.rating_matrix)), self.keep_rate_net)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.expand_dims(mu, 1) + tf.matmul(V, self.rating_matrix))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_52": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_53": {
                "input_tensor": {
                    "value": "tf.square(tf.norm(tf.multiply(self.rating_matrix - self.layer_2, self.rating_matrix_mask)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_147": {
                "a": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, hidden_neuron], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item, hidden_neuron], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.sigmoid(tf.expand_dims(mu, 1) + tf.matmul(V, self.rating_matrix)), self.keep_rate_net)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.expand_dims(mu, 1) + tf.matmul(V, self.rating_matrix))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_147": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([self.num_item], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_148": {
                "input_tensor": {
                    "value": "tf.square(tf.norm(tf.multiply(self.rating_matrix - self.layer_2, self.rating_matrix_mask)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_53": {
                "x": {
                    "value": "tf.norm(tf.multiply(self.rating_matrix - self.layer_2, self.rating_matrix_mask))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_146": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "a": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_user], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_item], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.rating_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_148": {
                "x": {
                    "value": "tf.norm(tf.multiply(self.rating_matrix - self.layer_2, self.rating_matrix_mask))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_50": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_user], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_item], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.rating_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_54": {
                "tensor": {
                    "value": "tf.multiply(self.rating_matrix - self.layer_2, self.rating_matrix_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_55": {
                "x": {
                    "value": "tf.norm(V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_149": {
                "tensor": {
                    "value": "tf.multiply(self.rating_matrix - self.layer_2, self.rating_matrix_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_150": {
                "x": {
                    "value": "tf.norm(V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_54": {
                "x": {
                    "value": "self.rating_matrix - self.layer_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.rating_matrix_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_55": {
                "tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_user], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_item], stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_149": {
                "x": {
                    "value": "self.rating_matrix - self.layer_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.rating_matrix_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_150": {
                "tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_user], stddev=0.01))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([hidden_neuron, self.num_item], stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/rating_prediction/mf.py": {
        "tensorflow": {
            "placeholder_40": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "rating",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "self.B_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "self.B_I",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_50": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_51": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_52": {
                "variable": {
                    "value": "user_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.B_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_53": {
                "variable": {
                    "value": "item_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.B_I",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_103": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_104": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_114": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "input_tensor": {
                    "value": "tf.square(self.y - self.pred_rating)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_55": {
                "input_tensor": {
                    "value": "tf.multiply(user_latent_factor, item_latent_factor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_97": {
                "x": {
                    "value": "self.y - self.pred_rating",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_55": {
                "x": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.P, self.user_id)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_99": {
                "t": {
                    "value": "self.B_U",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/rating_prediction/nnmf.py": {
        "tensorflow": {
            "placeholder_41": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "rating",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor_1], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor_1], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor_2], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor_2], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_51": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(P, self.user_id), tf.nn.embedding_lookup(Q, self.item_id), tf.multiply(tf.nn.embedding_lookup(U, self.user_id), tf.nn.embedding_lookup(V, self.item_id))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_57": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=[tf.nn.embedding_lookup(P, self.user_id), tf.nn.embedding_lookup(Q, self.item_id), tf.multiply(tf.nn.embedding_lookup(U, self.user_id), tf.nn.embedding_lookup(V, self.item_id))], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2 * num_factor_1 + num_factor_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_61": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=input, units=2 * num_factor_1 + num_factor_2, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, activation=tf.sigmoid, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_65": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_69": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_73": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "self.pred_rating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_4, units=1, activation=None, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_84": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_121": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_134": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "input_tensor": {
                    "value": "tf.square(self.y - self.pred_rating)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_regularization_loss_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "embedding_lookup_51": {
                "params": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor_1], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_52": {
                "params": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor_1], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_53": {
                "x": {
                    "value": "tf.nn.embedding_lookup(U, self.user_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.embedding_lookup(V, self.item_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_81": {
                "x": {
                    "value": "self.y - self.pred_rating",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_83": {
                "tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor_2], stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_53": {
                "params": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor_2], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_54": {
                "params": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor_2], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/rating_prediction/nrr.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "rating",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor_user], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor_item], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([d])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_52": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_user, num_factor_user], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_53": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor_item], stddev=0.01))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "W_User",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([num_factor_user, d], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_56": {
                "variable": {
                    "value": "W_Item",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([num_factor_item, d], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_60": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(user_latent_factor, W_User) + tf.matmul(item_latent_factor, W_Item) + b",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_63": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=input, units=d, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, activation=tf.sigmoid, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_67": {
                "variable": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_1, units=hidden_dimension, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_71": {
                "variable": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_2, units=hidden_dimension, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_75": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_3, units=hidden_dimension, activation=tf.sigmoid, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "self.pred_rating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=layer_4, units=1, activation=None, bias_initializer=tf.random_normal_initializer, kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "variable": {
                    "value": "reg_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_86": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_123": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_137": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_82": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "a": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(V, self.item_id)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_Item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([num_factor_item, d], stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "tf.square(self.y - self.pred_rating)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_regularization_loss_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_83": {
                "x": {
                    "value": "self.y - self.pred_rating",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_85": {
                "tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([self.num_item, num_factor_item], stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/seq_rec/AttRec.py": {
        "tensorflow": {
            "placeholder_48": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.item_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, L]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_seq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_T]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.item_id_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_T * self.num_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id_neg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.isTrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_64": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.num_user, num_factor], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_65": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.num_user, num_factor * 1], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.num_item, num_factor], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.num_item, num_factor], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([self.num_item, num_factor], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_71": {
                "variable": {
                    "value": "item_latent_factor_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, self.num_factor * (1 + 1)], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_103": {
                "variable": {
                    "value": "self.clip_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_norm(self.P, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_104": {
                "variable": {
                    "value": "self.clip_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_norm(self.Q, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_105": {
                "variable": {
                    "value": "self.clip_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_norm(self.V, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_106": {
                "variable": {
                    "value": "self.clip_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_norm(self.X, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_110": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "embedding_lookup_126": {
                "variable": {
                    "value": "w_items",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "embedding_lookup_127": {
                "variable": {
                    "value": "w_items_2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "embedding_lookup_142": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_145": {
                "variable": {
                    "value": "item_latent_factor_2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_177": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query, key, transpose_b=True) / np.sqrt(self.num_factor)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_178": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.L, self.L]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, dim=-1, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "weights * mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, item_seq)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(self.Q, item_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_186": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weights, item_latent_factor)",
                            "Call"
                        ],
                        [
                            "self.multihead_attention(queries=query, keys=key, value=item_latent_factor, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_190": {
                "variable": {
                    "value": "w_items",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "embedding_lookup_191": {
                "variable": {
                    "value": "w_items_2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "embedding_lookup_192": {
                "variable": {
                    "value": "w_items_3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "user_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_193": {
                "variable": {
                    "value": "self.bias_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_199": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self.neg_items[u]",
                            "Subscript"
                        ],
                        [
                            "x + signal",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_205": {
                "variable": {
                    "value": "self.user_latent_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "user_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_211": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "u_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_213": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(u_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack(u_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_215": {
                "variable": {
                    "value": "self.user_specific_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "user_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_219": {
                "variable": {
                    "value": "u_2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "u_tmp_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_221": {
                "variable": {
                    "value": "u_2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(u_tmp_2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(u_2, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_242": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_243": {
                "variable": {
                    "value": "item_latent_factor_2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_248": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weights, item_latent_factor)",
                            "Call"
                        ],
                        [
                            "self.multihead_attention(queries=query, keys=key, value=item_latent_factor, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_251": {
                "variable": {
                    "value": "query_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "query_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=query_2, name='linear_project1', units=self.num_factor, activation=None, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "linear_project1",
                    "type": "str",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_256": {
                "variable": {
                    "value": "key_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "key_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=key_2, name='linear_project1', units=self.num_factor, activation=None, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "linear_project1",
                    "type": "str",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_264": {
                "variable": {
                    "value": "weights_2",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_2, key_2, transpose_b=True) / np.sqrt(self.num_factor)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_265": {
                "variable": {
                    "value": "mask_2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.L, self.L]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_268": {
                "variable": {
                    "value": "out_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.matmul(weights_2, out)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_277": {
                "variable": {
                    "value": "w_items",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "embedding_lookup_278": {
                "variable": {
                    "value": "w_items_2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "embedding_lookup_279": {
                "variable": {
                    "value": "b_items",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "embedding_lookup_280": {
                "variable": {
                    "value": "item_specific_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_286": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_289": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self.neg_items[u]",
                            "Subscript"
                        ],
                        [
                            "x + signal",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_294": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "u_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_296": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(u_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack(u_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_308": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_405": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_425": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_150": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=query, name='linear_project', units=self.num_factor, activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=query, name='linear_project', units=self.num_factor, activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "linear_project",
                    "type": "str",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_156": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=key, name='linear_project', units=self.num_factor, activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=key, name='linear_project', units=self.num_factor, activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "linear_project",
                    "type": "str",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_163": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=query, name='linear_project', units=self.num_factor, activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=query, name='linear_project', units=self.num_factor, activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "linear_project",
                    "type": "str",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_168": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=key, name='linear_project', units=self.num_factor, activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=key, name='linear_project', units=self.num_factor, activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "linear_project",
                    "type": "str",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_232": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * tf.reduce_sum(tf.nn.dropout(tf.square(w_items - u), 1), 2) + (1 - self.alpha) * tf.reduce_sum(tf.nn.dropout(tf.square(x - w_items_2), 1), 2)",
                            "BinOp"
                        ],
                        [
                            "self.alpha * tf.reduce_sum(tf.square(w_items - u), 2) + (1 - self.alpha) * tf.reduce_sum(tf.square(x - w_items_2), 2)",
                            "BinOp"
                        ],
                        [
                            "0.2 * tf.reduce_sum(tf.square(w_items - u), 2) + 0.8 * tf.reduce_sum(tf.square(x - w_items_2), 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_303": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * tf.reduce_sum(tf.nn.dropout(tf.square(w_items - u), 1), 2) + (1 - self.alpha) * tf.reduce_sum(tf.nn.dropout(tf.square(x - w_items_2), 1), 2)",
                            "BinOp"
                        ],
                        [
                            "self.alpha * tf.reduce_sum(tf.square(w_items - u), 2) + (1 - self.alpha) * tf.reduce_sum(tf.square(x - w_items_2), 2)",
                            "BinOp"
                        ],
                        [
                            "0.2 * tf.reduce_sum(tf.square(w_items - u), 2) + 0.8 * tf.reduce_sum(tf.square(x - w_items_2), 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_422": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_426": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_493": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_506": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_507": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, tf.mod(channels, 2)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_508": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, length, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_531": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_532": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(params_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_533": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones(params_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_545": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "queries.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "[400",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "project_q",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_549": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "queries.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "[400",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "project_k",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_553": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "queries.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "[400",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "project_v",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_558": {
                "variable": {
                    "value": "Q_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(Q, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_559": {
                "variable": {
                    "value": "K_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(K, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_560": {
                "variable": {
                    "value": "V_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(value, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_563": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Q_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(Q, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(K_, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_569": {
                "variable": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tf.reduce_sum(keys, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_570": {
                "variable": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(tf.reduce_sum(keys, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_heads, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_571": {
                "variable": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(key_masks, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(queries)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_575": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(key_masks, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(outputs) * (-2 ** 32 + 1)",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(masks) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "self.normalize(outputs, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_586": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "self.normalize(outputs, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_588": {
                "variable": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tf.reduce_sum(queries, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_589": {
                "variable": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(tf.reduce_sum(queries, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.tile(query_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(query_masks, -1), [1, 1, tf.shape(keys)[1]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_heads, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_590": {
                "variable": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(query_masks, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, tf.shape(keys)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_593": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "self.normalize(outputs, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "tf.convert_to_tensor(is_training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_595": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "self.normalize(outputs, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(value, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_597": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(outputs, num_heads, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_625": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_632": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_679": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_682": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_685": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [prepad, postpad]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_64": {
                "shape": {
                    "value": "[self.num_user, num_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_65": {
                "shape": {
                    "value": "[self.num_user, num_factor * 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_66": {
                "shape": {
                    "value": "[self.num_item, num_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_67": {
                "shape": {
                    "value": "[self.num_item, num_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_68": {
                "shape": {
                    "value": "[self.num_item, num_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_norm_103": {
                "t": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_norm_104": {
                "t": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_norm_105": {
                "t": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_norm_106": {
                "t": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_174": {
                "a": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=query, name='linear_project', units=self.num_factor, activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=query, name='linear_project', units=self.num_factor, activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=key, name='linear_project', units=self.num_factor, activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=key, name='linear_project', units=self.num_factor, activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "shape": {
                    "value": "[self.L]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_263": {
                "a": {
                    "value": "query_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=query_2, name='linear_project1', units=self.num_factor, activation=None, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=key_2, name='linear_project1', units=self.num_factor, activation=None, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), reuse=tf.AUTO_REUSE, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_266": {
                "shape": {
                    "value": "[self.L]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_268": {
                "a": {
                    "value": "weights_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits_2, name='attention_weights1')",
                            "Call"
                        ],
                        [
                            "weights_2 * mask_2",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(weights, item_latent_factor)",
                            "Call"
                        ],
                        [
                            "self.multihead_attention(queries=query, keys=key, value=item_latent_factor, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(out, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_490": {
                "name": {
                    "value": "add_timing_signal",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_527": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ln'",
                            "Method Argument"
                        ],
                        [
                            "'multihead_attention'",
                            "Method Argument"
                        ],
                        [
                            "'multihead_attention'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_540": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ln'",
                            "Method Argument"
                        ],
                        [
                            "'multihead_attention'",
                            "Method Argument"
                        ],
                        [
                            "'multihead_attention'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_579": {
                "variable": {
                    "value": "diag_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_dense_580": {
                "variable": {
                    "value": "tril",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_581": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tril, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(outputs)[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_584": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(key_masks, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(outputs) * (-2 ** 32 + 1)",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(masks) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "self.normalize(outputs, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_621": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'ln'",
                            "Method Argument"
                        ],
                        [
                            "'multihead_attention'",
                            "Method Argument"
                        ],
                        [
                            "'multihead_attention'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_668": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self.neg_items[u]",
                            "Subscript"
                        ],
                        [
                            "x + signal",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_674": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_687": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_689": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_97": {
                "input_tensor": {
                    "value": "tf.maximum(self.target_prediction - self.negative_prediction + 0.5, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_regularization_loss_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_299": {
                "input_tensor": {
                    "value": "tf.square(x - w_items_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_491": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self.neg_items[u]",
                            "Subscript"
                        ],
                        [
                            "x + signal",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_492": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self.neg_items[u]",
                            "Subscript"
                        ],
                        [
                            "x + signal",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_500": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_504": {
                "input": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.range(length))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.range(length))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_505": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ],
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_532": {
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_533": {
                "shape": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "split_558": {
                "value": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(queries, num_units, name='project_q', activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_559": {
                "value": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(keys, num_units, name='project_k', activation=tf.nn.relu, use_bias=False, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_560": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_563": {
                "a": {
                    "value": "K_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(K, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_569": {
                "x": {
                    "value": "tf.reduce_sum(keys, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_571": {
                "input": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(tf.reduce_sum(keys, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_573": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "self.normalize(outputs, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_575": {
                "x": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(tf.reduce_sum(keys, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_588": {
                "x": {
                    "value": "tf.reduce_sum(queries, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_590": {
                "input": {
                    "value": "query_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(tf.reduce_sum(queries, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.tile(query_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(query_masks, -1), [1, 1, tf.shape(keys)[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_597": {
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "self.normalize(outputs, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_672": {
                "x": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // (num_dims * 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_678": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self.neg_items[u]",
                            "Subscript"
                        ],
                        [
                            "x + signal",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_680": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ],
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_97": {
                "x": {
                    "value": "self.target_prediction - self.negative_prediction + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_loss_99": {
                "t": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_226": {
                "input_tensor": {
                    "value": "tf.nn.dropout(tf.square(x - w_items_2), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_228": {
                "input_tensor": {
                    "value": "tf.square(x - w_items_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_299": {
                "x": {
                    "value": "x - w_items_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_498": {
                "x": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // (num_dims * 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_506": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_506": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_569": {
                "input_tensor": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_581": {
                "input": {
                    "value": "tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.linalg.LinearOperatorTriL(diag_vals).to_dense()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_583": {
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tril, 0), [tf.shape(outputs)[0], 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_584": {
                "x": {
                    "value": "key_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.abs(tf.reduce_sum(keys, axis=-1)))",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_588": {
                "input_tensor": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_593": {
                "value": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_675": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_682": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_682": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_226": {
                "x": {
                    "value": "tf.square(x - w_items_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_228": {
                "x": {
                    "value": "w_items - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_229": {
                "x": {
                    "value": "x - w_items_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_501": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_507": {
                "x1": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_571": {
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_590": {
                "input": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_226": {
                "x": {
                    "value": "x - w_items_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_581": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(key_masks, 0), paddings, outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate))",
                            "Call"
                        ],
                        [
                            "self.normalize(outputs, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/seq_rec/Caser.py": {
        "tensorflow": {
            "placeholder_47": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.item_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, L]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_seq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_T]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.item_id_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_T * self.num_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id_neg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.isTrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor * self.L], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_62": {
                "variable": {
                    "value": "self.user_specific_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_63": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.item_seq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_64": {
                "variable": {
                    "value": "item_latent_factor_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_65": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, self.num_factor * 2], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_85": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[out_v, out_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_165": {
                "variable": {
                    "value": "self.w_items",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "embedding_lookup_166": {
                "variable": {
                    "value": "self.b_items",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "dense_168": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(values=[out_v, out_h], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_184": {
                "variable": {
                    "value": "self.user_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[z, user_latent_factor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_188": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_190": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self.neg_items[u]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_218": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_280": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_299": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_118": {
                "variable": {
                    "value": "out_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.conv2d(inputs=tf.expand_dims(item_latent_factor, 3), filters=self.n_v, kernel_size=(self.L, 1), padding='valid', kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), data_format='channels_last', reuse=tf.AUTO_REUSE, name='Convv')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "out_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.layers.conv2d(inputs=tf.expand_dims(item_latent_factor, 3), filters=self.n_v, kernel_size=(self.L, 1), padding='valid', kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), data_format='channels_last', reuse=tf.AUTO_REUSE, name='Convv'), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(out_v, [-1, self.fc1_dim_v])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.fc1_dim_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_154": {
                "variable": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "out_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_296": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_300": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_regularization_loss_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.squeeze(tf.layers.conv2d(inputs=tf.expand_dims(item_latent_factor, 3), filters=self.n_h, kernel_size=(i, self.num_factor), padding='valid', kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), data_format='channels_last', reuse=tf.AUTO_REUSE, name='Convh' + str(i)), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_149": {
                "variable": {
                    "value": "pool_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.max_pooling1d(conv_out, [np.shape(conv_out)[1]], data_format='channels_last', padding='valid', strides=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_192": {
                "input_tensor": {
                    "value": "tf.multiply(x, self.w_items)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_118": {
                "inputs": {
                    "value": "tf.expand_dims(item_latent_factor, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.n_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.L, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Convv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_192": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "self.neg_items[u]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.w_items",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_79": {
                "input_tensor": {
                    "value": "tf.log(tf.sigmoid(self.target_prediction) + 1e-10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "input": {
                    "value": "tf.layers.conv2d(inputs=tf.expand_dims(item_latent_factor, 3), filters=self.n_h, kernel_size=(i, self.num_factor), padding='valid', kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), data_format='channels_last', reuse=tf.AUTO_REUSE, name='Convh' + str(i))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pooling1d_150": {
                "inputs": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.squeeze(tf.layers.conv2d(inputs=tf.expand_dims(item_latent_factor, 3), filters=self.n_h, kernel_size=(i, self.num_factor), padding='valid', kernel_initializer=tf.random_normal_initializer, kernel_regularizer=tf.contrib.layers.l2_regularizer(scale=self.reg_rate), data_format='channels_last', reuse=tf.AUTO_REUSE, name='Convh' + str(i)), 2))",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[np.shape(conv_out)[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_80": {
                "x": {
                    "value": "1 - tf.sigmoid(self.negative_prediction) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_81": {
                "t": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_118": {
                "input": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_seq)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_135": {
                "inputs": {
                    "value": "tf.expand_dims(item_latent_factor, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.n_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(i, self.num_factor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(scale=self.reg_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'Convh' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_79": {
                "x": {
                    "value": "tf.sigmoid(self.target_prediction) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_135": {
                "input": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, self.item_seq)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_79": {
                "x": {
                    "value": "self.target_prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "x": {
                    "value": "self.negative_prediction",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/seq_rec/PRME.py": {
        "tensorflow": {
            "placeholder_48": {
                "variable": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.item_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, L]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_seq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_T]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.item_id_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id_test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.neg_item_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_T * self.num_neg]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_id_neg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.isTrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_user, num_factor * 1], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([self.num_item, num_factor], stddev=0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_62": {
                "variable": {
                    "value": "user_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_63": {
                "variable": {
                    "value": "self.user_specific_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_89": {
                "variable": {
                    "value": "self.clip_P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_norm(self.P, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_90": {
                "variable": {
                    "value": "self.clip_Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_norm(self.Q, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_91": {
                "variable": {
                    "value": "self.clip_V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_norm(self.V, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_92": {
                "variable": {
                    "value": "self.clip_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.clip_by_norm(self.X, norm_clip_value, axes=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_98": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_106": {
                "variable": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_seq",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "item_latent_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.Q, item_seq)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_110": {
                "variable": {
                    "value": "w_items",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "embedding_lookup_111": {
                "variable": {
                    "value": "w_items_2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "item_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[i] for i in item_id]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(x_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "u_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_127": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(u_tmp)",
                            "Call"
                        ],
                        [
                            "tf.transpose(u, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_168": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_226": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_246": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_131": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2 * tf.reduce_sum(tf.square(w_items - u), 2) + 0.8 * tf.reduce_sum(tf.square(x - w_items_2), 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_243": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_247": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_norm_89": {
                "t": {
                    "value": "self.P",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_norm_90": {
                "t": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_norm_91": {
                "t": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_norm_92": {
                "t": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "norm_clip_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "input_tensor": {
                    "value": "tf.log(tf.sigmoid(-self.target_prediction + self.negative_prediction))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_129": {
                "input_tensor": {
                    "value": "tf.square(x - w_items_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_73": {
                "x": {
                    "value": "tf.sigmoid(-self.target_prediction + self.negative_prediction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_74": {
                "t": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_129": {
                "x": {
                    "value": "x - w_items_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "x": {
                    "value": "-self.target_prediction + self.negative_prediction",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test/KMMD.py": {
        "tensorflow": {
            "matmul_19": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * tf.expand_dims(sigmas, 1))",
                            "BinOp"
                        ],
                        [
                            "1.0 / (2.0 * tf.expand_dims(sigmas, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(dist, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_24": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kernel(x, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_28": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cost > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(kernel(x, x))",
                            "Call"
                        ],
                        [
                            "cost - 2 * tf.reduce_mean(kernel(x, y))",
                            "BinOp"
                        ],
                        [
                            "tf.where(cost > 0, cost, 0, name='value')",
                            "Call"
                        ],
                        [
                            "maximum_mean_discrepancy(Xs, Xt, kernel=gaussian_kernel)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * tf.expand_dims(sigmas, 1))",
                            "BinOp"
                        ],
                        [
                            "1.0 / (2.0 * tf.expand_dims(sigmas, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(dist, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_13": {
                "a": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "tensor": {
                    "value": "tf.reduce_sum(tf.exp(-s), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_25": {
                "input_tensor": {
                    "value": "kernel(y, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "tensor": {
                    "value": "tf.reduce_sum(tf.exp(-s), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_12": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_19": {
                "tensor": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_pairwise_distances(x, y)",
                            "Call"
                        ],
                        [
                            "Cal_pairwise_dist(X, Y)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_20": {
                "input_tensor": {
                    "value": "tf.exp(-s)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_20": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_pairwise_distances(x, y)",
                            "Call"
                        ],
                        [
                            "Cal_pairwise_dist(X, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_26": {
                "input_tensor": {
                    "value": "kernel(x, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "tensor": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_pairwise_distances(x, y)",
                            "Call"
                        ],
                        [
                            "Cal_pairwise_dist(X, Y)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "tf.exp(-s)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_51": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_pairwise_distances(x, y)",
                            "Call"
                        ],
                        [
                            "Cal_pairwise_dist(X, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_12": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_17": {
                "input": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1e-06, 1e-05, 0.0001, 0.001, 0.01, 0.1, 1, 5, 10, 15, 20, 25, 30, 35, 100, 1000.0, 10000.0, 100000.0, 1000000.0]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_20": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_41": {
                "value": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1e-06, 1e-05, 0.0001, 0.001, 0.01, 0.1, 1, 5, 10, 15, 20, 25, 30, 35, 100, 1000.0, 10000.0, 100000.0, 1000000.0]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_48": {
                "input": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1e-06, 1e-05, 0.0001, 0.001, 0.01, 0.1, 1, 5, 10, 15, 20, 25, 30, 35, 100, 1000.0, 10000.0, 100000.0, 1000000.0]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_51": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_13": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/center_loss.py": {
        "tensorflow": {
            "reshape_9": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(segment_ids, [-1])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(segment_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_12": {
                "variable": {
                    "value": "center1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(data)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.equal(segment_ids, 0)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_13": {
                "variable": {
                    "value": "center0",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(data)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.equal(segment_ids, 1)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_14": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "center1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(data, tf.reshape(tf.where(tf.equal(segment_ids, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_15": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "center0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(data, tf.reshape(tf.where(tf.equal(segment_ids, 1)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_25": {
                "variable": {
                    "value": "ones_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "segment_ids_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.shape_internal(segment_ids)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_26": {
                "variable": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ones_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.ones(segment_ids_shape, dtype=data.dtype)",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(segment_ids, [-1])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(segment_ids)",
                            "Call"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "num_segments",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_math_ops.unsorted_segment_sum(ones_tensor, segment_ids, num_segments)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(N, broadcast_shape)",
                            "Call"
                        ],
                        [
                            "_unsorted_segment_N(data, segment_ids, num_segments)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "broadcast_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[num_segments] + [1] * ndims_output",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(segment_ids, [-1])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(segment_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_46": {
                "variable": {
                    "value": "center1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(data)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.equal(segment_ids, 0)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_47": {
                "variable": {
                    "value": "center0",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(data)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.reshape(tf.where(tf.equal(segment_ids, 1)), [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "center1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(data, tf.reshape(tf.where(tf.equal(segment_ids, 0)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_49": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "center0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(data, tf.reshape(tf.where(tf.equal(segment_ids, 1)), [-1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_54": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_58": {
                "variable": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_59": {
                "variable": {
                    "value": "margin1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_61": {
                "a": {
                    "value": "centers0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unsorted_segment_mean(features, labels, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_62": {
                "variable": {
                    "value": "loss_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(tf.maximum(0.0, margin - center_pairwise_dist), EdgeWeights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_64": {
                "variable": {
                    "value": "centers_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "centers0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unsorted_segment_mean(features, labels, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_65": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.l2_loss(features - centers_batch) - margin1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_16": {
                "values": {
                    "value": "[t1, t2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_31": {
                "x": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_math_ops.unsorted_segment_sum(ones_tensor, segment_ids, num_segments)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(N, broadcast_shape)",
                            "Call"
                        ],
                        [
                            "_unsorted_segment_N(data, segment_ids, num_segments)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_35": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_36": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(segment_ids, [-1])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(segment_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsorted_segment_sum_38": {
                "variable": {
                    "value": "summed",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(data)",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(segment_ids, [-1])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(segment_ids)",
                            "Call"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "num_segments",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_50": {
                "values": {
                    "value": "[t1, t2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_12": {
                "tensor": {
                    "value": "tf.where(tf.equal(segment_ids, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_13": {
                "tensor": {
                    "value": "tf.where(tf.equal(segment_ids, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_34": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_46": {
                "tensor": {
                    "value": "tf.where(tf.equal(segment_ids, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "tf.where(tf.equal(segment_ids, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_57": {
                "shape": {
                    "value": "(num_classes, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_57": {
                "num_rows": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_62": {
                "x": {
                    "value": "tf.maximum(0.0, margin - center_pairwise_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "EdgeWeights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((num_classes, num_classes)) - tf.eye(num_classes)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_12": {
                "condition": {
                    "value": "tf.equal(segment_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_13": {
                "condition": {
                    "value": "tf.equal(segment_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_46": {
                "condition": {
                    "value": "tf.equal(segment_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_47": {
                "condition": {
                    "value": "tf.equal(segment_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_60": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_62": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "margin - center_pairwise_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_65": {
                "t": {
                    "value": "features - centers_batch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_12": {
                "x": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(segment_ids, [-1])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(segment_ids)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_13": {
                "x": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(segment_ids, [-1])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(segment_ids)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_46": {
                "x": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(segment_ids, [-1])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(segment_ids)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_47": {
                "x": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(segment_ids, [-1])",
                            "Call"
                        ],
                        [
                            "ops.convert_to_tensor(segment_ids)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "input": {
                    "value": "centers0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unsorted_segment_mean(features, labels, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/testSeqRec.py": {
        "tensorflow": {
            "ConfigProto_36": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_41": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_cikm.py": {
        "tensorflow": {
            "ConfigProto_52": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_55": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_item_ranking.py": {
        "tensorflow": {
            "ConfigProto_44": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_47": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_movielen.py": {
        "tensorflow": {
            "ConfigProto_46": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_49": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_myself.py": {
        "tensorflow": {
            "ConfigProto_45": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_48": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_rating_pred.py": {
        "tensorflow": {
            "ConfigProto_42": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_45": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test_cikm.py": {
        "tensorflow": {
            "ConfigProto_52": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_55": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}