{
    "box_embeddings/common/tf_utils.py": {
        "tensorflow": {
            "zeros_like_66": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_69": {
                "variable": {
                    "value": "logexpm1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(-tf.math.expm1(x[logexpm1_switch]), clip_value_min=1e-323, clip_value_max=float('inf'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_79": {
                "variable": {
                    "value": "logexpm1_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.math.expm1(x[logexpm1_switch]) + exp_zero_eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_86": {
                "variable": {
                    "value": "Z[~logexpm1_switch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.math.exp(x[~logexpm1_switch])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_104": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log1p_108": {
                "variable": {
                    "value": "Z[zone1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.exp(x[zone1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_143": {
                "variable": {
                    "value": "res_n",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "below_thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta * t < threshold",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(tf.clip_by_value(tf.math.expm1(beta * t), clip_value_min=1e-323, clip_value_max=float('inf'))) / beta",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_165": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_189": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1 / (1.0 - t1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_213": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(shape) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_70": {
                "t": {
                    "value": "-tf.math.expm1(x[logexpm1_switch])",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-323",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_108": {
                "x": {
                    "value": "x[zone1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_109": {
                "x": {
                    "value": "-x[zone2]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_134": {
                "x": {
                    "value": "tf.clip_by_value(tf.math.expm1(beta * t), clip_value_min=1e-323, clip_value_max=float('inf'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_173": {
                "x": {
                    "value": "tf.math.exp(a1) + tf.math.exp(a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_86": {
                "x": {
                    "value": "x[~logexpm1_switch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_135": {
                "t": {
                    "value": "tf.math.expm1(beta * t)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-323",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_212": {
                "input_": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "begin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0] * len(shape)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "expm1_71": {
                "x": {
                    "value": "x[logexpm1_switch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expm1_80": {
                "x": {
                    "value": "x[logexpm1_switch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expm1_136": {
                "x": {
                    "value": "beta * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_173": {
                "x": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t2 - m",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "box_embeddings/initializations/tf_initializer.py": {
        "tensorflow": {}
    },
    "box_embeddings/initializations/tf_uniform_boxes.py": {
        "tensorflow": {
            "reduce_all_64": {
                "input_tensor": {
                    "value": "z >= minimum",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_65": {
                "input_tensor": {
                    "value": "Z <= maximum",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "initial_value": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centers + deltas / 2.0 - 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "box_embeddings/modules/intersection/_tf_intersection.py": {
        "tensorflow": {}
    },
    "box_embeddings/modules/intersection/tf_gumbel_intersection.py": {
        "tensorflow": {
            "maximum_17": {
                "x": {
                    "value": "t1.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t2.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_21": {
                "x": {
                    "value": "t1.Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t2.Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_32": {
                "x": {
                    "value": "t1.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t2.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_35": {
                "x": {
                    "value": "t1.Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t2.Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_18": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gumbel_beta * lse_z",
                            "BinOp"
                        ],
                        [
                            "gumbel_beta * lse_z",
                            "BinOp"
                        ],
                        [
                            "gumbel_beta * lse_z",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_22": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-gumbel_beta * lse_Z",
                            "BinOp"
                        ],
                        [
                            "-gumbel_beta * lse_Z",
                            "BinOp"
                        ],
                        [
                            "-gumbel_beta * lse_Z",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_97": {
                "x": {
                    "value": "t1.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t2.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_100": {
                "x": {
                    "value": "t1.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t2.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/intersection/tf_hard_intersection.py": {
        "tensorflow": {
            "maximum_30": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t2.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_31": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1.Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t2.Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/intersection/tf_intersection.py": {
        "tensorflow": {}
    },
    "box_embeddings/modules/pooling/tf_bag_of_boxes.py": {
        "tensorflow": {
            "reduce_sum_22": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(box_z)",
                            "Call"
                        ],
                        [
                            "weights * mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_18": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.z",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_23": {
                "input_tensor": {
                    "value": "box_z * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_26": {
                "input_tensor": {
                    "value": "box_Z * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/pooling/tf_intersection.py": {
        "tensorflow": {
            "reduce_max_18": {
                "input_tensor": {
                    "value": "box_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.z",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_19": {
                "input_tensor": {
                    "value": "box_Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.Z",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/pooling/tf_pooling.py": {
        "tensorflow": {}
    },
    "box_embeddings/modules/regularization/tf_l2_side_regularizer.py": {
        "tensorflow": {
            "log_30": {
                "x": {
                    "value": "tf.math.abs(Z - z) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_30": {
                "x": {
                    "value": "Z - z",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/regularization/tf_regularizer.py": {
        "tensorflow": {
            "reduce_sum_49": {
                "input_tensor": {
                    "value": "reg_unreduced",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "input_tensor": {
                    "value": "reg_unreduced",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/tf_embedding.py": {
        "tensorflow": {}
    },
    "box_embeddings/modules/volume/_tf_volume.py": {
        "tensorflow": {}
    },
    "box_embeddings/modules/volume/tf_bessel_volume.py": {
        "tensorflow": {
            "reduce_prod_67": {
                "input_tensor": {
                    "value": "tf.math.softplus((box_tensor.Z - box_tensor.z - 2 * euler_gamma * intersection_temperature) * (1 / volume_temperature))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_49": {
                "input_tensor": {
                    "value": "tf.math.log(tf.math.softplus((box_tensor.Z - box_tensor.z - 2 * euler_gamma * intersection_temperature) * (1 / volume_temperature)) + eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_68": {
                "features": {
                    "value": "(box_tensor.Z - box_tensor.z - 2 * euler_gamma * intersection_temperature) * (1 / volume_temperature)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_50": {
                "x": {
                    "value": "tf.math.softplus((box_tensor.Z - box_tensor.z - 2 * euler_gamma * intersection_temperature) * (1 / volume_temperature)) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_51": {
                "features": {
                    "value": "(box_tensor.Z - box_tensor.z - 2 * euler_gamma * intersection_temperature) * (1 / volume_temperature)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/volume/tf_hard_volume.py": {
        "tensorflow": {
            "reduce_sum_13": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.log(tf.clip_by_value(box_tensor.Z - box_tensor.z, clip_value_min=eps, clip_value_max=float('inf')))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_prod_27": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.clip_by_value(box_tensor.Z - box_tensor.z, clip_value_min=eps, clip_value_max=float('inf'))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_14": {
                "x": {
                    "value": "tf.clip_by_value(box_tensor.Z - box_tensor.z, clip_value_min=eps, clip_value_max=float('inf'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_28": {
                "t": {
                    "value": "box_tensor.Z - box_tensor.z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-23",
                            "Constant"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_15": {
                "t": {
                    "value": "box_tensor.Z - box_tensor.z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-23",
                            "Constant"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/volume/tf_soft_volume.py": {
        "tensorflow": {
            "reduce_prod_54": {
                "input_tensor": {
                    "value": "tf.math.softplus((box_tensor.Z - box_tensor.z) * (1 / volume_temperature))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_prod_64": {
                "input_tensor": {
                    "value": "tf.math.softplus((box_tensor.Z - box_tensor.z) * (1 / volume_temperature))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_41": {
                "input_tensor": {
                    "value": "tf.math.log(tf.math.softplus((box_tensor.Z - box_tensor.z) * (1 / volume_temperature)) + eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_55": {
                "features": {
                    "value": "(box_tensor.Z - box_tensor.z) * (1 / volume_temperature)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_65": {
                "features": {
                    "value": "(box_tensor.Z - box_tensor.z) * (1 / volume_temperature)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_42": {
                "x": {
                    "value": "tf.math.softplus((box_tensor.Z - box_tensor.z) * (1 / volume_temperature)) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_43": {
                "features": {
                    "value": "(box_tensor.Z - box_tensor.z) * (1 / volume_temperature)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/volume/tf_volume.py": {
        "tensorflow": {}
    },
    "box_embeddings/parameterizations/tf_box_tensor.py": {
        "tensorflow": {
            "stack_233": {
                "values": {
                    "value": "(z, Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_364": {
                "tensor": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls.W(z, Z, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(*W.shape[:-2], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_481": {
                "variable": {
                    "value": "new_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "_target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(target_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_489": {
                "variable": {
                    "value": "new_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "_target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(target_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_490": {
                "variable": {
                    "value": "new_Z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "_target_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(target_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_347": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "d - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_353": {
                "variable": {
                    "value": "self._z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_to_unsqueeze",
                            "Name"
                        ],
                        [
                            "dim_to_unsqueeze",
                            "Name"
                        ]
                    ]
                }
            },
            "expand_dims_354": {
                "variable": {
                    "value": "self._Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_to_unsqueeze",
                            "Name"
                        ],
                        [
                            "dim_to_unsqueeze",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "box_embeddings/parameterizations/tf_delta_box_tensor.py": {
        "tensorflow": {
            "reduce_any_104": {
                "input_tensor": {
                    "value": "Z - z < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_110": {
                "values": {
                    "value": "(z, softplus_inverse(Z - z, beta=beta, threshold=threshold))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_145": {
                "value": {
                    "value": "list(range(split_point))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_148": {
                "value": {
                    "value": "list(range(split_point, len_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_152": {
                "values": {
                    "value": "(z, delta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_68": {
                "features": {
                    "value": "self.data[..., 1, :] * self.beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/parameterizations/tf_sigmoid_box_tensor.py": {
        "tensorflow": {
            "stack_91": {
                "values": {
                    "value": "(w1, w2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_123": {
                "values": {
                    "value": "(w1, w2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "x": {
                    "value": "self.data[..., 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_82": {
                "t": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z",
                            "Attribute"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.2250738585072014e-308",
                            "Constant"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_85": {
                "t": {
                    "value": "(Z - z) / (1.0 - z)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.2250738585072014e-308",
                            "Constant"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_54": {
                "x": {
                    "value": "self.data[..., 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/common/test_tf_logsumexp2.py": {
        "tensorflow": {
            "constant_31": {
                "variable": {
                    "value": "t1_",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "t2_",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_33": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack((t1_, t2_))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_34": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_35": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_60": {
                "variable": {
                    "value": "t1_",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_61": {
                "variable": {
                    "value": "t2_",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_62": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack((t1_, t2_))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_63": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_64": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_69": {
                "variable": {
                    "value": "t1__",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_70": {
                "variable": {
                    "value": "t2__",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_71": {
                "variable": {
                    "value": "max_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t1__",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(inp1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t2__",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(inp2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_all_72": {
                "input_tensor": {
                    "value": "max_ <= result",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_33": {
                "values": {
                    "value": "(t1_, t2_)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_62": {
                "values": {
                    "value": "(t1_, t2_)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_97": {
                "value": {
                    "value": "np.random.rand(*t1_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_98": {
                "value": {
                    "value": "np.random.rand(*t2_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_92": {
                "value": {
                    "value": "np.random.rand(*t1_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_93": {
                "value": {
                    "value": "np.random.rand(*t2_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/initializations/test_tf_uniform_boxes.py": {
        "tensorflow": {
            "Variable_55": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.rand(num_boxes, box_type_factory.box_subclass.w2z_ratio, dimensions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_all_70": {
                "input_tensor": {
                    "value": "b.Z <= maximum",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_71": {
                "input_tensor": {
                    "value": "b.z >= minimum",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/intersection/test_tf_gumbel_intersection.py": {
        "tensorflow": {
            "Variable_141": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_202": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_203": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_68": {
                "input_tensor": {
                    "value": "tf.math.is_finite(res.z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_all_69": {
                "input_tensor": {
                    "value": "tf.math.is_finite(res.Z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_all_71": {
                "input_tensor": {
                    "value": "res.z >= hard_res.z",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_72": {
                "input_tensor": {
                    "value": "res.Z <= hard_res.Z",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_107": {
                "input_tensor": {
                    "value": "hard_res.z <= g1.z",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_108": {
                "input_tensor": {
                    "value": "hard_res.z <= g2.z",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_109": {
                "input_tensor": {
                    "value": "hard_res.Z >= g1.Z",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_110": {
                "input_tensor": {
                    "value": "hard_res.Z >= g2.Z",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_151": {
                "input_tensor": {
                    "value": "tf.math.is_finite(res.z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_all_152": {
                "input_tensor": {
                    "value": "tf.math.is_finite(res.Z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "initial_value": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "initial_value": {
                    "value": "[[[2, 1], [3, 2]], [[3, 2], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "initial_value": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_64": {
                "initial_value": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_finite_68": {
                "x": {
                    "value": "res.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_finite_69": {
                "x": {
                    "value": "res.Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_98": {
                "initial_value": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_99": {
                "initial_value": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_finite_151": {
                "x": {
                    "value": "res.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_finite_152": {
                "x": {
                    "value": "res.Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_all_156": {
                "input_tensor": {
                    "value": "res.z >= hard_res.z",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_157": {
                "input_tensor": {
                    "value": "res.Z <= hard_res.Z",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Variable_247": {
                "initial_value": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_248": {
                "initial_value": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/intersection/test_tf_hard_intersection.py": {
        "tensorflow": {
            "Variable_10": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_11": {
                "initial_value": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "[[[2, 1], [3, 2]], [[3, 2], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_18": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_20": {
                "initial_value": {
                    "value": "[[2, 0], [6, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_21": {
                "initial_value": {
                    "value": "[[[2, 1], [3, 2]], [[2, 1], [3, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_27": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "initial_value": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_29": {
                "initial_value": {
                    "value": "[[[2, 1], [3, 2]], [[3, 2], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "initial_value": {
                    "value": "[[2, 0], [6, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "initial_value": {
                    "value": "[[[2, 1], [3, 2]], [[2, 1], [3, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "initial_value": {
                    "value": "[[2, 0], [6, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "initial_value": {
                    "value": "[[[[1, 1], [4, 4]], [[2, 2], [5, 5]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "initial_value": {
                    "value": "[[[[3, 3], [7, 6]]], [[[1, 3], [3, 4]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_55": {
                "initial_value": {
                    "value": "[[[[3, 3], [4, 4]], [[3, 3], [5, 5]]], [[[1, 3], [3, 4]], [[2, 3], [3, 4]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_64": {
                "initial_value": {
                    "value": "[[[[1, 1], [4, 4]], [[2, 2], [5, 5]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "initial_value": {
                    "value": "[[[[3, 3], [7, 6]]], [[[1, 3], [3, 4]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "initial_value": {
                    "value": "[[[[3, 3], [4, 4]], [[3, 3], [5, 5]]], [[[1, 3], [3, 4]], [[2, 3], [3, 4]]]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/intersection/test_tf_intersection.py": {
        "tensorflow": {
            "Variable_14": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_17": {
                "initial_value": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_29": {
                "initial_value": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/pooling/tf_test_bag_of_boxes.py": {
        "tensorflow": {
            "reshape_38": {
                "tensor": {
                    "value": "tf.Variable([0.5, 0.5])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "tf.Variable([0.1, 0.9])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "tensor": {
                    "value": "tf.Variable([0.1, 0.9])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "initial_value": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_18": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_27": {
                "initial_value": {
                    "value": "[[3.0 / 2.0, 1.0 / 2.0], [9.0 / 2.0, 7.0 / 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "initial_value": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "initial_value": {
                    "value": "[[3.0 / 2.0, 1.0 / 2.0], [9.0 / 2.0, 7.0 / 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_54": {
                "initial_value": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "initial_value": {
                    "value": "[[0.1 * 1.0 + 0.9 * 2.0, 0.1 * 1.0 + 0.9 * 0], [0.1 * 3 + 0.9 * 6.0, 0.1 * 5 + 0.9 * 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "initial_value": {
                    "value": "[[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_76": {
                "initial_value": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "initial_value": {
                    "value": "[[[0.1 * 1.0 + 0.9 * 2.0, 0.1 * 1.0 + 0.9 * 0], [0.1 * 3 + 0.9 * 6.0, 0.1 * 5 + 0.9 * 2]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_97": {
                "initial_value": {
                    "value": "[[[1, 1, 1], [3, 5, 6]], [[2, 0, 1], [6, 2, 3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/regularization/test_tf_l2_side_regularizer.py": {
        "tensorflow": {
            "reduce_all_19": {
                "input_tensor": {
                    "value": "res == expected",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_33": {
                "input_tensor": {
                    "value": "res == expected",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_all_47": {
                "input_tensor": {
                    "value": "res == expected",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Variable_10": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_17": {
                "input_tensor": {
                    "value": "(Z - z) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_24": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_31": {
                "input_tensor": {
                    "value": "(Z - z) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_45": {
                "input_tensor": {
                    "value": "tf.math.log(tf.math.abs(Z - z) + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_45": {
                "x": {
                    "value": "tf.math.abs(Z - z) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_45": {
                "x": {
                    "value": "Z - z",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/regularization/test_tf_regularizer.py": {
        "tensorflow": {
            "Variable_10": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/test_tf_embedding.py": {
        "tensorflow": {
            "Variable_32": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/volume/test_tf_bessel_volume.py": {
        "tensorflow": {
            "Variable_15": {
                "variable": {
                    "value": "expected1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[3.490526, 1.4467278]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "variable": {
                    "value": "expected2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[3.490526, 0.7444129]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "expected1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[1.25004, 0.36924]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_32": {
                "variable": {
                    "value": "expected2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[1.25004, -0.29517]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_9": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_25": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "initial_value": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/volume/test_tf_hard_volume.py": {
        "tensorflow": {
            "Variable_16": {
                "variable": {
                    "value": "expected1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[8, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_17": {
                "variable": {
                    "value": "expected2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[8, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_32": {
                "variable": {
                    "value": "expected1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[2.07944, 1.3862]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "expected2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[2.07944, 0.69314]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_10": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_13": {
                "initial_value": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "initial_value": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_29": {
                "initial_value": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/volume/test_tf_soft_volume.py": {
        "tensorflow": {
            "softplus_32": {
                "variable": {
                    "value": "expected_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "(box1.Z - box1.z) * (1 / volume_temperature)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_prod_36": {
                "variable": {
                    "value": "expected_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "expected_volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.softplus((box1.Z - box1.z) * (1 / volume_temperature))",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_prod(expected_volume, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_sum(tf.math.log(expected_volume + eps), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_38": {
                "variable": {
                    "value": "expected_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.log(expected_volume + eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "initial_value": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_all_43": {
                "input_tensor": {
                    "value": "soft_volume1 >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "log_39": {
                "x": {
                    "value": "expected_volume + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/volume/test_tf_volume.py": {
        "tensorflow": {
            "Variable_23": {
                "initial_value": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "initial_value": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "initial_value": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/parameterizations/test_tf_box_factory.py": {
        "tensorflow": {
            "constant_32": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_37": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_59": {
                "value": {
                    "value": "z + Z",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/parameterizations/test_tf_box_tensor.py": {
        "tensorflow": {
            "constant_10": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(3, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_14": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(2, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_21": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_24": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(3, 11)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_27": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(3, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_34": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_45": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_46": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z, z + delta]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_35": {
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_104": {
                "value": {
                    "value": "np.random.rand(*input_data_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_128": {
                "value": {
                    "value": "np.random.rand(*input_data_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/parameterizations/test_tf_delta_box_tensor.py": {
        "tensorflow": {
            "constant_18": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(3, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_22": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(2, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_29": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(3, 11)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_35": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(3, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_42": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_54": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_55": {
                "variable": {
                    "value": "w_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_56": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z, w_delta]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_43": {
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_74": {
                "value": {
                    "value": "np.random.rand(*input_data_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/parameterizations/test_tf_sigmoid_box_tensor.py": {
        "tensorflow": {
            "constant_19": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(3, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_23": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(2, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_33": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(3, 11)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(3, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_43": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(w1, w2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_63": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_71": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_73": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(w1, w2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_44": {
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_49": {
                "t": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.random.rand(*shape))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.random.rand(*shape))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.2250738585072014e-308",
                            "Constant"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_52": {
                "t": {
                    "value": "(Z - z) / (1.0 - z)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.2250738585072014e-308",
                            "Constant"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_64": {
                "value": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_76": {
                "x": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_sigmoid(tf.clip_by_value(z, clip_value_min=eps, clip_value_max=1.0 - eps))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.random.rand(*shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_79": {
                "x": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_sigmoid(tf.clip_by_value(z, clip_value_min=eps, clip_value_max=1.0 - eps))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.random.rand(*shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_80": {
                "x": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_sigmoid(tf.clip_by_value(z, clip_value_min=eps, clip_value_max=1.0 - eps))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.random.rand(*shape))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "box_embeddings/common/utils.py": {
        "torch": {
            "zeros_like_68": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_71": {
                "variable": {
                    "value": "logexpm1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(-torch.expm1(x[logexpm1_switch])).clamp_min(1e-38)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_75": {
                "variable": {
                    "value": "logexpm1_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.expm1(x[logexpm1_switch]) + exp_zero_eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_80": {
                "variable": {
                    "value": "Z[~logexpm1_switch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.exp(x[~logexpm1_switch])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_98": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log1p_102": {
                "variable": {
                    "value": "Z[zone1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(x[zone1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_141": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_155": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1 / (1.0 - t1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_102": {
                "input": {
                    "value": "x[zone1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_103": {
                "input": {
                    "value": "-x[zone2]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_118": {
                "input": {
                    "value": "torch.expm1(beta * t[below_thresh]).clamp_min(1e-323)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_149": {
                "input": {
                    "value": "torch.exp(a1) + torch.exp(a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_80": {
                "input": {
                    "value": "x[~logexpm1_switch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expm1_118": {
                "input": {
                    "value": "beta * t[below_thresh]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expm1_75": {
                "input": {
                    "value": "x[logexpm1_switch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_149": {
                "input": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t2 - m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expm1_71": {
                "input": {
                    "value": "x[logexpm1_switch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/initializations/initializer.py": {
        "torch": {}
    },
    "box_embeddings/initializations/uniform_boxes.py": {
        "torch": {
            "tensor_64": {
                "data": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "centers + deltas / 2.0 - 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/embedding.py": {
        "torch": {}
    },
    "box_embeddings/modules/intersection/_intersection.py": {
        "torch": {}
    },
    "box_embeddings/modules/intersection/gumbel_intersection.py": {
        "torch": {
            "stack_14": {
                "variable": {
                    "value": "t1_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t1.z, -t1.Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_15": {
                "variable": {
                    "value": "t2_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t2.z, -t2.Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logaddexp_16": {
                "variable": {
                    "value": "lse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1_data / intersection_temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "t2_data / intersection_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_23": {
                "input": {
                    "value": "t1.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_24": {
                "input": {
                    "value": "t1.Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_35": {
                "variable": {
                    "value": "t1_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t1.z, -t1.Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_36": {
                "variable": {
                    "value": "t2_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t2.z, -t2.Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logaddexp_37": {
                "variable": {
                    "value": "lse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1_data / intersection_temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "t2_data / intersection_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_44": {
                "input": {
                    "value": "t1.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_45": {
                "input": {
                    "value": "t1.Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_53": {
                "variable": {
                    "value": "t1_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t1.z, -t1.Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "t2_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t2.z, -t2.Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logaddexp_55": {
                "variable": {
                    "value": "lse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1_data / intersection_temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "t2_data / intersection_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_119": {
                "input": {
                    "value": "t1.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_122": {
                "input": {
                    "value": "t1.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/intersection/hard_intersection.py": {
        "torch": {
            "max_42": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_43": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1.Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/intersection/intersection.py": {
        "torch": {}
    },
    "box_embeddings/modules/pooling/bag_of_boxes.py": {
        "torch": {
            "sum_22": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(box_z)",
                            "Call"
                        ],
                        [
                            "weights * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_18": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.z",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_23": {
                "input": {
                    "value": "box_z * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "box_Z * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/pooling/intersection.py": {
        "torch": {
            "max_18": {
                "input": {
                    "value": "box_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.z",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_19": {
                "input": {
                    "value": "box_Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.Z",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/pooling/pooling.py": {
        "torch": {}
    },
    "box_embeddings/modules/regularization/l2_side_regularizer.py": {
        "torch": {
            "log_28": {
                "input": {
                    "value": "torch.abs(Z - z) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_28": {
                "input": {
                    "value": "Z - z",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/regularization/regularizer.py": {
        "torch": {
            "sum_49": {
                "input": {
                    "value": "reg_unreduced",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_51": {
                "input": {
                    "value": "reg_unreduced",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/volume/_volume.py": {
        "torch": {}
    },
    "box_embeddings/modules/volume/bessel_volume.py": {
        "torch": {
            "prod_65": {
                "input": {
                    "value": "softplus(box_tensor.Z - box_tensor.z - 2 * euler_gamma * intersection_temperature, beta=1 / volume_temperature)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "torch.log(softplus(box_tensor.Z - box_tensor.z - 2 * euler_gamma * intersection_temperature, beta=1 / volume_temperature) + eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_66": {
                "input": {
                    "value": "box_tensor.Z - box_tensor.z - 2 * euler_gamma * intersection_temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "beta": {
                    "value": "1 / volume_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_50": {
                "input": {
                    "value": "softplus(box_tensor.Z - box_tensor.z - 2 * euler_gamma * intersection_temperature, beta=1 / volume_temperature) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_51": {
                "input": {
                    "value": "box_tensor.Z - box_tensor.z - 2 * euler_gamma * intersection_temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "beta": {
                    "value": "1 / volume_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/volume/hard_volume.py": {
        "torch": {
            "prod_26": {
                "input": {
                    "value": "(box_tensor.Z - box_tensor.z).clamp_min(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_22": {
                "input": {
                    "value": "torch.log((box_tensor.Z - box_tensor.z).clamp_min(eps))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_23": {
                "input": {
                    "value": "(box_tensor.Z - box_tensor.z).clamp_min(eps)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/volume/soft_volume.py": {
        "torch": {
            "prod_54": {
                "input": {
                    "value": "softplus(box_tensor.Z - box_tensor.z, beta=1 / volume_temperature)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "torch.log(softplus(box_tensor.Z - box_tensor.z, beta=1 / volume_temperature) + eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_55": {
                "input": {
                    "value": "box_tensor.Z - box_tensor.z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "beta": {
                    "value": "1 / volume_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "softplus(box_tensor.Z - box_tensor.z, beta=1 / volume_temperature) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_43": {
                "input": {
                    "value": "box_tensor.Z - box_tensor.z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "beta": {
                    "value": "1 / volume_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/modules/volume/volume.py": {
        "torch": {}
    },
    "box_embeddings/parameterizations/box_tensor.py": {
        "torch": {
            "stack_241": {
                "tensors": {
                    "value": "(z, Z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_339": {
                "data": {
                    "value": "list(range(split_point))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "vector.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_348": {
                "data": {
                    "value": "list(range(split_point, len_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "vector.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_532": {
                "input": {
                    "value": "self.Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "other.Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/parameterizations/delta_box_tensor.py": {
        "torch": {
            "stack_103": {
                "tensors": {
                    "value": "(z, softplus_inverse(Z - z, beta=beta, threshold=threshold))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "data": {
                    "value": "list(range(split_point))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "vector.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "data": {
                    "value": "list(range(split_point, len_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "vector.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_202": {
                "tensors": {
                    "value": "(z, delta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_62": {
                "input": {
                    "value": "self.data[..., 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "box_embeddings/parameterizations/sigmoid_box_tensor.py": {
        "torch": {
            "stack_85": {
                "tensors": {
                    "value": "(w1, w2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_132": {
                "tensors": {
                    "value": "(w1, w2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_41": {
                "input": {
                    "value": "self.data[..., 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "data": {
                    "value": "list(range(split_point))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "vector.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "list(range(split_point, len_dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "vector.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "input": {
                    "value": "self.data[..., 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/mnli_model.py": {
        "torch": {
            "NLLLoss_78": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_127": {
                "tensors": {
                    "value": "(y_prob, log1mexp(y_prob))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_135": {
                "input": {
                    "value": "torch.exp(y_prob.detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_135": {
                "input": {
                    "value": "y_prob.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/common/test_inverse_softplus.py": {
        "torch": {
            "tensor_28": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(inp)",
                            "Call"
                        ],
                        [
                            "torch.tensor(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(inp)",
                            "Call"
                        ],
                        [
                            "torch.tensor(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_29": {
                "input": {
                    "value": "softplus_inverse(torch.nn.functional.softplus(inp, beta=beta, threshold=threshold), beta=beta, threshold=threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(inp)",
                            "Call"
                        ],
                        [
                            "torch.tensor(inp)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "tol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                }
            },
            "allclose_53": {
                "input": {
                    "value": "softplus_inverse(torch.nn.functional.softplus(inp, beta=beta, threshold=threshold), beta=beta, threshold=threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(inp)",
                            "Call"
                        ],
                        [
                            "torch.tensor(inp)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softplus_31": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(inp)",
                            "Call"
                        ],
                        [
                            "torch.tensor(inp)",
                            "Call"
                        ]
                    ]
                },
                "beta": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_55": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(inp)",
                            "Call"
                        ],
                        [
                            "torch.tensor(inp)",
                            "Call"
                        ]
                    ]
                },
                "beta": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/common/test_logsumexp2.py": {
        "torch": {
            "tensor_31": {
                "variable": {
                    "value": "t1_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "t2_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_33": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack((t1_, t2_))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "f_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logsumexp(torch.stack((t1_, t2_)), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(torch.stack((t1_, t2_)), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_40": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logsumexp2(t1, t2)",
                            "Call"
                        ],
                        [
                            "logsumexp2(t1, t2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "t1_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "t2_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_70": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack((t1_, t2_))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_78": {
                "variable": {
                    "value": "f_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logsumexp(torch.stack((t1_, t2_)), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(torch.stack((t1_, t2_)), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_79": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logsumexp2(t1, t2)",
                            "Call"
                        ],
                        [
                            "logsumexp2(t1, t2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "t1__",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "t2__",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_88": {
                "variable": {
                    "value": "max_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1__",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(inp1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_33": {
                "tensors": {
                    "value": "(t1_, t2_)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_38": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logsumexp2(t1, t2)",
                            "Call"
                        ],
                        [
                            "logsumexp2(t1, t2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logsumexp(torch.stack((t1_, t2_)), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(torch.stack((t1_, t2_)), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_44": {
                "input": {
                    "value": "t1_.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "t1.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_45": {
                "input": {
                    "value": "t2_.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "t2.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_70": {
                "tensors": {
                    "value": "(t1_, t2_)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_76": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logsumexp2(t1, t2)",
                            "Call"
                        ],
                        [
                            "logsumexp2(t1, t2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logsumexp(torch.stack((t1_, t2_)), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(torch.stack((t1_, t2_)), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_83": {
                "input": {
                    "value": "t1_.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "t1.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_84": {
                "input": {
                    "value": "t2_.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "t2.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_110": {
                "*size": {
                    "value": "*t2_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_108": {
                "*size": {
                    "value": "*t2_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "tests/initializations/test_uniform_boxes.py": {
        "torch": {
            "rand_55": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_boxes, box_type_factory.box_subclass.w2z_ratio, dimensions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/intersection/test_gumbel_intersection.py": {
        "torch": {
            "tensor_153": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "expected_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "expected_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(expected_probs).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_228": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_237": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bessel_volume_approx(res1, volume_temperature=volume_temperature, intersection_temperature=intersection_temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_244": {
                "variable": {
                    "value": "t1_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "variable": {
                    "value": "t2_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_254": {
                "variable": {
                    "value": "l1_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bessel_volume_approx(res1_, volume_temperature=volume_temperature, intersection_temperature=intersection_temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isfinite_67": {
                "input": {
                    "value": "res.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_68": {
                "input": {
                    "value": "res.Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_163": {
                "input": {
                    "value": "res.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_164": {
                "input": {
                    "value": "res.Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_194": {
                "input": {
                    "value": "t1.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_195": {
                "input": {
                    "value": "t2.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_263": {
                "input": {
                    "value": "t1.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "t1_.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_264": {
                "input": {
                    "value": "t2.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "t2_.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_289": {
                "input": {
                    "value": "g1.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "g2.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "[[[2, 1], [3, 2]], [[3, 2], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "NLLLoss_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "(cp_1.unsqueeze(-1), log1mexp(cp_1.unsqueeze(-1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "data": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/intersection/test_hard_intersection.py": {
        "torch": {
            "tensor_11": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "data": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "data": {
                    "value": "[[[2, 1], [3, 2]], [[3, 2], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[[2, 0], [6, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "[[[2, 1], [3, 2]], [[2, 1], [3, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[[[2, 1], [3, 2]], [[3, 2], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[[2, 0], [6, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "[[[2, 1], [3, 2]], [[2, 1], [3, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "[[2, 0], [6, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[[[[1, 1], [4, 4]], [[2, 2], [5, 5]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "[[[[3, 3], [7, 6]]], [[[1, 3], [3, 4]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "[[[[3, 3], [4, 4]], [[3, 3], [5, 5]]], [[[1, 3], [3, 4]], [[2, 3], [3, 4]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "[[[[1, 1], [4, 4]], [[2, 2], [5, 5]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "[[[[3, 3], [7, 6]]], [[[1, 3], [3, 4]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "data": {
                    "value": "[[[[3, 3], [4, 4]], [[3, 3], [5, 5]]], [[[1, 3], [3, 4]], [[2, 3], [3, 4]]]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/intersection/test_intersection.py": {
        "torch": {
            "tensor_14": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/pooling/test_bag_of_boxes.py": {
        "torch": {
            "allclose_107": {
                "input": {
                    "value": "result.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "others['expected'].z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_108": {
                "input": {
                    "value": "result.Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "others['expected'].Z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "[0.1, 0.9]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[[3.0 / 2.0, 1.0 / 2.0], [9.0 / 2.0, 7.0 / 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "[[3.0 / 2.0, 1.0 / 2.0], [9.0 / 2.0, 7.0 / 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "[[0.1 * 1.0 + 0.9 * 2.0, 0.1 * 1.0 + 0.9 * 0], [0.1 * 3 + 0.9 * 6.0, 0.1 * 5 + 0.9 * 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "[[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "[[[0.1 * 1.0 + 0.9 * 2.0, 0.1 * 1.0 + 0.9 * 0], [0.1 * 3 + 0.9 * 6.0, 0.1 * 5 + 0.9 * 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "[[[1, 1, 1], [3, 5, 6]], [[2, 0, 1], [6, 2, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/pooling/test_intersection_pooling.py": {
        "torch": {
            "tensor_7": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_15": {
                "input": {
                    "value": "box_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box.z",
                            "Attribute"
                        ],
                        [
                            "box.z",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_16": {
                "input": {
                    "value": "box_Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box.Z",
                            "Attribute"
                        ],
                        [
                            "box.Z",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_32": {
                "input": {
                    "value": "box_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box.z",
                            "Attribute"
                        ],
                        [
                            "box.z",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_33": {
                "input": {
                    "value": "box_Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box.Z",
                            "Attribute"
                        ],
                        [
                            "box.Z",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/regularization/test_l2_side_regularizer.py": {
        "torch": {
            "tensor_9": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "(Z - z) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_27": {
                "input": {
                    "value": "(Z - z) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "torch.log(torch.abs(Z - z) + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_39": {
                "input": {
                    "value": "torch.abs(Z - z) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_39": {
                "input": {
                    "value": "Z - z",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/regularization/test_regularizer.py": {
        "torch": {
            "tensor_9": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[2, 0], [6, 2]]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/test_embedding.py": {
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/volume/test_bessel_volume.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "expected1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3.490526, 1.4467278]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "expected2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3.490526, 0.7444129]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "expected1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.25004, 0.36924]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "expected2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.25004, -0.29517]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_18": {
                "input": {
                    "value": "res1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_layer(box1)",
                            "Call"
                        ],
                        [
                            "volume_layer(box1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([3.490526, 1.4467278]).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.25004, 0.36924]).float()",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_19": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_layer(box2)",
                            "Call"
                        ],
                        [
                            "volume_layer(box2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([3.490526, 0.7444129]).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.25004, -0.29517]).float()",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_34": {
                "input": {
                    "value": "res1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_layer(box1)",
                            "Call"
                        ],
                        [
                            "volume_layer(box1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([3.490526, 1.4467278]).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.25004, 0.36924]).float()",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_35": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_layer(box2)",
                            "Call"
                        ],
                        [
                            "volume_layer(box2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([3.490526, 0.7444129]).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.25004, -0.29517]).float()",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_8": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_11": {
                "data": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/volume/test_hard_volume.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "expected1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[8, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "expected2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[8, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "expected1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.07944, 1.3862]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "expected2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[2.07944, 0.69314]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_18": {
                "input": {
                    "value": "res1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_layer(box1)",
                            "Call"
                        ],
                        [
                            "volume_layer(box1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([8, 4]).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor([2.07944, 1.3862]).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_19": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_layer(box2)",
                            "Call"
                        ],
                        [
                            "volume_layer(box2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([8, 2]).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor([2.07944, 0.69314]).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_34": {
                "input": {
                    "value": "res1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_layer(box1)",
                            "Call"
                        ],
                        [
                            "volume_layer(box1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([8, 4]).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor([2.07944, 1.3862]).float()",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_35": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volume_layer(box2)",
                            "Call"
                        ],
                        [
                            "volume_layer(box2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([8, 2]).float()",
                            "Call"
                        ],
                        [
                            "torch.tensor([2.07944, 0.69314]).float()",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_8": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_11": {
                "data": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[[[1, 1], [3, 5]], [[1, 1], [3, 3]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "[[[2, 0], [6, 2]], [[3, 2], [4, 4]]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/volume/test_soft_volume.py": {
        "torch": {
            "softplus_33": {
                "variable": {
                    "value": "expected_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1.Z - box1.z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "beta": {
                    "value": "1 / volume_temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_35": {
                "variable": {
                    "value": "expected_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expected_volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softplus(box1.Z - box1.z, beta=1 / volume_temperature)",
                            "Call"
                        ],
                        [
                            "torch.prod(expected_volume, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.log(expected_volume + eps), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_37": {
                "variable": {
                    "value": "expected_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(expected_volume + eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "allclose_42": {
                "input": {
                    "value": "soft_volume1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SoftVolume(log_scale=log_scale, volume_temperature=volume_temperature)(box1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softplus(box1.Z - box1.z, beta=1 / volume_temperature)",
                            "Call"
                        ],
                        [
                            "torch.prod(expected_volume, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.log(expected_volume + eps), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_37": {
                "input": {
                    "value": "expected_volume + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/volume/test_volume.py": {
        "torch": {
            "allclose_26": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Volume(log_scale)(box)",
                            "Call"
                        ],
                        [
                            "Volume(volume_temperature=volume_temperature, log_scale=log_scale)(box)",
                            "Call"
                        ],
                        [
                            "Volume(intersection_temperature=intersection_temperature, volume_temperature=volume_temperature, log_scale=log_scale)(box)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HardVolume(log_scale)(box)",
                            "Call"
                        ],
                        [
                            "SoftVolume(log_scale, volume_temperature)(box)",
                            "Call"
                        ],
                        [
                            "BesselApproxVolume(log_scale, volume_temperature, intersection_temperature)(box)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_44": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Volume(log_scale)(box)",
                            "Call"
                        ],
                        [
                            "Volume(volume_temperature=volume_temperature, log_scale=log_scale)(box)",
                            "Call"
                        ],
                        [
                            "Volume(intersection_temperature=intersection_temperature, volume_temperature=volume_temperature, log_scale=log_scale)(box)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HardVolume(log_scale)(box)",
                            "Call"
                        ],
                        [
                            "SoftVolume(log_scale, volume_temperature)(box)",
                            "Call"
                        ],
                        [
                            "BesselApproxVolume(log_scale, volume_temperature, intersection_temperature)(box)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_69": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Volume(log_scale)(box)",
                            "Call"
                        ],
                        [
                            "Volume(volume_temperature=volume_temperature, log_scale=log_scale)(box)",
                            "Call"
                        ],
                        [
                            "Volume(intersection_temperature=intersection_temperature, volume_temperature=volume_temperature, log_scale=log_scale)(box)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HardVolume(log_scale)(box)",
                            "Call"
                        ],
                        [
                            "SoftVolume(log_scale, volume_temperature)(box)",
                            "Call"
                        ],
                        [
                            "BesselApproxVolume(log_scale, volume_temperature, intersection_temperature)(box)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_23": {
                "data": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/parameterizations/test_box_factory.py": {
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "z + Z",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/parameterizations/test_box_tensor.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(3, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_14": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(2, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(3, 11)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(3, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, z + delta.abs())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "np.random.rand(*input_data_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "np.random.rand(*input_data_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/parameterizations/test_mindelta_box_tensor.py": {
        "torch": {
            "tensor_18": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(3, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(2, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(3, 11)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(3, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "w_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, w_delta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "allclose_59": {
                "input": {
                    "value": "box.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.random.rand(*shape))",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.random.rand(*shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_60": {
                "input": {
                    "value": "box.Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "z + torch.nn.functional.softplus(w_delta, beta=beta, threshold=threshold)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "data": {
                    "value": "np.random.rand(*input_data_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_63": {
                "input": {
                    "value": "w_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.random.rand(*shape))",
                            "Call"
                        ]
                    ]
                },
                "beta": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/parameterizations/test_sigmoid_box_tensor.py": {
        "torch": {
            "tensor_19": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(3, 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(2, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(3, 11)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(3, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_49": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w1, w2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w1, w2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "allclose_50": {
                "input": {
                    "value": "box_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SigmoidBoxTensor.W(z, Z)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((w1, w2), -2)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_68": {
                "input": {
                    "value": "box.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sigmoid(w1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_69": {
                "input": {
                    "value": "box.Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sigmoid(w1) + torch.sigmoid(w2) * (1.0 - torch.sigmoid(w1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "np.random.rand(*shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "input": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_sigmoid(z.clamp(eps, 1.0 - eps))",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.random.rand(*shape))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_71": {
                "input": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_sigmoid(z.clamp(eps, 1.0 - eps))",
                            "Call"
                        ],
                        [
                            "torch.tensor(np.random.rand(*shape))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}