{
    "datasets/celeba.py": {
        "torch": {
            "as_tensor_102": {
                "variable": {
                    "value": "self.identity",
                    "possible_values": []
                },
                "data": {
                    "value": "self.identity[mask].values",
                    "possible_values": []
                }
            },
            "as_tensor_103": {
                "variable": {
                    "value": "self.bbox",
                    "possible_values": []
                },
                "data": {
                    "value": "self.bbox[mask].values",
                    "possible_values": []
                }
            },
            "as_tensor_104": {
                "variable": {
                    "value": "self.landmarks_align",
                    "possible_values": []
                },
                "data": {
                    "value": "self.landmarks_align[mask].values",
                    "possible_values": []
                }
            },
            "as_tensor_105": {
                "variable": {
                    "value": "self.attr",
                    "possible_values": []
                },
                "data": {
                    "value": "self.attr[mask].values",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/utils.py": {
        "torch": {}
    },
    "datasets/vision.py": {
        "torch": {}
    },
    "losses/dsm.py": {
        "torch": {
            "randn_like_7": {
                "input": {
                    "value": "samples",
                    "possible_values": []
                }
            },
            "norm_12": {
                "input": {
                    "value": "dlogp + kernel",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "grad_10": {
                "outputs": {
                    "value": "logp.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "perturbed_inputs",
                    "possible_values": [
                        [
                            "samples + vector",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "randn_like_19": {
                "input": {
                    "value": "samples",
                    "possible_values": []
                }
            },
            "randn_like_31": {
                "input": {
                    "value": "samples",
                    "possible_values": []
                }
            }
        }
    },
    "losses/sliced_sm.py": {
        "torch": {
            "sum_23": {
                "variable": {
                    "value": "gradv",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "possible_values": []
                }
            },
            "sum_28": {
                "variable": {
                    "value": "loss2",
                    "possible_values": []
                },
                "input": {
                    "value": "vectors * grad2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "gradv",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "loss2",
                    "possible_values": []
                },
                "input": {
                    "value": "vectors * grad2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "randn_like_67": {
                "variable": {
                    "value": "vectors",
                    "possible_values": []
                },
                "input": {
                    "value": "dup_samples",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "perturbed_samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_72": {
                "variable": {
                    "value": "gradv",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "possible_values": []
                }
            },
            "sum_75": {
                "variable": {
                    "value": "loss2",
                    "possible_values": []
                },
                "input": {
                    "value": "vectors * grad2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "randn_like_86": {
                "variable": {
                    "value": "vectors",
                    "possible_values": []
                },
                "input": {
                    "value": "dup_samples",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "perturbed_samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_91": {
                "variable": {
                    "value": "gradv",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "loss2",
                    "possible_values": []
                },
                "input": {
                    "value": "vectors * grad2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "randn_like_105": {
                "variable": {
                    "value": "vectors",
                    "possible_values": []
                },
                "input": {
                    "value": "dup_samples",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "perturbed_samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_109": {
                "variable": {
                    "value": "gradv",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "possible_values": []
                }
            },
            "sum_112": {
                "variable": {
                    "value": "loss2",
                    "possible_values": []
                },
                "input": {
                    "value": "vectors * grad2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "randn_like_127": {
                "variable": {
                    "value": "vectors",
                    "possible_values": []
                },
                "input": {
                    "value": "dup_samples",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "perturbed_samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_130": {
                "variable": {
                    "value": "gradv",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "possible_values": []
                }
            },
            "sum_136": {
                "variable": {
                    "value": "loss2",
                    "possible_values": []
                },
                "input": {
                    "value": "(vectors * grad2).view(dup_samples.shape[0], -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "randn_like_155": {
                "variable": {
                    "value": "vectors",
                    "possible_values": []
                },
                "input": {
                    "value": "dup_samples",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "perturbed_samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_158": {
                "variable": {
                    "value": "gradv",
                    "possible_values": []
                },
                "input": {
                    "value": "grad1 * vectors",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "loss2",
                    "possible_values": []
                },
                "input": {
                    "value": "(vectors * grad2).view(dup_samples.shape[0], -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "randn_like_9": {
                "variable": {
                    "value": "vectors",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "possible_values": []
                }
            },
            "randn_like_39": {
                "variable": {
                    "value": "vectors",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "possible_values": []
                }
            },
            "grad_22": {
                "outputs": {
                    "value": "logp",
                    "possible_values": [
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_27": {
                "outputs": {
                    "value": "gradv",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_50": {
                "outputs": {
                    "value": "logp",
                    "possible_values": [
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_55": {
                "outputs": {
                    "value": "gradv",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "norm_68": {
                "input": {
                    "value": "vectors",
                    "possible_values": [
                        [
                            "torch.randn_like(samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "Name"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True) * np.sqrt(vectors.shape[-1])",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "Name"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_71": {
                "outputs": {
                    "value": "logp",
                    "possible_values": [
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "perturbed_samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_74": {
                "outputs": {
                    "value": "gradv",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "perturbed_samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_89": {
                "outputs": {
                    "value": "logp",
                    "possible_values": [
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ],
                        [
                            "-energy_net(dup_samples).sum()",
                            "UnaryOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "perturbed_samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "grad1 * grad1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "grad_92": {
                "outputs": {
                    "value": "gradv",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "perturbed_samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "norm_106": {
                "input": {
                    "value": "vectors",
                    "possible_values": [
                        [
                            "torch.randn_like(samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "Name"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True) * np.sqrt(vectors.shape[-1])",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "Name"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_111": {
                "outputs": {
                    "value": "gradv",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "perturbed_samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "grad_131": {
                "outputs": {
                    "value": "gradv",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "perturbed_samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "grad1 * grad1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "grad_159": {
                "outputs": {
                    "value": "gradv",
                    "possible_values": [
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ],
                        [
                            "torch.sum(grad1 * vectors)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "dup_samples",
                    "possible_values": [
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ],
                        [
                            "perturbed_samples.unsqueeze(0).expand(n_particles, *samples.shape).contiguous().view(-1, *samples.shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_162": {
                "input": {
                    "value": "grad1 * grad1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "grad1 * vectors",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "norm_52": {
                "input": {
                    "value": "grad1",
                    "possible_values": [
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, dup_samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "autograd.grad(logp, dup_samples, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "score_net(dup_samples)",
                            "Call"
                        ],
                        [
                            "score_net(dup_samples)",
                            "Call"
                        ],
                        [
                            "grad1.view(dup_samples.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "scorenet(dup_samples, dup_labels)",
                            "Call"
                        ],
                        [
                            "grad1.view(dup_samples.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_73": {
                "input": {
                    "value": "grad1 * vectors",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "grad1 * vectors",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "randn_like_147": {
                "input": {
                    "value": "samples",
                    "possible_values": []
                }
            },
            "norm_13": {
                "input": {
                    "value": "vectors",
                    "possible_values": [
                        [
                            "torch.randn_like(samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "Name"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True) * np.sqrt(vectors.shape[-1])",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(samples)",
                            "Call"
                        ],
                        [
                            "noise",
                            "Name"
                        ],
                        [
                            "vectors.sign()",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "vectors / torch.norm(vectors, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ],
                        [
                            "torch.randn_like(dup_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_86": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_81": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "manual_seed_all_89": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            }
        }
    },
    "models/cond_refinenet_dilated.py": {
        "torch": {
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_53": {
                "variable": {
                    "value": "self.instance_norm",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool2d_80": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.norms",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "AvgPool2d_102": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ModuleList_150": {
                "variable": {
                    "value": "self.convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_151": {
                "variable": {
                    "value": "self.norms",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "sums",
                    "possible_values": []
                },
                "*size": {
                    "value": "xs[0].shape[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "self.features",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*shape",
                    "possible_values": []
                },
                "device": {
                    "value": "xs[0].device",
                    "possible_values": []
                }
            },
            "ModuleList_175": {
                "variable": {
                    "value": "self.adapt_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_239": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PixelShuffle_240": {
                "variable": {
                    "value": "self.pixelshuffle",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, output, output, output]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_309": {
                "variable": {
                    "value": "self.instance_norm",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "mean_319": {
                "variable": {
                    "value": "means",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "path + x",
                            "BinOp"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "path + x",
                            "BinOp"
                        ],
                        [
                            "getattr(self, '{}_{}_norm'.format(i + 1, j + 1))(x, y)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, '{}_{}_conv'.format(i + 1, j + 1))(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "m(x, y)",
                            "Call"
                        ],
                        [
                            "2 * x - 1.0",
                            "BinOp"
                        ],
                        [
                            "m(x, y)",
                            "Call"
                        ],
                        [
                            "2 * x - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "mean_320": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "(means - m) / torch.sqrt(v + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "var_321": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "(means - m) / torch.sqrt(v + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ELU_344": {
                "variable": {
                    "value": "self.act",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_347": {
                "variable": {
                    "value": "self.begin_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "config.data.channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_350": {
                "variable": {
                    "value": "self.end_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.data.channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_352": {
                "variable": {
                    "value": "self.res1",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(self.ngf, self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm), ConditionalResidualBlock(self.ngf, self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "possible_values": []
                }
            },
            "ModuleList_359": {
                "variable": {
                    "value": "self.res2",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "possible_values": []
                }
            },
            "ModuleList_366": {
                "variable": {
                    "value": "self.res3",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, dilation=2), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=2)]",
                    "possible_values": []
                }
            },
            "ELU_428": {
                "variable": {
                    "value": "self.act",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_431": {
                "variable": {
                    "value": "self.begin_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "config.data.channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_434": {
                "variable": {
                    "value": "self.end_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.data.channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_436": {
                "variable": {
                    "value": "self.res1",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(self.ngf, self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm), ConditionalResidualBlock(self.ngf, self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "possible_values": []
                }
            },
            "ModuleList_443": {
                "variable": {
                    "value": "self.res2",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "possible_values": []
                }
            },
            "ModuleList_450": {
                "variable": {
                    "value": "self.res3",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "possible_values": []
                }
            },
            "ModuleList_457": {
                "variable": {
                    "value": "self.res4",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 4 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, dilation=2), ConditionalResidualBlock(4 * self.ngf, 4 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=2)]",
                    "possible_values": []
                }
            },
            "ModuleList_464": {
                "variable": {
                    "value": "self.res5",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(4 * self.ngf, 4 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, dilation=4), ConditionalResidualBlock(4 * self.ngf, 4 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=4)]",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "possible_values": []
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "Embedding_55": {
                "variable": {
                    "value": "self.embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "possible_values": []
                }
            },
            "Embedding_59": {
                "variable": {
                    "value": "self.embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.norms[i](xs[i], y)",
                            "Call"
                        ],
                        [
                            "self.convs[i](h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, size=shape, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.adapt_convs[i](xs[i], y)",
                            "Call"
                        ],
                        [
                            "self.msf(hs, y, output_shape)",
                            "Call"
                        ],
                        [
                            "hs[0]",
                            "Subscript"
                        ],
                        [
                            "self.crp(h, y)",
                            "Call"
                        ],
                        [
                            "self.output_convs(h, y)",
                            "Call"
                        ],
                        [
                            "self.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "h + means[..., None, None] * alpha[..., None, None]",
                            "BinOp"
                        ],
                        [
                            "h + means[..., None, None] * alpha[..., None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ZeroPad2d((1, 0, 1, 0))",
                    "possible_values": []
                }
            },
            "ELU_250": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Embedding_311": {
                "variable": {
                    "value": "self.embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 3",
                    "possible_values": []
                }
            },
            "Embedding_315": {
                "variable": {
                    "value": "self.embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2 * num_features",
                    "possible_values": []
                }
            },
            "ModuleList_374": {
                "variable": {
                    "value": "self.res4",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, adjust_padding=True, dilation=4), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=4)]",
                    "possible_values": []
                }
            },
            "ModuleList_381": {
                "variable": {
                    "value": "self.res4",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, adjust_padding=False, dilation=4), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=4)]",
                    "possible_values": []
                }
            },
            "Conv2d_264": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sqrt_322": {
                "input": {
                    "value": "v + 1e-05",
                    "possible_values": []
                }
            },
            "ZeroPad2d_213": {
                "padding": {
                    "value": "(1, 0, 1, 0)",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_277": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_279": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/gmm.py": {
        "torch": {
            "eye_11": {
                "variable": {
                    "value": "cov",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "MultivariateNormal_17": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "possible_values": [
                        [
                            "torch.range(1, dim) / 10",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "possible_values": [
                        [
                            "torch.eye(dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "self.mix_probs",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.8, 0.2]",
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "self.means",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[5 * torch.ones(dim), -torch.ones(dim) * 5]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "multinomial_37": {
                "variable": {
                    "value": "mix_idx",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mix_probs",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n",
                    "possible_values": [
                        [
                            "n[0]",
                            "Subscript"
                        ],
                        [
                            "n[0]",
                            "Subscript"
                        ],
                        [
                            "n[0]",
                            "Subscript"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "logsumexp_47": {
                "variable": {
                    "value": "logp",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(logps, dim=0)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "self.mix_probs",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.8, 0.2]",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "self.means",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[5 * torch.ones(dim), -torch.ones(dim) * 5]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_66": {
                "variable": {
                    "value": "self.std",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(dim) * self.sigma for i in range(len(self.mix_probs))]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "multinomial_70": {
                "variable": {
                    "value": "mix_idx",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mix_probs",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n",
                    "possible_values": [
                        [
                            "n[0]",
                            "Subscript"
                        ],
                        [
                            "n[0]",
                            "Subscript"
                        ],
                        [
                            "n[0]",
                            "Subscript"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "logsumexp_80": {
                "variable": {
                    "value": "logp",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(logps, dim=0)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "rand_90": {
                "variable": {
                    "value": "rands",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "possible_values": [
                        [
                            "n[0]",
                            "Subscript"
                        ],
                        [
                            "n[0]",
                            "Subscript"
                        ],
                        [
                            "n[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "range_th",
                    "possible_values": []
                },
                "data": {
                    "value": "self.range",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "results",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples.shape[0]",
                    "possible_values": []
                }
            },
            "randn_107": {
                "variable": {
                    "value": "self.mean",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.mean",
                    "possible_values": []
                },
                "data": {
                    "value": "self.mean",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.log_std",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(3, dim)",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "self.mix_logits",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(3)",
                    "possible_values": []
                }
            },
            "log_softmax_118": {
                "variable": {
                    "value": "mix_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mix_logits",
                    "possible_values": []
                }
            },
            "logsumexp_120": {
                "variable": {
                    "value": "log_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob",
                    "possible_values": [
                        [
                            "-energy.sum(dim=-1)",
                            "UnaryOp"
                        ],
                        [
                            "log_prob + mix_probs",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(log_prob, dim=-1)",
                            "Call"
                        ],
                        [
                            "-energy",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.mean",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(dim)",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.log_std",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(dim)",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self.log_std",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(batch_size, dim)",
                    "possible_values": []
                }
            },
            "Parameter_140": {
                "variable": {
                    "value": "self.mean",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(batch_size, dim)",
                    "possible_values": []
                }
            },
            "range_16": {
                "start": {
                    "value": "1",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "stack_47": {
                "tensors": {
                    "value": "logps",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "enable_grad_51": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_80": {
                "tensors": {
                    "value": "logps",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "randn_111": {
                "*size": {
                    "value": "3",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "randn_112": {
                "*size": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "*size": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "eye_14": {
                "n": {
                    "value": "dim // 2",
                    "possible_values": []
                }
            },
            "randn_like_39": {
                "input": {
                    "value": "means",
                    "possible_values": [
                        [
                            "self.means[mix_idx]",
                            "Subscript"
                        ],
                        [
                            "self.means[mix_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "grad_55": {
                "outputs": {
                    "value": "log_probs",
                    "possible_values": [
                        [
                            "self.log_prob(samples, sigma).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "samples",
                    "possible_values": [
                        [
                            "samples.detach()",
                            "Call"
                        ],
                        [
                            "(rands - 0.5) * self.range * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_73": {
                "input": {
                    "value": "means",
                    "possible_values": [
                        [
                            "self.means[mix_idx]",
                            "Subscript"
                        ],
                        [
                            "self.means[mix_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_32": {
                "*size": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "ones_64": {
                "*size": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "dim",
                    "possible_values": []
                }
            }
        }
    },
    "models/inception.py": {
        "torch": {
            "ModuleList_58": {
                "variable": {
                    "value": "self.blocks",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "interpolate_125": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "*block0",
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "*block1",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "*block2",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_100": {
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*block3",
                    "possible_values": []
                }
            }
        }
    },
    "models/pix2pix.py": {
        "torch": {
            "LambdaLR_49": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "possible_values": []
                }
            },
            "DataParallel_110": {
                "variable": {
                    "value": "net",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(net, gpu_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ResnetGenerator(input_nc, output_nc, ngf, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=9)",
                            "Call"
                        ],
                        [
                            "ResnetGenerator(input_nc, output_nc, ngf, norm_layer=norm_layer, use_dropout=use_dropout, n_blocks=6)",
                            "Call"
                        ],
                        [
                            "UnetGenerator(input_nc, output_nc, 7, ngf, norm_layer=norm_layer, use_dropout=use_dropout)",
                            "Call"
                        ],
                        [
                            "UnetGenerator(input_nc, output_nc, 8, ngf, norm_layer=norm_layer, use_dropout=use_dropout)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "NLayerDiscriminator(input_nc, ndf, n_layers=3, norm_layer=norm_layer)",
                            "Call"
                        ],
                        [
                            "NLayerDiscriminator(input_nc, ndf, n_layers_D, norm_layer=norm_layer)",
                            "Call"
                        ],
                        [
                            "PixelDiscriminator(input_nc, ndf, norm_layer=norm_layer)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "possible_values": [
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ],
                        [
                            "[]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grad_304": {
                "variable": {
                    "value": "gradients",
                    "possible_values": []
                },
                "outputs": {
                    "value": "disc_interpolates",
                    "possible_values": [
                        [
                            "netD(interpolatesv)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolatesv",
                    "possible_values": [
                        [
                            "real_data",
                            "Name"
                        ],
                        [
                            "fake_data",
                            "Name"
                        ],
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_369": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "possible_values": []
                }
            },
            "Conv2d_501": {
                "variable": {
                    "value": "downconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_508": {
                "variable": {
                    "value": "downrelu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ELU_510": {
                "variable": {
                    "value": "uprelu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_539": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "possible_values": []
                }
            },
            "Conv2d_576": {
                "variable": {
                    "value": "downconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_579": {
                "variable": {
                    "value": "downrelu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ELU_581": {
                "variable": {
                    "value": "uprelu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_610": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "possible_values": []
                }
            },
            "Sequential_661": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "possible_values": []
                }
            },
            "Sequential_693": {
                "variable": {
                    "value": "self.net",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "possible_values": []
                }
            },
            "StepLR_51": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MSELoss_229": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_428": {
                "*args": {
                    "value": "*conv_block",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_514": {
                "variable": {
                    "value": "upconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_585": {
                "variable": {
                    "value": "upconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_53": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "data": {
                    "value": "target_real_label",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_226": {
                "data": {
                    "value": "target_fake_label",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_231": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_340": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_341": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_343": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_366": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_367": {
                "in_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Conv2d_413": {
                "in_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_413": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_426": {
                "in_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_521": {
                "variable": {
                    "value": "upconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_528": {
                "variable": {
                    "value": "upconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_545": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_592": {
                "variable": {
                    "value": "upconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_599": {
                "variable": {
                    "value": "upconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_616": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_639": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "ELU_639": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_654": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_656": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_660": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_686": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "outer_nc",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ELU_687": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_688": {
                "in_channels": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_690": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_691": {
                "in_channels": {
                    "value": "ndf * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_55": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "T_max": {
                    "value": "opt.niter",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "rand_295": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.shape[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_305": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "possible_values": []
                }
            },
            "Conv2d_348": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_350": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_360": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_365": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_405": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_415": {
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_419": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_646": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.BatchNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func != nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer != nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_648": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_407": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_421": {
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_535": {
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Dropout_606": {
                "p": {
                    "value": "0.5",
                    "possible_values": []
                }
            }
        }
    },
    "models/refinenet_dilated_baseline.py": {
        "torch": {
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.norms",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "AvgPool2d_77": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.norms",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "sums",
                    "possible_values": []
                },
                "*size": {
                    "value": "xs[0].shape[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "self.features",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*shape",
                    "possible_values": []
                },
                "device": {
                    "value": "xs[0].device",
                    "possible_values": []
                }
            },
            "ModuleList_150": {
                "variable": {
                    "value": "self.adapt_convs",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_202": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_214": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PixelShuffle_215": {
                "variable": {
                    "value": "self.pixelshuffle",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, output, output, output]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_284": {
                "variable": {
                    "value": "self.instance_norm",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Parameter_285": {
                "variable": {
                    "value": "self.alpha",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "possible_values": []
                }
            },
            "Parameter_286": {
                "variable": {
                    "value": "self.gamma",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "possible_values": []
                }
            },
            "mean_293": {
                "variable": {
                    "value": "means",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "path + x",
                            "BinOp"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "path + x",
                            "BinOp"
                        ],
                        [
                            "getattr(self, '{}_{}_norm'.format(i + 1, j + 1))(x, y)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, '{}_{}_conv'.format(i + 1, j + 1))(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "m(x, y)",
                            "Call"
                        ],
                        [
                            "2 * x - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "mean_294": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "(means - m) / torch.sqrt(v + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "var_295": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "(means - m) / torch.sqrt(v + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ELU_315": {
                "variable": {
                    "value": "self.act",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_318": {
                "variable": {
                    "value": "self.begin_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "config.data.channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_321": {
                "variable": {
                    "value": "self.end_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.data.channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_323": {
                "variable": {
                    "value": "self.res1",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(self.ngf, self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm), ConditionalResidualBlock(self.ngf, self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "possible_values": []
                }
            },
            "ModuleList_330": {
                "variable": {
                    "value": "self.res2",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm)]",
                    "possible_values": []
                }
            },
            "ModuleList_337": {
                "variable": {
                    "value": "self.res3",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, dilation=2), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=2)]",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "possible_values": []
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "interpolate_138": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.norms[i](xs[i], y)",
                            "Call"
                        ],
                        [
                            "self.convs[i](h)",
                            "Call"
                        ],
                        [
                            "F.interpolate(h, size=shape, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.adapt_convs[i](xs[i], y)",
                            "Call"
                        ],
                        [
                            "self.msf(hs, y, output_shape)",
                            "Call"
                        ],
                        [
                            "hs[0]",
                            "Subscript"
                        ],
                        [
                            "self.crp(h, y)",
                            "Call"
                        ],
                        [
                            "self.output_convs(h, y)",
                            "Call"
                        ],
                        [
                            "self.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "h + means[..., None, None] * self.alpha[..., None, None]",
                            "BinOp"
                        ],
                        [
                            "h + means[..., None, None] * self.alpha[..., None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ZeroPad2d((1, 0, 1, 0))",
                    "possible_values": []
                }
            },
            "ELU_225": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Parameter_290": {
                "variable": {
                    "value": "self.beta",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "possible_values": []
                }
            },
            "ModuleList_345": {
                "variable": {
                    "value": "self.res4",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, adjust_padding=True, dilation=4), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=4)]",
                    "possible_values": []
                }
            },
            "ModuleList_352": {
                "variable": {
                    "value": "self.res4",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample='down', act=act, normalization=self.norm, adjust_padding=False, dilation=4), ConditionalResidualBlock(2 * self.ngf, 2 * self.ngf, self.num_classes, resample=None, act=act, normalization=self.norm, dilation=4)]",
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "*size": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "zeros_286": {
                "*size": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "sqrt_296": {
                "input": {
                    "value": "v + 1e-05",
                    "possible_values": []
                }
            },
            "ZeroPad2d_188": {
                "padding": {
                    "value": "(1, 0, 1, 0)",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_252": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "*size": {
                    "value": "num_features",
                    "possible_values": []
                }
            }
        }
    },
    "models/scorenet.py": {
        "torch": {
            "Sequential_108": {
                "variable": {
                    "value": "self.convs",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, self.nef, 3, 1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.deconvs",
                    "possible_values": []
                },
                "*args": {
                    "value": "DeconvResBlock(4 * self.ndf, 4 * self.ndf, act=act)",
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "possible_values": []
                }
            },
            "Sequential_314": {
                "variable": {
                    "value": "self.convs",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, self.nef, 3, 1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_334": {
                "variable": {
                    "value": "self.main",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(10 * 10, 1024)",
                    "possible_values": []
                }
            },
            "Sequential_364": {
                "variable": {
                    "value": "self.u_net",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(config.data.channels, nef, 16, stride=2, padding=2)",
                    "possible_values": []
                }
            },
            "Sequential_396": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config.data.channels * 28 * 28, 1024)",
                    "possible_values": []
                }
            },
            "Sequential_419": {
                "variable": {
                    "value": "self.u_net",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(config.data.channels, nef, 4, stride=2, padding=1)",
                    "possible_values": []
                }
            },
            "Sequential_451": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config.data.channels * 28 * 28, 1024)",
                    "possible_values": []
                }
            },
            "Sequential_474": {
                "variable": {
                    "value": "self.u_net",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(config.data.channels, nef, 4, stride=2, padding=1)",
                    "possible_values": []
                }
            },
            "Sequential_495": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config.data.channels * 10 ** 2, 256)",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.main",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, out_channel, 3, stride=1, padding=1)",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.main",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, out_channel, 3, stride=2, padding=1)",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.residual",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.main",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channel, out_channel, 3, stride=1, padding=1)",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.main",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channel, out_channel, 3, stride=1, padding=1)",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_87": {
                "variable": {
                    "value": "self.residual",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "self.ndf",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_169": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "input_nc",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "config.model.ngf * 2",
                            "BinOp"
                        ],
                        [
                            "config.model.ngf",
                            "Attribute"
                        ],
                        [
                            "config.model.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_172": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_195": {
                "padding": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Conv2d_196": {
                "in_channels": {
                    "value": "ngf",
                    "possible_values": [
                        [
                            "config.model.ngf * 2",
                            "BinOp"
                        ],
                        [
                            "config.model.ngf",
                            "Attribute"
                        ],
                        [
                            "config.model.ngf",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Conv2d_315": {
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nef",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "in_features": {
                    "value": "10 * 10",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "LayerNorm_336": {
                "normalized_shape": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "ELU_337": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_338": {
                "in_features": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "LayerNorm_339": {
                "normalized_shape": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "ELU_340": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "in_features": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "LayerNorm_342": {
                "normalized_shape": {
                    "value": "512",
                    "possible_values": []
                }
            },
            "ELU_343": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_344": {
                "in_features": {
                    "value": "512",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "LayerNorm_345": {
                "normalized_shape": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "Conv2d_366": {
                "in_channels": {
                    "value": "config.data.channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "16",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "GroupNorm_368": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ELU_369": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "in_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_372": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                }
            },
            "ELU_374": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_376": {
                "in_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nef * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "GroupNorm_377": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef * 4",
                    "possible_values": []
                }
            },
            "ELU_379": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_381": {
                "in_channels": {
                    "value": "nef * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "GroupNorm_382": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                }
            },
            "ELU_384": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_386": {
                "in_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_387": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ELU_389": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_391": {
                "in_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "config.data.channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ELU_393": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_397": {
                "in_features": {
                    "value": "config.data.channels * 28 * 28",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "LayerNorm_398": {
                "normalized_shape": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "ELU_399": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_400": {
                "in_features": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.data.channels * 28 * 28",
                    "possible_values": []
                }
            },
            "Conv2d_421": {
                "in_channels": {
                    "value": "config.data.channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_423": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ELU_424": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_426": {
                "in_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_427": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                }
            },
            "ELU_429": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_431": {
                "in_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nef * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "GroupNorm_432": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef * 4",
                    "possible_values": []
                }
            },
            "ELU_434": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_436": {
                "in_channels": {
                    "value": "nef * 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "GroupNorm_437": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                }
            },
            "ELU_439": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_441": {
                "in_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_442": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ELU_444": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_446": {
                "in_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "config.data.channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ELU_448": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_452": {
                "in_features": {
                    "value": "config.data.channels * 28 * 28",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "LayerNorm_453": {
                "normalized_shape": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "ELU_454": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_455": {
                "in_features": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.data.channels * 28 * 28",
                    "possible_values": []
                }
            },
            "Conv2d_476": {
                "in_channels": {
                    "value": "config.data.channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_478": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ELU_479": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_481": {
                "in_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_482": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                }
            },
            "ELU_484": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_486": {
                "in_channels": {
                    "value": "nef * 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_487": {
                "num_groups": {
                    "value": "4",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ELU_489": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_491": {
                "in_channels": {
                    "value": "nef",
                    "possible_values": [
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef",
                            "Attribute"
                        ],
                        [
                            "config.model.nef * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "config.data.channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ELU_493": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_496": {
                "in_features": {
                    "value": "config.data.channels * 10 ** 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "LayerNorm_497": {
                "normalized_shape": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ELU_498": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_499": {
                "in_features": {
                    "value": "256",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.data.channels * 10 ** 2",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_28": {
                "num_groups": {
                    "value": "8",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channel",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_31": {
                "num_groups": {
                    "value": "8",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channel",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_36": {
                "num_groups": {
                    "value": "8",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channel",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_39": {
                "num_groups": {
                    "value": "8",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channel",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_73": {
                "in_channels": {
                    "value": "in_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_74": {
                "num_groups": {
                    "value": "8",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channel",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_76": {
                "in_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_77": {
                "num_groups": {
                    "value": "8",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channel",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_81": {
                "in_channels": {
                    "value": "in_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_82": {
                "num_groups": {
                    "value": "8",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channel",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_84": {
                "in_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GroupNorm_85": {
                "num_groups": {
                    "value": "8",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channel",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_179": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_189": {
                "in_channels": {
                    "value": "ngf * mult",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ELU_194": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Softplus_19": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Softplus_65": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ELU_21": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ELU_67": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LeakyReLU_23": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "runners/anneal_runner.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "SVHN(os.path.join(self.args.run, 'datasets', 'svhn'), split='train', download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "SVHN(os.path.join(self.args.run, 'datasets', 'svhn'), split='train', download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10_test'), train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist_test'), train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "SVHN(os.path.join(self.args.run, 'datasets', 'svhn_test'), split='test', download=True, transform=test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_115": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "module": {
                    "value": "score",
                    "possible_values": [
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "sigmas",
                    "possible_values": []
                },
                "data": {
                    "value": "np.exp(np.linspace(np.log(self.config.model.sigma_begin), np.log(self.config.model.sigma_end), self.config.model.num_classes))",
                    "possible_values": []
                }
            },
            "load_223": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "possible_values": []
                }
            },
            "DataParallel_225": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "module": {
                    "value": "score",
                    "possible_values": [
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_309": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "possible_values": []
                }
            },
            "DataParallel_311": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "module": {
                    "value": "score",
                    "possible_values": [
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_368": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "SVHN(os.path.join(self.args.run, 'datasets', 'svhn'), split='train', download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "SVHN(os.path.join(self.args.run, 'datasets', 'svhn'), split='train', download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "20",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_373": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.config.data.channels",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.config.data.image_size",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.data.image_size",
                    "possible_values": []
                }
            },
            "load_120": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                }
            },
            "rand_240": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_size ** 2",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "possible_values": []
                }
            },
            "rand_260": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_size ** 2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "possible_values": []
                }
            },
            "save_372": {
                "obj": {
                    "value": "refer_image",
                    "possible_values": [
                        [
                            "refer_image.unsqueeze(1).expand(-1, x_mod.shape[1], -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "refer_image.contiguous().view(-1, 3, 32, 32)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'refer_image.pth')",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.config.optim.beta1, 0.999)",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "self.config.optim.amsgrad",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "lam + (1 - 2 * lam) * image",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log1p_41": {
                "input": {
                    "value": "-image",
                    "possible_values": []
                }
            },
            "randint_140": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "len(sigmas)",
                    "possible_values": []
                },
                "size": {
                    "value": "(X.shape[0],)",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                }
            },
            "ones_189": {
                "*size": {
                    "value": "x_mod.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "x_mod.device",
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_289": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sigmoid_383": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_391": {
                "obj": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'image_completion_raw_{}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "RMSprop_33": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "possible_values": []
                }
            },
            "randint_170": {
                "variable": {
                    "value": "test_labels",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "len(sigmas)",
                    "possible_values": []
                },
                "size": {
                    "value": "(test_X.shape[0],)",
                    "possible_values": []
                },
                "device": {
                    "value": "test_X.device",
                    "possible_values": []
                }
            },
            "sigmoid_248": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_256": {
                "obj": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'image_raw_{}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "sigmoid_269": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_277": {
                "obj": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'image_raw_{}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "SGD_35": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "save_183": {
                "obj": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[score.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_{}.pth'.format(step))",
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[score.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                }
            },
            "clamp_194": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod",
                            "Name"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "randn_like_195": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod",
                            "Name"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_208": {
                "*size": {
                    "value": "x_mod.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "x_mod.device",
                    "possible_values": []
                }
            },
            "ones_291": {
                "*size": {
                    "value": "x_mod.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "x_mod.device",
                    "possible_values": []
                }
            },
            "rand_like_136": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X / 256.0 * 255.0 + torch.rand_like(X) / 256.0",
                            "BinOp"
                        ],
                        [
                            "self.logit_transform(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clamp_212": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod",
                            "Name"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "randn_like_213": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod",
                            "Name"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_295": {
                "input": {
                    "value": "half_refer_image",
                    "possible_values": [
                        [
                            "refer_image[..., :16]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_298": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod",
                            "Name"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "randn_like_299": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod",
                            "Name"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_like_166": {
                "input": {
                    "value": "test_X",
                    "possible_values": [
                        [
                            "test_X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "test_X / 256.0 * 255.0 + torch.rand_like(test_X) / 256.0",
                            "BinOp"
                        ],
                        [
                            "self.logit_transform(test_X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "runners/anneal_runner_bk.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "SVHN(os.path.join(self.args.run, 'datasets', 'svhn'), split='train', download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='test', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "SVHN(os.path.join(self.args.run, 'datasets', 'svhn'), split='train', download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10_test'), train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist_test'), train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "SVHN(os.path.join(self.args.run, 'datasets', 'svhn_test'), split='test', download=True, transform=test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_115": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "module": {
                    "value": "score",
                    "possible_values": [
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "sigmas",
                    "possible_values": []
                },
                "data": {
                    "value": "np.exp(np.linspace(np.log(self.config.model.sigma_begin), np.log(self.config.model.sigma_end), self.config.model.num_classes))",
                    "possible_values": []
                }
            },
            "load_223": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "possible_values": []
                }
            },
            "DataParallel_225": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "module": {
                    "value": "score",
                    "possible_values": [
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_309": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "possible_values": []
                }
            },
            "DataParallel_311": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "module": {
                    "value": "score",
                    "possible_values": [
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "CondRefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_120": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                }
            },
            "rand_240": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_size ** 2",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "possible_values": []
                }
            },
            "rand_260": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "*size": {
                    "value": "grid_size ** 2",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "possible_values": []
                }
            },
            "DataLoader_331": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "SVHN(os.path.join(self.args.run, 'datasets', 'svhn'), split='train', download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='test', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "SVHN(os.path.join(self.args.run, 'datasets', 'svhn'), split='train', download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "20",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_334": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.config.data.image_size",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "possible_values": []
                }
            },
            "DataLoader_368": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "SVHN(os.path.join(self.args.run, 'datasets', 'svhn'), split='train', download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='test', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "SVHN(os.path.join(self.args.run, 'datasets', 'svhn'), split='train', download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "20",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_373": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.config.data.channels",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.config.data.image_size",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.data.image_size",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.config.optim.beta1, 0.999)",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "self.config.optim.amsgrad",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "lam + (1 - 2 * lam) * image",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log1p_41": {
                "input": {
                    "value": "-image",
                    "possible_values": []
                }
            },
            "randint_140": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "len(sigmas)",
                    "possible_values": []
                },
                "size": {
                    "value": "(X.shape[0],)",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "possible_values": []
                }
            },
            "ones_189": {
                "*size": {
                    "value": "x_mod.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "x_mod.device",
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_289": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_338": {
                "obj": {
                    "value": "refer_image",
                    "possible_values": [
                        [
                            "refer_image.unsqueeze(1).expand(-1, x_mod.shape[1], -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "refer_image.contiguous().view(-1, 3, 32, 32)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'refer_image.pth')",
                    "possible_values": []
                }
            },
            "save_372": {
                "obj": {
                    "value": "refer_image",
                    "possible_values": [
                        [
                            "refer_image.unsqueeze(1).expand(-1, x_mod.shape[1], -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "refer_image.contiguous().view(-1, 3, 32, 32)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'refer_image.pth')",
                    "possible_values": []
                }
            },
            "RMSprop_33": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "possible_values": []
                }
            },
            "randint_170": {
                "variable": {
                    "value": "test_labels",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "len(sigmas)",
                    "possible_values": []
                },
                "size": {
                    "value": "(test_X.shape[0],)",
                    "possible_values": []
                },
                "device": {
                    "value": "test_X.device",
                    "possible_values": []
                }
            },
            "sigmoid_248": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_256": {
                "obj": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'image_raw_{}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "sigmoid_269": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_277": {
                "obj": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'image_raw_{}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "sigmoid_345": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_353": {
                "obj": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'image_completion_raw_{}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "sigmoid_383": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_391": {
                "obj": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(grid_size ** 2, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(400, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'image_completion_raw_{}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "SGD_35": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "save_183": {
                "obj": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[score.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_{}.pth'.format(step))",
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[score.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                }
            },
            "clamp_194": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod",
                            "Name"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "randn_like_195": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod",
                            "Name"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_208": {
                "*size": {
                    "value": "x_mod.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "x_mod.device",
                    "possible_values": []
                }
            },
            "ones_291": {
                "*size": {
                    "value": "x_mod.shape[0]",
                    "possible_values": []
                },
                "device": {
                    "value": "x_mod.device",
                    "possible_values": []
                }
            },
            "rand_like_136": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X / 256.0 * 255.0 + torch.rand_like(X) / 256.0",
                            "BinOp"
                        ],
                        [
                            "self.logit_transform(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clamp_212": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod",
                            "Name"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "randn_like_213": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod",
                            "Name"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_295": {
                "input": {
                    "value": "half_refer_image",
                    "possible_values": [
                        [
                            "refer_image[..., :16]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_298": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod",
                            "Name"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "randn_like_299": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod",
                            "Name"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ],
                        [
                            "x_mod.view(-1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x_mod + step_size * grad + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_like_166": {
                "input": {
                    "value": "test_X",
                    "possible_values": [
                        [
                            "test_X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "test_X / 256.0 * 255.0 + torch.rand_like(test_X) / 256.0",
                            "BinOp"
                        ],
                        [
                            "self.logit_transform(test_X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "runners/baseline_runner.py": {
        "torch": {
            "DataLoader_93": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "FashionMNIST(os.path.join(self.args.run, 'datasets', 'fmnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10_test'), train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist_test'), train=False, download=True, transform=test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "module": {
                    "value": "score",
                    "possible_values": [
                        [
                            "RefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "RefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_180": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "possible_values": []
                }
            },
            "DataParallel_182": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "module": {
                    "value": "score",
                    "possible_values": [
                        [
                            "RefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "RefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_112": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "FashionMNIST(os.path.join(self.args.run, 'datasets', 'fmnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_like_209": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "possible_values": [
                        [
                            "samples.cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(samples)",
                            "Call"
                        ],
                        [
                            "samples.cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_256": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "FashionMNIST(os.path.join(self.args.run, 'datasets', 'fmnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_like_260": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "possible_values": [
                        [
                            "samples.cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(samples)",
                            "Call"
                        ],
                        [
                            "samples.cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_27": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.config.optim.beta1, 0.999)",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "self.config.optim.amsgrad",
                    "possible_values": []
                }
            },
            "log_38": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "lam + (1 - 2 * lam) * image",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log1p_38": {
                "input": {
                    "value": "-image",
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "RMSprop_30": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "possible_values": []
                }
            },
            "sigmoid_217": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_219": {
                "obj": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'samples_{}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "sigmoid_269": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_271": {
                "obj": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'samples_{}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "SGD_32": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "save_163": {
                "obj": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[score.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_{}.pth'.format(step))",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[score.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                }
            },
            "clamp_171": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "randn_like_172": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_like_124": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X / 256.0 * 255.0 + torch.rand_like(X) / 256.0",
                            "BinOp"
                        ],
                        [
                            "self.logit_transform(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_like_149": {
                "input": {
                    "value": "test_X",
                    "possible_values": [
                        [
                            "test_X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "test_X / 256.0 * 255.0 + torch.rand_like(test_X) / 256.0",
                            "BinOp"
                        ],
                        [
                            "self.logit_transform(test_X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "runners/baseline_runner_bk.py": {
        "torch": {
            "DataLoader_93": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='train', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.RandomHorizontalFlip(), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='train', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "FashionMNIST(os.path.join(self.args.run, 'datasets', 'fmnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='test', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10_test'), train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist_test'), train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba_test'), split='test', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor()]), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "module": {
                    "value": "score",
                    "possible_values": [
                        [
                            "RefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "RefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_180": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.config.device",
                    "possible_values": []
                }
            },
            "DataParallel_182": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "module": {
                    "value": "score",
                    "possible_values": [
                        [
                            "RefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ],
                        [
                            "RefineNetDilated(self.config).to(self.config.device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_112": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='train', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.RandomHorizontalFlip(), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='train', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "FashionMNIST(os.path.join(self.args.run, 'datasets', 'fmnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='test', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_like_209": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "possible_values": [
                        [
                            "torch.rand(100, 3, self.config.data.image_size, self.config.data.image_size, device=self.config.device)",
                            "Call"
                        ],
                        [
                            "samples.cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(samples)",
                            "Call"
                        ],
                        [
                            "samples.cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_27": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.config.optim.beta1, 0.999)",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "self.config.optim.amsgrad",
                    "possible_values": []
                }
            },
            "log_38": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "lam + (1 - 2 * lam) * image",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log1p_38": {
                "input": {
                    "value": "-image",
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataLoader_229": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='train', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.RandomHorizontalFlip(), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='train', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "FashionMNIST(os.path.join(self.args.run, 'datasets', 'fmnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='test', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_232": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.config.data.image_size",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.config.data.image_size",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config.device",
                    "possible_values": []
                }
            },
            "DataLoader_256": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=tran_transform)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='train', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.RandomHorizontalFlip(), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='train', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "FashionMNIST(os.path.join(self.args.run, 'datasets', 'fmnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "CelebA(root=os.path.join(self.args.run, 'datasets', 'celeba'), split='test', transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor()]), download=True)",
                            "Call"
                        ],
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_like_260": {
                "variable": {
                    "value": "samples",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "possible_values": [
                        [
                            "torch.rand(100, 3, self.config.data.image_size, self.config.data.image_size, device=self.config.device)",
                            "Call"
                        ],
                        [
                            "samples.cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(samples)",
                            "Call"
                        ],
                        [
                            "samples.cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_30": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "possible_values": []
                }
            },
            "sigmoid_217": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_219": {
                "obj": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'samples_{}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "SGD_32": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "save_163": {
                "obj": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[score.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_{}.pth'.format(step))",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[score.state_dict(), optimizer.state_dict()]",
                            "List"
                        ],
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'), map_location=self.config.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                }
            },
            "clamp_171": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "randn_like_172": {
                "input": {
                    "value": "x_mod",
                    "possible_values": [
                        [
                            "x_mod + step_lr * grad + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_242": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_244": {
                "obj": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'samples_{}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "sigmoid_269": {
                "variable": {
                    "value": "sample",
                    "possible_values": []
                },
                "input": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_271": {
                "obj": {
                    "value": "sample",
                    "possible_values": [
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "sample.view(100, self.config.data.channels, self.config.data.image_size, self.config.data.image_size)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(sample)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.image_folder, 'samples_{}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "rand_like_124": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "X / 256.0 * 255.0 + torch.rand_like(X) / 256.0",
                            "BinOp"
                        ],
                        [
                            "self.logit_transform(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "rand_like_149": {
                "input": {
                    "value": "test_X",
                    "possible_values": [
                        [
                            "test_X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "test_X / 256.0 * 255.0 + torch.rand_like(test_X) / 256.0",
                            "BinOp"
                        ],
                        [
                            "self.logit_transform(test_X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "runners/scorenet_runner.py": {
        "torch": {
            "DataLoader_81": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, test_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.training.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "load_98": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                }
            },
            "Adam_25": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.config.optim.beta1, 0.999)",
                    "possible_values": []
                }
            },
            "log_36": {
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "lam + (1 - 2 * lam) * image",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log1p_36": {
                "input": {
                    "value": "-image",
                    "possible_values": []
                }
            },
            "Subset_59": {
                "variable": {
                    "value": "test_dataset",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices",
                    "possible_values": []
                }
            },
            "Subset_60": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_indices",
                    "possible_values": []
                }
            },
            "RMSprop_28": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim.weight_decay",
                    "possible_values": []
                }
            },
            "Subset_78": {
                "variable": {
                    "value": "test_dataset",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "test_indices",
                    "possible_values": []
                }
            },
            "Subset_79": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CIFAR10(os.path.join(self.args.run, 'datasets', 'cifar10'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "MNIST(os.path.join(self.args.run, 'datasets', 'mnist'), train=True, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=os.path.join(self.args.run, 'datasets', 'celeba'), transform=transforms.Compose([transforms.CenterCrop(140), transforms.Resize(self.config.data.image_size), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "Subset(dataset, train_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "train_indices",
                    "possible_values": []
                }
            },
            "SGD_30": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[score.state_dict(), optimizer.state_dict()]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint_{}.pth'.format(step))",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "states",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.log, 'checkpoint.pth'))",
                            "Call"
                        ],
                        [
                            "[score.state_dict(), optimizer.state_dict()]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.log, 'checkpoint.pth')",
                    "possible_values": []
                }
            },
            "randn_like_117": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "self.logit_transform(X)",
                            "Call"
                        ],
                        [
                            "X + torch.randn_like(X) * sigma",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_146": {
                "input": {
                    "value": "test_X",
                    "possible_values": [
                        [
                            "test_X.to(self.config.device)",
                            "Call"
                        ],
                        [
                            "self.logit_transform(test_X)",
                            "Call"
                        ],
                        [
                            "test_X + torch.randn_like(test_X) * self.config.training.noise_std",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "runners/toy_runner.py": {
        "torch": {
            "Normal_20": {
                "variable": {
                    "value": "self.r_dist",
                    "possible_values": []
                },
                "loc": {
                    "value": "radius",
                    "possible_values": []
                },
                "scale": {
                    "value": "width",
                    "possible_values": []
                }
            },
            "norm_30": {
                "variable": {
                    "value": "r",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "mesh",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mesh",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(mesh, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mesh).float()",
                            "Call"
                        ],
                        [
                            "mesh.to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(mesh, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mesh).float()",
                            "Call"
                        ],
                        [
                            "mesh.to(device)",
                            "Call"
                        ],
                        [
                            "mesh.detach().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(mesh, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mesh).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "mesh",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mesh",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(mesh, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mesh).float()",
                            "Call"
                        ],
                        [
                            "mesh.to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(mesh, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mesh).float()",
                            "Call"
                        ],
                        [
                            "mesh.to(device)",
                            "Call"
                        ],
                        [
                            "mesh.detach().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(mesh, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mesh).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_171": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2, hidden_units)",
                    "possible_values": []
                }
            },
            "Adam_207": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "score.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "from_numpy_237": {
                "variable": {
                    "value": "mesh",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mesh",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(mesh, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mesh).float()",
                            "Call"
                        ],
                        [
                            "mesh.to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(mesh, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mesh).float()",
                            "Call"
                        ],
                        [
                            "mesh.to(device)",
                            "Call"
                        ],
                        [
                            "mesh.detach().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(mesh, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mesh).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_27": {
                "tensors": {
                    "value": "[x, y]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cos_25": {
                "input": {
                    "value": "theta",
                    "possible_values": [
                        [
                            "torch.rand(sample_shape) * np.pi * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_26": {
                "input": {
                    "value": "theta",
                    "possible_values": [
                        [
                            "torch.rand(sample_shape) * np.pi * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_31": {
                "input": {
                    "value": "r * np.pi * 2",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "ndarray": {
                    "value": "mesh",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(mesh, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mesh).float()",
                            "Call"
                        ],
                        [
                            "mesh.to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(mesh, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mesh).float()",
                            "Call"
                        ],
                        [
                            "mesh.to(device)",
                            "Call"
                        ],
                        [
                            "mesh.detach().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(mesh, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mesh).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_182": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "in_features": {
                    "value": "2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_units",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Softplus_200": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "in_features": {
                    "value": "hidden_units",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_units",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "Softplus_202": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "in_features": {
                    "value": "hidden_units",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "rand_23": {
                "*size": {
                    "value": "sample_shape",
                    "possible_values": []
                }
            },
            "rand_129": {
                "*size": {
                    "value": "1280",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "rand_159": {
                "*size": {
                    "value": "1280",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "rand_267": {
                "*size": {
                    "value": "1280",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "rand_280": {
                "*size": {
                    "value": "1280",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "randn_like_44": {
                "input": {
                    "value": "init",
                    "possible_values": [
                        [
                            "init + current_lr / 2 * score(init).detach()",
                            "BinOp"
                        ],
                        [
                            "init + torch.randn_like(init) * np.sqrt(current_lr)",
                            "BinOp"
                        ],
                        [
                            "init + current_lr / 2 * score(init, sigma).detach()",
                            "BinOp"
                        ],
                        [
                            "init + torch.randn_like(init) * np.sqrt(current_lr)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_53": {
                "input": {
                    "value": "init",
                    "possible_values": [
                        [
                            "init + current_lr / 2 * score(init).detach()",
                            "BinOp"
                        ],
                        [
                            "init + torch.randn_like(init) * np.sqrt(current_lr)",
                            "BinOp"
                        ],
                        [
                            "init + current_lr / 2 * score(init, sigma).detach()",
                            "BinOp"
                        ],
                        [
                            "init + torch.randn_like(init) * np.sqrt(current_lr)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}