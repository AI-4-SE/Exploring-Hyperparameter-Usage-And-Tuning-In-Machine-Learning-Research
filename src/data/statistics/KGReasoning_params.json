{
    "dataloader.py": {
        "torch": {
            "stack_32": {
                "variable": {
                    "value": "negative_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_[0] for _ in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_57": {
                "variable": {
                    "value": "subsampling_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.Tensor([subsampling_weight])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "negative_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "negative_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(range(self.nentity))",
                            "Call"
                        ],
                        [
                            "torch.stack([_[0] for _ in data], dim=0)",
                            "Call"
                        ],
                        [
                            "np.random.randint(self.nentity, size=self.negative_sample_size * 2)",
                            "Call"
                        ],
                        [
                            "negative_sample[mask]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate(negative_sample_list)[:self.negative_sample_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(negative_sample)",
                            "Call"
                        ],
                        [
                            "torch.stack([_[1] for _ in data], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_78": {
                "variable": {
                    "value": "positive_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_[0] for _ in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_79": {
                "variable": {
                    "value": "negative_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_[1] for _ in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "subsample_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_[2] for _ in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main-entailment.py": {
        "torch": {
            "save_101": {
                "obj": {
                    "value": "{**save_variable_list, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_path, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_303": {
                "variable": {
                    "value": "valid_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TestDataset(valid_queries, args.nentity, args.nrelation)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.cpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "TestDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_320": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TestDataset(test_queries, args.nentity, args.nrelation)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.cpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "TestDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_358": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "current_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ],
                        [
                            "checkpoint['current_learning_rate']",
                            "Subscript"
                        ],
                        [
                            "current_learning_rate / 5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_366": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.checkpoint_path, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_279": {
                "dataset": {
                    "value": "TrainDataset(train_path_queries, nentity, nrelation, args.negative_sample_size, train_answers)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.cpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "TrainDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_415": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "current_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ],
                        [
                            "checkpoint['current_learning_rate']",
                            "Subscript"
                        ],
                        [
                            "current_learning_rate / 5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_288": {
                "dataset": {
                    "value": "TrainDataset(train_other_queries, nentity, nrelation, args.negative_sample_size, train_answers)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.cpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "TrainDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "save_101": {
                "obj": {
                    "value": "{**save_variable_list, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_path, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_293": {
                "variable": {
                    "value": "valid_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TestDataset(valid_queries, args.nentity, args.nrelation)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.cpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "TestDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_310": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TestDataset(test_queries, args.nentity, args.nrelation)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.cpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "TestDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_348": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "current_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ],
                        [
                            "checkpoint['current_learning_rate']",
                            "Subscript"
                        ],
                        [
                            "current_learning_rate / 5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_356": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.checkpoint_path, 'checkpoint')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_269": {
                "dataset": {
                    "value": "TrainDataset(train_path_queries, nentity, nrelation, args.negative_sample_size, train_answers)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.cpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "TrainDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_405": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "current_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ],
                        [
                            "checkpoint['current_learning_rate']",
                            "Subscript"
                        ],
                        [
                            "current_learning_rate / 5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_278": {
                "dataset": {
                    "value": "TrainDataset(train_other_queries, nentity, nrelation, args.negative_sample_size, train_answers)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.cpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "TrainDataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "clamp_121": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(attention * embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(1 - embeddings, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(attention * (1 - embeddings), dim=0)",
                            "BinOp"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.pow(torch.clamp(embeddings, 0, 1) + eps, attention), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "embedding + r_embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.entity_regularizer(torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx]))",
                            "Call"
                        ],
                        [
                            "torch.cat([alpha_embedding, beta_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "1.0 / embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "torch.cat([1 - upper_embedding, 1 - lower_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "1 - embedding",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_122": {
                "variable": {
                    "value": "(lower, upper)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(attention * embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(1 - embeddings, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(attention * (1 - embeddings), dim=0)",
                            "BinOp"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.pow(torch.clamp(embeddings, 0, 1) + eps, attention), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "embedding + r_embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.entity_regularizer(torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx]))",
                            "Call"
                        ],
                        [
                            "torch.cat([alpha_embedding, beta_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "1.0 / embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "torch.cat([1 - upper_embedding, 1 - lower_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "1 - embedding",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "ordered_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lower, upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "layer1_act",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "layer1_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer1_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(embeddings))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1(embeddings))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1(all_embeddings))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1(embeddings))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_43": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2(layer1_mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_44": {
                "variable": {
                    "value": "(offset, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "layer1_act",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2(layer1_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_62": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention * embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.entity_dim + self.relation_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.entity_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e_embedding, r_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_126": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "lower > upper",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lower + upper) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(lower > upper, mean, lower)",
                            "Call"
                        ],
                        [
                            "torch.rand((nentity, self.entity_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_127": {
                "variable": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "lower > upper",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lower + upper) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "upper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(lower > upper, mean, upper)",
                            "Call"
                        ],
                        [
                            "lower + upper * (1 - lower)",
                            "BinOp"
                        ],
                        [
                            "lower + torch.rand((nentity, self.entity_dim)) * (1 - lower)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_212": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.entity_dim + self.relation_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.entity_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e_embedding, r_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_224": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([e_embedding, r_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(getattr(self, 'layer{}'.format(nl))(x))",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.projection_regularizer(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([e_embedding, r_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(getattr(self, 'layer{}'.format(nl))(x))",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([lower, upper], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.layer2(entropy_embedding)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_237": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "entity_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "entity_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "entity_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "entity_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "entity_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_247": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([e_embedding, r_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(getattr(self, 'layer{}'.format(nl))(x))",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.projection_regularizer(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([e_embedding, r_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(getattr(self, 'layer{}'.format(nl))(x))",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([lower, upper], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.layer2(entropy_embedding)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_249": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([e_embedding, r_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(getattr(self, 'layer{}'.format(nl))(x))",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.projection_regularizer(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([e_embedding, r_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(getattr(self, 'layer{}'.format(nl))(x))",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([lower, upper], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.layer2(entropy_embedding)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_251": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([e_embedding, r_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(getattr(self, 'layer{}'.format(nl))(x))",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.projection_regularizer(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([e_embedding, r_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(getattr(self, 'layer{}'.format(nl))(x))",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([lower, upper], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.layer2(entropy_embedding)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_279": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([gamma])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_284": {
                "variable": {
                    "value": "self.embedding_range",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([(self.gamma.item() + self.epsilon) / hidden_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_324": {
                "variable": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nrelation, self.relation_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_480": {
                "variable": {
                    "value": "(alpha_embedding, beta_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model._parameters['entity_embedding'].data",
                            "Attribute"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Beta_481": {
                "variable": {
                    "value": "entity_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "alpha_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(attention * alpha_embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(alpha_embeddings, dim=0) / num_conj",
                            "BinOp"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "beta_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(attention * beta_embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(beta_embeddings, dim=0) / num_conj",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_707": {
                "variable": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "queries[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(queries, [queries.shape[0] * 2, -1])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([queries[:, :2], queries[:, 5:6]], dim=1), torch.cat([queries[:, 2:4], queries[:, 5:6]], dim=1)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[queries.shape[0] * 2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_718": {
                "variable": {
                    "value": "distance_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta - query_offset_embedding",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_719": {
                "variable": {
                    "value": "distance_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(entity_embedding - query_center_embedding).abs()",
                            "Call"
                        ]
                    ]
                }
            },
            "logsigmoid_894": {
                "variable": {
                    "value": "negative_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-negative_logit",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_894": {
                "variable": {
                    "value": "negative_score",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsigmoid_895": {
                "variable": {
                    "value": "positive_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positive_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.cal_logit_beta(positive_embedding, all_dists)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([positive_logit, positive_union_logit], dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.cal_logit_logic(positive_embedding, all_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([positive_logit, positive_union_logit], dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.cal_logit_box(positive_embedding, all_center_embeddings, all_offset_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([positive_logit, positive_union_logit], dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.cal_logit_vec(positive_embedding, all_center_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([positive_logit, positive_union_logit], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_895": {
                "variable": {
                    "value": "positive_score",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alpha_embeddings, beta_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "layer1_act",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(all_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_84": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2(layer1_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_86": {
                "variable": {
                    "value": "alpha_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention * alpha_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "beta_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention * beta_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'layer{}'.format(nl))(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_160": {
                "variable": {
                    "value": "layer1_act",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_161": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2(layer1_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_222": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'layer{}'.format(nl))(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_227": {
                "variable": {
                    "value": "(lower, upper)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([e_embedding, r_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(getattr(self, 'layer{}'.format(nl))(x))",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.projection_regularizer(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([e_embedding, r_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(getattr(self, 'layer{}'.format(nl))(x))",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([lower, upper], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.layer2(entropy_embedding)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lower, upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_262": {
                "input": {
                    "value": "entity_embedding + self.base_add",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "self.min_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_val",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_293": {
                "variable": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nentity, self.entity_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_332": {
                "variable": {
                    "value": "self.offset_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nrelation, self.entity_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_467": {
                "variable": {
                    "value": "(alpha_embedding, beta_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(attention * embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(1 - embeddings, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(attention * (1 - embeddings), dim=0)",
                            "BinOp"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.pow(torch.clamp(embeddings, 0, 1) + eps, attention), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "embedding + r_embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.entity_regularizer(torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx]))",
                            "Call"
                        ],
                        [
                            "torch.cat([alpha_embedding, beta_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "1.0 / embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "torch.cat([1 - upper_embedding, 1 - lower_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "1 - embedding",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_508": {
                "variable": {
                    "value": "all_alpha_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_alpha_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_alpha_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_508": {
                "variable": {
                    "value": "all_alpha_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_509": {
                "variable": {
                    "value": "all_beta_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_beta_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_beta_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_509": {
                "variable": {
                    "value": "all_beta_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Beta_510": {
                "variable": {
                    "value": "all_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "all_alpha_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_alpha_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "all_beta_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_beta_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_516": {
                "variable": {
                    "value": "all_union_alpha_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_union_alpha_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_union_alpha_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "all_union_alpha_embeddings.view(all_union_alpha_embeddings.shape[0] // 2, 2, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_516": {
                "variable": {
                    "value": "all_union_alpha_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "all_union_beta_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_union_beta_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_union_beta_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "all_union_beta_embeddings.view(all_union_beta_embeddings.shape[0] // 2, 2, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_517": {
                "variable": {
                    "value": "all_union_beta_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Beta_520": {
                "variable": {
                    "value": "all_union_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "all_union_alpha_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_union_alpha_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "all_union_alpha_embeddings.view(all_union_alpha_embeddings.shape[0] // 2, 2, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "all_union_beta_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_union_beta_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "all_union_beta_embeddings.view(all_union_beta_embeddings.shape[0] // 2, 2, 1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_540": {
                "variable": {
                    "value": "positive_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positive_logit, positive_union_logit]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_561": {
                "variable": {
                    "value": "negative_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[negative_logit, negative_union_logit]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_606": {
                "variable": {
                    "value": "(lower_embedding, upper_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model._parameters['entity_embedding'].data",
                            "Attribute"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_607": {
                "variable": {
                    "value": "(query_lower_embedding, query_upper_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "query_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_609": {
                "variable": {
                    "value": "lower_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lower_embedding - query_lower_embedding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_610": {
                "variable": {
                    "value": "upper_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_upper_embedding - upper_embedding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_641": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([alpha_embeddings, beta_embeddings], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_641": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_650": {
                "variable": {
                    "value": "all_union_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_union_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_union_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "all_union_embeddings.view(all_union_embeddings.shape[0] // 2, 2, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_650": {
                "variable": {
                    "value": "all_union_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_671": {
                "variable": {
                    "value": "positive_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positive_logit, positive_union_logit]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_692": {
                "variable": {
                    "value": "negative_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[negative_logit, negative_union_logit]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_745": {
                "variable": {
                    "value": "all_center_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_center_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_center_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_center_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_745": {
                "variable": {
                    "value": "all_center_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_746": {
                "variable": {
                    "value": "all_offset_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_offset_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_offset_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_746": {
                "variable": {
                    "value": "all_offset_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_750": {
                "variable": {
                    "value": "all_union_center_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_union_center_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_union_center_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "all_union_center_embeddings.view(all_union_center_embeddings.shape[0] // 2, 2, 1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_union_center_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "all_union_center_embeddings.view(all_union_center_embeddings.shape[0] // 2, 2, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_750": {
                "variable": {
                    "value": "all_union_center_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_751": {
                "variable": {
                    "value": "all_union_offset_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_union_offset_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_union_offset_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "all_union_offset_embeddings.view(all_union_offset_embeddings.shape[0] // 2, 2, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_751": {
                "variable": {
                    "value": "all_union_offset_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_773": {
                "variable": {
                    "value": "positive_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positive_logit, positive_union_logit]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_794": {
                "variable": {
                    "value": "negative_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[negative_logit, negative_union_logit]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_821": {
                "variable": {
                    "value": "all_center_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_center_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_center_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_center_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_821": {
                "variable": {
                    "value": "all_center_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_823": {
                "variable": {
                    "value": "all_union_center_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_union_center_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(all_union_center_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "all_union_center_embeddings.view(all_union_center_embeddings.shape[0] // 2, 2, 1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_union_center_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "all_union_center_embeddings.view(all_union_center_embeddings.shape[0] // 2, 2, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_823": {
                "variable": {
                    "value": "all_union_center_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_844": {
                "variable": {
                    "value": "positive_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positive_logit, positive_union_logit]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_865": {
                "variable": {
                    "value": "negative_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[negative_logit, negative_union_logit]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_132": {
                "input": {
                    "value": "b * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention, attention]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_187": {
                "variable": {
                    "value": "min_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "smooth_param * embeddings",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_276": {
                "start": {
                    "value": "nentity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_303": {
                "variable": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nentity, self.entity_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_324": {
                "*size": {
                    "value": "nrelation",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.relation_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_381": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "queries[:, idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "queries[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(queries, [queries.shape[0] * 2, -1])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([queries[:, :2], queries[:, 5:6]], dim=1), torch.cat([queries[:, 2:4], queries[:, 5:6]], dim=1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_422": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "queries[:, idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "queries[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(queries, [queries.shape[0] * 2, -1])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([queries[:, :2], queries[:, 5:6]], dim=1), torch.cat([queries[:, 2:4], queries[:, 5:6]], dim=1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_458": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alpha_embedding, beta_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_482": {
                "input": {
                    "value": "torch.distributions.kl.kl_divergence(entity_dist, query_dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_531": {
                "variable": {
                    "value": "positive_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_539": {
                "variable": {
                    "value": "positive_union_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_551": {
                "variable": {
                    "value": "negative_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_560": {
                "variable": {
                    "value": "negative_union_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_579": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "queries[:, idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "queries[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(queries, [queries.shape[0] * 2, -1])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([queries[:, :2], queries[:, 5:6]], dim=1), torch.cat([queries[:, 2:4], queries[:, 5:6]], dim=1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_644": {
                "variable": {
                    "value": "(lower, upper)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([alpha_embeddings, beta_embeddings], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_embeddings, dim=0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Uniform_646": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(lower > upper, mean, lower)",
                            "Call"
                        ],
                        [
                            "torch.rand((nentity, self.entity_dim))",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "upper + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_659": {
                "variable": {
                    "value": "positive_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "positive_sample_regular",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_659": {
                "variable": {
                    "value": "positive_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_662": {
                "variable": {
                    "value": "positive_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_666": {
                "variable": {
                    "value": "positive_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "positive_sample_union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_666": {
                "variable": {
                    "value": "positive_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_670": {
                "variable": {
                    "value": "positive_union_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_679": {
                "variable": {
                    "value": "negative_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "negative_sample_regular.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_682": {
                "variable": {
                    "value": "negative_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_687": {
                "variable": {
                    "value": "negative_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "negative_sample_union.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_691": {
                "variable": {
                    "value": "negative_union_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_706": {
                "tensors": {
                    "value": "[queries[:, 2:4], queries[:, 5:6]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_761": {
                "variable": {
                    "value": "positive_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "positive_sample_regular",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_761": {
                "variable": {
                    "value": "positive_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_764": {
                "variable": {
                    "value": "positive_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_768": {
                "variable": {
                    "value": "positive_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "positive_sample_union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_768": {
                "variable": {
                    "value": "positive_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_772": {
                "variable": {
                    "value": "positive_union_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_781": {
                "variable": {
                    "value": "negative_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "negative_sample_regular.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_784": {
                "variable": {
                    "value": "negative_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_789": {
                "variable": {
                    "value": "negative_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "negative_sample_union.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_793": {
                "variable": {
                    "value": "negative_union_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_802": {
                "input": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_embedding - query_embedding",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_832": {
                "variable": {
                    "value": "positive_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "positive_sample_regular",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_832": {
                "variable": {
                    "value": "positive_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_835": {
                "variable": {
                    "value": "positive_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_839": {
                "variable": {
                    "value": "positive_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "positive_sample_union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_839": {
                "variable": {
                    "value": "positive_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_843": {
                "variable": {
                    "value": "positive_union_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_852": {
                "variable": {
                    "value": "negative_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "negative_sample_regular.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_855": {
                "variable": {
                    "value": "negative_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_860": {
                "variable": {
                    "value": "negative_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "negative_sample_union.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_864": {
                "variable": {
                    "value": "negative_union_logit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_910": {
                "variable": {
                    "value": "model._parameters[entity_embedding].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model._parameters['entity_embedding'].data",
                            "Attribute"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_931": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argsort_949": {
                "variable": {
                    "value": "argsort",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "negative_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.cal_logit_beta(negative_embedding, all_dists)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([negative_logit, negative_union_logit], dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.cal_logit_logic(negative_embedding, all_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([negative_logit, negative_union_logit], dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.cal_logit_box(negative_embedding, all_center_embeddings, all_offset_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([negative_logit, negative_union_logit], dim=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.cal_logit_vec(negative_embedding, all_center_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([negative_logit, negative_union_logit], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_1071": {
                "variable": {
                    "value": "train_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(train_in)",
                            "Call"
                        ],
                        [
                            "train_in / in_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_1072": {
                "variable": {
                    "value": "train_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(train_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_1079": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_90": {
                "input": {
                    "value": "alpha_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "beta_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_293": {
                "*size": {
                    "value": "nentity",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.entity_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_305": {
                "variable": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nentity, self.entity_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_332": {
                "*size": {
                    "value": "nrelation",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.entity_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_383": {
                "variable": {
                    "value": "offset_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(attention * embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(1 - embeddings, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(attention * (1 - embeddings), dim=0)",
                            "BinOp"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.pow(torch.clamp(embeddings, 0, 1) + eps, attention), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "embedding + r_embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.entity_regularizer(torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx]))",
                            "Call"
                        ],
                        [
                            "torch.cat([alpha_embedding, beta_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "1.0 / embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "torch.cat([1 - upper_embedding, 1 - lower_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "1 - embedding",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_385": {
                "variable": {
                    "value": "offset_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(attention * embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(1 - embeddings, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(attention * (1 - embeddings), dim=0)",
                            "BinOp"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.pow(torch.clamp(embeddings, 0, 1) + eps, attention), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "embedding + r_embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.entity_regularizer(torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx]))",
                            "Call"
                        ],
                        [
                            "torch.cat([alpha_embedding, beta_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "1.0 / embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "torch.cat([1 - upper_embedding, 1 - lower_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "1 - embedding",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_393": {
                "variable": {
                    "value": "r_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "queries[:, idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "queries[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(queries, [queries.shape[0] * 2, -1])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([queries[:, :2], queries[:, 5:6]], dim=1), torch.cat([queries[:, 2:4], queries[:, 5:6]], dim=1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_394": {
                "variable": {
                    "value": "r_offset_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.offset_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "queries[:, idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "queries[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(queries, [queries.shape[0] * 2, -1])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([queries[:, :2], queries[:, 5:6]], dim=1), torch.cat([queries[:, 2:4], queries[:, 5:6]], dim=1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_405": {
                "tensors": {
                    "value": "embedding_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_406": {
                "tensors": {
                    "value": "offset_embedding_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "index_select_430": {
                "variable": {
                    "value": "r_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "queries[:, idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "queries[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(queries, [queries.shape[0] * 2, -1])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([queries[:, :2], queries[:, 5:6]], dim=1), torch.cat([queries[:, 2:4], queries[:, 5:6]], dim=1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_438": {
                "tensors": {
                    "value": "embedding_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "index_select_464": {
                "variable": {
                    "value": "r_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "queries[:, idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "queries[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(queries, [queries.shape[0] * 2, -1])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([queries[:, :2], queries[:, 5:6]], dim=1), torch.cat([queries[:, 2:4], queries[:, 5:6]], dim=1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_475": {
                "tensors": {
                    "value": "beta_embedding_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "index_select_592": {
                "variable": {
                    "value": "r_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.relation_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "queries[:, idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "queries[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(queries, [queries.shape[0] * 2, -1])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([queries[:, :2], queries[:, 5:6]], dim=1), torch.cat([queries[:, 2:4], queries[:, 5:6]], dim=1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_600": {
                "tensors": {
                    "value": "embedding_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "norm_720": {
                "input": {
                    "value": "distance_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(delta, query_offset_embedding)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_973": {
                "variable": {
                    "value": "(cur_ranking, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_ranking",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ranking[idx, list(easy_answer) + list(hard_answer)]",
                            "Subscript"
                        ],
                        [
                            "cur_ranking - answer_list + 1",
                            "BinOp"
                        ],
                        [
                            "cur_ranking[masks]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_982": {
                "variable": {
                    "value": "mrr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / cur_ranking",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_983": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(cur_ranking <= 1).to(torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_984": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(cur_ranking <= 3).to(torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_985": {
                "variable": {
                    "value": "h10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(cur_ranking <= 10).to(torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_162": {
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.layer2(layer1_act), dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.layer2(layer1_act), dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.layer2(layer1_act), dim=0)",
                            "Call"
                        ],
                        [
                            "attention / torch.max(attention, dim=0, keepdim=True).values",
                            "BinOp"
                        ],
                        [
                            "torch.cat([attention, attention], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_169": {
                "input": {
                    "value": "smooth_param * embeddings",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_170": {
                "input": {
                    "value": "min_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(smooth_param * embeddings)",
                            "Call"
                        ],
                        [
                            "attention * torch.exp(smooth_param * embeddings)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_179": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(attention * embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(1 - embeddings, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(attention * (1 - embeddings), dim=0)",
                            "BinOp"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.pow(torch.clamp(embeddings, 0, 1) + eps, attention), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "embedding + r_embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.entity_regularizer(torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx]))",
                            "Call"
                        ],
                        [
                            "torch.cat([alpha_embedding, beta_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "1.0 / embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "torch.cat([1 - upper_embedding, 1 - lower_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "1 - embedding",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_182": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(torch.clamp(embeddings, 0, 1) + eps, attention)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_188": {
                "input": {
                    "value": "min_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(smooth_param * embeddings)",
                            "Call"
                        ],
                        [
                            "attention * torch.exp(smooth_param * embeddings)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_197": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(attention * embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(1 - embeddings, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(attention * (1 - embeddings), dim=0)",
                            "BinOp"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.pow(torch.clamp(embeddings, 0, 1) + eps, attention), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "embedding + r_embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.entity_regularizer(torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx]))",
                            "Call"
                        ],
                        [
                            "torch.cat([alpha_embedding, beta_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "1.0 / embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "torch.cat([1 - upper_embedding, 1 - lower_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "1 - embedding",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_200": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_303": {
                "*size": {
                    "value": "nentity",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.entity_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_454": {
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "queries[:, idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "queries[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(queries, [queries.shape[0] * 2, -1])",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([queries[:, :2], queries[:, 5:6]], dim=1), torch.cat([queries[:, 2:4], queries[:, 5:6]], dim=1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_528": {
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "positive_sample_regular",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_528": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_535": {
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "positive_sample_union",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ],
                        [
                            "positive_sample[all_union_idxs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_535": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_537": {
                "input": {
                    "value": "positive_union_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cal_logit_beta(positive_embedding, all_union_dists)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_logic(positive_embedding, all_union_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_box(positive_embedding, all_union_center_embeddings, all_union_offset_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_vec(positive_embedding, all_union_center_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_548": {
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "negative_sample_regular.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_556": {
                "input": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "negative_sample_union.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_558": {
                "input": {
                    "value": "negative_union_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cal_logit_beta(negative_embedding, all_union_dists)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_logic(negative_embedding, all_union_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_box(negative_embedding, all_union_center_embeddings, all_union_offset_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_vec(negative_embedding, all_union_center_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_587": {
                "variable": {
                    "value": "(lower_embedding, upper_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(attention * embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(min_weights * embeddings, dim=0) / torch.sum(min_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(1 - embeddings, dim=0)",
                            "BinOp"
                        ],
                        [
                            "order_bounds(embedding)",
                            "Call"
                        ],
                        [
                            "1 - torch.sum(attention * (1 - embeddings), dim=0)",
                            "BinOp"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(embeddings, dim=0)",
                            "Call"
                        ],
                        [
                            "valclamp(embedding, b=6.0 / embedding.shape[0])",
                            "Call"
                        ],
                        [
                            "torch.clamp(embedding, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.prod(torch.pow(torch.clamp(embeddings, 0, 1) + eps, attention), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "embedding + r_embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.entity_regularizer(torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx]))",
                            "Call"
                        ],
                        [
                            "torch.cat([alpha_embedding, beta_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "1.0 / embedding",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(self.entity_embedding, dim=0, index=queries[:, idx])",
                            "Call"
                        ],
                        [
                            "self.center_net(torch.stack(embedding_list))",
                            "Call"
                        ],
                        [
                            "self.projection_net(embedding, r_embedding)",
                            "Call"
                        ],
                        [
                            "torch.cat([1 - upper_embedding, 1 - lower_embedding], dim=-1)",
                            "Call"
                        ],
                        [
                            "1 - embedding",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_588": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - upper_embedding, 1 - lower_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_614": {
                "input": {
                    "value": "entity_embedding - query_embedding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_668": {
                "input": {
                    "value": "positive_union_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cal_logit_beta(positive_embedding, all_union_dists)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_logic(positive_embedding, all_union_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_box(positive_embedding, all_union_center_embeddings, all_union_offset_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_vec(positive_embedding, all_union_center_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_689": {
                "input": {
                    "value": "negative_union_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cal_logit_beta(negative_embedding, all_union_dists)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_logic(negative_embedding, all_union_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_box(negative_embedding, all_union_center_embeddings, all_union_offset_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_vec(negative_embedding, all_union_center_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_770": {
                "input": {
                    "value": "positive_union_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cal_logit_beta(positive_embedding, all_union_dists)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_logic(positive_embedding, all_union_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_box(positive_embedding, all_union_center_embeddings, all_union_offset_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_vec(positive_embedding, all_union_center_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_791": {
                "input": {
                    "value": "negative_union_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cal_logit_beta(negative_embedding, all_union_dists)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_logic(negative_embedding, all_union_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_box(negative_embedding, all_union_center_embeddings, all_union_offset_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_vec(negative_embedding, all_union_center_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_841": {
                "input": {
                    "value": "positive_union_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cal_logit_beta(positive_embedding, all_union_dists)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_logic(positive_embedding, all_union_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_box(positive_embedding, all_union_center_embeddings, all_union_offset_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_vec(positive_embedding, all_union_center_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(positive_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_862": {
                "input": {
                    "value": "negative_union_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cal_logit_beta(negative_embedding, all_union_dists)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_logic(negative_embedding, all_union_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_box(negative_embedding, all_union_center_embeddings, all_union_offset_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ],
                        [
                            "self.cal_logit_vec(negative_embedding, all_union_center_embeddings)",
                            "Call"
                        ],
                        [
                            "torch.max(negative_union_logit, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor([]).to(self.entity_embedding.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_976": {
                "variable": {
                    "value": "answer_list",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_hard + num_easy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_978": {
                "variable": {
                    "value": "answer_list",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_hard + num_easy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_1067": {
                "variable": {
                    "value": "test_in[query_structure]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_[0] for _ in samples[1::2]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_1068": {
                "variable": {
                    "value": "test_out[query_structure]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_[1] for _ in samples[1::2]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_175": {
                "input": {
                    "value": "attention * (1 - embeddings)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_193": {
                "input": {
                    "value": "1 - embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "*size": {
                    "value": "nentity",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.entity_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_311": {
                "variable": {
                    "value": "lower",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nentity, self.entity_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_313": {
                "variable": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat([lower, upper], dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_315": {
                "variable": {
                    "value": "self.entity_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand((nentity, self.entity_dim * 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_1059": {
                "variable": {
                    "value": "sample_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(log['num_answer'] / size_scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_182": {
                "input": {
                    "value": "torch.clamp(embeddings, 0, 1) + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.layer2(layer1_act), dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.layer2(layer1_act), dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.layer2(layer1_act), dim=0)",
                            "Call"
                        ],
                        [
                            "attention / torch.max(attention, dim=0, keepdim=True).values",
                            "BinOp"
                        ],
                        [
                            "torch.cat([attention, attention], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_957": {
                "start": {
                    "value": "model.nentity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_963": {
                "start": {
                    "value": "model.nentity",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_996": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_entropy[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_313": {
                "tensors": {
                    "value": "[lower, upper]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_315": {
                "*size": {
                    "value": "(nentity, self.entity_dim * 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_1059": {
                "data": {
                    "value": "log['num_answer'] / size_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_182": {
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_312": {
                "*size": {
                    "value": "(nentity, self.entity_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_1007": {
                "variable": {
                    "value": "truth_interval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "truth_interval[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}