{
    "demo.py": {
        "tensorflow": {
            "ConfigProto_24": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_27": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_28": {
                "config": {
                    "value": "config",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=4, intra_op_parallelism_threads=4)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_35": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_40": {
                "variable": {
                    "value": "dev_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "sess.graph if c.save_graph else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SummaryWriter_43": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "sess.graph if c.save_graph else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SummaryWriter_45": {
                "variable": {
                    "value": "dev_writer",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "e2end/model/__init__.py": {
        "tensorflow": {
            "placeholder_20": {
                "variable": {
                    "value": "self.db_row_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c.num_rows, c.num_cols)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "row_initializer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_21": {
                "variable": {
                    "value": "self.db_rows",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.db_row_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "db_rows",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.vocabs_cum_start_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c.num_cols + 1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "vocabs_cum_start_initializer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_24": {
                "variable": {
                    "value": "self.vocabs_cum_start_idx_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.vocabs_cum_start_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "vocabs_cum_start_idx_low",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_25": {
                "variable": {
                    "value": "self.vocabs_cum_start_idx_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.vocabs_cum_start_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "vocabs_cum_start_idx_up",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.turn_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "turn_len",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.speakerId",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c.batch_size, c.max_turn_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "speakerId",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.enc_dropout_keep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_dropout_keep",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.dec_dropout_keep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_dropout_keep",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.is_first_turn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_first_turn",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.feed_previous",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "feed_previous",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.dec_targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c.batch_size, c.max_target_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_targets",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.target_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "target_lens",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.gold_rows",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c.batch_size, c.max_row_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "gold_rows",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.gold_row_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c.batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "gold_row_lens",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DropoutWrapper_62": {
                "variable": {
                    "value": "esingle_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "tf.nn.rnn_cell.GRUCell(c.encoder_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "input_keep_prob": {
                    "value": "self.enc_dropout_keep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.enc_dropout_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "dialog_state_before_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dialog_state_before_turn",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([c.batch_size, c.encoder_size], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_99": {
                "variable": {
                    "value": "dialog_state_before_turn",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.is_first_turn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : encoder_cell.zero_state(c.batch_size, tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : dialog_state_before_acc",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "rnn_102": {
                "variable": {
                    "value": "(words_hidden_feat, dialog_state_after_turn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "step_function": {
                    "value": "encoder_cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([esingle_cell] * c.encoder_layers) if c.encoder_layers > 1 else esingle_cell",
                            "IfExp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "embedded_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "dialog_state_before_turn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "control_flow_ops.cond(self.is_first_turn, lambda : encoder_cell.zero_state(c.batch_size, tf.float32), lambda : dialog_state_before_acc)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.turn_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_105": {
                "variable": {
                    "value": "dialog_state_before_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "dialog_state_before_acc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('dialog_state_before_turn', initializer=tf.zeros([c.batch_size, c.encoder_size], dtype=tf.float32), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.assign(dialog_state_before_acc, dialog_state_after_turn)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "dialog_state_after_turn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_132": {
                "variable": {
                    "value": "self.goid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.GO_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_133": {
                "variable": {
                    "value": "goid_batch_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[self.GO_ID] * c.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c.batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "attention_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "top_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.reshape(e, [-1, 1, np.prod(e.get_shape().as_list()[1:])]) for e in att_hidd_feat_list]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cond_163": {
                "variable": {
                    "value": "(*dec_logitss, _dec_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.feed_previous",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : decoder(True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : decoder(False)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "AdamOptimizer_282": {
                "variable": {
                    "value": "self.mixer_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "c.mixer_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c.batch_size, c.max_turn_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'slots_indicators{}-{}'.format(i, n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.last_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "last_reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.mixer_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mixer_weight",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_90": {
                "variable": {
                    "value": "w_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "features_j_word",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_125": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "col_embeddings + [words_embeddings]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_242": {
                "variable": {
                    "value": "self.expected_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "expected_reward",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros((1,), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_279": {
                "variable": {
                    "value": "mixed_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "[self.mixer_weight * r for r in reinforce_loss] + [1 - self.mixer_weight for x in xent_loss]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[v for v in tf.trainable_variables() if not v.name.startswith('mixer')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "AdamOptimizer_337": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "c.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_339": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_428": {
                "variable": {
                    "value": "total_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='reward', simple_value=reward)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_429": {
                "variable": {
                    "value": "sum_wfunc_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=n, simple_value=v) for (n, v) in w_eval_f_vals_dict.items()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c.batch_size, c.max_turn_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "words",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_49": {
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_50": {
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GRUCell_62": {
                "units": {
                    "value": "c.encoder_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_63": {
                "cells": {
                    "value": "[esingle_cell] * c.encoder_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_86": {
                "variable": {
                    "value": "embedded",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "feat_embeddings[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.feat_list[i][:, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_128": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_embedding",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_decoder_symbols, c.word_embed_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_135": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "c.max_target_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.dec_targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_136": {
                "input": {
                    "value": "di",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_139": {
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "tensor": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, np.prod(e.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "reinforce_gradients",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_272": {
                "name_or_scope": {
                    "value": "xent_loss_reinforce",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_277": {
                "name_or_scope": {
                    "value": "reinforce_grads",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "db_encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_311": {
                "variable": {
                    "value": "m_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "db_att_m_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal([db_size, hist_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_312": {
                "variable": {
                    "value": "b_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "db_att_b_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal([hist_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_313": {
                "variable": {
                    "value": "db_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.nn.xw_plus_b(db_embed_b, m_out, b_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_327": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "loss_and_eval",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_336": {
                "name_or_scope": {
                    "value": "updates",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_49": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "c.max_row_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.gold_rows",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_50": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "c.max_row_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf_lengths2mask2d(self.gold_row_lens, c.max_row_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "name": {
                    "value": "'feat_embedding{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform([voclen, emb_size], -math.sqrt(3), math.sqrt(3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "shape": {
                    "value": "[c.batch_size, c.encoder_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_127": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_139": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "c.max_target_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf_lengths2mask2d(self.target_lens, c.max_target_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'att_decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "expand_dims_248": {
                "input": {
                    "value": "tf.reduce_max(l, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_249": {
                "x": {
                    "value": "tf.equal(ml, l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_255": {
                "input_tensor": {
                    "value": "tf.expand_dims(self.reward - r, 1) * (tf.nn.softmax(l) - i) * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_262": {
                "input": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_273": {
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(l, t) * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_299": {
                "name": {
                    "value": "'col_values_embedding{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform([col_vocab_size, c.col_emb_size], -math.sqrt(3), math.sqrt(3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arg_max_329": {
                "input": {
                    "value": "dec_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_248": {
                "input_tensor": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_249": {
                "x": {
                    "value": "ml",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "xw_plus_b_313": {
                "x": {
                    "value": "db_embed_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._build_db(col_embeddings, encoder_cell, words_hidden_feat, dialog_state_after_turn, words_embedded)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "m_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('db_att_m_out', initializer=tf.random_normal([db_size, hist_size]))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('db_att_b_out', initializer=tf.random_normal([hist_size]))",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_273": {
                "labels": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_255": {
                "input": {
                    "value": "self.reward - r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_256": {
                "logits": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "e2end/model/db.py": {
        "tensorflow": {
            "concat_26": {
                "variable": {
                    "value": "db_rows_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "db_rows_embeddings_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_27": {
                "variable": {
                    "value": "summed_rows",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db_rows_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(0, db_rows_embeddings_a)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_28": {
                "variable": {
                    "value": "batched_summed_rows",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(summed_rows, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[c.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_41": {
                "variable": {
                    "value": "dbembeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "col_embeddings",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tile_42": {
                "variable": {
                    "value": "batched_dbembeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(dbembeddings, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[c.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_44": {
                "variable": {
                    "value": "words_hfeat_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "words_hidden_feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_45": {
                "variable": {
                    "value": "w_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(words_hfeat_mat), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_48": {
                "variable": {
                    "value": "e_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(batched_dbembeddings), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "variable": {
                    "value": "db_entity_att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "masked_cos_sim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.mul(cosine_sim, words_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_21": {
                "variable": {
                    "value": "row_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat(0, row_embed_arr)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "row_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "row_embed_arr",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[tf.nn.embedding_lookup(col_embeddings[j], self.db_rows[i, j]) for j in range(c.num_cols)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.embedding_lookup(col_embeddings[j], self.db_rows[i, j]) for j in range(c.num_cols)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "expand_dims_28": {
                "input": {
                    "value": "summed_rows",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(db_rows_embeddings, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_42": {
                "input": {
                    "value": "dbembeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(0, col_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_45": {
                "input_tensor": {
                    "value": "tf.square(words_hfeat_mat)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "input_tensor": {
                    "value": "tf.square(batched_dbembeddings)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_51": {
                "a": {
                    "value": "norm_batch_dbemb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batched_dbembeddings / e_norm",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_59": {
                "input": {
                    "value": "db_entity_att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(masked_cos_sim, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_19": {
                "params": {
                    "value": "col_embeddings[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.db_rows[i, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_21": {
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "row_embed_arr",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[tf.nn.embedding_lookup(col_embeddings[j], self.db_rows[i, j]) for j in range(c.num_cols)]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.embedding_lookup(col_embeddings[j], self.db_rows[i, j]) for j in range(c.num_cols)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "square_45": {
                "x": {
                    "value": "words_hfeat_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(1, words_hidden_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_48": {
                "x": {
                    "value": "batched_dbembeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(dbembeddings, 0), [c.batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_64": {
                "params": {
                    "value": "col_embeddings[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.db_rows[i, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "e2end/model/decoder.py": {
        "tensorflow": {
            "convert_to_tensor_67": {
                "variable": {
                    "value": "proj_biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output_projection[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_185": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, attn_length, 1, attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pack_217": {
                "variable": {
                    "value": "batch_attn_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_71": {
                "params": {
                    "value": "all_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "symbol",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_92": {
                "variable": {
                    "value": "prev_symbol",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(prev, output_projection[0], output_projection[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "scope or 'word_db_embed_attention_decoder'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "scope or 'attention_decoder'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "get_variable_191": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'AttnW_%d' % a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, attn_size, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_90": {
                "variable": {
                    "value": "prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(prev, output_projection[0], output_projection[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "output",
                            "Name"
                        ]
                    ]
                },
                "weights": {
                    "value": "output_projection[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "biases": {
                    "value": "output_projection[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stop_gradient_97": {
                "variable": {
                    "value": "emb_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_prev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "embedding_lookup_w_db(prev_symbol)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(emb_prev)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_180": {
                "input": {
                    "value": "decoder_inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_218": {
                "shape": {
                    "value": "batch_attn_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pack([batch_size, attn_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_192": {
                "input": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(attention_states, [-1, attn_length, 1, attn_size])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('AttnW_%d' % a, [1, 1, attn_size, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_193": {
                "name": {
                    "value": "'AttnV_%d' % a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_203": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell._linear(query, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, 1, 1, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_205": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v[a] * tf.tanh(hidden_features[a] + y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_207": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(v[a] * tf.tanh(hidden_features[a] + y), [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_209": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(a, [-1, attn_length, 1, 1]) * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "AttnOutputProjection",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "'Attention_%d' % a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "loop_function",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_212": {
                "tensor": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(a, [-1, attn_length, 1, 1]) * hidden, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_206": {
                "x": {
                    "value": "hidden_features[a] + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "tensor": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(num_heads)",
                            "Call"
                        ],
                        [
                            "attns",
                            "Name"
                        ],
                        [
                            "range(num_heads)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(s)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, attn_length, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "e2end/model/dst.py": {
        "tensorflow": {
            "constant_30": {
                "variable": {
                    "value": "self.goid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.GO_ID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_31": {
                "variable": {
                    "value": "goid_batch_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[self.GO_ID] * c.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(c.batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "m1_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dst_m1_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal([state_size, num_decoded])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "b1_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dst_b1_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal([num_decoded])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "first",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.nn.xw_plus_b(dialog_state_after_turn, m1_out, b1_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "m2_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dst_m2_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal([state_size, num_decoded])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "b2_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dst_b2_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal([num_decoded])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "variable": {
                    "value": "second",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.nn.xw_plus_b(dialog_state_after_turn, m2_out, b2_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "m3_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dst_m3_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal([state_size, num_decoded])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "variable": {
                    "value": "b3_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dst_b3_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal([num_decoded])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "variable": {
                    "value": "third",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.nn.xw_plus_b(dialog_state_after_turn, m3_out, b3_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_65": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "c.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_67": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "loss_and_eval",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "updates",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_33": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "c.max_target_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.dec_targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "input": {
                    "value": "di",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_37": {
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_44": {
                "x": {
                    "value": "dialog_state_after_turn",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "m1_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('dst_m1_out', initializer=tf.random_normal([state_size, num_decoded]))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b1_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('dst_b1_out', initializer=tf.random_normal([num_decoded]))",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_48": {
                "x": {
                    "value": "dialog_state_after_turn",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "m2_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('dst_m2_out', initializer=tf.random_normal([state_size, num_decoded]))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b2_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('dst_b2_out', initializer=tf.random_normal([num_decoded]))",
                            "Call"
                        ]
                    ]
                }
            },
            "xw_plus_b_52": {
                "x": {
                    "value": "dialog_state_after_turn",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "m3_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('dst_m3_out', initializer=tf.random_normal([state_size, num_decoded]))",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b3_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('dst_b3_out', initializer=tf.random_normal([num_decoded]))",
                            "Call"
                        ]
                    ]
                }
            },
            "arg_max_57": {
                "input": {
                    "value": "dec_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_37": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "c.max_target_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf_lengths2mask2d(self.target_lens, c.max_target_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_54": {
                "shape": {
                    "value": "(c.batch_size, num_decoded)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "e2end/model/evaluation.py": {
        "tensorflow": {
            "expand_dims_17": {
                "variable": {
                    "value": "lengths_transposed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_18": {
                "variable": {
                    "value": "lengths_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths_transposed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(lengths, 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, max_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int64_21": {
                "variable": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(0, max_len, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_22": {
                "variable": {
                    "value": "range_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rng",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_int64(tf.range(0, max_len, 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_23": {
                "variable": {
                    "value": "range_tiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range_row",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(rng, 0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_26": {
                "x": {
                    "value": "tf.less(range_tiled, lengths_tiled)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_26": {
                "x": {
                    "value": "range_tiled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(range_row, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lengths_tiled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(lengths_transposed, [1, max_len])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'tf_trg_word2vocab_id'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_35": {
                "variable": {
                    "value": "wte",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "wt_arr",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_equal_36": {
                "variable": {
                    "value": "start_idx_ok",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wte",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(wt, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vocabs_cum_start_idx_low",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "less_37": {
                "variable": {
                    "value": "end_idx_ok",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wte",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(wt, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vocabs_cum_start_idx_up",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logical_and_38": {
                "variable": {
                    "value": "idx_ok_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "start_idx_ok",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater_equal(wte, vocabs_cum_start_idx_low)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "end_idx_ok",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(wte, vocabs_cum_start_idx_up)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_40": {
                "variable": {
                    "value": "batch_vocab_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(tf.where(idx_ok_mask), [0, 1], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_39": {
                "input_": {
                    "value": "idx_ok_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.logical_and(start_idx_ok, end_idx_ok)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[idx_ok_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "debug idx_ok_mask",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_40": {
                "input_": {
                    "value": "tf.where(idx_ok_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_40": {
                "condition": {
                    "value": "idx_ok_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.logical_and(start_idx_ok, end_idx_ok)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "e2end/model/evaluation_test.py": {
        "tensorflow": {
            "Session_9": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_11": {
                "variable": {
                    "value": "bidx",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 1, 2, 3, 4, 5, 101, 102, 408, 409, 483]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "(11,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_12": {
                "variable": {
                    "value": "down",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0, 102, 109, 134, 244, 342, 405, 409]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "(8,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_13": {
                "variable": {
                    "value": "up",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[102, 109, 134, 244, 342, 405, 409, 484]",
                    "type": "List",
                    "possible_values": []
                },
                "shape": {
                    "value": "(8,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "e2end/model/fast_compilation.py": {
        "tensorflow": {
            "Variable_16": {
                "variable": {
                    "value": "self._var2save",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_25": {
                "variable": {
                    "value": "self.testTrainOp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "[tf.to_float(tf.reshape(x, (-1, 1))) for x in arr]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Summary_45": {
                "value": {
                    "value": "[tf.Summary.Value(tag='dummy_loss', simple_value=-666)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_25": {
                "x": {
                    "value": "tf.reshape(x, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Summary_34": {
                "value": {
                    "value": "[tf.Summary.Value(tag='dummy_loss', simple_value=-666)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "e2end/training.py": {
        "tensorflow": {
            "Saver_24": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_150": {
                "session": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Summary_132": {
                "value": {
                    "value": "validate_set_measures",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.Summary.Value(tag='valid_' + n, simple_value=v) for (n, v) in aggreg_func.items()]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "e2end/utils.py": {
        "tensorflow": {
            "set_random_seed_236": {
                "seed": {
                    "value": "c.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}