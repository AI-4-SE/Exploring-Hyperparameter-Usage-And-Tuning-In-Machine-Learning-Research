{
    "source/evaluation/attributes/classifier.py": {
        "sklearn": {
            "precision_recall_fscore_support_103": {
                "variable": {
                    "value": "(precision, recall, f1, support)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_set.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict(test_features)",
                            "Call"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_82": {
                "variable": {
                    "value": "(p, r, f1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "val_set.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "val_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict(val_features)",
                            "Call"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogisticRegression_73": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "penalties",
                            "variable"
                        ]
                    ]
                },
                "C": {
                    "value": "reg_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_values",
                            "variable"
                        ]
                    ]
                },
                "multi_class": {
                    "value": "multinomial",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "sag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LinearSVC_76": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "penalties",
                            "variable"
                        ]
                    ]
                },
                "dual": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "C": {
                    "value": "reg_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_values",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "source/evaluation/classification/classifier.py": {
        "sklearn": {
            "LogisticRegression_76": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "penalties",
                            "variable"
                        ]
                    ]
                },
                "C": {
                    "value": "reg_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_values",
                            "variable"
                        ]
                    ]
                },
                "multi_class": {
                    "value": "multinomial",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "sag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LinearSVC_79": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "penalties",
                            "variable"
                        ]
                    ]
                },
                "dual": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "C": {
                    "value": "reg_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_values",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "source/evaluation/classification/evaluation.py": {
        "sklearn": {
            "classification_report_27": {
                "variable": {
                    "value": "full_report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_set.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions",
                            "Method Argument"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "range(len(test_set.index2label))",
                    "type": "Call",
                    "possible_values": []
                },
                "target_names": {
                    "value": "test_set.index2label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "digits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_30": {
                "variable": {
                    "value": "(pre, rec, f1, support)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_set.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions",
                            "Method Argument"
                        ],
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "source/training/compositional/add_similarity.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self._a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self._b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_32": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_34": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self._b",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "source/training/compositional/composition_model.py": {
        "torch": {
            "MSELoss_51": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "source/training/compositional/full_add_similarity.py": {
        "torch": {
            "Parameter_25": {
                "variable": {
                    "value": "self._A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim, input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self._B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim, input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_40": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_40": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self._B",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "source/training/compositional/matrix_similarity.py": {
        "torch": {
            "Parameter_28": {
                "variable": {
                    "value": "self._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim * 2, input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.combine_tensors(self._combination, [x, y])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self._weight_vector",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x, dim=1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "source/training/paraphrase_based/paraphrase_composition_model.py": {
        "torch": {
            "relu_98": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - sim_p + sim_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}