{
    "dataloader/dataset.py": {
        "torch": {
            "is_tensor_51": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataloader/dataset_wrapper.py": {
        "torch": {
            "SubsetRandomSampler_116": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_117": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ClrDataset(csv_file=self.csv_file, img_root_dir=self.img_root_dir, img_root_dir_test=self.img_root_dir_test, input_shape=self.input_shape, img_path_col=self.img_path_col, text_col=self.text_col, text_from_files=self.text_from_files, text_root_dir=self.text_root_dir, mode='train', transform=SimCLRTrainDataTransform(data_augment))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ClrDataset(csv_file=self.csv_file, img_root_dir=self.img_root_dir, img_root_dir_test=self.img_root_dir_test, input_shape=self.input_shape, img_path_col=self.img_path_col, text_col=self.text_col, text_from_files=self.text_from_files, text_root_dir=self.text_root_dir, mode='train', transform=SimCLRTrainDataTransform(data_augment))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "loss/nt_xent.py": {
        "torch": {
            "Softmax_12": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_13": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_20": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_69": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.arange(start=0, end=batch_size, dtype=torch.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden1.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "one_hot_71": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.arange(start=0, end=batch_size, dtype=torch.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden1.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normalize_61": {
                "variable": {
                    "value": "zis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(zis, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_62": {
                "variable": {
                    "value": "zjs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zjs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(zjs, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_71": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "input": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.transpose(hidden2_large, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "input": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.transpose(hidden1_large, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_81": {
                "input": {
                    "value": "hidden2_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden2",
                            "variable"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "input": {
                    "value": "hidden1_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden1",
                            "variable"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_69": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden1.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/model.py": {
        "torch": {
            "Linear_28": {
                "variable": {
                    "value": "self.bert_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.bert_l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.res_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.res_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet.fc.in_features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.res_l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resnet.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_74": {
                "variable": {
                    "value": "sum_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_embeddings * input_mask_expanded",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_75": {
                "variable": {
                    "value": "sum_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_mask_expanded.sum(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_l1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.res_l2(x)",
                            "Call"
                        ],
                        [
                            "self.bert_l1(sentence_embeddings)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_152": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_153": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_177": {
                "variable": {
                    "value": "captions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_squ, embeds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_l1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.res_l2(x)",
                            "Call"
                        ],
                        [
                            "self.bert_l1(sentence_embeddings)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_232": {
                "variable": {
                    "value": "(_, max_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert_model(**encoded_inputs)",
                            "Call"
                        ],
                        [
                            "self.fc(lstm_out)",
                            "Call"
                        ],
                        [
                            "self.fc(lstm_out)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_167": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "manual_seed_42": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_59": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "eval(self.config['learning_rate'])",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "eval(self.config['weight_decay'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_83": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), eval(self.config['learning_rate']), weight_decay=eval(self.config['weight_decay']))",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "len(train_loader)",
                    "type": "Call",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_321": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/kaggle/input/convirt-epoch-10/checkpoints/model.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_333": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/kaggle/working/model.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_178": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "/kaggle/working/model.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}