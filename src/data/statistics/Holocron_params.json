{
    ".github/collect_env.py": {
        "torch": {
            "is_available_239": {
                "variable": {
                    "value": "cuda_available_str",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_106": {
                "device": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "is_available_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/classification/darknet.py": {
        "torch": {
            "LeakyReLU_42": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "*args": {
                    "value": "*_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "*args": {
                    "value": "*conv_sequence(in_channels, stem_channels, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=7, padding=3, stride=2, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "*args": {
                    "value": "*[self._make_layer([_in_chans] + planes, act_layer, norm_layer, drop_layer, conv_layer) for (_in_chans, planes) in zip(in_chans, layout)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "layout[2][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/classification/darknetv2.py": {
        "torch": {
            "LeakyReLU_44": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_97": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "*args": {
                    "value": "*conv_sequence(in_channels, stem_channels, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=3, padding=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "*args": {
                    "value": "*[self._make_layer(num_blocks, _in_chans, out_chans, act_layer, norm_layer, drop_layer, conv_layer) for (_in_chans, (out_chans, num_blocks)) in zip(in_chans, layout)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "in_channels": {
                    "value": "layout[-1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/classification/darknetv3.py": {
        "torch": {
            "LeakyReLU_95": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "*conv_sequence(in_channels, stem_channels, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=3, padding=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "*args": {
                    "value": "*[self._make_layer(num_blocks, _in_chans, out_chans, act_layer, norm_layer, drop_layer, conv_layer) for (_in_chans, (out_chans, num_blocks)) in zip(in_chans, layout)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "in_features": {
                    "value": "layout[-1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/classification/darknetv4.py": {
        "torch": {
            "Mish_269": {
                "variable": {
                    "value": "kwargs[act_layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.base_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(in_channels, out_channels, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=3, padding=1, stride=2, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[ResBlock(out_channels // compression, out_channels // compression if num_blocks > 1 else in_channels, act_layer, norm_layer, drop_layer, conv_layer) for _ in range(num_blocks)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(2 * out_channels // compression, out_channels, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LeakyReLU_132": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_113": {
                "tensors": {
                    "value": "[x1, self.main(x2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "*args": {
                    "value": "*conv_sequence(in_channels, stem_channels, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=3, padding=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "*args": {
                    "value": "*[CSPStage(_in_chans, out_chans, num_blocks, act_layer, norm_layer, drop_layer, conv_layer) for (_in_chans, (out_chans, num_blocks)) in zip(in_chans, layout)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_222": {
                "in_features": {
                    "value": "layout[-1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/classification/pyconvresnet.py": {
        "torch": {}
    },
    "holocron/models/classification/repvgg.py": {
        "torch": {
            "Conv2d_122": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branches[0][0].weight.data.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branches[0][0].weight.data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.branches[0][0].stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_86": {
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(inplanes, planes, 3, padding=1, bias=norm_layer is None, stride=stride), norm_layer(planes)), nn.Sequential(nn.Conv2d(inplanes, planes, 1, padding=0, bias=norm_layer is None, stride=stride), norm_layer(planes))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes, 3, padding=1, bias=norm_layer is None, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes, 1, padding=0, bias=norm_layer is None, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branches[0][0].weight.data.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_193": {
                "*args": {
                    "value": "*_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branches[0][0].weight.data.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branches[0][0].weight.data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "norm_layer is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branches[0][0].weight.data.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branches[0][0].weight.data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "norm_layer is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "*args": {
                    "value": "*_stages",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "in_features": {
                    "value": "chans[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/classification/res2net.py": {
        "torch": {
            "ModuleList_50": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(*conv_sequence(self.width, self.width, act_layer, norm_layer, drop_layer, kernel_size=3, stride=stride, padding=1, groups=groups, bias=norm_layer is None)) for _ in range(max(1, scale - 1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "split_78": {
                "variable": {
                    "value": "split_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_71": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "*args": {
                    "value": "*conv_sequence(self.width, self.width, act_layer, norm_layer, drop_layer, kernel_size=3, stride=stride, padding=1, groups=groups, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/classification/resnet.py": {
        "torch": {
            "Sequential_62": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_247": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_439": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_380": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(stride, ceil_mode=True, count_include_pad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_395": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(num_repeats * in_planes, num_repeats * planes * block.expansion, None, norm_layer, drop_layer, conv_layer, kernel_size=1, stride=stride, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_305": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_381": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_341": {
                "*args": {
                    "value": "*_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_343": {
                "in_features": {
                    "value": "num_repeats * in_planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/classification/rexnet.py": {
        "torch": {
            "Sequential_60": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(channels, channels // se_ratio, act_layer, norm_layer, drop_layer, kernel_size=1, stride=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU6_97": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SiLU_179": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SiLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "*args": {
                    "value": "*_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "*args": {
                    "value": "nn.Dropout(dropout_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_235": {
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_235": {
                "in_features": {
                    "value": "pen_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(width_mult * 1280)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/classification/sknet.py": {
        "torch": {
            "ModuleList_86": {
                "variable": {
                    "value": "self.path_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(*conv_sequence(in_channels, out_channels, act_layer, norm_layer, drop_layer, kernel_size=3, bias=norm_layer is None, dilation=idx + 1, padding=idx + 1, **kwargs)) for idx in range(m)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[path_conv(x) for path_conv in self.path_convs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_113": {
                "variable": {
                    "value": "attention_factors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sa(paths.sum(dim=1)).view(b, m, c, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "*conv_sequence(in_channels, out_channels, act_layer, norm_layer, drop_layer, kernel_size=3, bias=norm_layer is None, dilation=idx + 1, padding=idx + 1, **kwargs)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sigmoid_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/classification/tridentnet.py": {
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.conv2d(_x, self.weight, self.bias, self.stride, tuple((dilation * p for p in self.padding)), (dilation,) * len(self.dilation), self.groups) for (_x, dilation) in zip(torch.chunk(x, self.num_branches, 1), dilations)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_50": {
                "input": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "tuple((dilation * p for p in self.padding))",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(dilation,) * len(self.dilation)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_59": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "self.num_branches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/detection/yolo.py": {
        "torch": {
            "zeros_79": {
                "variable": {
                    "value": "obj_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pred_boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "noobj_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pred_boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "bbox_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pred_boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "clf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pred_boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "pred_xyxy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_boxes[..., :2] - wh / 2, pred_boxes[..., :2] + wh / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(1024, 1024, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=3, padding=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_322": {
                "variable": {
                    "value": "b_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_scores.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_326": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_327": {
                "variable": {
                    "value": "c_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_331": {
                "variable": {
                    "value": "b_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[..., 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_332": {
                "variable": {
                    "value": "b_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[..., 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_334": {
                "variable": {
                    "value": "b_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(b_x, b_y, b_w, b_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_336": {
                "variable": {
                    "value": "b_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_92": {
                "variable": {
                    "value": "is_matched",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_93": {
                "variable": {
                    "value": "not_matched",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h * w * num_anchors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "b_o.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "b_o.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "b_o.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_236": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_364": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(b, h, w, self.num_anchors * 5 + self.num_classes)",
                            "Call"
                        ],
                        [
                            "x[..., :self.num_anchors * 5].reshape(b, h, w, self.num_anchors, 5)",
                            "Call"
                        ],
                        [
                            "torch.stack(x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "gt_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_boxes[idx][:, [0, 2]].mean(dim=-1) * w, gt_boxes[idx][:, [1, 3]].mean(dim=-1) * h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "box_selection",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h * w, num_anchors)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_139": {
                "variable": {
                    "value": "gt_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "selected_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_scores.reshape(b, -1, num_classes)[idx, pred_filter].reshape(-1, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_183": {
                "input": {
                    "value": "b_o[idx] >= 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coords[..., :2] - wh / 2, coords[..., :2] + wh / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_293": {
                "in_features": {
                    "value": "1024 * 7 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_hidden_nodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_295": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "in_features": {
                    "value": "head_hidden_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7 ** 2 * (num_anchors * 5 + num_classes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_144": {
                "input": {
                    "value": "selected_boxes[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((gt_boxes[idx][:, [0, 2]].mean(dim=-1) * w, gt_boxes[idx][:, [1, 3]].mean(dim=-1) * h), dim=1).to(dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "(gt_boxes[idx][:, 2:] + gt_boxes[idx][:, :2]) / 2",
                            "BinOp"
                        ],
                        [
                            "gt_centers - gt_centers.floor()",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_145": {
                "input": {
                    "value": "selected_boxes[:, 2:].sqrt()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_wh.sqrt()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_147": {
                "input": {
                    "value": "selection_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_o.reshape(b, -1)[idx, not_matched]",
                            "Subscript"
                        ],
                        [
                            "selection_o[iou_mat.reshape(h * w * num_anchors)[not_matched].max(dim=1).values < 0.5]",
                            "Subscript"
                        ],
                        [
                            "pred_o.reshape(b, -1)[idx, is_matched]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "selection_iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou_max.values",
                            "Attribute"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mse_loss_149": {
                "input": {
                    "value": "selected_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_scores.reshape(b, -1, num_classes)[idx, pred_filter].reshape(-1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(selected_scores)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_329": {
                "input": {
                    "value": "x[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_330": {
                "input": {
                    "value": "x[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_109": {
                "start": {
                    "value": "h * w * num_anchors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_boxes.shape[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "all_72": {
                "input": {
                    "value": "boxes <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/detection/yolov2.py": {
        "torch": {
            "Sequential_77": {
                "variable": {
                    "value": "self.block5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(layout[-1][0], layout[-1][0], act_layer, norm_layer, drop_layer, conv_layer, kernel_size=3, padding=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.passthrough_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(layout[-2][0], layout[-2][0] // passthrough_ratio, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.block6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(layout[-1][0] + layout[-2][0] // passthrough_ratio * 2 ** 2, layout[-1][0], act_layer, norm_layer, drop_layer, conv_layer, kernel_size=3, padding=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "layout[-1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "anchors.shape[0] * (5 + num_classes)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_163": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_164": {
                "variable": {
                    "value": "c_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_171": {
                "variable": {
                    "value": "b_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(b_x, b_y, b_w, b_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_173": {
                "variable": {
                    "value": "b_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_175": {
                "variable": {
                    "value": "b_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(passthrough, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_57": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_210": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(b, self.num_anchors, 5 + self.num_classes, h, w).permute(0, 3, 4, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.stack(x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_168": {
                "input": {
                    "value": "x[..., 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_169": {
                "input": {
                    "value": "x[..., 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[[1.3221, 1.73145], [3.19275, 4.00944], [5.05587, 8.09892], [9.47112, 4.84053], [11.2364, 10.0071]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "input": {
                    "value": "x[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "input": {
                    "value": "x[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/detection/yolov4.py": {
        "torch": {
            "Sequential_52": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(in_channels, in_channels // 2, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Upsample_64": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(in_channels, in_channels // 2, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(in_channels, in_channels // 2, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv2(up), self.up(out)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.fpn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(in_planes[0], in_planes[0] // 2, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "arange_278": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_278": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_279": {
                "variable": {
                    "value": "c_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_279": {
                "variable": {
                    "value": "c_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(top_left, bot_right)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_308": {
                "variable": {
                    "value": "b_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[..., 4]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(b_o)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(b_o)",
                            "Call"
                        ],
                        [
                            "self._format_outputs(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_309": {
                "variable": {
                    "value": "b_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[..., 5:]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(b_scores)",
                            "Call"
                        ],
                        [
                            "self._format_outputs(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "target_o",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, w, num_anchors)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "b_o.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "target_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, w, num_anchors, self.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "b_o.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_350": {
                "variable": {
                    "value": "obj_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, w, num_anchors)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "b_o.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_351": {
                "variable": {
                    "value": "noobj_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, w, num_anchors)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "b_o.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_357": {
                "variable": {
                    "value": "_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t['boxes'] for t in target]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_363": {
                "variable": {
                    "value": "target_selection",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[_idx for (_idx, _boxes) in enumerate(gt_boxes) for _ in range(_boxes.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "b_o.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_406": {
                "variable": {
                    "value": "bbox_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "b_o.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_411": {
                "variable": {
                    "value": "b_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[..., 4]",
                            "Subscript"
                        ],
                        [
                            "torch.sigmoid(b_o)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(b_o)",
                            "Call"
                        ],
                        [
                            "self._format_outputs(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_484": {
                "variable": {
                    "value": "self.head1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(128, 256, act_layer, norm_layer, None, conv_layer, kernel_size=3, padding=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_493": {
                "variable": {
                    "value": "self.pre_head2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(128, 256, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=3, padding=1, stride=2, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_507": {
                "variable": {
                    "value": "self.head2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(512, 256, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_540": {
                "variable": {
                    "value": "self.head2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(256, 512, act_layer, norm_layer, None, conv_layer, kernel_size=3, padding=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_549": {
                "variable": {
                    "value": "self.pre_head3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(256, 512, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=3, padding=1, stride=2, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_563": {
                "variable": {
                    "value": "self.head3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(1024, 512, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=1, bias=norm_layer is None)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_625": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h2, feats[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_630": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h3, feats[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "b_o.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_316": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "b_o.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_317": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "b_o.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mish_670": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_695": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_288": {
                "input": {
                    "value": "output[..., 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "any_320": {
                "input": {
                    "value": "b_o[idx] >= 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_477": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[[12, 16], [19, 36], [40, 28]], [[36, 75], [76, 55], [72, 146]], [[142, 110], [192, 243], [459, 401]]], dtype=torch.float32) / 608",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(anchors, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_281": {
                "input": {
                    "value": "output[..., :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "any_408": {
                "input": {
                    "value": "obj_mask[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_466": {
                "data": {
                    "value": "[[[12, 16], [19, 36], [40, 28]], [[36, 75], [76, 55], [72, 146]], [[142, 110], [192, 243], [459, 401]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_373": {
                "tensors": {
                    "value": "(-self.anchors, self.anchors)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mse_loss_414": {
                "input": {
                    "value": "b_o[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target_o[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_418": {
                "input": {
                    "value": "b_scores[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target_scores[obj_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_418": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_418": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_642": {
                "tensors": {
                    "value": "(det1['boxes'], det2['boxes'], det3['boxes'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_643": {
                "tensors": {
                    "value": "(det1['scores'], det2['scores'], det3['scores'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_644": {
                "tensors": {
                    "value": "(det1['labels'], det2['labels'], det3['labels'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/segmentation/unet.py": {
        "torch": {
            "SiLU_524": {
                "variable": {
                    "value": "backbone[21]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(in_chan, out_chan, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=3, padding=padding)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d((2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_200": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "layout[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_255": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(up_chan, up_chan * 2 ** 2, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=1)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_335": {
                "variable": {
                    "value": "self.bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(chans[-1]) if norm_layer is None else norm_layer(chans[-1])",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ModuleList_347": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_365": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chans[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_77": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_79": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(_layout[:-1], _layout[1:])",
                            "Call"
                        ],
                        [
                            "zip(_layout[:-1], _layout[1:])",
                            "Call"
                        ],
                        [
                            "zip([2 * layout[-1]] + layout[::-1][:-1], _layout)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(_layout[:-1], _layout[1:])",
                            "Call"
                        ],
                        [
                            "zip(_layout[:-1], _layout[1:])",
                            "Call"
                        ],
                        [
                            "zip([2 * layout[-1]] + layout[::-1][:-1], _layout)",
                            "Call"
                        ],
                        [
                            "zip(chans[::-1], _layout)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_253": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_286": {
                "variable": {
                    "value": "_upfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_upfeat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.upsample(upfeat)",
                            "Call"
                        ],
                        [
                            "self.upsample(upfeat)",
                            "Call"
                        ],
                        [
                            "F.interpolate(_upfeat, downfeat.shape[-2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "downfeat.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_321": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_357": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(chans[0], chans[0] * 2 ** 2, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=1)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SiLU_522": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_47": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "(*downfeats, _upfeat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_190": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "PixelShuffle_257": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_260": {
                "num_features": {
                    "value": "left_chan",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_289": {
                "tensors": {
                    "value": "(self.bn(downfeat), _upfeat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_336": {
                "num_features": {
                    "value": "chans[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "PixelShuffle_361": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "*args": {
                    "value": "*_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "in_features": {
                    "value": "layout[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_329": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*input_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/segmentation/unet3p.py": {
        "torch": {
            "ModuleList_43": {
                "variable": {
                    "value": "self.downsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.MaxPool2d(2 ** (len(e_chans) - idx)), nn.Conv2d(e_chan, base_chan, 3, padding=1)) for (idx, e_chan) in enumerate(e_chans)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.upsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Upsample(scale_factor=2 ** (idx + 1), mode='bilinear', align_corners=True), nn.Conv2d(d_chan, base_chan, 3, padding=1)) for (idx, d_chan) in enumerate(d_chans)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_sequence(depth * base_chan, depth * base_chan, act_layer, norm_layer, drop_layer, conv_layer, kernel_size=3, padding=1)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(*[downsample(downfeat) for (downsample, downfeat) in zip(self.downsamples, downfeats)], self.skip(feat), *[upsample(upfeat) for (upsample, upfeat) in zip(self.upsamples, upfeats)])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "len(layout) * layout[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "skip_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "base_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_chans[0] if len(e_chans) > 0 else skip_chan",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "nn.MaxPool2d(2 ** (len(e_chans) - idx))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "*args": {
                    "value": "nn.Upsample(scale_factor=2 ** (idx + 1), mode='bilinear', align_corners=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_45": {
                "kernel_size": {
                    "value": "2 ** (len(e_chans) - idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "e_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "base_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_chans[0] if len(e_chans) > 0 else skip_chan",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_54": {
                "scale_factor": {
                    "value": "2 ** (idx + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "d_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "base_chan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_chans[0] if len(e_chans) > 0 else skip_chan",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/segmentation/unetpp.py": {
        "torch": {
            "ModuleList_54": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d((2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_72": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "layout[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_136": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d((2, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "layout[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "act_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_144": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "modules": {
                    "value": "[UpPath(left_chan + up_chan, left_chan, True, 1, act_layer, norm_layer, drop_layer, conv_layer) for _ in range(num_cells)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_158": {
                "modules": {
                    "value": "[UpPath(up_chan + (idx + 1) * left_chan, left_chan, True, 1, act_layer, norm_layer, drop_layer, conv_layer) for idx in range(num_cells)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/models/utils.py": {
        "torch": {
            "load_127": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "hf_hub_download(repo_id, filename='pytorch_model.bin', **kwargs)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_95": {
                "input": {
                    "value": "bn.running_var + bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/nn/functional.py": {
        "torch": {
            "log_softmax_85": {
                "variable": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // scale_factor, scale_factor, w // scale_factor, scale_factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, int(c * scale_factor ** 2), h // scale_factor, w // scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(b, cnum, xi, -1)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, weight.shape[-2:], dilation=dilation, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x * (mask.numel() / one_count)",
                            "BinOp"
                        ],
                        [
                            "fn(x, weight)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, weight.shape[0], h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_90": {
                "variable": {
                    "value": "valid_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target.view(-1).shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_174": {
                "variable": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // scale_factor, scale_factor, w // scale_factor, scale_factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, int(c * scale_factor ** 2), h // scale_factor, w // scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(b, cnum, xi, -1)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, weight.shape[-2:], dilation=dilation, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x * (mask.numel() / one_count)",
                            "BinOp"
                        ],
                        [
                            "fn(x, weight)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, weight.shape[0], h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_177": {
                "variable": {
                    "value": "valid_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logpt.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_225": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // scale_factor, scale_factor, w // scale_factor, scale_factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, int(c * scale_factor ** 2), h // scale_factor, w // scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(b, cnum, xi, -1)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, weight.shape[-2:], dilation=dilation, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x * (mask.numel() / one_count)",
                            "BinOp"
                        ],
                        [
                            "fn(x, weight)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, weight.shape[0], h, w)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.type_as(x.data)",
                            "Call"
                        ],
                        [
                            "weight.type_as(x.data)",
                            "Call"
                        ],
                        [
                            "weight.type_as(x.data)",
                            "Call"
                        ],
                        [
                            "weight.type_as(x.data)",
                            "Call"
                        ],
                        [
                            "weight.type_as(x.data)",
                            "Call"
                        ],
                        [
                            "weight.type_as(x.data)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_233": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // scale_factor, scale_factor, w // scale_factor, scale_factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, int(c * scale_factor ** 2), h // scale_factor, w // scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(b, cnum, xi, -1)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, weight.shape[-2:], dilation=dilation, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x * (mask.numel() / one_count)",
                            "BinOp"
                        ],
                        [
                            "fn(x, weight)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, weight.shape[0], h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_244": {
                "variable": {
                    "value": "valid_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "loss.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "base_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xi",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "chan_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(cnum, xi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_313": {
                "variable": {
                    "value": "discr_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "discr_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * chan_mask.view(1, cnum, xi, 1)",
                            "BinOp"
                        ],
                        [
                            "discr_out.max(dim=2).values",
                            "Attribute"
                        ],
                        [
                            "discr_out.view(b, cnum, *spatial_dims)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.type_as(x.data)",
                            "Call"
                        ],
                        [
                            "weight.type_as(x.data)",
                            "Call"
                        ],
                        [
                            "weight.type_as(x.data)",
                            "Call"
                        ],
                        [
                            "weight.type_as(x.data)",
                            "Call"
                        ],
                        [
                            "weight.type_as(x.data)",
                            "Call"
                        ],
                        [
                            "weight.type_as(x.data)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_316": {
                "variable": {
                    "value": "div_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // scale_factor, scale_factor, w // scale_factor, scale_factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, int(c * scale_factor ** 2), h // scale_factor, w // scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(b, cnum, xi, -1)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, weight.shape[-2:], dilation=dilation, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x * (mask.numel() / one_count)",
                            "BinOp"
                        ],
                        [
                            "fn(x, weight)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, weight.shape[0], h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unfold_354": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // scale_factor, scale_factor, w // scale_factor, scale_factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, int(c * scale_factor ** 2), h // scale_factor, w // scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(b, cnum, xi, -1)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, weight.shape[-2:], dilation=dilation, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x * (mask.numel() / one_count)",
                            "BinOp"
                        ],
                        [
                            "fn(x, weight)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, weight.shape[0], h, w)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "weight.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dilation, dilation)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(padding, padding)",
                            "Tuple"
                        ],
                        [
                            "(padding, padding)",
                            "Tuple"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stride, stride)",
                            "Tuple"
                        ],
                        [
                            "(stride, stride)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "log_softmax_583": {
                "variable": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // scale_factor, scale_factor, w // scale_factor, scale_factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, int(c * scale_factor ** 2), h // scale_factor, w // scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(b, cnum, xi, -1)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, weight.shape[-2:], dilation=dilation, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x * (mask.numel() / one_count)",
                            "BinOp"
                        ],
                        [
                            "fn(x, weight)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, weight.shape[0], h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_588": {
                "variable": {
                    "value": "valid_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target.view(-1).shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_58": {
                "input": {
                    "value": "1 + beta * F.relu(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "[x.max(dim, keepdim=True).values, x.mean(dim, keepdim=True)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unique_240": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_57": {
                "input": {
                    "value": "F.relu_(x).mul_(beta).add_(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // scale_factor, scale_factor, w // scale_factor, scale_factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, int(c * scale_factor ** 2), h // scale_factor, w // scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(b, cnum, xi, -1)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, weight.shape[-2:], dilation=dilation, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x * (mask.numel() / one_count)",
                            "BinOp"
                        ],
                        [
                            "fn(x, weight)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, weight.shape[0], h, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_236": {
                "input": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logpt.exp()",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "pt / (1 - pt.transpose(0, 1).gather(0, target.unsqueeze(0)).transpose(0, 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_pool2d_504": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.rand((x.shape[0], *x.shape[2:]), device=x.device) <= gamma).to(dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "1 - F.max_pool2d(mask, kernel_size=(block_size, block_size), stride=(1, 1), padding=block_size // 2)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(block_size, block_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "block_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu__57": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // scale_factor, scale_factor, w // scale_factor, scale_factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, int(c * scale_factor ** 2), h // scale_factor, w // scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(b, cnum, xi, -1)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, weight.shape[-2:], dilation=dilation, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x * (mask.numel() / one_count)",
                            "BinOp"
                        ],
                        [
                            "fn(x, weight)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, weight.shape[0], h, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_304": {
                "n": {
                    "value": "xi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_58": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(b, c, h // scale_factor, scale_factor, w // scale_factor, scale_factor)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(b, int(c * scale_factor ** 2), h // scale_factor, w // scale_factor)",
                            "Call"
                        ],
                        [
                            "x.view(b, cnum, xi, -1)",
                            "Call"
                        ],
                        [
                            "F.unfold(x, weight.shape[-2:], dilation=dilation, padding=padding, stride=stride)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x * (mask.numel() / one_count)",
                            "BinOp"
                        ],
                        [
                            "fn(x, weight)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, weight.shape[0], h, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_501": {
                "*size": {
                    "value": "(x.shape[0], *x.shape[2:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/nn/init.py": {
        "torch": {}
    },
    "holocron/nn/modules/activation.py": {
        "torch": {
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(x, out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "holocron/nn/modules/attention.py": {
        "torch": {
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.compress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ZPool(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_28": {
                "input": {
                    "value": "self.conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sigmoid_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "holocron/nn/modules/conv.py": {
        "torch": {
            "Conv2d_341": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "max(in_channels // r, L)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_342": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "max(in_channels // r, L)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_343": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "max(in_channels // r, L)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_344": {
                "variable": {
                    "value": "self.conv_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] + [min(2 ** (2 + idx), out_chan) for (idx, out_chan) in zip(range(num_levels - 1), out_chans[1:])]",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_347": {
                "variable": {
                    "value": "self.conv_bot1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_348": {
                "variable": {
                    "value": "self.conv_bot2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] + [min(2 ** (2 + idx), out_chan) for (idx, out_chan) in zip(range(num_levels - 1), out_chans[1:])]",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_357": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.mean(dim=(2, 3), keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.bn(self.fc1(z))",
                            "Call"
                        ],
                        [
                            "self.fc2(torch.relu(z))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_484": {
                "variable": {
                    "value": "self.reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(in_channels // reduction_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_485": {
                "variable": {
                    "value": "self.span",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(in_channels // reduction_ratio)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "kernel_size ** 2 * groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Unfold_486": {
                "variable": {
                    "value": "self.unfold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_370": {
                "tensors": {
                    "value": "(X_top, X_bot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_444": {
                "tensors": {
                    "value": "[conv(x) for conv in self]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_356": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.mean(dim=(2, 3), keepdim=True)",
                            "Call"
                        ],
                        [
                            "self.bn(self.fc1(z))",
                            "Call"
                        ],
                        [
                            "self.fc2(torch.relu(z))",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool2d_483": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_129": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "self._reversed_padding_repeated_twice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_228": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "self._reversed_padding_repeated_twice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_406": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups[0] if isinstance(groups, list) else 1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_434": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "group",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/nn/modules/downsample.py": {
        "torch": {
            "ReflectionPad2d_105": {
                "variable": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[get_padding(kernel_size, stride, dilation=1)] * 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "self._coeffs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(np.poly1d((0.5, 0.5)) ** (self.kernel_size - 1)).coeffs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "input": {
                    "value": "self.padding(input_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "blur_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self._coeffs[:, None] * self._coeffs[None, :]).to(dtype=like.dtype, device=like.device)",
                            "Call"
                        ],
                        [
                            "self.kernel.get(str(input_tensor.device), self._create_filter(input_tensor))",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "input_tensor.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x] + [pool_layer(x) for pool_layer in self]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_137": {
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "k_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/nn/modules/dropblock.py": {
        "torch": {}
    },
    "holocron/nn/modules/lambda_layer.py": {
        "torch": {
            "Conv2d_52": {
                "variable": {
                    "value": "self.to_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_k * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.to_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_k * dim_u",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.to_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_v * dim_u",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.norm_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_k * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.norm_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_v * dim_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_93": {
                "variable": {
                    "value": "\u03bbc",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b u k m, b u v m -> b k v",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_k(x)",
                            "Call"
                        ],
                        [
                            "k.reshape(b, -1, self.u, h * w).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "k.softmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_94": {
                "variable": {
                    "value": "Yc",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h k n, b k v -> b n h v",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_q(x)",
                            "Call"
                        ],
                        [
                            "self.norm_q(q)",
                            "Call"
                        ],
                        [
                            "q.reshape(b, self.num_heads, -1, h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(dim_k, dim_u, 1, r, r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(n, n, dim_k, dim_u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_100": {
                "variable": {
                    "value": "\u03bbp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_v(x)",
                            "Call"
                        ],
                        [
                            "self.norm_v(v)",
                            "Call"
                        ],
                        [
                            "v.reshape(b, -1, self.u, h * w).permute(0, 2, 1, 3)",
                            "Call"
                        ],
                        [
                            "v.reshape(b, self.u, v.shape[2], h, w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_101": {
                "variable": {
                    "value": "Yp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h k n, b k v n -> b n h v",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_q(x)",
                            "Call"
                        ],
                        [
                            "self.norm_q(q)",
                            "Call"
                        ],
                        [
                            "q.reshape(b, self.num_heads, -1, h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_103": {
                "variable": {
                    "value": "\u03bbp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "n m k u, b u v m -> b n k v",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "self.pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_104": {
                "variable": {
                    "value": "Yp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h k n, b n k v -> b n h v",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_q(x)",
                            "Call"
                        ],
                        [
                            "self.norm_q(q)",
                            "Call"
                        ],
                        [
                            "q.reshape(b, self.num_heads, -1, h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_64": {
                "*size": {
                    "value": "dim_k",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim_u",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_68": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim_k",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "dim_u",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/nn/modules/loss.py": {
        "torch": {}
    },
    "holocron/ops/boxes.py": {
        "torch": {
            "max_21": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_22": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_60": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_61": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(boxes1.shape[0], boxes2.shape[0], 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_83": {
                "variable": {
                    "value": "c2[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, 2].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_84": {
                "variable": {
                    "value": "c2[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, 3].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "center_dist2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(boxes1.shape[0], boxes2.shape[0], 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan_145": {
                "input": {
                    "value": "(boxes[:, 2] - boxes[:, 0]) / (boxes[:, 3] - boxes[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "any_56": {
                "input": {
                    "value": "boxes2[:, 2:] < boxes2[:, :2]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "min_86": {
                "input": {
                    "value": "boxes1[:, 0].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_87": {
                "input": {
                    "value": "boxes1[:, 1].unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/optim/adabelief.py": {
        "torch": {
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_59": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_61": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_64": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/optim/adamp.py": {
        "torch": {
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_73": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_78": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/optim/functional.py": {
        "torch": {
            "maximum_60": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exp_avg_sqs[i]",
                            "Subscript"
                        ],
                        [
                            "max_exp_avg_sqs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_avg_sqs[i]",
                            "Subscript"
                        ],
                        [
                            "exp_avg_sqs[i]",
                            "Subscript"
                        ],
                        [
                            "exp_avg_sqs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exp_avg_sqs[i]",
                            "Subscript"
                        ],
                        [
                            "max_exp_avg_sqs[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "maximum_111": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exp_avg_sqs[i]",
                            "Subscript"
                        ],
                        [
                            "max_exp_avg_sqs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_avg_sqs[i]",
                            "Subscript"
                        ],
                        [
                            "exp_avg_sqs[i]",
                            "Subscript"
                        ],
                        [
                            "exp_avg_sqs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exp_avg_sqs[i]",
                            "Subscript"
                        ],
                        [
                            "max_exp_avg_sqs[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "maximum_159": {
                "input": {
                    "value": "max_exp_avg_sqs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_avg_sqs[i]",
                            "Subscript"
                        ],
                        [
                            "exp_avg_sqs[i]",
                            "Subscript"
                        ],
                        [
                            "exp_avg_sqs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sqs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cosine_similarity_167": {
                "x1": {
                    "value": "param.data.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "grad.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "holocron/optim/lamb.py": {
        "torch": {
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/optim/lars.py": {
        "torch": {
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clone_85": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p.add(buf, alpha=momentum)",
                            "Call"
                        ],
                        [
                            "buf",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "holocron/optim/ralars.py": {
        "torch": {
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_108": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_91": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/optim/tadam.py": {
        "torch": {
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_90": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_92": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_95": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "p.data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/optim/wrapper.py": {
        "torch": {
            "cat_220": {
                "variable": {
                    "value": "self.buffer[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.buffer[idx], p.data.clone().detach().unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_229": {
                "input": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p[1:] - p[:-1]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_230": {
                "input": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p[1:] - p[:-1]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/trainer/classification.py": {
        "torch": {
            "inference_mode_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inference_mode_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "(target.view_as(out) >= 0.5) == (torch.sigmoid(out) >= 0.5)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "isnan_49": {
                "input": {
                    "value": "_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_loss(x, target, return_logits=True)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target, return_logits=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_49": {
                "input": {
                    "value": "_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_loss(x, target, return_logits=True)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target, return_logits=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_128": {
                "input": {
                    "value": "_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_loss(x, target, return_logits=True)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target, return_logits=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_128": {
                "input": {
                    "value": "_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_loss(x, target, return_logits=True)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target, return_logits=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_132": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_loss(x, target, return_logits=True)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target, return_logits=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "holocron/trainer/core.py": {
        "torch": {
            "inference_mode_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiplicativeLR_309": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda step: gamma",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "dict(epoch=self.epoch, step=self.step, min_loss=self.min_loss, optimizer=self.optimizer.state_dict(), model=self.model.state_dict())",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": []
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "OneCycleLR_230": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "total_steps": {
                    "value": "num_epochs * len(self.train_loader)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradScaler_261": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradScaler_315": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradScaler_400": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_78": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_232": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "num_epochs * len(self.train_loader)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "lr / 250000.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isfinite_132": {
                "input": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_327": {
                "input": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_327": {
                "input": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_408": {
                "input": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_408": {
                "input": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ],
                        [
                            "self._get_loss(x, target)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "holocron/trainer/detection.py": {
        "torch": {
            "unique_22": {
                "variable": {
                    "value": "assign_unique",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iou.indices[gt_kept]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inference_mode_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_25": {
                "start": {
                    "value": "gt_boxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__69": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "grad_clip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__78": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "grad_clip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "autocast_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_30": {
                "start": {
                    "value": "gt_boxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/trainer/segmentation.py": {
        "torch": {
            "zeros_50": {
                "variable": {
                    "value": "conf_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_classes, self.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.model.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inference_mode_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bincount_69": {
                "input": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_classes * target[k].to(torch.int64) + pred[k]",
                            "BinOp"
                        ]
                    ]
                },
                "minlength": {
                    "value": "nc ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "input": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "isnan_59": {
                "input": {
                    "value": "_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_loss(x, target, return_logits=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_59": {
                "input": {
                    "value": "_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_loss(x, target, return_logits=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_72": {
                "input": {
                    "value": "conf_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((self.num_classes, self.num_classes), dtype=torch.int64, device=next(self.model.parameters()).device)",
                            "Call"
                        ],
                        [
                            "conf_mat + torch.bincount(inds, minlength=nc ** 2).reshape(nc, nc)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_73": {
                "input": {
                    "value": "conf_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((self.num_classes, self.num_classes), dtype=torch.int64, device=next(self.model.parameters()).device)",
                            "Call"
                        ],
                        [
                            "conf_mat + torch.bincount(inds, minlength=nc ** 2).reshape(nc, nc)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "holocron/trainer/utils.py": {
        "torch": {}
    },
    "holocron/utils/data/collate.py": {
        "torch": {
            "randperm_56": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "one_hot_44": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.to(dtype=inputs.dtype)",
                            "Call"
                        ],
                        [
                            "one_hot(targets, num_classes=self.num_classes)",
                            "Call"
                        ],
                        [
                            "targets.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "holocron/utils/misc.py": {
        "torch": {
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "references/classification/train.py": {
        "torch": {
            "CrossEntropyLoss_176": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "label_smoothing": {
                    "value": "args.label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(os.path.join(args.data_path, 'train'), T.Compose([T.RandomResizedCrop(args.img_size, scale=(0.3, 1.0), interpolation=interpolation), T.RandomHorizontalFlip(), A.TrivialAugmentWide(interpolation=interpolation), T.PILToTensor(), T.ConvertImageDtype(torch.float32), normalize, T.RandomErasing(p=0.9, scale=(0.02, 0.2), value='random')]))",
                            "Call"
                        ],
                        [
                            "cifar_version(args.data_path, True, T.Compose([T.RandomHorizontalFlip(), A.TrivialAugmentWide(interpolation=interpolation), T.PILToTensor(), T.ConvertImageDtype(torch.float32), normalize, T.RandomErasing(p=0.9, value='random')]), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomSampler(train_set)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_collate",
                            "variable"
                        ],
                        [
                            "lambda batch: mix(*default_collate(batch))",
                            "Lambda"
                        ]
                    ]
                }
            },
            "DataLoader_162": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar_version(args.data_path, False, T.Compose([T.PILToTensor(), T.ConvertImageDtype(torch.float32), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "ImageFolder(os.path.join(args.data_path, 'val'), T.Compose(eval_tf))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SequentialSampler(val_set)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_181": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_205": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "IMAGENETTE['std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "IMAGENETTE['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "RAdam_183": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.95, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initial_seed_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_54": {
                "condition": {
                    "value": "targets[idx] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "RandomSampler_123": {
                "data_source": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(os.path.join(args.data_path, 'train'), T.Compose([T.RandomResizedCrop(args.img_size, scale=(0.3, 1.0), interpolation=interpolation), T.RandomHorizontalFlip(), A.TrivialAugmentWide(interpolation=interpolation), T.PILToTensor(), T.ConvertImageDtype(torch.float32), normalize, T.RandomErasing(p=0.9, scale=(0.02, 0.2), value='random')]))",
                            "Call"
                        ],
                        [
                            "cifar_version(args.data_path, True, T.Compose([T.RandomHorizontalFlip(), A.TrivialAugmentWide(interpolation=interpolation), T.PILToTensor(), T.ConvertImageDtype(torch.float32), normalize, T.RandomErasing(p=0.9, value='random')]), download=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_166": {
                "data_source": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cifar_version(args.data_path, False, T.Compose([T.PILToTensor(), T.ConvertImageDtype(torch.float32), normalize]), download=True)",
                            "Call"
                        ],
                        [
                            "ImageFolder(os.path.join(args.data_path, 'val'), T.Compose(eval_tf))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "references/clean_checkpoint.py": {
        "torch": {
            "save_14": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.checkpoint, map_location='cpu')['model']",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "args.outfile",
                    "type": "Attribute",
                    "possible_values": []
                },
                "_use_new_zipfile_serialization": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_13": {
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "references/detection/train.py": {
        "torch": {
            "DataLoader_136": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDetection(args.data_path, image_set='train', download=True, transforms=Compose([VOCTargetTransform(VOC_CLASSES), RandomResizedCrop((args.img_size, args.img_size), scale=(0.3, 1.0), interpolation=interpolation_mode), RandomHorizontalFlip(), convert_to_relative if args.source == 'holocron' else lambda x, y: (x, y), ImageTransform(T.ColorJitter(brightness=0.3, contrast=0.3, saturation=0.1, hue=0.02)), ImageTransform(T.PILToTensor()), ImageTransform(T.ConvertImageDtype(torch.float32)), ImageTransform(normalize)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "RandomSampler(train_set)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_176": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDetection(args.data_path, image_set='val', download=True, transforms=Compose([VOCTargetTransform(VOC_CLASSES), Resize(scale_size, interpolation=interpolation_mode), CenterCrop(args.img_size), convert_to_relative if args.source == 'holocron' else lambda x, y: (x, y), ImageTransform(T.PILToTensor()), ImageTransform(T.ConvertImageDtype(torch.float32)), ImageTransform(normalize)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "SequentialSampler(val_set)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_196": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "initial_seed_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_141": {
                "data_source": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDetection(args.data_path, image_set='train', download=True, transforms=Compose([VOCTargetTransform(VOC_CLASSES), RandomResizedCrop((args.img_size, args.img_size), scale=(0.3, 1.0), interpolation=interpolation_mode), RandomHorizontalFlip(), convert_to_relative if args.source == 'holocron' else lambda x, y: (x, y), ImageTransform(T.ColorJitter(brightness=0.3, contrast=0.3, saturation=0.1, hue=0.02)), ImageTransform(T.PILToTensor()), ImageTransform(T.ConvertImageDtype(torch.float32)), ImageTransform(normalize)]))",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_181": {
                "data_source": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCDetection(args.data_path, image_set='val', download=True, transforms=Compose([VOCTargetTransform(VOC_CLASSES), Resize(scale_size, interpolation=interpolation_mode), CenterCrop(args.img_size), convert_to_relative if args.source == 'holocron' else lambda x, y: (x, y), ImageTransform(T.PILToTensor()), ImageTransform(T.ConvertImageDtype(torch.float32)), ImageTransform(normalize)]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "references/detection/transforms.py": {
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[int(obj['bndbox']['xmin']), int(obj['bndbox']['ymin']), int(obj['bndbox']['xmax']), int(obj['bndbox']['ymax'])] for obj in target['annotation']['object']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.class_map[obj['name']] for obj in target['annotation']['object']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "references/segmentation/train.py": {
        "torch": {
            "DataLoader_143": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCSegmentation(args.data_path, image_set='train', download=True, transforms=Compose([RandomResize(min_size, max_size, interpolation_mode), RandomCrop(crop_size), RandomHorizontalFlip(0.5), ImageTransform(T.ColorJitter(brightness=0.3, contrast=0.3, saturation=0.1, hue=0.02)), ToTensor(), ImageTransform(normalize)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomSampler(train_set)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_174": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCSegmentation(args.data_path, image_set='val', download=True, transforms=Compose([Resize((crop_size, crop_size), interpolation_mode), ToTensor(), ImageTransform(normalize)]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SequentialSampler(val_set)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_194": {
                "variable": {
                    "value": "loss_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(VOC_CLASSES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_197": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "loss_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.ones(len(VOC_CLASSES))",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                },
                "label_smoothing": {
                    "value": "args.label_smoothing",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_206": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_235": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initial_seed_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomSampler_147": {
                "data_source": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCSegmentation(args.data_path, image_set='train', download=True, transforms=Compose([RandomResize(min_size, max_size, interpolation_mode), RandomCrop(crop_size), RandomHorizontalFlip(0.5), ImageTransform(T.ColorJitter(brightness=0.3, contrast=0.3, saturation=0.1, hue=0.02)), ToTensor(), ImageTransform(normalize)]))",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_178": {
                "data_source": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOCSegmentation(args.data_path, image_set='val', download=True, transforms=Compose([Resize((crop_size, crop_size), interpolation_mode), ToTensor(), ImageTransform(normalize)]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "references/segmentation/transforms.py": {
        "torch": {
            "as_tensor_110": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/eval_latency.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_35": {
                "variable": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, args.size, args.size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "inference_mode_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models.py": {
        "torch": {
            "rand_16": {
                "variable": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "conv_seq[0].in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_66": {
                "variable": {
                    "value": "bn.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "fused_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "*args": {
                    "value": "*conv_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_78": {
                "input": {
                    "value": "bn(conv(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "fused_conv(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_86": {
                "input": {
                    "value": "bn(conv(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "fused_conv(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models_classification.py": {
        "torch": {
            "rand_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_23": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_44": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "model(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models_detection.py": {
        "torch": {
            "rand_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 3, *input_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_26": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*input_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_57": {
                "input": {
                    "value": "subloss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_49": {
                "*size": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_boxes",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_models_segmentation.py": {
        "torch": {
            "rand_12": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_channels, *input_shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_nn.py": {
        "torch": {
            "rand_8": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_15": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_22": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(2, 4, 16, 16)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_30": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(2, 4, 16, 16)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(2, 4, 16, 16)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_nn_activation.py": {
        "torch": {
            "rand_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_nn_attention.py": {
        "torch": {
            "rand_8": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_nn_conv.py": {
        "torch": {
            "rand_9": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*input_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_nn_downsample.py": {
        "torch": {
            "arange_14": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_batches * num_chan * 4 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_43": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_batches, num_chan, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0625, 0.125, 0.0625], [0.125, 0.25, 0.125], [0.0625, 0.125, 0.0625]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_batches, num_chan, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_28": {
                "input": {
                    "value": "out[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([[0, 2], [8, 10]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_29": {
                "input": {
                    "value": "out[0][-num_chan]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor([[5, 7], [13, 15]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_32": {
                "input": {
                    "value": "mod(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.concat_downsample2d(x, scale_factor)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "F.z_pool(x, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_35": {
                "input": {
                    "value": "mod(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.concat_downsample2d(x, scale_factor)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "F.z_pool(x, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_46": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.concat_downsample2d(x, scale_factor)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "F.z_pool(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ref(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_52": {
                "input": {
                    "value": "mod(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ref(x).view(*x.shape[:2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_72": {
                "input": {
                    "value": "out[..., 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(x[..., 1:-1, 1:-1] * k[None, None, ...]).sum(dim=(2, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_89": {
                "input": {
                    "value": "mod(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.concat_downsample2d(x, scale_factor)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "mod(x)",
                            "Call"
                        ],
                        [
                            "F.z_pool(x, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_28": {
                "data": {
                    "value": "[[0, 2], [8, 10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[[5, 7], [13, 15]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_nn_init.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_13": {
                "input": {
                    "value": "module[0].bias.data == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_14": {
                "input": {
                    "value": "module[1].weight.data == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_15": {
                "input": {
                    "value": "module[1].bias.data == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_9": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_9": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_nn_loss.py": {
        "torch": {
            "ones_14": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "rand_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_35": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "rand_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(num_batches, num_classes)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand((num_batches, num_classes, 20, 20), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_batches, xi * num_classes)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand((num_batches, num_classes, 20, 20), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand((num_batches, num_classes, 20, 20), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_101": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_batches, num_classes, 20, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "xi * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "xi * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "xi * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_137": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_157": {
                "variable": {
                    "value": "base_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_169": {
                "variable": {
                    "value": "base_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.ones(num_classes, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_183": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_batches, num_classes, 20, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_184": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_191": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "rand_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_batches, num_classes, 20, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_207": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_215": {
                "variable": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_like_20": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(num_batches, num_classes)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand((num_batches, num_classes, 20, 20), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_batches, xi * num_classes)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand((num_batches, num_classes, 20, 20), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand((num_batches, num_classes, 20, 20), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_25": {
                "input": {
                    "value": "loss_fn(x, target, reduction='none')",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "same_loss * torch.ones(num_batches, dtype=x.dtype)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_51": {
                "input": {
                    "value": "loss_fn(x, target, reduction='sum')",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "loss_fn(x, target, reduction='none').sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_52": {
                "input": {
                    "value": "loss_fn(x, target, reduction='mean')",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "loss_fn(x, target, reduction='sum') / target.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_68": {
                "input": {
                    "value": "F.focal_loss(x, target, gamma=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cross_entropy(x, target)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_71": {
                "input": {
                    "value": "(1 - 1 / num_classes) * F.focal_loss(x, target, gamma=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "F.focal_loss(x, target, gamma=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_91": {
                "input": {
                    "value": "F.multilabel_cross_entropy(x, target)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "cross_entropy(x, target.argmax(dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(num_batches, num_classes)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand((num_batches, num_classes, 20, 20), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_batches, xi * num_classes)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand((num_batches, num_classes, 20, 20), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand((num_batches, num_classes, 20, 20), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_batches, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.rand(x.shape)",
                            "Call"
                        ],
                        [
                            "(num_classes * torch.rand(num_batches)).to(torch.long)",
                            "Call"
                        ],
                        [
                            "(num_classes * torch.rand(num_batches, 20, 20)).to(torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "(num_classes * torch.rand(num_batches, 20, 20)).to(torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_batches, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "(num_classes * torch.rand(num_batches, 20, 20)).to(torch.long)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "(num_classes * torch.rand(num_batches, 20, 20)).to(torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_91": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(num_batches, num_classes)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand((num_batches, num_classes, 20, 20), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.ones(num_batches, xi * num_classes)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand((num_batches, num_classes, 20, 20), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand((num_batches, num_classes, 20, 20), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target.argmax(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_153": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_172": {
                "input": {
                    "value": "base_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_criterion.weight.clone()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "criterion.criterion.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_26": {
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_169": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_65": {
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_102": {
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_156": {
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_208": {
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_34": {
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "unique_42": {
                "input": {
                    "value": "target.argmax(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_44": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_batches, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.rand(x.shape)",
                            "Call"
                        ],
                        [
                            "(num_classes * torch.rand(num_batches)).to(torch.long)",
                            "Call"
                        ],
                        [
                            "(num_classes * torch.rand(num_batches, 20, 20)).to(torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "(num_classes * torch.rand(num_batches, 20, 20)).to(torch.long)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_batches, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "(num_classes * torch.rand(num_batches, 20, 20)).to(torch.long)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "torch.rand(num_batches, num_classes, 20, 20)",
                            "Call"
                        ],
                        [
                            "(num_classes * torch.rand(num_batches, 20, 20)).to(torch.long)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_ops.py": {
        "torch": {
            "tensor_12": {
                "data": {
                    "value": "[[0, 0, 100, 100], [50, 50, 100, 100], [50, 50, 150, 150], [100, 100, 200, 200]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_65": {
                "input": {
                    "value": "ops.boxes.aspect_ratio(boxes)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "math.pi / 4 * torch.ones(boxes.shape[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_71": {
                "input": {
                    "value": "ops.boxes.aspect_ratio_consistency(boxes, boxes)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros(boxes.shape[0], boxes.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "boxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "boxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "boxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_optim.py": {
        "torch": {
            "rand_28": {
                "variable": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_batches, *input_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_34": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_t)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_batches, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_40": {
                "input": {
                    "value": "_p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "p_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_p.data.clone()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_optim_wrapper.py": {
        "torch": {
            "SGD_21": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.classifier[3].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "rand_38": {
                "variable": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_batches, *input_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(input_t)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_batches, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_48": {
                "input": {
                    "value": "_p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "p_val - lr * _p.grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "all_31": {
                "input": {
                    "value": "p.grad == 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_trainer.py": {
        "torch": {
            "load_90": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "learner.output_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MockClassificationDataset(num_it * batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_140": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_175": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_176": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MockClassificationDataset(num_it * batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_177": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_178": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_190": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MockBinaryClassificationDataset(num_it * batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_191": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_192": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_200": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MockBinaryClassificationDatasetBis(num_it * batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_201": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_202": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_218": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_219": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MockSegDataset(num_it * batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_220": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_221": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_259": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MockDetDataset(num_it * batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collate_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_260": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 1, 1], [0.25, 0.25, 0.75, 0.75]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_122": {
                "input": {
                    "value": "learner.model.state_dict()[ref_param]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "model_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learner.model.state_dict()[ref_param].clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_126": {
                "input": {
                    "value": "learner.model.state_dict()[ref_param]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "model_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learner.model.state_dict()[ref_param].clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_189": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_218": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_218": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_21": {
                "*size": {
                    "value": "(3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "(3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_45": {
                "*size": {
                    "value": "(3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_56": {
                "*size": {
                    "value": "(3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_71": {
                "*size": {
                    "value": "(3, 320, 320)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_trainer_utils.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_22": {
                "input": {
                    "value": "mod[1].num_batches_tracked",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod[1].num_batches_tracked.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_23": {
                "input": {
                    "value": "mod[1].running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "rm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod[1].running_mean.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_24": {
                "input": {
                    "value": "mod[1].running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mod[1].running_var.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_20": {
                "*size": {
                    "value": "(1, 3, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_utils.py": {
        "torch": {
            "rand_50": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_51": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(batch_size // 2), torch.ones(batch_size - batch_size // 2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MockDataset(num_it * batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_88": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_36": {
                "input": {
                    "value": "mix_target.sum(dim=1) == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_38": {
                "input": {
                    "value": "(count == 2.0) | (count == 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_43": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((batch_size, *shape))",
                            "Call"
                        ],
                        [
                            "torch.rand((batch_size, *shape))",
                            "Call"
                        ],
                        [
                            "torch.rand((batch_size, *shape))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mix_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ],
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ],
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ],
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ]
                    ]
                }
            },
            "all_45": {
                "input": {
                    "value": "mix_target.sum(dim=1) == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_46": {
                "input": {
                    "value": "(mix_target > 0).sum(dim=1) == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "rand_31": {
                "*size": {
                    "value": "(batch_size, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_34": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((batch_size, *shape))",
                            "Call"
                        ],
                        [
                            "torch.rand((batch_size, *shape))",
                            "Call"
                        ],
                        [
                            "torch.rand((batch_size, *shape))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mix_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ],
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ],
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ],
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_54": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((batch_size, *shape))",
                            "Call"
                        ],
                        [
                            "torch.rand((batch_size, *shape))",
                            "Call"
                        ],
                        [
                            "torch.rand((batch_size, *shape))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mix_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ],
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ],
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ],
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_59": {
                "*size": {
                    "value": "(batch_size, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_62": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((batch_size, *shape))",
                            "Call"
                        ],
                        [
                            "torch.rand((batch_size, *shape))",
                            "Call"
                        ],
                        [
                            "torch.rand((batch_size, *shape))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mix_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ],
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ],
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ],
                        [
                            "mix(img.clone(), target.clone())",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_16": {
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_31": {
                "start": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "batch_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_51": {
                "*size": {
                    "value": "batch_size - batch_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}