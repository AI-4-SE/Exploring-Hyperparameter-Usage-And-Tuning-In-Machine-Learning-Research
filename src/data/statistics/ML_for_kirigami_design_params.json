{
    "models_regression/CNN_regression/tf_cnn_search_large_v2.py": {
        "sklearn": {
            "r2_score_296": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataRem_expanded[:, nfeatures]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(y_test, (len(y_test), 1))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(y_pred, feed_dict={x: X_test})",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_241": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y_pred - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_242": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "variable"
                        ]
                    ]
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_input])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 50, 80, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 50, 80, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_164": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_input])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 50, 80, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_174": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=16, kernel_size=[3, 3], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_178": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=16, kernel_size=[3, 3], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_182": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 32, 3, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_186": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 32, 3, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_190": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, 64, 3, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_194": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, 64, 3, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_198": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, n_hidden_1, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_hidden_1",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_203": {
                "variable": {
                    "value": "W_O",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1, n_classes], 0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_206": {
                "variable": {
                    "value": "b_O",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_classes], 0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_208": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(fc1, W_O)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_classes], 0, 0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_222": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, weights['h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_223": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(x, weights['h1']), biases['b1'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_228": {
                "name": {
                    "value": "weights-biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_239": {
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_161": {
                "name": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_221": {
                "name": {
                    "value": "dnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_230": {
                "initial_value": {
                    "value": "tf.random_normal([n_input, n_hidden_1], 0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_231": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1, n_classes], 0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_234": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1], 0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_235": {
                "initial_value": {
                    "value": "tf.random_normal([n_classes], 0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_241": {
                "x": {
                    "value": "y_pred - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "initialize_all_variables_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_208": {
                "a": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, n_hidden_1, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_hidden_1, n_classes], 0, 0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_222": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_input])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 50, 80, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_224": {
                "a": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(x, weights['h1']), biases['b1'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models_regression/CNN_regression/tf_fgrid_dnn_validtrain.py": {
        "sklearn": {
            "r2_score_178": {
                "variable": {
                    "value": "r2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_train, (len(y_train), 1))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted_vals_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(y_pred, feed_dict={x: X_train})",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_182": {
                "variable": {
                    "value": "r2_v",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_valid, (len(y_valid), 1))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted_vals_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(y_pred, feed_dict={x: X_valid})",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_186": {
                "variable": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_test, (len(y_test), 1))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(y_pred, feed_dict={x: X_test})",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_187": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_test, (len(y_test), 1))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(y_pred, feed_dict={x: X_test})",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_139": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y_pred - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "variable"
                        ]
                    ]
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_input])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 30, 80, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 30, 80, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_95": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_input])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=[-1, 30, 80, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_104": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=16, kernel_size=[3, 3], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_108": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=16, kernel_size=[3, 3], padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv1, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_110": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 32, 3, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_113": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, 32, 3, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv2, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_115": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, 64, 3, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_118": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, 64, 3, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(conv3, 2, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_121": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, n_hidden_1, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_hidden_1",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "variable": {
                    "value": "W_O",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1, n_classes], 0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_124": {
                "variable": {
                    "value": "b_O",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_classes], 0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_126": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(fc1, W_O)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_classes], 0, 0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_137": {
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_92": {
                "name": {
                    "value": "ConvNet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_139": {
                "x": {
                    "value": "y_pred - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "initialize_all_variables_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_126": {
                "a": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fc1, n_hidden_1, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_hidden_1, n_classes], 0, 0.1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}