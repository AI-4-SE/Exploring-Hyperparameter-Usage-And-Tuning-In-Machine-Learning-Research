{
    "t_sne.py": {
        "sklearn": {
            "PCA_84": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PCA_101": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_45": {
                "f": {
                    "value": "FLAGS.encoder_save",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_47": {
                "f": {
                    "value": "FLAGS.decoder_save",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "dataset": {
                    "value": "paired_mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST_Paired(root='mnist', download=True, train=False, transform=transform_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.num_test_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "alternate_data_loader.py": {
        "torch": {}
    },
    "classification_accuracy.py": {
        "torch": {
            "CrossEntropyLoss_77": {
                "variable": {
                    "value": "cross_entropy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "style_classifier_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(style_classifier.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "FLAGS.initial_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(FLAGS.beta_1, FLAGS.beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "class_classifier_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(class_classifier.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "FLAGS.initial_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(FLAGS.beta_1, FLAGS.beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_130": {
                "variable": {
                    "value": "(_, style_classifier_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "style_classifier_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "style_classifier(style_latent_embeddings)",
                            "Call"
                        ],
                        [
                            "style_classifier(style_latent_embeddings)",
                            "Call"
                        ],
                        [
                            "style_classifier(style_latent_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_143": {
                "variable": {
                    "value": "(_, class_classifier_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "class_classifier_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_classifier(class_latent_embeddings)",
                            "Call"
                        ],
                        [
                            "class_classifier(class_latent_embeddings)",
                            "Call"
                        ],
                        [
                            "class_classifier(class_latent_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_186": {
                "variable": {
                    "value": "(_, style_classifier_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "style_classifier_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "style_classifier(style_latent_embeddings)",
                            "Call"
                        ],
                        [
                            "style_classifier(style_latent_embeddings)",
                            "Call"
                        ],
                        [
                            "style_classifier(style_latent_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_192": {
                "variable": {
                    "value": "(_, class_classifier_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "class_classifier_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_classifier(class_latent_embeddings)",
                            "Call"
                        ],
                        [
                            "class_classifier(class_latent_embeddings)",
                            "Call"
                        ],
                        [
                            "class_classifier(class_latent_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_232": {
                "variable": {
                    "value": "(_, style_classifier_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "style_classifier_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "style_classifier(style_latent_embeddings)",
                            "Call"
                        ],
                        [
                            "style_classifier(style_latent_embeddings)",
                            "Call"
                        ],
                        [
                            "style_classifier(style_latent_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_238": {
                "variable": {
                    "value": "(_, class_classifier_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "class_classifier_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_classifier(class_latent_embeddings)",
                            "Call"
                        ],
                        [
                            "class_classifier(class_latent_embeddings)",
                            "Call"
                        ],
                        [
                            "class_classifier(class_latent_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_54": {
                "f": {
                    "value": "os.path.join('checkpoints', FLAGS.encoder_save)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_56": {
                "f": {
                    "value": "os.path.join('checkpoints', FLAGS.decoder_save)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "dataset": {
                    "value": "mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='mnist', download=True, train=True, transform=transform_config)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root='mnist', download=True, train=True, transform=transform_config)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root='mnist', download=True, train=False, transform=transform_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_159": {
                "dataset": {
                    "value": "mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='mnist', download=True, train=True, transform=transform_config)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root='mnist', download=True, train=True, transform=transform_config)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root='mnist', download=True, train=False, transform=transform_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_205": {
                "dataset": {
                    "value": "mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='mnist', download=True, train=True, transform=transform_config)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root='mnist', download=True, train=True, transform=transform_config)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root='mnist', download=True, train=False, transform=transform_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "torch": {
            "load_49": {
                "variable": {
                    "value": "monitor",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(folder, 'monitor_e%d' % (FLAGS.end_epoch - 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_65": {
                "f": {
                    "value": "FLAGS.encoder_save",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_67": {
                "f": {
                    "value": "FLAGS.decoder_save",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "dataset": {
                    "value": "paired_mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNIST_Paired(root='mnist', download=True, train=False, transform=transform_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_175": {
                "variable": {
                    "value": "mu_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mu_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_166": {
                "input": {
                    "value": "log_var_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "content_logvar[group_index, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "networks.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.style_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "style_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.style_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "style_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.class_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.class_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "class_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_dim + class_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.linear_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.linear_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(style_latent_space, class_latent_space)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "variable": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_var(x).view(batch_size, 1, 28, 28)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.fc_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc_1', nn.Linear(in_features=z_dim, out_features=256, bias=True)), ('fc_1_bn', nn.BatchNorm1d(num_features=256)), ('LeakyRelu_1', nn.LeakyReLU(negative_slope=0.2, inplace=True)), ('fc_2', nn.Linear(in_features=256, out_features=256, bias=True)), ('fc_2_bn', nn.BatchNorm1d(num_features=256)), ('LeakyRelu_2', nn.LeakyReLU(negative_slope=0.2, inplace=True)), ('fc_3', nn.Linear(in_features=256, out_features=num_classes, bias=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "dataset": {
                    "value": "mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='mnist', download=True, train=True, transform=transform_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_62": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_65": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_66": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "training.py": {
        "torch": {
            "Normal_44": {
                "variable": {
                    "value": "prob_x",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu_x.view(X.size(0), 784)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.exp(logvar_x) + 1e-12) ** 0.5",
                            "BinOp"
                        ],
                        [
                            "scale_x.view(X.size(0), 784)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "auto_encoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "FLAGS.initial_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(FLAGS.beta_1, FLAGS.beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_134": {
                "variable": {
                    "value": "weights_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(mnist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_135": {
                "variable": {
                    "value": "weights_test",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(mnist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_148": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_mnist.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_149": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "val_mnist.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_151": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='mnist', download=True, train=True, transform=transform_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_mnist.indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='mnist', download=True, train=True, transform=transform_config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(val_mnist.indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "monitor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.end_epoch - FLAGS.start_epoch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_40": {
                "input": {
                    "value": "logvar_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_87": {
                "f": {
                    "value": "os.path.join(savedir, FLAGS.encoder_save)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "os.path.join(savedir, FLAGS.decoder_save)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savedir, FLAGS.encoder_save + '_e%d' % epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savedir, FLAGS.decoder_save + '_e%d' % epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "monitor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(FLAGS.end_epoch - FLAGS.start_epoch, 4)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(savedir, 'monitor_e%d' % epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "cat_44": {
                "variable": {
                    "value": "content_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "content_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(content_mu, dim=0)",
                            "Call"
                        ],
                        [
                            "content_mu * torch.exp(content_logvar)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "content_inv_logvar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "content_inv_logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(content_inv_logvar, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "content_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "content_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(content_samples, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(content_samples, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indexes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indexes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_106": {
                "variable": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sizes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sizes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_141": {
                "variable": {
                    "value": "content_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "content_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(content_samples, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(content_samples, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indexes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indexes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_143": {
                "variable": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sizes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sizes)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_64": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(logvar)",
                            "Call"
                        ],
                        [
                            "logvar.mul(0.5).exp_()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(logvar)",
                            "Call"
                        ],
                        [
                            "gain * math.sqrt(1.0 / fan_in)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_28": {
                "variable": {
                    "value": "inv_group_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_group_logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-class_logvar[samples_group, :]",
                            "UnaryOp"
                        ],
                        [
                            "torch.logsumexp(inv_group_logvar, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "inv_group_logvar[None, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_50": {
                "input": {
                    "value": "content_logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-content_inv_logvar",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_54": {
                "input": {
                    "value": "(input - target).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "torch.abs(input - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsumexp_33": {
                "variable": {
                    "value": "inv_group_logvar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inv_group_logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-class_logvar[samples_group, :]",
                            "UnaryOp"
                        ],
                        [
                            "torch.logsumexp(inv_group_logvar, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "inv_group_logvar[None, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_58": {
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_101": {
                "*size": {
                    "value": "size_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples_group.numel()",
                            "Call"
                        ],
                        [
                            "torch.ones(size_group) * size_group",
                            "BinOp"
                        ],
                        [
                            "samples_group.numel()",
                            "Call"
                        ],
                        [
                            "torch.ones(size_group) * size_group",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_138": {
                "*size": {
                    "value": "size_group",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples_group.numel()",
                            "Call"
                        ],
                        [
                            "torch.ones(size_group) * size_group",
                            "BinOp"
                        ],
                        [
                            "samples_group.numel()",
                            "Call"
                        ],
                        [
                            "torch.ones(size_group) * size_group",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}