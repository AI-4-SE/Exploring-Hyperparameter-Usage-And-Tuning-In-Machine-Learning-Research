{
    "convlab/modules/nlu/multiwoz/svm/Classifier.py": {
        "sklearn": {
            "SVC_20": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_511": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGDClassifier_535": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "log",
                    "type": "str",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SVC_478": {
                "variable": {
                    "value": "this_model",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/human_eval/cambot_server.py": {
        "tensorflow": {
            "ConfigProto_18": {
                "variable": {
                    "value": "_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_47": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_49": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_dst/multiwoz/mdbt/mdbt.py": {
        "tensorflow": {
            "ConfigProto_509": {
                "variable": {
                    "value": "_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_515": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_529": {
                "variable": {
                    "value": "_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_535": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_94": {
                "variable": {
                    "value": "_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_97": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_315": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_322": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_329": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_340": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_341": {
                "variable": {
                    "value": "val_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "validation_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "value_accuracy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_342": {
                "variable": {
                    "value": "val_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "validation_f1_score",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "value_f1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FileWriter_343": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "TRAIN_GRAPH_URL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_url",
                            "Name"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_324": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_327": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "global_variables_initializer_337": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_dst/multiwoz/mdbt/mdbt_util.py": {
        "tensorflow": {
            "reshape_114": {
                "variable": {
                    "value": "utter",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "utter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(utter, [-1, max_utterance_length, vector_dimension])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, max_utterance_length, vector_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "hidden_representation",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "hidden_representation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_representation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([num_filters], tf.float32)",
                            "Call"
                        ],
                        [
                            "hidden_representation + tf.reshape(tf.concat(pooled, 3), [-1, num_filters])",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(hidden_representation, [-1, max_no_turns, num_filters], name=name)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, max_no_turns, num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'r'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_223": {
                "variable": {
                    "value": "ontology",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "ontology",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ontology, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_226": {
                "variable": {
                    "value": "user_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, max_no_turns, max_utterance_length, vector_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_227": {
                "variable": {
                    "value": "system_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, max_no_turns, max_utterance_length, vector_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sys",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_228": {
                "variable": {
                    "value": "num_turns",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "num_turns",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_229": {
                "variable": {
                    "value": "user_utterance_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, max_no_turns]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_sen_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_230": {
                "variable": {
                    "value": "sys_utterance_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, max_no_turns]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sys_sen_len",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_231": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, max_no_turns, num_slots]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_232": {
                "variable": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, max_no_turns, num_slots]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "domain_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_234": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_337": {
                "variable": {
                    "value": "W_inform",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([2 * lstm_num_hidden])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_inform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_338": {
                "variable": {
                    "value": "b_inform",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_inform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_339": {
                "variable": {
                    "value": "inform",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.multiply(tf.concat([slot_user, value_user], axis=3), W_inform), axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_inform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([1]), name='b_inform')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "inform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_367": {
                "variable": {
                    "value": "a_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "a_memory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_368": {
                "variable": {
                    "value": "b_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_memory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_369": {
                "variable": {
                    "value": "a_current",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "a_current",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_370": {
                "variable": {
                    "value": "b_current",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_current",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_371": {
                "variable": {
                    "value": "M_h_a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "M_h_a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_372": {
                "variable": {
                    "value": "M_h_b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "M_h_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_373": {
                "variable": {
                    "value": "W_m_a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_m_a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_374": {
                "variable": {
                    "value": "W_m_b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_m_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_375": {
                "variable": {
                    "value": "U_m_a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "U_m_a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_376": {
                "variable": {
                    "value": "U_m_b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "U_m_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_466": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for _ in range(len(slots))]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_468": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(loss, name='cross_entropy')",
                            "Call"
                        ],
                        [
                            "tf.add(cross_entropy, domain_loss, name='total_loss')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(mask * cross_entropy, axis=1) / tf.cast(num_turns, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "domain_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.nn.sigmoid_cross_entropy_with_logits(labels=domain_labels, logits=y_d), axis=2, name='domain_loss') / (num_slots / len(slots))",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_470": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for _ in range(len(slots))]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(y, axis=2, name='y')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_472": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sequence_mask(num_turns, maxlen=max_no_turns)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_473": {
                "variable": {
                    "value": "mask_extended",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(mask, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, num_slots]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_476": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_482": {
                "variable": {
                    "value": "true_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, max_no_turns, num_slots], name='domain_labels')",
                            "Call"
                        ],
                        [
                            "np.zeros(len(ontology), dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, max_no_turns, ontology_size), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_slots]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_483": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.round(y_d) * mask_extended",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_slots]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_485": {
                "variable": {
                    "value": "y_d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_d * mask_extended",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_slots]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_489": {
                "variable": {
                    "value": "mask_extended_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(mask, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, len(slots)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_492": {
                "variable": {
                    "value": "true_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(slot_label, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, len(slots)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_493": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(slot_pred, axis=2) * mask_extended_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, len(slots)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_516": {
                "variable": {
                    "value": "true_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, max_no_turns, num_slots], name='labels')",
                            "Call"
                        ],
                        [
                            "np.zeros(len(ontology), dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, max_no_turns, ontology_size), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_slots]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_517": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(y_pred, axis=2) * mask_extended",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_slots]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_522": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for _ in range(len(slots))]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(y, axis=2, name='y')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_slots]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_539": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.sequence_mask(num_turns, maxlen=max_no_turns), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_slots])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_slots]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_542": {
                "variable": {
                    "value": "num_positives",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "true_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(domain_labels, [-1, num_slots])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(slot_label, axis=2), [-1, len(slots)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(val_label, axis=2) * mask_extended_2, [-1, len(slots)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [-1, num_slots])",
                            "Call"
                        ],
                        [
                            "tf.reshape(val_label[i] * mask_extended_3, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_543": {
                "variable": {
                    "value": "classified_positives",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.round(y_d) * mask_extended, [-1, num_slots])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(slot_pred, axis=2) * mask_extended_2, [-1, len(slots)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(val_pred, axis=2) * mask_extended_2, [-1, len(slots)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(y_pred, axis=2) * mask_extended, [-1, num_slots])",
                            "Call"
                        ],
                        [
                            "tf.reshape(val_pred[i] * mask_extended_3, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_545": {
                "variable": {
                    "value": "true_positives",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.round(y_d) * mask_extended, [-1, num_slots])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(slot_pred, axis=2) * mask_extended_2, [-1, len(slots)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(val_pred, axis=2) * mask_extended_2, [-1, len(slots)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(y_pred, axis=2) * mask_extended, [-1, num_slots])",
                            "Call"
                        ],
                        [
                            "tf.reshape(val_pred[i] * mask_extended_3, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(domain_labels, [-1, num_slots])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(slot_label, axis=2), [-1, len(slots)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(val_label, axis=2) * mask_extended_2, [-1, len(slots)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [-1, num_slots])",
                            "Call"
                        ],
                        [
                            "tf.reshape(val_label[i] * mask_extended_3, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_546": {
                "variable": {
                    "value": "num_true_positives",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "true_positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(predictions, true_predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_82": {
                "variable": {
                    "value": "state_only",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "turn['user']['belief_state']",
                            "Subscript"
                        ],
                        [
                            "turn['user']['belief_state']",
                            "Subscript"
                        ],
                        [
                            "tf.concat([output_, new_state], 1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, self.label_size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_83": {
                "variable": {
                    "value": "output_only",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "turn['user']['belief_state']",
                            "Subscript"
                        ],
                        [
                            "turn['user']['belief_state']",
                            "Subscript"
                        ],
                        [
                            "tf.concat([output_, new_state], 1)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self.label_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_84": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(inputs, self.U_m) + tf.matmul(state_only, self.W_m)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_90": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_, new_state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_122": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(utter, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "W[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_R",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_131": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b[i]), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, max_utterance_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "r_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "text_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "text_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(text_input, [-1, max_utterance_length, vector_dimension])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, max_utterance_length, vector_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "utterance_length",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "utterance_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(utterance_length, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "variable": {
                    "value": "last_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "last_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_state.h",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(last_state, [-1, max_no_turns, num_hidden])",
                            "Call"
                        ],
                        [
                            "tf.concat(lspd, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, max_no_turns, num_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_288": {
                "variable": {
                    "value": "usr_dom_en",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(usr_dom_en, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, num_slots, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "h_u_d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_289": {
                "variable": {
                    "value": "sys_dom_en",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sys_dom_en, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, num_slots, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "h_s_d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_291": {
                "variable": {
                    "value": "usr_slot_en",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(usr_slot_en, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, num_slots, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "h_u_s",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_292": {
                "variable": {
                    "value": "sys_slot_en",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sys_slot_en, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, num_slots, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "h_s_s",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_293": {
                "variable": {
                    "value": "usr_val_en",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(usr_val_en, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, num_slots, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "h_u_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_294": {
                "variable": {
                    "value": "sys_val_en",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sys_val_en, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, num_slots, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "h_s_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_295": {
                "variable": {
                    "value": "usr_en",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(usr_en, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, num_slots, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "h_u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_301": {
                "variable": {
                    "value": "W_onto_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([vector_dimension, lstm_num_hidden])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_onto_domain",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_302": {
                "variable": {
                    "value": "W_onto_slot",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([vector_dimension, lstm_num_hidden])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_onto_slot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_303": {
                "variable": {
                    "value": "W_onto_value",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([vector_dimension, lstm_num_hidden])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_onto_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_306": {
                "variable": {
                    "value": "b_onto_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([lstm_num_hidden])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_onto_domain",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_307": {
                "variable": {
                    "value": "b_onto_slot",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([lstm_num_hidden])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_onto_slot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_308": {
                "variable": {
                    "value": "b_onto_value",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([lstm_num_hidden])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_onto_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_311": {
                "variable": {
                    "value": "domain_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "ontology",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ontology, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, vector_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_312": {
                "variable": {
                    "value": "slot_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "ontology",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ontology, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, vector_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, vector_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_313": {
                "variable": {
                    "value": "value_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "ontology",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ontology, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 2 * vector_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, vector_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_315": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tanh(tf.matmul(domain_vec, W_onto_domain) + b_onto_domain)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_316": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tanh(tf.matmul(slot_vec, W_onto_slot) + b_onto_slot)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "s",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_317": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tanh(tf.matmul(value_vec, W_onto_value) + b_onto_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_321": {
                "variable": {
                    "value": "domain_user",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "usr_dom_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(user_input, num_filters=lstm_num_hidden, name='h_u_d')",
                            "Call"
                        ],
                        [
                            "lstm_model(user_input, user_utterance_lengths, lstm_num_hidden, 'h_u_d', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(usr_dom_en, keep_prob, name='h_u_d_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(usr_dom_en, axis=2), [1, 1, num_slots, 1], name='h_u_d')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.tanh(tf.matmul(domain_vec, W_onto_domain) + b_onto_domain), keep_prob, name='d')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "domain_user",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_322": {
                "variable": {
                    "value": "domain_sys",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sys_dom_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(system_input, num_filters=lstm_num_hidden, name='h_s_d')",
                            "Call"
                        ],
                        [
                            "lstm_model(system_input, sys_utterance_lengths, lstm_num_hidden, 'h_s_d', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(sys_dom_en, keep_prob, name='h_s_d_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sys_dom_en, axis=2), [1, 1, num_slots, 1], name='h_s_d')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.tanh(tf.matmul(domain_vec, W_onto_domain) + b_onto_domain), keep_prob, name='d')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "domain_sys",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_323": {
                "variable": {
                    "value": "slot_user",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "usr_slot_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(user_input, num_filters=lstm_num_hidden, name='h_u_s')",
                            "Call"
                        ],
                        [
                            "lstm_model(user_input, user_utterance_lengths, lstm_num_hidden, 'h_u_s', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(usr_slot_en, keep_prob, name='h_u_s_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(usr_slot_en, axis=2), [1, 1, num_slots, 1], name='h_u_s')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.tanh(tf.matmul(slot_vec, W_onto_slot) + b_onto_slot), keep_prob, name='s')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "slot_user",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_324": {
                "variable": {
                    "value": "slot_sys",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sys_slot_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(system_input, num_filters=lstm_num_hidden, name='h_s_s')",
                            "Call"
                        ],
                        [
                            "lstm_model(system_input, sys_utterance_lengths, lstm_num_hidden, 'h_s_s', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(sys_slot_en, keep_prob, name='h_s_s_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sys_slot_en, axis=2), [1, 1, num_slots, 1], name='h_s_s')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.tanh(tf.matmul(slot_vec, W_onto_slot) + b_onto_slot), keep_prob, name='s')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "slot_sys",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_325": {
                "variable": {
                    "value": "value_user",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "usr_val_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(user_input, num_filters=lstm_num_hidden, name='h_u_v')",
                            "Call"
                        ],
                        [
                            "lstm_model(user_input, user_utterance_lengths, lstm_num_hidden, 'h_u_v', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(usr_val_en, keep_prob, name='h_u_v_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(usr_val_en, axis=2), [1, 1, num_slots, 1], name='h_u_v')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.tanh(tf.matmul(value_vec, W_onto_value) + b_onto_value), keep_prob, name='v')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "value_user",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_326": {
                "variable": {
                    "value": "value_sys",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sys_val_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(system_input, num_filters=lstm_num_hidden, name='h_s_v')",
                            "Call"
                        ],
                        [
                            "lstm_model(system_input, sys_utterance_lengths, lstm_num_hidden, 'h_s_v', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(sys_val_en, keep_prob, name='h_s_v_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sys_val_en, axis=2), [1, 1, num_slots, 1], name='h_s_v')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.tanh(tf.matmul(value_vec, W_onto_value) + b_onto_value), keep_prob, name='v')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "value_sys",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_330": {
                "variable": {
                    "value": "W_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([2 * lstm_num_hidden])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_domain",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_331": {
                "variable": {
                    "value": "b_domain",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_domain",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_332": {
                "variable": {
                    "value": "y_d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.multiply(tf.concat([domain_user, domain_sys], axis=3), W_domain), axis=3) + b_domain",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_344": {
                "variable": {
                    "value": "W_request",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([2 * lstm_num_hidden])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_request",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_345": {
                "variable": {
                    "value": "b_request",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_request",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_346": {
                "variable": {
                    "value": "request",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.multiply(tf.concat([slot_sys, value_user], axis=3), W_request), axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_request",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([1]), name='b_request')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "request",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_352": {
                "variable": {
                    "value": "W_confirm",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([size])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_confirm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_353": {
                "variable": {
                    "value": "b_confirm",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_confirm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_354": {
                "variable": {
                    "value": "confirm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.multiply(tf.concat([slot_sys, value_sys, usr_en], axis=3), W_confirm), axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_confirm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([1]), name='b_confirm')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "confirm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_362": {
                "variable": {
                    "value": "domain_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "domain_memory",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_363": {
                "variable": {
                    "value": "domain_current",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "domain_current",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_364": {
                "variable": {
                    "value": "domain_M_h",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "domain_M_h",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_365": {
                "variable": {
                    "value": "domain_W_m",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1], name='domain_W_m')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_366": {
                "variable": {
                    "value": "domain_U_m",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "domain_U_m",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dynamic_rnn_385": {
                "variable": {
                    "value": "(y_d, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn(net_type, num_hidden)",
                            "Call"
                        ],
                        [
                            "rnn(net_type, num_hidden // 2)",
                            "Call"
                        ],
                        [
                            "GRU(domain_memory * tf.diag(tf.ones(num_slots)), domain_current * tf.diag(tf.ones(num_slots)), domain_M_h * tf.diag(tf.ones(num_slots)), domain_W_m * tf.diag(tf.ones(num_slots)), domain_U_m * tf.diag(tf.ones(num_slots)), num_slots, binary_output=True)",
                            "Call"
                        ],
                        [
                            "GRU(W_memory, W_current, M_h, W_m, U_m, num_values)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "y_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.reduce_sum(tf.multiply(tf.concat([domain_user, domain_sys], axis=3), W_domain), axis=3) + b_domain)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y_d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_d * mask_extended, [-1, num_slots])",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "num_turns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None], name='num_turns')",
                            "Call"
                        ],
                        [
                            "len(turn_ids)",
                            "Call"
                        ],
                        [
                            "len(turn_ids)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_390": {
                "variable": {
                    "value": "y_d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.reduce_sum(tf.multiply(tf.concat([domain_user, domain_sys], axis=3), W_domain), axis=3) + b_domain)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y_d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_d * mask_extended, [-1, num_slots])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_500": {
                "variable": {
                    "value": "mask_extended_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.sequence_mask(num_turns, maxlen=max_no_turns), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_slots])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_508": {
                "variable": {
                    "value": "value_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "value_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(value_accuracy)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_510": {
                "variable": {
                    "value": "true_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(val_label, axis=2) * mask_extended_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, len(slots)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_511": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(val_pred, axis=2) * mask_extended_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, len(slots)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_525": {
                "name": {
                    "value": "domain_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "domain_accuracy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_526": {
                "name": {
                    "value": "slot_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "slot_accuracy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_527": {
                "name": {
                    "value": "value_accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "value_accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(value_accuracy)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_528": {
                "name": {
                    "value": "value_f1_score",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "value_f1_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[precision, recall, value_f1_score]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_529": {
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(cross_entropy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "variable": {
                    "value": "output_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inform + request + confirm",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inputs, self.U_h) + tf.matmul(output_only, self.W_h) + tf.matmul(state_only, self.M_h)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "output_",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inform + request + confirm",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inputs, self.U_h) + tf.matmul(output_only, self.W_h) + tf.matmul(state_only, self.M_h)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_139": {
                "tensor": {
                    "value": "tf.concat(pooled, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'r'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_175": {
                "variable": {
                    "value": "(_, lspd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn(net_type, num_hidden)",
                            "Call"
                        ],
                        [
                            "rnn(net_type, num_hidden // 2)",
                            "Call"
                        ],
                        [
                            "GRU(domain_memory * tf.diag(tf.ones(num_slots)), domain_current * tf.diag(tf.ones(num_slots)), domain_M_h * tf.diag(tf.ones(num_slots)), domain_W_m * tf.diag(tf.ones(num_slots)), domain_U_m * tf.diag(tf.ones(num_slots)), num_slots, binary_output=True)",
                            "Call"
                        ],
                        [
                            "GRU(W_memory, W_current, M_h, W_m, U_m, num_values)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "rev_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn(net_type, num_hidden // 2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "text_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(text_input, [-1, max_utterance_length, vector_dimension])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "utterance_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(utterance_length, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_180": {
                "variable": {
                    "value": "last_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "lspd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lspd[0].h, lspd[1].h)",
                            "Tuple"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dynamic_rnn_183": {
                "variable": {
                    "value": "(_, last_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn(net_type, num_hidden)",
                            "Call"
                        ],
                        [
                            "rnn(net_type, num_hidden // 2)",
                            "Call"
                        ],
                        [
                            "GRU(domain_memory * tf.diag(tf.ones(num_slots)), domain_current * tf.diag(tf.ones(num_slots)), domain_M_h * tf.diag(tf.ones(num_slots)), domain_W_m * tf.diag(tf.ones(num_slots)), domain_U_m * tf.diag(tf.ones(num_slots)), num_slots, binary_output=True)",
                            "Call"
                        ],
                        [
                            "GRU(W_memory, W_current, M_h, W_m, U_m, num_values)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "text_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(text_input, [-1, max_utterance_length, vector_dimension])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "utterance_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(utterance_length, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_265": {
                "variable": {
                    "value": "usr_dom_en",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "usr_dom_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(user_input, num_filters=lstm_num_hidden, name='h_u_d')",
                            "Call"
                        ],
                        [
                            "lstm_model(user_input, user_utterance_lengths, lstm_num_hidden, 'h_u_d', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(usr_dom_en, keep_prob, name='h_u_d_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(usr_dom_en, axis=2), [1, 1, num_slots, 1], name='h_u_d')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "h_u_d_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_268": {
                "variable": {
                    "value": "sys_dom_en",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sys_dom_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(system_input, num_filters=lstm_num_hidden, name='h_s_d')",
                            "Call"
                        ],
                        [
                            "lstm_model(system_input, sys_utterance_lengths, lstm_num_hidden, 'h_s_d', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(sys_dom_en, keep_prob, name='h_s_d_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sys_dom_en, axis=2), [1, 1, num_slots, 1], name='h_s_d')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "h_s_d_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_273": {
                "variable": {
                    "value": "usr_slot_en",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "usr_slot_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(user_input, num_filters=lstm_num_hidden, name='h_u_s')",
                            "Call"
                        ],
                        [
                            "lstm_model(user_input, user_utterance_lengths, lstm_num_hidden, 'h_u_s', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(usr_slot_en, keep_prob, name='h_u_s_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(usr_slot_en, axis=2), [1, 1, num_slots, 1], name='h_u_s')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "h_u_s_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_276": {
                "variable": {
                    "value": "sys_slot_en",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sys_slot_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(system_input, num_filters=lstm_num_hidden, name='h_s_s')",
                            "Call"
                        ],
                        [
                            "lstm_model(system_input, sys_utterance_lengths, lstm_num_hidden, 'h_s_s', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(sys_slot_en, keep_prob, name='h_s_s_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sys_slot_en, axis=2), [1, 1, num_slots, 1], name='h_s_s')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "h_s_s_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_279": {
                "variable": {
                    "value": "usr_val_en",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "usr_val_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(user_input, num_filters=lstm_num_hidden, name='h_u_v')",
                            "Call"
                        ],
                        [
                            "lstm_model(user_input, user_utterance_lengths, lstm_num_hidden, 'h_u_v', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(usr_val_en, keep_prob, name='h_u_v_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(usr_val_en, axis=2), [1, 1, num_slots, 1], name='h_u_v')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "h_u_v_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_282": {
                "variable": {
                    "value": "sys_val_en",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sys_val_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(system_input, num_filters=lstm_num_hidden, name='h_s_v')",
                            "Call"
                        ],
                        [
                            "lstm_model(system_input, sys_utterance_lengths, lstm_num_hidden, 'h_s_v', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(sys_val_en, keep_prob, name='h_s_v_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sys_val_en, axis=2), [1, 1, num_slots, 1], name='h_s_v')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "h_s_v_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_285": {
                "variable": {
                    "value": "usr_en",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "usr_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(user_input, num_filters=lstm_num_hidden // 5, name='h_u')",
                            "Call"
                        ],
                        [
                            "lstm_model(user_input, user_utterance_lengths, lstm_num_hidden // 5, 'h_u', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(usr_en, keep_prob, name='h_u_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(usr_en, axis=2), [1, 1, num_slots, 1], name='h_u')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "h_u_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_287": {
                "device_name": {
                    "value": "devs[1 % len(devs)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_290": {
                "device_name": {
                    "value": "devs[2 % len(devs)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_300": {
                "device_name": {
                    "value": "devs[1 % len(devs)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_339": {
                "input_tensor": {
                    "value": "tf.multiply(tf.concat([slot_user, value_user], axis=3), W_inform)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_343": {
                "device_name": {
                    "value": "devs[2 % len(devs)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_350": {
                "device_name": {
                    "value": "devs[3 % len(devs)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_361": {
                "device_name": {
                    "value": "devs[2 % len(devs)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_379": {
                "device_name": {
                    "value": "devs[1 % len(devs)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_392": {
                "device_name": {
                    "value": "devs[0 % len(devs)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_409": {
                "variable": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_max(domain_output, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_412": {
                "variable": {
                    "value": "domain_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros(tf.shape(domain_output)), 1 - max_val]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_414": {
                "variable": {
                    "value": "slot_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inform + request + confirm",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inputs, self.U_h) + tf.matmul(output_only, self.W_h) + tf.matmul(state_only, self.M_h)",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, slots[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_415": {
                "variable": {
                    "value": "slot_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[slot_output, tf.zeros([tf.shape(output)[0], max_no_turns, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_417": {
                "variable": {
                    "value": "labels_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, max_no_turns, num_slots], name='labels')",
                            "Call"
                        ],
                        [
                            "np.zeros(len(ontology), dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, max_no_turns, ontology_size), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, slots[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_418": {
                "variable": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_max(labels_output, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_423": {
                "variable": {
                    "value": "labels_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([labels_output, 1 - max_val], axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_425": {
                "variable": {
                    "value": "val_label[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(labels_output, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dynamic_rnn_449": {
                "variable": {
                    "value": "(y_predict, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn(net_type, num_hidden)",
                            "Call"
                        ],
                        [
                            "rnn(net_type, num_hidden // 2)",
                            "Call"
                        ],
                        [
                            "GRU(domain_memory * tf.diag(tf.ones(num_slots)), domain_current * tf.diag(tf.ones(num_slots)), domain_M_h * tf.diag(tf.ones(num_slots)), domain_W_m * tf.diag(tf.ones(num_slots)), domain_U_m * tf.diag(tf.ones(num_slots)), num_slots, binary_output=True)",
                            "Call"
                        ],
                        [
                            "GRU(W_memory, W_current, M_h, W_m, U_m, num_values)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "slot_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(output, begin=[0, 0, size], size=[-1, -1, slots[i]])",
                            "Call"
                        ],
                        [
                            "tf.concat([slot_output, tf.zeros([tf.shape(output)[0], max_no_turns, 1])], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "num_turns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None], name='num_turns')",
                            "Call"
                        ],
                        [
                            "len(turn_ids)",
                            "Call"
                        ],
                        [
                            "len(turn_ids)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_454": {
                "variable": {
                    "value": "y[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_predict + 1000000.0 * domain_output",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_455": {
                "variable": {
                    "value": "val_pred[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(tf.argmax(y[i], axis=2), axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_457": {
                "variable": {
                    "value": "y_pred[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.one_hot(tf.argmax(y[i], axis=2), dtype=tf.float32, depth=num_values)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, num_values - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_459": {
                "variable": {
                    "value": "y[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "y[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, num_values - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_460": {
                "variable": {
                    "value": "slot_pred[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(y_pred[i], axis=2, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_462": {
                "variable": {
                    "value": "loss[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(labels, begin=[0, 0, size], size=[-1, -1, slots[i]])",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.concat([labels_output, 1 - max_val], axis=2), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_predict + 1000000.0 * domain_output",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sequence_mask_472": {
                "lengths": {
                    "value": "num_turns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None], name='num_turns')",
                            "Call"
                        ],
                        [
                            "len(turn_ids)",
                            "Call"
                        ],
                        [
                            "len(turn_ids)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_no_turns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "22",
                            "Constant"
                        ]
                    ]
                }
            },
            "expand_dims_473": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.sequence_mask(num_turns, maxlen=max_no_turns), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_slots])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_474": {
                "input_tensor": {
                    "value": "mask * cross_entropy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_474": {
                "x": {
                    "value": "num_turns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None], name='num_turns')",
                            "Call"
                        ],
                        [
                            "len(turn_ids)",
                            "Call"
                        ],
                        [
                            "len(turn_ids)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_489": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.sequence_mask(num_turns, maxlen=max_no_turns), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, [-1, num_slots])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_492": {
                "values": {
                    "value": "slot_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for _ in range(len(slots))]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_502": {
                "variable": {
                    "value": "true_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "val_label[i] * mask_extended_3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_503": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "val_pred[i] * mask_extended_3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_529": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(loss, name='cross_entropy')",
                            "Call"
                        ],
                        [
                            "tf.add(cross_entropy, domain_loss, name='total_loss')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(mask * cross_entropy, axis=1) / tf.cast(num_turns, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_540": {
                "x": {
                    "value": "tf.equal(predictions, true_predictions)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_551": {
                "input_tensor": {
                    "value": "no_turns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(batch_size, dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_85": {
                "a": {
                    "value": "output_only",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(state, [0, 0], [-1, self.label_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_99": {
                "input": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_111": {
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "F_W",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "F_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_123": {
                "input": {
                    "value": "utter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(utter, [-1, max_utterance_length, vector_dimension])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bias_add_129": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(tf.expand_dims(utter, -1), W[i], strides=[1, 1, 1, 1], padding='VALID', name='conv_R')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_139": {
                "values": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(h, ksize=[1, max_utterance_length - filter_size + 1, 1, 1], strides=[1, 1, 1, 1], padding='VALID', name='r_')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_242": {
                "device_name": {
                    "value": "devs[1 % len(devs)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_248": {
                "device_name": {
                    "value": "devs[2 % len(devs)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_262": {
                "device_name": {
                    "value": "devs[1 % len(devs)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_270": {
                "device_name": {
                    "value": "devs[2 % len(devs)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_288": {
                "input": {
                    "value": "usr_dom_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(user_input, num_filters=lstm_num_hidden, name='h_u_d')",
                            "Call"
                        ],
                        [
                            "lstm_model(user_input, user_utterance_lengths, lstm_num_hidden, 'h_u_d', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(usr_dom_en, keep_prob, name='h_u_d_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(usr_dom_en, axis=2), [1, 1, num_slots, 1], name='h_u_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_289": {
                "input": {
                    "value": "sys_dom_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(system_input, num_filters=lstm_num_hidden, name='h_s_d')",
                            "Call"
                        ],
                        [
                            "lstm_model(system_input, sys_utterance_lengths, lstm_num_hidden, 'h_s_d', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(sys_dom_en, keep_prob, name='h_s_d_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sys_dom_en, axis=2), [1, 1, num_slots, 1], name='h_s_d')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_291": {
                "input": {
                    "value": "usr_slot_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(user_input, num_filters=lstm_num_hidden, name='h_u_s')",
                            "Call"
                        ],
                        [
                            "lstm_model(user_input, user_utterance_lengths, lstm_num_hidden, 'h_u_s', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(usr_slot_en, keep_prob, name='h_u_s_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(usr_slot_en, axis=2), [1, 1, num_slots, 1], name='h_u_s')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_292": {
                "input": {
                    "value": "sys_slot_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(system_input, num_filters=lstm_num_hidden, name='h_s_s')",
                            "Call"
                        ],
                        [
                            "lstm_model(system_input, sys_utterance_lengths, lstm_num_hidden, 'h_s_s', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(sys_slot_en, keep_prob, name='h_s_s_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sys_slot_en, axis=2), [1, 1, num_slots, 1], name='h_s_s')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_293": {
                "input": {
                    "value": "usr_val_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(user_input, num_filters=lstm_num_hidden, name='h_u_v')",
                            "Call"
                        ],
                        [
                            "lstm_model(user_input, user_utterance_lengths, lstm_num_hidden, 'h_u_v', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(usr_val_en, keep_prob, name='h_u_v_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(usr_val_en, axis=2), [1, 1, num_slots, 1], name='h_u_v')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_294": {
                "input": {
                    "value": "sys_val_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(system_input, num_filters=lstm_num_hidden, name='h_s_v')",
                            "Call"
                        ],
                        [
                            "lstm_model(system_input, sys_utterance_lengths, lstm_num_hidden, 'h_s_v', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(sys_val_en, keep_prob, name='h_s_v_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sys_val_en, axis=2), [1, 1, num_slots, 1], name='h_s_v')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_295": {
                "input": {
                    "value": "usr_en",
                    "type": "variable",
                    "possible_values": [
                        [
                            "define_CNN_model(user_input, num_filters=lstm_num_hidden // 5, name='h_u')",
                            "Call"
                        ],
                        [
                            "lstm_model(user_input, user_utterance_lengths, lstm_num_hidden // 5, 'h_u', net_type, bidir)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(usr_en, keep_prob, name='h_u_out')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(usr_en, axis=2), [1, 1, num_slots, 1], name='h_u')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_306": {
                "shape": {
                    "value": "[lstm_num_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "shape": {
                    "value": "[lstm_num_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_308": {
                "shape": {
                    "value": "[lstm_num_hidden]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_315": {
                "x": {
                    "value": "tf.matmul(domain_vec, W_onto_domain) + b_onto_domain",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_316": {
                "x": {
                    "value": "tf.matmul(slot_vec, W_onto_slot) + b_onto_slot",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_317": {
                "x": {
                    "value": "tf.matmul(value_vec, W_onto_value) + b_onto_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_331": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_339": {
                "x": {
                    "value": "tf.concat([slot_user, value_user], axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "W_inform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([2 * lstm_num_hidden]), name='W_inform')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_346": {
                "input_tensor": {
                    "value": "tf.multiply(tf.concat([slot_sys, value_user], axis=3), W_request)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_355": {
                "input_tensor": {
                    "value": "tf.multiply(tf.concat([slot_sys, value_sys, usr_en], axis=3), W_confirm)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_387": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=domain_labels, logits=y_d)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "domain_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_406": {
                "variable": {
                    "value": "domain_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.round(y_d)",
                    "type": "Call",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, slots[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_408": {
                "variable": {
                    "value": "domain_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, max_no_turns, num_slots], name='domain_labels')",
                            "Call"
                        ],
                        [
                            "np.zeros(len(ontology), dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, max_no_turns, ontology_size), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, size]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, slots[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "round_483": {
                "x": {
                    "value": "y_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.reduce_sum(tf.multiply(tf.concat([domain_user, domain_sys], axis=3), W_domain), axis=3) + b_domain)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y_d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_d * mask_extended, [-1, num_slots])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_493": {
                "values": {
                    "value": "slot_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for _ in range(len(slots))]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_517": {
                "values": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for _ in range(len(slots))]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_540": {
                "x": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.round(y_d) * mask_extended, [-1, num_slots])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(slot_pred, axis=2) * mask_extended_2, [-1, len(slots)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(val_pred, axis=2) * mask_extended_2, [-1, len(slots)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(y_pred, axis=2) * mask_extended, [-1, num_slots])",
                            "Call"
                        ],
                        [
                            "tf.reshape(val_pred[i] * mask_extended_3, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(domain_labels, [-1, num_slots])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(slot_label, axis=2), [-1, len(slots)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.concat(val_label, axis=2) * mask_extended_2, [-1, len(slots)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(labels, [-1, num_slots])",
                            "Call"
                        ],
                        [
                            "tf.reshape(val_label[i] * mask_extended_3, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_551": {
                "x": {
                    "value": "tf.reduce_sum(no_turns)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "a": {
                    "value": "state_only",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(state, [0, self.label_size], [-1, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_m",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_95": {
                "input": {
                    "value": "self.W_m",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_111": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size, vector_dimension, 1, num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_112": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_165": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_332": {
                "input_tensor": {
                    "value": "tf.multiply(tf.concat([domain_user, domain_sys], axis=3), W_domain)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_339": {
                "values": {
                    "value": "[slot_user, value_user]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_346": {
                "x": {
                    "value": "tf.concat([slot_sys, value_user], axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "W_request",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([2 * lstm_num_hidden]), name='W_request')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_355": {
                "x": {
                    "value": "tf.concat([slot_sys, value_sys, usr_en], axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "W_confirm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([size]), name='W_confirm')",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_380": {
                "diagonal": {
                    "value": "tf.ones(num_slots)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_381": {
                "diagonal": {
                    "value": "tf.ones(num_slots)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_382": {
                "diagonal": {
                    "value": "tf.ones(num_slots)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_387": {
                "labels": {
                    "value": "domain_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, max_no_turns, num_slots], name='domain_labels')",
                            "Call"
                        ],
                        [
                            "np.zeros(len(ontology), dtype='float32')",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, max_no_turns, ontology_size), dtype='float32')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.reduce_sum(tf.multiply(tf.concat([domain_user, domain_sys], axis=3), W_domain), axis=3) + b_domain)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y_d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_d * mask_extended, [-1, num_slots])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_409": {
                "input_tensor": {
                    "value": "domain_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.round(y_d), begin=[0, 0, size], size=[-1, -1, slots[i]])",
                            "Call"
                        ],
                        [
                            "tf.slice(domain_labels, begin=[0, 0, size], size=[-1, -1, slots[i]])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros(tf.shape(domain_output)), 1 - max_val], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_418": {
                "input_tensor": {
                    "value": "labels_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(labels, begin=[0, 0, size], size=[-1, -1, slots[i]])",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.concat([labels_output, 1 - max_val], axis=2), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_423": {
                "values": {
                    "value": "[labels_output, 1 - max_val]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_425": {
                "input": {
                    "value": "labels_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(labels, begin=[0, 0, size], size=[-1, -1, slots[i]])",
                            "Call"
                        ],
                        [
                            "tf.argmax(tf.concat([labels_output, 1 - max_val], axis=2), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_428": {
                "diagonal": {
                    "value": "tf.ones(num_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_429": {
                "shape": {
                    "value": "num_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slots[i] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_432": {
                "diagonal": {
                    "value": "tf.ones(num_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_433": {
                "shape": {
                    "value": "num_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slots[i] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_436": {
                "diagonal": {
                    "value": "tf.ones(num_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "shape": {
                    "value": "num_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slots[i] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_440": {
                "diagonal": {
                    "value": "tf.ones(num_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_441": {
                "shape": {
                    "value": "num_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slots[i] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_444": {
                "diagonal": {
                    "value": "tf.ones(num_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_445": {
                "shape": {
                    "value": "num_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slots[i] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_455": {
                "input": {
                    "value": "tf.argmax(y[i], axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_457": {
                "indices": {
                    "value": "tf.argmax(y[i], axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slots[i] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_460": {
                "input_tensor": {
                    "value": "y_pred[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_510": {
                "values": {
                    "value": "val_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for _ in range(len(slots))]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_511": {
                "values": {
                    "value": "val_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for _ in range(len(slots))]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_167": {
                "units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BasicRNNCell_169": {
                "num_units": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_315": {
                "a": {
                    "value": "domain_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(ontology, begin=[0, 0], size=[-1, vector_dimension])",
                            "Call"
                        ],
                        [
                            "np.sum(process_text(domain, word_vectors), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_onto_domain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([vector_dimension, lstm_num_hidden]), name='W_onto_domain')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_316": {
                "a": {
                    "value": "slot_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(ontology, begin=[0, vector_dimension], size=[-1, vector_dimension])",
                            "Call"
                        ],
                        [
                            "np.sum(process_text(slot, word_vectors), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_onto_slot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([vector_dimension, lstm_num_hidden]), name='W_onto_slot')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_317": {
                "a": {
                    "value": "value_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(ontology, begin=[0, 2 * vector_dimension], size=[-1, vector_dimension])",
                            "Call"
                        ],
                        [
                            "np.sum(process_text(value, word_vectors, print_mode=True), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_onto_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([vector_dimension, lstm_num_hidden]), name='W_onto_value')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_332": {
                "x": {
                    "value": "tf.concat([domain_user, domain_sys], axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "W_domain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([2 * lstm_num_hidden]), name='W_domain')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_346": {
                "values": {
                    "value": "[slot_sys, value_user]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_355": {
                "values": {
                    "value": "[slot_sys, value_sys, usr_en]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_380": {
                "shape": {
                    "value": "num_slots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "len(slots_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_381": {
                "shape": {
                    "value": "num_slots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "len(slots_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_382": {
                "shape": {
                    "value": "num_slots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "len(slots_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_406": {
                "x": {
                    "value": "y_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.reduce_sum(tf.multiply(tf.concat([domain_user, domain_sys], axis=3), W_domain), axis=3) + b_domain)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y_d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_d * mask_extended, [-1, num_slots])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_412": {
                "shape": {
                    "value": "tf.shape(domain_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_415": {
                "shape": {
                    "value": "[tf.shape(output)[0], max_no_turns, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_428": {
                "shape": {
                    "value": "num_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slots[i] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_429": {
                "shape": {
                    "value": "[num_values, num_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_432": {
                "shape": {
                    "value": "num_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slots[i] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_433": {
                "shape": {
                    "value": "[num_values, num_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_436": {
                "shape": {
                    "value": "num_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slots[i] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_437": {
                "shape": {
                    "value": "[num_values, num_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_440": {
                "shape": {
                    "value": "num_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slots[i] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_441": {
                "shape": {
                    "value": "[num_values, num_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_444": {
                "shape": {
                    "value": "num_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slots[i] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_445": {
                "shape": {
                    "value": "[num_values, num_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_455": {
                "input": {
                    "value": "y[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_457": {
                "input": {
                    "value": "y[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_332": {
                "values": {
                    "value": "[domain_user, domain_sys]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_412": {
                "input": {
                    "value": "domain_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(tf.round(y_d), begin=[0, 0, size], size=[-1, -1, slots[i]])",
                            "Call"
                        ],
                        [
                            "tf.slice(domain_labels, begin=[0, 0, size], size=[-1, -1, slots[i]])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros(tf.shape(domain_output)), 1 - max_val], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_415": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inform + request + confirm",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(inputs, self.U_h) + tf.matmul(output_only, self.W_h) + tf.matmul(state_only, self.M_h)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/agent/__init__.py": {
        "torch": {
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/agent/algorithm/actor_critic.py": {
        "torch": {
            "cat_260": {
                "variable": {
                    "value": "v_preds_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v_preds, next_v_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/agent/algorithm/dqn.py": {
        "torch": {
            "tensor_139": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_311": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/agent/algorithm/policy_util.py": {
        "torch": {
            "from_numpy_67": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[_action]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "body.action_space.high",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "algorithm.net.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_pd.sample()",
                            "Call"
                        ],
                        [
                            "sample_action(body.ActionPD, pdparam)",
                            "Call"
                        ],
                        [
                            "torch.tensor([_action])",
                            "Call"
                        ],
                        [
                            "sample_action(body.ActionPD, pdparam)",
                            "Call"
                        ],
                        [
                            "default(state, algorithm, body)",
                            "Call"
                        ],
                        [
                            "random(state, algorithm, body)",
                            "Call"
                        ],
                        [
                            "rule_guide(body.state, algorithm, body)",
                            "Call"
                        ],
                        [
                            "rule_guide(state, algorithm, body)",
                            "Call"
                        ],
                        [
                            "default(state, algorithm, body)",
                            "Call"
                        ],
                        [
                            "rule_guide(body.state, algorithm, body)",
                            "Call"
                        ],
                        [
                            "rule_guide(state, algorithm, body)",
                            "Call"
                        ],
                        [
                            "env.rule_policy(state, algorithm, body)",
                            "Call"
                        ],
                        [
                            "torch.tensor(action, device=algorithm.net.device)",
                            "Call"
                        ],
                        [
                            "sample_action(body.ActionPD, sub_pdparam)",
                            "Call"
                        ],
                        [
                            "random(states[idx], algorithm, body)",
                            "Call"
                        ],
                        [
                            "random(states[idx], algorithm, body)",
                            "Call"
                        ],
                        [
                            "sample_action(body.ActionPD, sub_pdparam)",
                            "Call"
                        ],
                        [
                            "sample_action(body.ActionPD, sub_pdparam)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "algorithm.net.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_233": {
                "variable": {
                    "value": "action_a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "action_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "algorithm.net.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_233": {
                "variable": {
                    "value": "action_a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "variable": {
                    "value": "action_a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "action_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "algorithm.net.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_243": {
                "variable": {
                    "value": "action_a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_260": {
                "variable": {
                    "value": "action_a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "action_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "algorithm.net.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_260": {
                "variable": {
                    "value": "action_a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_275": {
                "variable": {
                    "value": "action_a",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "action_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "algorithm.net.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_275": {
                "variable": {
                    "value": "action_a",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_87": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(state.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "state.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "guard_tensor(state, body)",
                            "Call"
                        ],
                        [
                            "state.to(algorithm.net.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_embed_111": {
                "variable": {
                    "value": "covars",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale) + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_108": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(scale) + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/agent/algorithm/ppo.py": {
        "torch": {
            "exp_144": {
                "variable": {
                    "value": "ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs - old_log_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_147": {
                "input": {
                    "value": "ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_probs - old_log_probs)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0 - clip_eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 + clip_eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_149": {
                "input": {
                    "value": "sur_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratios * advs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/agent/algorithm/sarsa.py": {
        "torch": {
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/agent/algorithm/sil.py": {
        "torch": {
            "clamp_119": {
                "variable": {
                    "value": "clipped_advs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rets - v_preds",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "total_sil_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/agent/net/base.py": {
        "torch": {
            "device_count_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__40": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_val",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/agent/net/conv.py": {
        "torch": {
            "Sequential_170": {
                "variable": {
                    "value": "conv_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "tail_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_out_dim",
                            "Attribute"
                        ],
                        [
                            "self.fc_hid_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "self.conv_out_dim",
                            "Attribute"
                        ],
                        [
                            "self.fc_hid_layers[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "tail_in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_out_dim",
                            "Attribute"
                        ],
                        [
                            "self.fc_hid_layers[-1]",
                            "Subscript"
                        ],
                        [
                            "self.conv_out_dim",
                            "Attribute"
                        ],
                        [
                            "self.fc_hid_layers[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_293": {
                "variable": {
                    "value": "self.model_tails",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_140": {
                "variable": {
                    "value": "self.model_tails",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "tails",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_150": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.in_dim",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "in_channels": {
                    "value": "in_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_dim[0]",
                            "Subscript"
                        ],
                        [
                            "hid_layer[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "*hid_layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_168": {
                "num_features": {
                    "value": "in_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_dim[0]",
                            "Subscript"
                        ],
                        [
                            "hid_layer[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/agent/net/mlp.py": {
        "torch": {
            "ModuleList_241": {
                "variable": {
                    "value": "model_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_252": {
                "variable": {
                    "value": "model_tails",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "head_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "head_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(head_xs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_347": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_348": {
                "variable": {
                    "value": "self.adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_108": {
                "variable": {
                    "value": "self.model_tails",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "tails",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/agent/net/net_util.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "save_175": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "util.smart_path(model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_200": {
                "f": {
                    "value": "util.smart_path(model_path)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "in_d",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_264": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn(*args, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_276": {
                "input": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/agent/net/recurrent.py": {
        "torch": {
            "ModuleList_142": {
                "variable": {
                    "value": "self.model_tails",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "tails",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/experiment/analysis.py": {
        "torch": {
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/experiment/control.py": {
        "torch": {}
    },
    "convlab/experiment/search.py": {
        "torch": {
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/lib/distribution.py": {
        "torch": {
            "empty_38": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.logits.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.logits.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.logits.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_18": {
                "variable": {
                    "value": "new_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_probs",
                            "Name"
                        ],
                        [
                            "[None] * len(logits)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_40": {
                "input": {
                    "value": "noisy_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - torch.log(-torch.log(u))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_56": {
                "variable": {
                    "value": "categorical",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "sub_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "sub_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "validate_args": {
                    "value": "validate_args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_73": {
                "tensors": {
                    "value": "[cat.mean for cat in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_77": {
                "tensors": {
                    "value": "[cat.variance for cat in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_80": {
                "tensors": {
                    "value": "[cat.sample(sample_shape=sample_shape) for cat in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_84": {
                "tensors": {
                    "value": "[cat.log_prob(value_t[idx]) for (idx, cat) in enumerate(self.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_87": {
                "tensors": {
                    "value": "[cat.entropy() for cat in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_like_22": {
                "variable": {
                    "value": "new_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "new_logits",
                            "Name"
                        ],
                        [
                            "[None] * len(probs)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-100000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_39": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(self.logits.size(), device=self.logits.device, dtype=self.logits.dtype).uniform_(0, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/lib/math_util.py": {
        "torch": {
            "zeros_like_68": {
                "variable": {
                    "value": "rets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "future_ret",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rewards.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_82": {
                "variable": {
                    "value": "rets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_101": {
                "variable": {
                    "value": "gaes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "future_gae",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "rewards.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/lib/optimizer.py": {
        "torch": {
            "zeros_22": {
                "variable": {
                    "value": "state[step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/lib/util.py": {
        "torch": {
            "device_count_506": {
                "variable": {
                    "value": "device_count",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_521": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_525": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(100000.0 * (trial or 0) + 1000.0 * (session or 0) + time.time())",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_526": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(100000.0 * (trial or 0) + 1000.0 * (session or 0) + time.time())",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_614": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch[k].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/Mem2Seq.py": {
        "torch": {}
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/main_interact.py": {
        "torch": {}
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/models/Mem2Seq.py": {
        "torch": {
            "Adam_57": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_59": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_60": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_449": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_501": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_502": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_503": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_504": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_445": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD_token",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_497": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD_token",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/models/Mem2Seq_NMT.py": {
        "torch": {
            "Adam_46": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_48": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_49": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_272": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_307": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_308": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_309": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_310": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_72": {
                "obj": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_73": {
                "obj": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_187": {
                "variable": {
                    "value": "top_ptr_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_batches",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(toppi.view(1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_268": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD_token",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_290": {
                "variable": {
                    "value": "o_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_C * prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_303": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD_token",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_330": {
                "variable": {
                    "value": "prob_lg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m_A * u_temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_335": {
                "variable": {
                    "value": "o_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m_C * prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_batches.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_129": {
                "variable": {
                    "value": "top_ptr_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_batches",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "Variable(toppi.view(1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_batches.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_287": {
                "input": {
                    "value": "embed_A * u_temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_337": {
                "tensors": {
                    "value": "(u[0], o_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_277": {
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/models/enc_Luong.py": {
        "torch": {
            "Adam_46": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr * self.decoder_learning_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name_enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name_dec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_247": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_249": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_289": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_290": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_291": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_295": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_298": {
                "variable": {
                    "value": "self.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_325": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_328": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.data.shape[0], 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.W1(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_329": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.W1(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_336": {
                "variable": {
                    "value": "concat_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_output, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_337": {
                "variable": {
                    "value": "concat_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat(concat_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_71": {
                "obj": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_72": {
                "obj": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_271": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.embedding_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, input_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seq)",
                            "Call"
                        ],
                        [
                            "self.dropout(embedded)",
                            "Call"
                        ],
                        [
                            "embedded.view(1, batch_size, self.hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_274": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.decoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_258": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_295": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_325": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/models/enc_PTRUNK.py": {
        "torch": {
            "Adam_48": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr * self.decoder_learning_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_50": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_295": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_296": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_297": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_334": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_335": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_336": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_337": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_338": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "variable": {
                    "value": "self.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_342": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_343": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_369": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W1(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_372": {
                "variable": {
                    "value": "p_ptr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.data.shape[0], 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.W1(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_374": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_ptr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_378": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_embedded, context.squeeze())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_378": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_383": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W(hidden[0][-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_78": {
                "obj": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_205": {
                "variable": {
                    "value": "top_ptr_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_batches",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "toppi.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_319": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.embedding_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, input_lengths, batch_first=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_323": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "encoder_outputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_137": {
                "variable": {
                    "value": "top_ptr_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_batches",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "toppi.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.decoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "encoder_outputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_306": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_338": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_369": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/models/enc_vanilla.py": {
        "torch": {
            "Adam_46": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr * self.decoder_learning_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name_enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name_dec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_251": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_252": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_253": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_291": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_292": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_293": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_70": {
                "obj": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_275": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.embedding_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, input_lengths, batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seq)",
                            "Call"
                        ],
                        [
                            "self.embedding_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "embedded.view(1, batch_size, self.hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_278": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "str(path) + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_lengths)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "*size": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.decoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ],
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/utils/masked_cross_entropy.py": {
        "torch": {
            "arange_15": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_48": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_52": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/utils/until_temp.py": {
        "torch": {
            "transpose_105": {
                "variable": {
                    "value": "src_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_107": {
                "variable": {
                    "value": "ind_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, ptr_seq, gate_seq, lang.word2index, lang.word2index, max_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_75": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_81": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_97": {
                "key": {
                    "value": "lambda x: len(x[0])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_106": {}
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/utils/utils_NMT.py": {
        "torch": {
            "transpose_94": {
                "variable": {
                    "value": "src_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "variable": {
                    "value": "trg_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_96": {
                "variable": {
                    "value": "ind_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, ptr_seq, lang.word2index, lang.word2index, max_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_66": {
                "variable": {
                    "value": "story",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_73": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_79": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_86": {
                "key": {
                    "value": "lambda x: len(x[-1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/utils/utils_babi.py": {
        "torch": {
            "transpose_106": {
                "variable": {
                    "value": "src_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_107": {
                "variable": {
                    "value": "trg_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "variable": {
                    "value": "ind_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "gete_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_189": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, ptr_seq, gate_seq, lang.word2index, lang.word2index, max_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_75": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_81": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_97": {
                "key": {
                    "value": "lambda x: len(x[0])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_66": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_69": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_88": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_90": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/utils/utils_babi_mem2seq.py": {
        "torch": {
            "transpose_137": {
                "variable": {
                    "value": "src_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_138": {
                "variable": {
                    "value": "trg_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_139": {
                "variable": {
                    "value": "ind_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_140": {
                "variable": {
                    "value": "gete_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "variable": {
                    "value": "conv_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_294": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, ptr_seq, gate_seq, lang.word2index, lang.word2index, max_len, conv_seq, ent, ID, kb_arr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_102": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_108": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_127": {
                "key": {
                    "value": "lambda x: len(x[0])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_93": {
                "variable": {
                    "value": "story",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_115": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "MEM_TOKEN_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_120": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/utils/utils_kvr.py": {
        "torch": {
            "transpose_107": {
                "variable": {
                    "value": "src_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "variable": {
                    "value": "trg_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "ind_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_110": {
                "variable": {
                    "value": "gete_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_217": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, ptr_seq, gate_seq, lang.word2index, lang.word2index, max_len, entity, entity_cal, entity_nav, entity_wet)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_70": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_76": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_98": {
                "key": {
                    "value": "lambda x: len(x[0])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/utils/utils_kvr_mem2seq.py": {
        "torch": {
            "transpose_137": {
                "variable": {
                    "value": "src_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_138": {
                "variable": {
                    "value": "trg_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_139": {
                "variable": {
                    "value": "ind_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_140": {
                "variable": {
                    "value": "gete_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "variable": {
                    "value": "conv_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_304": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, ptr_seq, gate_seq, lang.word2index, lang.word2index, max_len, entity, entity_cal, entity_nav, entity_wet, conv_seq, kb_arr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_102": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_108": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_127": {
                "key": {
                    "value": "lambda x: len(x[-1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_93": {
                "variable": {
                    "value": "story",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_115": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "MEM_TOKEN_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_120": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Mem2Seq/utils/utils_woz_mem2seq.py": {
        "torch": {
            "transpose_135": {
                "variable": {
                    "value": "src_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_136": {
                "variable": {
                    "value": "trg_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_137": {
                "variable": {
                    "value": "ind_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_138": {
                "variable": {
                    "value": "gete_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_139": {
                "variable": {
                    "value": "conv_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_300": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, ptr_seq, gate_seq, lang.word2index, lang.word2index, max_len, entity, conv_seq, kb_arr)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_100": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_106": {
                "variable": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sort_125": {
                "key": {
                    "value": "lambda x: len(x[-1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_91": {
                "variable": {
                    "value": "story",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_113": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "MEM_TOKEN_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "ones_118": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Sequicity/Sequicity.py": {
        "torch": {
            "manual_seed_49": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "u_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(usr_indices)[:, np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_115": {
                "ndarray": {
                    "value": "prev_z_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(z_idx, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Sequicity/model.py": {
        "torch": {
            "load_431": {
                "variable": {
                    "value": "all_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_448": {
                "variable": {
                    "value": "embedding_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "get_glove_matrix(self.reader.vocab, initial_arr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_494": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_495": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.lr",
                            "Attribute"
                        ],
                        [
                            "lr * cfg.lr_decay",
                            "BinOp"
                        ],
                        [
                            "cfg.lr",
                            "Attribute"
                        ]
                    ]
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.m.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_373": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.lr",
                            "Attribute"
                        ],
                        [
                            "lr * cfg.lr_decay",
                            "BinOp"
                        ],
                        [
                            "cfg.lr",
                            "Attribute"
                        ]
                    ]
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.m.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_426": {
                "obj": {
                    "value": "all_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'lstd': self.m.state_dict(), 'config': cfg.__dict__, 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "cfg.model_path",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_97": {
                "ndarray": {
                    "value": "degree_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(py_batch['degree'])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_98": {
                "ndarray": {
                    "value": "u_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(u_input_py, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "np.array(usr_indices)[:, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.array(usr_indices)[:, np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "ndarray": {
                    "value": "z_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['bspan'], padding='post').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "ndarray": {
                    "value": "m_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(py_batch['response'], cfg.max_ts, padding='post', truncating='post').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_294": {
                "ndarray": {
                    "value": "u_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(u_input_py, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "np.array(usr_indices)[:, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.array(usr_indices)[:, np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "current_device_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_206": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_230": {
                "ndarray": {
                    "value": "u_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(u_input_py, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "np.array(usr_indices)[:, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.array(usr_indices)[:, np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_277": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "prev_z_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(prev_z_py, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "pad_sequences(z_idx, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "pad_sequences(z_idx, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_262": {
                "ndarray": {
                    "value": "prev_z_input_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_sequences(prev_z_py, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "pad_sequences(z_idx, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ],
                        [
                            "pad_sequences(z_idx, cfg.max_ts, padding='post', truncating='pre').transpose((1, 0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/e2e/multiwoz/Sequicity/tsd_net.py": {
        "torch": {
            "from_numpy_52": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "result_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ],
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_73": {
                "variable": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(hidden, encoder_outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_74": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_energies, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_80": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat([H, encoder_outputs], 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_83": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.size(0), 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.attn(torch.cat([H, encoder_outputs], 2)))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_94": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_95": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_114": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "embedded.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "embedded[sort_idx].transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_lens[sort_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_117": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "outputs.transpose(0, 1)[unsort_idx].transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_127": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_129": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.proj_copy1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.proj_copy2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "variable": {
                    "value": "self.inp_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "gru_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_z, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_156": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy1(u_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy1(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_158": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_161": {
                "variable": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_copy_score - u_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.proj_copy1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.proj_copy2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "result_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ],
                        [
                            "result.transpose((1, 0, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_234": {
                "variable": {
                    "value": "gru_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m_embed, u_context, z_context, degree_input.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_237": {
                "variable": {
                    "value": "z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy2(z_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_238": {
                "variable": {
                    "value": "z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy2(z_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(z_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "z_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(z_copy_score - z_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(z_copy_score.unsqueeze(1), sparse_z_input)).squeeze(1) + z_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(z_copy_score)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_238": {
                "variable": {
                    "value": "z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_241": {
                "variable": {
                    "value": "z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_copy_score - z_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_246": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, z_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, z_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_260": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_261": {
                "variable": {
                    "value": "self.dec_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "degree_size + embed_size + hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "NLLLoss_274": {
                "variable": {
                    "value": "self.pr_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_275": {
                "variable": {
                    "value": "self.dec_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_435": {
                "variable": {
                    "value": "last_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ],
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_436": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[list(_) for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "copy.copy(self.decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[_.view(-1)[0] for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_436": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_456": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "[list(_) for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(decoded, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "list(decoded)",
                            "Call"
                        ],
                        [
                            "copy.copy(self.decoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[_.view(-1)[0] for _ in decoded]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_456": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_682": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_689": {
                "variable": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(policy_loss).sum()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_689": {
                "variable": {
                    "value": "policy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, u_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, u_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_175": {
                "variable": {
                    "value": "pv_z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.proj_copy2(pv_z_enc_out.transpose(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "variable": {
                    "value": "pv_z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pv_z_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy2(pv_z_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(pv_z_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "pv_z_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(pv_z_copy_score - pv_z_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(pv_z_copy_score.unsqueeze(1), sparse_pv_z_input)).squeeze(1) + pv_z_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(pv_z_copy_score)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gru_out.squeeze(0).unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_176": {
                "variable": {
                    "value": "pv_z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_179": {
                "variable": {
                    "value": "pv_z_copy_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pv_z_copy_score - pv_z_copy_score_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_183": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([gen_score, u_copy_score, pv_z_copy_score], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_359": {
                "variable": {
                    "value": "last_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ],
                        [
                            "[None] * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "pz_dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pz_dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pz_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(pz_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_364": {
                "variable": {
                    "value": "pz_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pz_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pz_proba, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_381": {
                "variable": {
                    "value": "pm_dec_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pm_dec_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(pm_dec_proba, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "pz_dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pz_dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pz_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(pz_dec_outs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_421": {
                "variable": {
                    "value": "(z_proba, z_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((proba[:, :2], proba[:, 3:]), 1)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_447": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proba[:, :2], proba[:, 3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_448": {
                "variable": {
                    "value": "(mt_proba, mt_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((proba[:, :2], proba[:, 3:]), 1)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_662": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((proba[:, :2], proba[:, 3:]), 1)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "orthogonal_59": {
                "module": {
                    "value": "hh[i:i + gru.hidden_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_160": {
                "input": {
                    "value": "u_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy1(u_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(u_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "u_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(u_copy_score - u_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)).squeeze(1) + u_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(u_copy_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_162": {
                "input": {
                    "value": "torch.bmm(u_copy_score.unsqueeze(1), sparse_u_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_162": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_240": {
                "input": {
                    "value": "z_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy2(z_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(z_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "z_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(z_copy_score - z_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(z_copy_score.unsqueeze(1), sparse_z_input)).squeeze(1) + z_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(z_copy_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_242": {
                "input": {
                    "value": "torch.bmm(z_copy_score.unsqueeze(1), sparse_z_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_242": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "tensors": {
                    "value": "[gen_score, z_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_517": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((proba[:, :2], proba[:, 3:]), 1)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_518": {
                "variable": {
                    "value": "(mt_proba, mt_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((proba[:, :2], proba[:, 3:]), 1)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size - dead_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_556": {
                "tensors": {
                    "value": "finished[0].decoded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_560": {
                "tensor": {
                    "value": "m_tm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cuda_(Variable(torch.ones(1, batch_size).long()))",
                            "Call"
                        ],
                        [
                            "m_input[t].view(1, -1)",
                            "Call"
                        ],
                        [
                            "m_tm1.view(1, -1)",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(mt_index).view(1, -1))",
                            "Call"
                        ],
                        [
                            "self.vocab.decode(m_tm1[0])",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(mt_index).view(1, -1))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_561": {
                "tensor": {
                    "value": "degree_input",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_624": {
                "tensor": {
                    "value": "m_tm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cuda_(Variable(torch.ones(1, batch_size).long()))",
                            "Call"
                        ],
                        [
                            "m_input[t].view(1, -1)",
                            "Call"
                        ],
                        [
                            "m_tm1.view(1, -1)",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(mt_index).view(1, -1))",
                            "Call"
                        ],
                        [
                            "self.vocab.decode(m_tm1[0])",
                            "Call"
                        ],
                        [
                            "cuda_(Variable(mt_index).view(1, -1))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_625": {
                "tensor": {
                    "value": "degree_input",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "[H, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "[pv_z_enc_out, u_enc_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "[gen_score, u_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_178": {
                "input": {
                    "value": "pv_z_copy_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.proj_copy2(pv_z_enc_out.transpose(0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.matmul(pv_z_copy_score, gru_out.squeeze(0).unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "pv_z_copy_score.cpu()",
                            "Call"
                        ],
                        [
                            "torch.exp(pv_z_copy_score - pv_z_copy_score_max)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.bmm(pv_z_copy_score.unsqueeze(1), sparse_pv_z_input)).squeeze(1) + pv_z_copy_score_max",
                            "BinOp"
                        ],
                        [
                            "cuda_(pv_z_copy_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_180": {
                "input": {
                    "value": "torch.bmm(pv_z_copy_score.unsqueeze(1), sparse_pv_z_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_180": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "tensors": {
                    "value": "[gen_score, u_copy_score, pv_z_copy_score]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_290": {
                "input": {
                    "value": "pm_dec_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(pm_dec_proba, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_337": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_enc_out.size(1)",
                            "Call"
                        ],
                        [
                            "pz_dec_outs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_376": {
                "variable": {
                    "value": "(_, m_tm1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + u_copy_score[:, :cfg.vocab_size] + pv_z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, pv_z_copy_score[:, cfg.vocab_size:], u_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "gen_score + z_copy_score[:, :cfg.vocab_size]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([proba, z_copy_score[:, cfg.vocab_size:]], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((proba[:, :2], proba[:, 3:]), 1)",
                            "Call"
                        ],
                        [
                            "torch.log(proba)",
                            "Call"
                        ],
                        [
                            "proba.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "[gru_out, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_236": {
                "tensors": {
                    "value": "[z_context, u_context, gru_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_336": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seqs.size(1)",
                            "Call"
                        ],
                        [
                            "u_input.size(1)",
                            "Call"
                        ],
                        [
                            "u_enc_out.size(1)",
                            "Call"
                        ],
                        [
                            "pz_dec_outs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_162": {
                "input": {
                    "value": "u_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_u_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(get_sparse_input_aug(u_input_np), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_242": {
                "input": {
                    "value": "z_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_z_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(self.get_sparse_selective_input(z_input_np), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_180": {
                "input": {
                    "value": "pv_z_copy_score.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sparse_pv_z_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(get_sparse_input_aug(prev_z_input_np), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/nlg/multiwoz/evaluate.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2019",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/nlg/multiwoz/sc_lstm/loader/dataset_woz.py": {
        "torch": {}
    },
    "convlab/modules/nlg/multiwoz/sc_lstm/model/layers/decoder_deep.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self.dc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * n_layer",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_70": {
                "variable": {
                    "value": "w2h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w2h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w2h[layer_idx](input_t)",
                            "Call"
                        ],
                        [
                            "torch.split(w2h, self.hidden_size, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_72": {
                "variable": {
                    "value": "h2h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h2h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h2h[layer_idx](last_hidden[layer_idx])",
                            "Call"
                        ],
                        [
                            "torch.split(h2h, self.hidden_size, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_74": {
                "variable": {
                    "value": "gate_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2h[0] + h2h[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "gate_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2h[1] + h2h[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_76": {
                "variable": {
                    "value": "gate_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2h[2] + h2h[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_84": {
                "variable": {
                    "value": "gate_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w2h_r[layer_idx](input_t) + _gate_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_88": {
                "variable": {
                    "value": "cell_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2h[3] + h2h[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_190": {
                "variable": {
                    "value": "(topv, topi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_194": {
                "variable": {
                    "value": "word_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(torch.cat(last_hidden, dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_198": {
                "variable": {
                    "value": "(word_dis_sort, idx_of_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "word_dis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multinomial_201": {
                "variable": {
                    "value": "sample_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_dis_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_dis_sort[:, :n_candidate]",
                            "Subscript"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_89": {
                "input": {
                    "value": "self.dc[layer_idx](dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_90": {
                "input": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_f * last_cell + gate_i * cell_hat + F.tanh(self.dc[layer_idx](dt))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_107": {
                "variable": {
                    "value": "pre_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vocab_t, pre_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_123": {
                "variable": {
                    "value": "last_hidden[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "last_hidden[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "last_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_var.size(0)",
                            "Call"
                        ],
                        [
                            "output.size(0)",
                            "Call"
                        ],
                        [
                            "dataset.batch_size",
                            "Attribute"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "55 if gen else input_var.size(1)",
                            "IfExp"
                        ],
                        [
                            "55",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_218": {
                "ndarray": {
                    "value": "decoded_words_t.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_118": {
                "input": {
                    "value": "_hidden.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_278": {
                "variable": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(dis, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "input_size + i * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "input_size + i * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "input_size + i * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "input_size + i * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_190": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(torch.cat(last_hidden, dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_278": {
                "input": {
                    "value": "dis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dis.squeeze(0)",
                            "Call"
                        ],
                        [
                            "torch.log(F.softmax(dis, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/nlg/multiwoz/sc_lstm/model/layers/sclstm.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.w2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.w2h_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.h2h_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.dc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_42": {
                "variable": {
                    "value": "w2h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w2h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w2h(input_t)",
                            "Call"
                        ],
                        [
                            "torch.split(w2h, self.hidden_size, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_44": {
                "variable": {
                    "value": "h2h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h2h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h2h(last_hidden)",
                            "Call"
                        ],
                        [
                            "torch.split(h2h, self.hidden_size, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_46": {
                "variable": {
                    "value": "gate_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2h[0] + h2h[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "gate_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2h[1] + h2h[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "gate_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2h[2] + h2h[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_52": {
                "variable": {
                    "value": "gate_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w2h_r(input_t) + alpha * self.h2h_r(last_hidden)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "cell_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2h[3] + h2h[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_113": {
                "variable": {
                    "value": "(topv, topi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "input": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_f * last_cell + gate_i * cell_hat + self.dc(dt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seq.size(0)",
                            "Call"
                        ],
                        [
                            "output.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seq.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seq.size(0)",
                            "Call"
                        ],
                        [
                            "output.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seq.size(0)",
                            "Call"
                        ],
                        [
                            "output.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_88": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_o * F.tanh(cell)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(hidden, p=self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "ndarray": {
                    "value": "decoded_words_t.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_113": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/nlg/multiwoz/sc_lstm/model/lm_deep.py": {
        "torch": {
            "Adam_74": {
                "variable": {
                    "value": "self.solver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.dec.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "self.solver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.dec.parameters()}, {'params': self.feat2hidden.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.batch_size",
                            "Attribute"
                        ],
                        [
                            "dataset.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.batch_size",
                            "Attribute"
                        ],
                        [
                            "dataset.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/nlg/multiwoz/sc_lstm/model/masked_cross_entropy.py": {
        "torch": {
            "arange_14": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_44": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_48": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/nlg/multiwoz/sc_lstm/nlg_sc_lstm.py": {
        "torch": {
            "load_86": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(os.path.abspath(__file__)), self.args['model_path'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/nlg/multiwoz/sc_lstm/run_woz.py": {
        "torch": {
            "load_278": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.model_path",
                            "Attribute"
                        ],
                        [
                            "args.model_path",
                            "Attribute"
                        ],
                        [
                            "args.model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_193": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.model_path",
                            "Attribute"
                        ],
                        [
                            "args.model_path",
                            "Attribute"
                        ],
                        [
                            "args.model_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_235": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.model_path",
                            "Attribute"
                        ],
                        [
                            "args.model_path",
                            "Attribute"
                        ],
                        [
                            "args.model_path",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/nlu/multiwoz/bert/dataloader.py": {
        "torch": {
            "zeros_107": {
                "variable": {
                    "value": "word_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "word_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "tag_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "tag_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "intent_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.intent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "context_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, context_max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "context_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, context_max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "self.intent_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.intent_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/nlu/multiwoz/bert/jointBERT.py": {
        "torch": {
            "Dropout_15": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "model_config['dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_35": {
                "variable": {
                    "value": "self.intent_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "self.intent_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "self.slot_loss_fct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "sequence_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.slot_hidden(self.dropout(sequence_output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "pooled_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.intent_hidden(self.dropout(pooled_output))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.intent_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.bert.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.intent_num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.slot_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.bert.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.slot_num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.intent_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.bert.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.bert.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.slot_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.bert.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.bert.config.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.intent_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.intent_num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.slot_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.slot_num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.intent_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bert.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.slot_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bert.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "sequence_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_output.unsqueeze(1).repeat(1, sequence_output.size(1), 1), sequence_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "pooled_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context_output, pooled_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "data": {
                    "value": "[1.0] * intent_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/nlu/multiwoz/bert/multiwoz/nlu.py": {
        "torch": {
            "load_73": {
                "f": {
                    "value": "os.path.join(output_dir, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['DEVICE']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/nlu/multiwoz/bert/multiwoz/postprocess.py": {
        "torch": {
            "max_87": {
                "variable": {
                    "value": "(value, tag_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tag_logits[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/nlu/multiwoz/bert/test.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_49": {
                "f": {
                    "value": "os.path.join(output_dir, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['DEVICE']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/nlu/multiwoz/bert/train.py": {
        "torch": {
            "SummaryWriter_52": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['log_dir']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_74": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['model']['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(open(args.config_path))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__103": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_203": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/nlu/multiwoz/evaluate.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2019",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/nlu/multiwoz/milu/model.py": {
        "torch": {
            "Linear_106": {
                "variable": {
                    "value": "self.intent_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "projection_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feedforward.get_output_dim() if self._feedforward else self.encoder.get_output_dim()",
                            "IfExp"
                        ],
                        [
                            "projection_input_dim + self.encoder.get_output_dim()",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_intents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_120": {
                "variable": {
                    "value": "self.intent_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([(lambda t: nongeneral_intent_weight if 'Request' in t else 1.0)(t) for (i, t) in self.vocab.get_index_to_token_vocabulary(intent_label_namespace).items()])",
                            "Call"
                        ],
                        [
                            "torch.tensor([log10((num_train_examples - self.vocab._retained_counter[intent_label_namespace][t]) / self.vocab._retained_counter[intent_label_namespace][t]) for (i, t) in self.vocab.get_index_to_token_vocabulary(intent_label_namespace).items()])",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0 for (i, t) in self.vocab.get_index_to_token_vocabulary(intent_label_namespace).items()])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_269": {
                "variable": {
                    "value": "intent_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intent_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.intent_projection_layer(encoded_summary)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_97": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(lambda t: nongeneral_intent_weight if 'Request' in t else 1.0)(t) for (i, t) in self.vocab.get_index_to_token_vocabulary(intent_label_namespace).items()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "encoded_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_summary, encoded_context_summary]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "encoded_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_summary, attended_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "tag_encoded_text",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tag_encoded_text, encoded_context_summary.unsqueeze(dim=1).expand(encoded_context_summary.size(0), tag_encoded_text.size(1), encoded_context_summary.size(1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "tag_encoded_text",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tag_encoded_text, attended_context.unsqueeze(dim=1).expand(attended_context.size(0), tag_encoded_text.size(1), attended_context.size(1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[log10((num_train_examples - self.vocab._retained_counter[intent_label_namespace][t]) / self.vocab._retained_counter[intent_label_namespace][t]) for (i, t) in self.vocab.get_index_to_token_vocabulary(intent_label_namespace).items()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "tag_projection_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feedforward.get_output_dim() if self._feedforward else self.encoder.get_output_dim()",
                            "IfExp"
                        ],
                        [
                            "tag_projection_input_dim + self.encoder.get_output_dim()",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_312": {
                "input": {
                    "value": "self.intent_loss(intent_logits, intents.float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 for (i, t) in self.vocab.get_index_to_token_vocabulary(intent_label_namespace).items()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/nlu/multiwoz/milu/multilabel_f1_measure.py": {
        "torch": {
            "ones_like_56": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gold_labels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/nlu/multiwoz/onenet/model.py": {
        "torch": {
            "CrossEntropyLoss_79": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_162": {
                "variable": {
                    "value": "domain_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domain_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.domain_projection_layer(encoded_summary)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_165": {
                "variable": {
                    "value": "intent_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intent_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.intent_projection_layer(encoded_summary)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.domain_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feedforward.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_domains",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.intent_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feedforward.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_intents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.domain_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_domains",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.intent_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_intents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "self.encoder.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_tags",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/policy/system/multiwoz/vanilla_mle/model.py": {
        "torch": {
            "CrossEntropyLoss_54": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_81": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection_layer(states)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feedforward.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/usr/multiwoz/vhus_usr/user.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_101": {
                "variable": {
                    "value": "batch_input[terminal]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.user.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr_simu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_316": {
                "variable": {
                    "value": "self.goal_len_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_156": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_157": {
                "variable": {
                    "value": "self.bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_302": {
                "obj": {
                    "value": "self.user.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/' + str(epoch) + '_simulator.mdl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_109": {
                "input": {
                    "value": "recog_mu - prior_mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_308": {
                "f": {
                    "value": "user_mdl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename + '_simulator.mdl'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/usr/multiwoz/vhus_usr/usermodule.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_like_17": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.5 * logvar).exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_28": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_41": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_43": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "dim.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRU_55": {
                "variable": {
                    "value": "self.context_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.mu_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.logvar_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.mu_net_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.logvar_net_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.concat_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg.hu_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.terminal_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(cfg.hu_dim, cfg.hu_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_135": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_175": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_192": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_137": {
                "variable": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_157": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_var)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, input_lengths, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_var)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(embedded)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_160": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[a, b, :]",
                            "Subscript"
                        ],
                        [
                            "inputs[a, b, c, :].view(dim.shape[0], dim.shape[1], -1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "cfg.hu_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "tensors": {
                    "value": "[context, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_235": {
                "tensors": {
                    "value": "(decoder_outputs[-1][:, :self.eos_id], decoder_outputs[-1][:, self.eos_id + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_235": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_dst/multiwoz/sumbt/BeliefTrackerSlotQueryMultiSlot.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.q_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.v_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.k_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(scores)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, self.d_k, mask, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(scores)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, self.d_k, mask, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_linear(v).view(bs, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "v.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_106": {
                "variable": {
                    "value": "self.slot_lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_slots",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.bert_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.value_lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Embedding(num_label, self.bert_output_dim) for num_label in num_labels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bert_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_136": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.bert_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_146": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_149": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "slot_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "slot_ids.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ids.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_211": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(hidden, attention_mask.view(-1, self.max_seq_length, 1).expand(hidden.size()).float())",
                            "Call"
                        ],
                        [
                            "hidden.repeat(slot_dim, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.attn(hid_slot, hidden, hidden, mask=attention_mask.view(-1, 1, self.max_seq_length).repeat(slot_dim, 1, 1))",
                            "Call"
                        ],
                        [
                            "hidden.squeeze()",
                            "Call"
                        ],
                        [
                            "hidden.view(slot_dim, ds, ts, -1).view(-1, ts, self.bert_output_dim)",
                            "Call"
                        ],
                        [
                            "rnn_out.view(slot_dim, ds, ts, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attention_mask.view(-1, self.max_seq_length, 1).expand(hidden.size()).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "pred_slot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_slot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_slot, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_115": {
                "variable": {
                    "value": "self.nbt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.bert_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.rnn_num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.rnn_init_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.bert_output_dim, self.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CosineSimilarity_141": {
                "variable": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "variable": {
                    "value": "label_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "label_id.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.rnn_num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "input_ids.shape[0] * slot_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_254": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.metric(_hid_label, _hidden).view(ds, ts, num_slot_labels)",
                            "Call"
                        ],
                        [
                            "-_dist",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "matmul_42": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_linear(q).view(bs, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "q.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_122": {
                "variable": {
                    "value": "self.nbt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.bert_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.rnn_num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PairwiseDistance_143": {
                "variable": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.rnn_num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "input_ids.shape[0] * slot_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_269": {
                "input": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pred_slot == labels).view(-1, slot_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_270": {
                "input": {
                    "value": "labels.view(-1, slot_dim) > -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_272": {
                "input": {
                    "value": "labels[:, :, 0].view(-1) > -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_107": {
                "num_embeddings": {
                    "value": "num_label",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.bert_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "self.bert_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_132": {
                "p": {
                    "value": "self.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_264": {
                "tensors": {
                    "value": "pred_slot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_slot, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_271": {
                "input": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pred_slot == labels).view(-1, slot_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_dst/multiwoz/sumbt/sumbt.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "all_label_token_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[0] for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "all_label_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f[1] for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_97": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(input_ids).to(self.device).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "input_ids + padding",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_214": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "input_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(input_len).to(self.device).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "[len(tokens_user) + 2, len(tokens_sys) + 1]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_215": {
                "variable": {
                    "value": "input_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_95": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_139": {
                "f": {
                    "value": "os.path.join(args.output_dir, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_141": {
                "f": {
                    "value": "os.path.join(args.output_dir, 'pytorch_model.bin')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_dst/multiwoz/trade/trade.py": {
        "torch": {
            "argmax_194": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gates.transpose(0, 1)[bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "[story]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "data": {
                    "value": "[story]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "[story_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_99": {
                "f": {
                    "value": "os.path.join(self.model_url, 'enc.th')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_101": {
                "f": {
                    "value": "os.path.join(self.model_url, 'dec.th')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_104": {
                "f": {
                    "value": "os.path.join(self.model_url, 'enc.th')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_106": {
                "f": {
                    "value": "os.path.join(self.model_url, 'dec.th')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_dst/multiwoz/trade/trade_utils.py": {
        "torch": {
            "arange_537": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "losses.size(2)",
                            "Call"
                        ],
                        [
                            "max(lens)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_602": {
                "variable": {
                    "value": "bce_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_642": {
                "variable": {
                    "value": "min_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coverage",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_677": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "torch.log(logits_flat)",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_699": {
                "variable": {
                    "value": "mask_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mask_)",
                            "Call"
                        ],
                        [
                            "mask_.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "mask_.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_49": {
                "variable": {
                    "value": "self.cross_entorpy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_72": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_grad_norm__134": {
                "variable": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__138": {
                "variable": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_353": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_354": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD_token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "GRU_357": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_404": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_405": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_408": {
                "variable": {
                    "value": "self.W_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_409": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_410": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_413": {
                "variable": {
                    "value": "self.W_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_gate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_422": {
                "variable": {
                    "value": "self.Slot_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.slot_w2i)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_427": {
                "variable": {
                    "value": "all_point_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(slot_temp)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length.size(0)",
                            "Call"
                        ],
                        [
                            "logits.size(0)",
                            "Call"
                        ],
                        [
                            "mask.size(0)",
                            "Call"
                        ],
                        [
                            "len(data['context_len'])",
                            "Call"
                        ],
                        [
                            "len(data_dev['context_len'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "max_res_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['generate_y'].size(2) if self.encoder.training else 10",
                            "IfExp"
                        ]
                    ]
                },
                "layout": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_429": {
                "variable": {
                    "value": "all_gate_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(slot_temp)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length.size(0)",
                            "Call"
                        ],
                        [
                            "logits.size(0)",
                            "Call"
                        ],
                        [
                            "mask.size(0)",
                            "Call"
                        ],
                        [
                            "len(data['context_len'])",
                            "Call"
                        ],
                        [
                            "len(data_dev['context_len'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.nb_gate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_508": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond.unsqueeze(1).expand_as(seq).mul(seq).sum(2)",
                            "Call"
                        ],
                        [
                            "cond.matmul(seq.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_514": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond.unsqueeze(1).expand_as(seq).mul(seq).sum(2)",
                            "Call"
                        ],
                        [
                            "cond.matmul(seq.transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_622": {
                "variable": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "torch.log(logits_flat)",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_692": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "losses.size(2)",
                            "Call"
                        ],
                        [
                            "max(lens)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_94": {
                "obj": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/enc.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_95": {
                "obj": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "directory + '/dec.th'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_149": {
                "variable": {
                    "value": "rand_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_386": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.dropout_layer(embedded)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, input_lengths, batch_first=False)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_390": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_550": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "logits_flat",
                            "Name"
                        ],
                        [
                            "torch.log(logits_flat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_583": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "logits_flat",
                            "Name"
                        ],
                        [
                            "torch.log(logits_flat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_626": {
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "torch.log(logits_flat)",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_662": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "logits_flat",
                            "Name"
                        ],
                        [
                            "torch.log(logits_flat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_681": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits)",
                            "Call"
                        ],
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "logits_flat",
                            "Name"
                        ],
                        [
                            "torch.log(logits_flat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_197": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gates.transpose(0, 1)[bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_441": {
                "variable": {
                    "value": "domain_w2idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "domain_w2idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.slot_w2i[slot.split('-')[0]]]",
                            "List"
                        ],
                        [
                            "torch.tensor(domain_w2idx)",
                            "Call"
                        ],
                        [
                            "domain_w2idx.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_448": {
                "variable": {
                    "value": "slot_w2idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "slot_w2idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.slot_w2i[slot.split('-')[1]]]",
                            "List"
                        ],
                        [
                            "torch.tensor(slot_w2idx)",
                            "Call"
                        ],
                        [
                            "slot_w2idx.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_475": {
                "variable": {
                    "value": "p_gen_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dec_state.squeeze(0), context_vec, decoder_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_478": {
                "variable": {
                    "value": "p_context_ptr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p_vocab.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_484": {
                "variable": {
                    "value": "pred_word",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_p_vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - vocab_pointer_switches).expand_as(p_context_ptr) * p_context_ptr + vocab_pointer_switches.expand_as(p_context_ptr) * p_vocab",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_378": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_376": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/hdsa/generator.py": {
        "torch": {
            "tensor_278": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[input_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_243": {
                "f": {
                    "value": "checkpoint_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'checkpoints/generator/BERT_dim128_w_domain')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/hdsa/predictor.py": {
        "torch": {
            "tensor_244": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[feature.input_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "variable": {
                    "value": "input_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[feature.input_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_246": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[feature.segment_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_250": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(input_ids, segment_ids, input_masks, labels=None)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/hdsa/transformer/Beam.py": {
        "torch": {
            "zeros_20": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_89": {
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_27": {
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/hdsa/transformer/Transformer.py": {
        "torch": {
            "triu_331": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((len_s, len_s), device=seq.device, dtype=torch.uint8)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.dc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.w2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * emb_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.w2h_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * emb_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.h2h_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.src_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.att_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_27": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_t, ctx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_44": {
                "variable": {
                    "value": "w2h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w2h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w2h(input_t)",
                            "Call"
                        ],
                        [
                            "torch.split(w2h, self.hidden_size, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_46": {
                "variable": {
                    "value": "h2h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h2h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.h2h(last_hidden)",
                            "Call"
                        ],
                        [
                            "torch.split(h2h, self.hidden_size, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "gate_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2h[0] + h2h[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "gate_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2h[1] + h2h[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_50": {
                "variable": {
                    "value": "gate_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2h[2] + h2h[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_54": {
                "variable": {
                    "value": "gate_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(self.w2h_r(input_t) + alpha * self.h2h_r(last_hidden))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "cell_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w2h[3] + h2h[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob[:, :, None] * src_enc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "output_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output_all, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "dt_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dt_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dt_all, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seq.size(1)",
                            "Call"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_109": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seq.size(1)",
                            "Call"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_109": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_112": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_113": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_155": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model // n_head",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_160": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_187": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output * a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_214": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_219": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_256": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_257": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_258": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_in",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_259": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_276": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_277": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_281": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_qs(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ],
                        [
                            "self.w_qs(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_289": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ],
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_348": {
                "variable": {
                    "value": "self.src_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_src_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_355": {
                "variable": {
                    "value": "self.layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_inner, n_head, d_k, d_v, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_375": {
                "variable": {
                    "value": "dot_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_output[:, :, None, :] * ontology_embedding[None, None, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_379": {
                "variable": {
                    "value": "pooling_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pooled_dot_prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dot_prod[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Embedding_435": {
                "variable": {
                    "value": "self.tgt_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_436": {
                "variable": {
                    "value": "self.act_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_440": {
                "variable": {
                    "value": "self.enc_layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_inner, n_head, d_k, d_v, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_444": {
                "variable": {
                    "value": "self.layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderLayer(d_model, d_inner, n_head, d_k, d_v, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_448": {
                "variable": {
                    "value": "self.tgt_word_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_590": {
                "variable": {
                    "value": "self.tgt_word_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_word_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "Constants.PAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_596": {
                "variable": {
                    "value": "self.layer_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(d_model, d_inner, n_head, d_k, d_v, dropout=dropout) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_617": {
                "variable": {
                    "value": "self.tgt_word_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_618": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_332": {
                "*size": {
                    "value": "(len_s, len_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "seq.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_508": {
                "variable": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[inst_dec_beams[idx].get_current_state() for idx in active_inst_idx_list if not inst_dec_beams[idx].done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ],
                        [
                            "[inst_dec_beams[idx].get_current_state() for idx in active_inst_idx_list if not inst_dec_beams[idx].done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_512": {
                "variable": {
                    "value": "word_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tgt_word_prj(dec_output)",
                            "Call"
                        ],
                        [
                            "self.forward(dec_partial_seq, src_seq, act_vecs)[:, -1, :] / Constants.T",
                            "BinOp"
                        ],
                        [
                            "self.tgt_word_prj(dec_inp)",
                            "Call"
                        ],
                        [
                            "self.forward(dec_partial_seq, src_seq, act_vecs)[:, -1, :] / Constants.T",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_702": {
                "variable": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_partial_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[inst_dec_beams[idx].get_current_state() for idx in active_inst_idx_list if not inst_dec_beams[idx].done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ],
                        [
                            "[inst_dec_beams[idx].get_current_state() for idx in active_inst_idx_list if not inst_dec_beams[idx].done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_706": {
                "variable": {
                    "value": "word_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tgt_word_prj(dec_output)",
                            "Call"
                        ],
                        [
                            "self.forward(dec_partial_seq, src_seq, act_vecs)[:, -1, :] / Constants.T",
                            "BinOp"
                        ],
                        [
                            "self.tgt_word_prj(dec_inp)",
                            "Call"
                        ],
                        [
                            "self.forward(dec_partial_seq, src_seq, act_vecs)[:, -1, :] / Constants.T",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_54": {
                "input": {
                    "value": "self.w2h_r(input_t) + alpha * self.h2h_r(last_hidden)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_59": {
                "input": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_f * last_cell + gate_i * cell_hat + self.dc(dt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_67": {
                "input": {
                    "value": "prob * src_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seq.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_264": {
                "input": {
                    "value": "self.w_1(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_718": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_65": {
                "input": {
                    "value": "energy_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.unsqueeze(1) + self.src_proj(src_enc)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_110": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/experiments_woz/mytest.py": {
        "torch": {
            "load_119": {
                "f": {
                    "value": "/root/NeuralDialog-LaRL/larl_model/best-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_122": {
                "f": {
                    "value": "/root/NeuralDialog-LaRL/larl_model/best-model",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/experiments_woz/reinforce_cat.py": {
        "torch": {
            "load_76": {
                "f": {
                    "value": "rl_config.sv_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/experiments_woz/reinforce_gauss.py": {
        "torch": {
            "save_85": {
                "obj": {
                    "value": "sys_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "rl_config.rl_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "rl_config.sv_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/experiments_woz/reinforce_word.py": {
        "torch": {
            "save_86": {
                "obj": {
                    "value": "sys_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "rl_config.rl_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "rl_config.sv_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/experiments_woz/sl_cat.py": {
        "torch": {
            "load_123": {
                "f": {
                    "value": "os.path.join(saved_path, '{}-model'.format(best_epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/experiments_woz/sl_gauss.py": {
        "torch": {
            "load_123": {
                "f": {
                    "value": "os.path.join(saved_path, '{}-model'.format(best_epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/experiments_woz/sl_word.py": {
        "torch": {
            "manual_seed_67": {
                "seed": {
                    "value": "config.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "os.path.join(saved_path, '{}-model'.format(best_epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/latent_dialog/agent_task.py": {
        "torch": {
            "SGD_17": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for (n, p) in self.model.named_parameters() if 'c2z' in n or not tune_pi_only]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.rl_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.args.nesterov and self.args.momentum > 0",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__79": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.rl_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/latent_dialog/base_models.py": {
        "torch": {
            "Adam_42": {
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_59": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.fine_tune_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_20": {
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_46": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_62": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.fine_tune_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.fine_tune_momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_49": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_65": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.fine_tune_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.fine_tune_momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/latent_dialog/criterions.py": {
        "torch": {
            "Tensor_44": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "self.crit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.Tensor(len(dictionary)).fill_(1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'elementwise_mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_110": {
                "variable": {
                    "value": "qy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_qy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_qy.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_111": {
                "variable": {
                    "value": "y_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qy * (log_qy - log_py)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_128": {
                "variable": {
                    "value": "qy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_qy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_qy.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_129": {
                "variable": {
                    "value": "h_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * log_qy * qy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_149": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label_output",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "self.size_average",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_169": {
                "variable": {
                    "value": "avg_kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * th.mean(loss, dim=1)",
                            "BinOp"
                        ],
                        [
                            "-0.5 * th.sum(loss, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nll_loss_22": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.view(-1, net_output.size(-1))",
                            "Call"
                        ],
                        [
                            "preds[bth]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_92": {
                "variable": {
                    "value": "choice_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.cat(choices_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.sum(th.cat(choices_logits, 1), 1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "choice_logit.sub(choice_logit.max().item())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_163": {
                "input": {
                    "value": "th.pow(prior_mu - recog_mu, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "th.exp(prior_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_164": {
                "input": {
                    "value": "th.exp(recog_logvar)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "th.exp(prior_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_24": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.view(-1, net_output.size(-1))",
                            "Call"
                        ],
                        [
                            "preds[bth]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_113": {
                "input": {
                    "value": "y_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.sum(qy * (log_qy - log_py), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_131": {
                "input": {
                    "value": "h_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.sum(-1 * log_qy * qy, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_163": {
                "input": {
                    "value": "prior_mu - recog_mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_163": {
                "input": {
                    "value": "prior_logvar",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_164": {
                "input": {
                    "value": "prior_logvar",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "nll_loss_27": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.view(-1, net_output.size(-1))",
                            "Call"
                        ],
                        [
                            "preds[bth]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_29": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.nll_loss(pred, target, size_average=False, ignore_index=self.padding_idx)",
                            "Call"
                        ],
                        [
                            "F.nll_loss(pred, target, size_average=False, ignore_index=self.padding_idx)",
                            "Call"
                        ],
                        [
                            "loss / batch_size",
                            "BinOp"
                        ],
                        [
                            "F.nll_loss(pred, target, ignore_index=self.padding_idx, reduce=False)",
                            "Call"
                        ],
                        [
                            "loss.view(-1, net_output.size(1))",
                            "Call"
                        ],
                        [
                            "th.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "loss / word_cnt",
                            "BinOp"
                        ],
                        [
                            "th.mean(loss)",
                            "Call"
                        ],
                        [
                            "F.nll_loss(pred, target, size_average=True, ignore_index=self.padding_idx)",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(net_output, label_output, size_average=self.size_average)",
                            "Call"
                        ],
                        [
                            "loss - th.div(th.exp(recog_logvar), th.exp(prior_logvar))",
                            "BinOp"
                        ],
                        [
                            "1.0 + (recog_logvar - prior_logvar)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_30": {
                "variable": {
                    "value": "word_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.sign(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_32": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.nll_loss(pred, target, size_average=False, ignore_index=self.padding_idx)",
                            "Call"
                        ],
                        [
                            "F.nll_loss(pred, target, size_average=False, ignore_index=self.padding_idx)",
                            "Call"
                        ],
                        [
                            "loss / batch_size",
                            "BinOp"
                        ],
                        [
                            "F.nll_loss(pred, target, ignore_index=self.padding_idx, reduce=False)",
                            "Call"
                        ],
                        [
                            "loss.view(-1, net_output.size(1))",
                            "Call"
                        ],
                        [
                            "th.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "loss / word_cnt",
                            "BinOp"
                        ],
                        [
                            "th.mean(loss)",
                            "Call"
                        ],
                        [
                            "F.nll_loss(pred, target, size_average=True, ignore_index=self.padding_idx)",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(net_output, label_output, size_average=self.size_average)",
                            "Call"
                        ],
                        [
                            "loss - th.div(th.exp(recog_logvar), th.exp(prior_logvar))",
                            "BinOp"
                        ],
                        [
                            "1.0 + (recog_logvar - prior_logvar)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_92": {
                "tensors": {
                    "value": "choices_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_115": {
                "input": {
                    "value": "y_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.sum(qy * (log_qy - log_py), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_133": {
                "input": {
                    "value": "h_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.sum(-1 * log_qy * qy, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_166": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.nll_loss(pred, target, size_average=False, ignore_index=self.padding_idx)",
                            "Call"
                        ],
                        [
                            "F.nll_loss(pred, target, size_average=False, ignore_index=self.padding_idx)",
                            "Call"
                        ],
                        [
                            "loss / batch_size",
                            "BinOp"
                        ],
                        [
                            "F.nll_loss(pred, target, ignore_index=self.padding_idx, reduce=False)",
                            "Call"
                        ],
                        [
                            "loss.view(-1, net_output.size(1))",
                            "Call"
                        ],
                        [
                            "th.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "loss / word_cnt",
                            "BinOp"
                        ],
                        [
                            "th.mean(loss)",
                            "Call"
                        ],
                        [
                            "F.nll_loss(pred, target, size_average=True, ignore_index=self.padding_idx)",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(net_output, label_output, size_average=self.size_average)",
                            "Call"
                        ],
                        [
                            "loss - th.div(th.exp(recog_logvar), th.exp(prior_logvar))",
                            "BinOp"
                        ],
                        [
                            "1.0 + (recog_logvar - prior_logvar)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.nll_loss(pred, target, size_average=False, ignore_index=self.padding_idx)",
                            "Call"
                        ],
                        [
                            "F.nll_loss(pred, target, size_average=False, ignore_index=self.padding_idx)",
                            "Call"
                        ],
                        [
                            "loss / batch_size",
                            "BinOp"
                        ],
                        [
                            "F.nll_loss(pred, target, ignore_index=self.padding_idx, reduce=False)",
                            "Call"
                        ],
                        [
                            "loss.view(-1, net_output.size(1))",
                            "Call"
                        ],
                        [
                            "th.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "loss / word_cnt",
                            "BinOp"
                        ],
                        [
                            "th.mean(loss)",
                            "Call"
                        ],
                        [
                            "F.nll_loss(pred, target, size_average=True, ignore_index=self.padding_idx)",
                            "Call"
                        ],
                        [
                            "F.binary_cross_entropy_with_logits(net_output, label_output, size_average=self.size_average)",
                            "Call"
                        ],
                        [
                            "loss - th.div(th.exp(recog_logvar), th.exp(prior_logvar))",
                            "BinOp"
                        ],
                        [
                            "1.0 + (recog_logvar - prior_logvar)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_34": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.view(-1, net_output.size(-1))",
                            "Call"
                        ],
                        [
                            "preds[bth]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_90": {
                "input": {
                    "value": "sel_outs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idxs_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.np2var(idxs, LONG)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_90": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_98": {
                "input": {
                    "value": "target_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob[label]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sign_30": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.view(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/latent_dialog/enc2dec/base_modules.py": {
        "torch": {
            "Dropout_47": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout_p",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/latent_dialog/enc2dec/classifier.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout_p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.sel_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, output_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_outs, goals_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.sel_decoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[decoder.forward(proj_outs).unsqueeze(1) for decoder in self.sel_decoders]",
                            "ListComp"
                        ],
                        [
                            "th.cat(outs, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "input_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_var, residual_var, turn_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "input_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_var, turn_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_43": {
                "variable": {
                    "value": "input_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.cat([input_var, residual_var, turn_feat], 2)",
                            "Call"
                        ],
                        [
                            "th.cat([input_var, turn_feat], 2)",
                            "Call"
                        ],
                        [
                            "th.mul(input_cat, input_mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.view(input_cat.size(0), input_cat.size(1), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn(embedded.contiguous().view(input_cat.size(0) * input_cat.size(1), -1)).view(input_cat.size(0), input_cat.size(1))",
                            "Call"
                        ],
                        [
                            "logit_mask + logit",
                            "BinOp"
                        ],
                        [
                            "self.attn(h.contiguous().view(-1, 2 * self.nhid_attn)).view(h.size(0), h.size(1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.mul(h, prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn(embedded.contiguous().view(input_cat.size(0) * input_cat.size(1), -1)).view(input_cat.size(0), input_cat.size(1))",
                            "Call"
                        ],
                        [
                            "logit_mask + logit",
                            "BinOp"
                        ],
                        [
                            "self.attn(h.contiguous().view(-1, 2 * self.nhid_attn)).view(h.size(0), h.size(1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.mul(embedded, prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_60": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.cat([attn_outs, goals_h], 1)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(h)",
                            "Call"
                        ],
                        [
                            "self.sel_encoder.forward(h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logit, dim=1).unsqueeze(2).expand_as(embedded)",
                            "Call"
                        ],
                        [
                            "F.softmax(logit, dim=1).unsqueeze(2).expand_as(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_72": {
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_dropout(input_cat)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logit, dim=1).unsqueeze(2).expand_as(embedded)",
                            "Call"
                        ],
                        [
                            "F.softmax(logit, dim=1).unsqueeze(2).expand_as(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/latent_dialog/enc2dec/decoders.py": {
        "torch": {
            "softmax_60": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.view(-1, max_ctx_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_61": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.bmm(output, context.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "F.softmax(attn.view(-1, max_ctx_len), dim=1).view(batch_size, -1, max_ctx_len)",
                            "Call"
                        ],
                        [
                            "th.bmm(mapped_output, context.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.query_w(fc1).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mix, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.dec_cell_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "logprob_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logprob_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(logprob_outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dec_cell_size + ctx_cell_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_cell_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.dec_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dec_cell_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ctx_cell_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_43": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.linear_out(combined.view(-1, self.dec_cell_size + self.ctx_cell_size))).view(batch_size, -1, self.dec_cell_size)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_66": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_out(combined.view(-1, self.dec_cell_size + self.ctx_cell_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_87": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "prob_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prob_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(prob_outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded, goal_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded, goal_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.cat(encoder_outputs, 1)",
                            "Call"
                        ],
                        [
                            "attn_context",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_294": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_output / 0.6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_295": {
                "variable": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_output.view(-1)",
                            "Call"
                        ],
                        [
                            "dec_output.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_343": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_output / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_344": {
                "variable": {
                    "value": "logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_output.view(-1)",
                            "Call"
                        ],
                        [
                            "dec_output.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.dec_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dec_cell_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_cell_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.attn_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ctx_cell_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_cell_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dec_cell_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_46": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mapped_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dec_w(output)",
                            "Call"
                        ],
                        [
                            "self.dec_w(output)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "context.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_52": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tiled_output + tiled_attn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_371": {
                "tensors": {
                    "value": "symbol_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.cat(symbol_outputs, dim=1).cpu().data.numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/latent_dialog/enc2dec/encoders.py": {
        "torch": {
            "sign_76": {
                "variable": {
                    "value": "flat_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utterances.view(-1, max_utt_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_118": {
                "variable": {
                    "value": "self.cnt_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "goal_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "nembed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_119": {
                "variable": {
                    "value": "self.val_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "goal_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "nembed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Tanh()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_162": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnt_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnt_enc(cnt)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "val_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.val_enc(val)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_174": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_194": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.stack(outs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_209": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.query(keys)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_214": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values * alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_var, goals_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_32": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_dropout(input_var)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, input_lengths, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_39": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.key_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.utt_cell_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.utt_cell_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "word_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_embeddings, flat_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "word_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_embeddings, goals_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_94": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.key_w(enc_outs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query(fc1).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, attn.dim() - 1)",
                            "Call"
                        ],
                        [
                            "attn * flat_mask",
                            "BinOp"
                        ],
                        [
                            "(attn / (th.sum(attn, dim=1, keepdim=True) + 1e-10)).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "attn.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_101": {
                "variable": {
                    "value": "utt_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "utt_embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn * enc_outs",
                            "BinOp"
                        ],
                        [
                            "th.sum(utt_embedded, dim=1)",
                            "Call"
                        ],
                        [
                            "enc_last.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "utt_embedded.view(-1, self.output_size)",
                            "Call"
                        ],
                        [
                            "utt_embedded.view(batch_size, max_ctx_len, self.output_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "domain_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(v_size, nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_123": {
                "in_features": {
                    "value": "k * nembed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "ndarray": {
                    "value": "2 * idx + 0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "ndarray": {
                    "value": "2 * idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_194": {
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[encoder.forward(goal) for (goal, encoder) in zip(goals_list, self.encoder)]",
                            "ListComp"
                        ],
                        [
                            "th.sum(th.stack(outs), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_177": {
                "in_features": {
                    "value": "v_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "goal_vocab_sizes",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.query(keys), dim=1)",
                            "Call"
                        ],
                        [
                            "alpha * attn_mask.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "alpha / th.sum(alpha, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_99": {
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query(fc1).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, attn.dim() - 1)",
                            "Call"
                        ],
                        [
                            "attn * flat_mask",
                            "BinOp"
                        ],
                        [
                            "(attn / (th.sum(attn, dim=1, keepdim=True) + 1e-10)).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/latent_dialog/judgment.py": {
        "torch": {
            "unsqueeze_37": {
                "variable": {
                    "value": "goal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "word",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "choice_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.cat(choices_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "choice_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.sum(th.cat(choices_logits, 1), 1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "choice_logit.sub(choice_logit.max().item())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "choices_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "np.array(idxs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_65": {
                "input": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.model.item_dict.get_idx(c[i]) for c in choices]",
                            "ListComp"
                        ],
                        [
                            "Variable(th.from_numpy(np.array(idxs)))",
                            "Call"
                        ],
                        [
                            "self.model.to_device(idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_65": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/latent_dialog/main.py": {
        "torch": {
            "clip_grad_norm__326": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__345": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_149": {
                "f": {
                    "value": "self.rl_config.reward_best_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_276": {
                "f": {
                    "value": "self.rl_config.reward_best_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__375": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "self.sys_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.rl_config.reward_best_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_412": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config.saved_path, '{}-model'.format(done_epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_265": {
                "obj": {
                    "value": "self.sys_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.rl_config.reward_best_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/latent_dialog/models_task.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "self.policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.utt_encoder.output_size + self.db_size + self.bs_size, config.dec_cell_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.z_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.y_size * self.k_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dec_cell_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "enc_last",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bs_label, db_label, utt_summary.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "enc_last",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bs_label, db_label, utt_summary.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_329": {
                "variable": {
                    "value": "qy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_py / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_330": {
                "variable": {
                    "value": "log_qy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_py",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_331": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits_py / temp, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_333": {
                "variable": {
                    "value": "joint_logpz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprob_sample_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_qy.gather(1, idx).view(-1, self.y_size)",
                            "Call"
                        ],
                        [
                            "self.gaussian_logprob(p_mu, self.zero, sample_z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_396": {
                "variable": {
                    "value": "self.z_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.y_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dec_cell_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_447": {
                "variable": {
                    "value": "enc_last",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bs_label, db_label, utt_summary.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_493": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_508": {
                "variable": {
                    "value": "enc_last",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bs_label, db_label, utt_summary.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_512": {
                "variable": {
                    "value": "sample_z",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "p_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "std": {
                    "value": "th.sqrt(th.exp(p_logvar))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_514": {
                "variable": {
                    "value": "joint_logpz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprob_sample_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_qy.gather(1, idx).view(-1, self.y_size)",
                            "Call"
                        ],
                        [
                            "self.gaussian_logprob(p_mu, self.zero, sample_z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_264": {
                "variable": {
                    "value": "z_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_264": {
                "variable": {
                    "value": "z_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.k_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "attn_context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outs",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "enc_outs",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "th.cat(attn_context, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "th.cat(attn_context, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_270": {
                "variable": {
                    "value": "dec_init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outs",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "enc_outs",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "th.cat(attn_context, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "th.cat(attn_context, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_270": {
                "variable": {
                    "value": "dec_init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_296": {
                "variable": {
                    "value": "avg_log_qy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_qy.view(-1, self.config.y_size, self.config.k_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_297": {
                "variable": {
                    "value": "avg_log_qy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.mean(avg_log_qy, dim=0) + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_301": {
                "variable": {
                    "value": "q_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_qy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits_py, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_302": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.bmm(q_y, th.transpose(q_y, 1, 2)) - self.eye",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_306": {
                "variable": {
                    "value": "result[diversity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.pow(th.bmm(q_y, th.transpose(q_y, 1, 2)) - self.eye, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_339": {
                "variable": {
                    "value": "z_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.z_embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_339": {
                "variable": {
                    "value": "z_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.k_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_344": {
                "variable": {
                    "value": "attn_context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outs",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "enc_outs",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "th.cat(attn_context, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "th.cat(attn_context, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_345": {
                "variable": {
                    "value": "dec_init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_outs",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "enc_outs",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "th.cat(attn_context, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "th.cat(attn_context, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_345": {
                "variable": {
                    "value": "dec_init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "self.utt_encoder.output_size + self.db_size + self.bs_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dec_cell_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_203": {
                "input": {
                    "value": "th.ones(1) / config.k_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_204": {
                "n": {
                    "value": "self.config.y_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_204": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_420": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_334": {
                "*size": {
                    "value": "log_qy.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_458": {
                "tensors": {
                    "value": "[enc_last, x_h.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_495": {
                "input": {
                    "value": "mu - sample_z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "[bs_label, db_label, utt_summary.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "[bs_label, db_label, utt_summary.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_203": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_252": {
                "tensors": {
                    "value": "[enc_last, x_h.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_268": {
                "input": {
                    "value": "temp_sample_y[:, z_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "z_embeddings[z_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_268": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_297": {
                "input": {
                    "value": "avg_log_qy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.exp(log_qy.view(-1, self.config.y_size, self.config.k_size))",
                            "Call"
                        ],
                        [
                            "th.log(th.mean(avg_log_qy, dim=0) + 1e-15)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_302": {
                "input": {
                    "value": "q_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.exp(log_qy).view(-1, self.config.y_size, self.config.k_size)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "th.transpose(q_y, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_343": {
                "input": {
                    "value": "temp_sample_y[:, z_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "z_embeddings[z_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_343": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_512": {
                "input": {
                    "value": "th.exp(p_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_302": {
                "input": {
                    "value": "q_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.exp(log_qy).view(-1, self.config.y_size, self.config.k_size)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_512": {
                "input": {
                    "value": "p_logvar",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/latent_dialog/nn_lib.py": {
        "torch": {
            "log_softmax_119": {
                "variable": {
                    "value": "log_qy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_h(inputs)",
                            "Call"
                        ],
                        [
                            "self.p_h(h) + self.p_c(c)",
                            "BinOp"
                        ],
                        [
                            "logits.view(-1, self.k_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_137": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logvar.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_139": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_150": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_171": {
                "variable": {
                    "value": "(_, y_hard)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits + eps",
                            "BinOp"
                        ],
                        [
                            "self.gumbel_softmax_sample(logits, temperature, self.use_gpu)",
                            "Call"
                        ],
                        [
                            "y_onehot",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 * num_layer",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fcc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 * num_layer",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 * num_layer",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.mu_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.logvar_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.mu_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.logvar_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.p_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_size * self.y_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.p_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_size * self.y_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.p_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_size * self.y_size",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_159": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "y.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_151": {
                "input": {
                    "value": "u + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "*size": {
                    "value": "y.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/latent_dialog/utils.py": {
        "torch": {
            "manual_seed_69": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/policy.py": {
        "torch": {
            "cat_715": {
                "variable": {
                    "value": "enc_last",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bs_label, db_label, utt_summary.squeeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_726": {
                "variable": {
                    "value": "z_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.z_embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_726": {
                "variable": {
                    "value": "z_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.model.k_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_734": {
                "variable": {
                    "value": "attn_context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat(attn_context, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_735": {
                "variable": {
                    "value": "dec_init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat(attn_context, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_735": {
                "variable": {
                    "value": "dec_init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_339": {
                "f": {
                    "value": "os.path.join(temp_path, 'larl_model/best-model')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_343": {
                "f": {
                    "value": "os.path.join(temp_path, 'larl_model/best-model')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_384": {
                "ndarray": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_733": {
                "input": {
                    "value": "temp_sample_y[:, z_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "z_embeddings[z_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_733": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/scripts/reinforce_cat.py": {
        "torch": {
            "load_78": {
                "f": {
                    "value": "rl_config.sv_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/scripts/reinforce_gauss.py": {
        "torch": {
            "save_85": {
                "obj": {
                    "value": "sys_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "rl_config.rl_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "rl_config.sv_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/scripts/reinforce_word.py": {
        "torch": {
            "save_86": {
                "obj": {
                    "value": "sys_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "rl_config.rl_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "rl_config.sv_model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/scripts/sl_cat.py": {
        "torch": {
            "load_124": {
                "f": {
                    "value": "os.path.join(saved_path, '{}-model'.format(best_epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/scripts/sl_gauss.py": {
        "torch": {
            "load_125": {
                "f": {
                    "value": "os.path.join(saved_path, '{}-model'.format(best_epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/scripts/sl_word.py": {
        "torch": {
            "manual_seed_69": {
                "seed": {
                    "value": "config.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_117": {
                "f": {
                    "value": "os.path.join(saved_path, '{}-model'.format(best_epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/larl/utils/util.py": {
        "torch": {}
    },
    "convlab/modules/word_policy/multiwoz/mdrg/model/model.py": {
        "torch": {
            "RNN_65": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_98": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_120": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "embedded.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "embedded[sort_idx].transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embedding(input)",
                            "Call"
                        ],
                        [
                            "self.embedding(input).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(embedded, self.dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(input_lens)",
                            "Call"
                        ],
                        [
                            "input_lens[sort_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_122": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "outputs.transpose(0, 1)[unsort_idx].transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden, encoder_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_167": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(cat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_170": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.data.shape[0], 1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.v.repeat(encoder_outputs.size(0), 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.attn(cat))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ],
                        [
                            "self.attn(torch.cat((h_t, encoder_outputs), 2))",
                            "Call"
                        ],
                        [
                            "torch.tanh(energy)",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_185": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_186": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size + self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_199": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_217": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.attn(cat))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ],
                        [
                            "self.attn(torch.cat((h_t, encoder_outputs), 2))",
                            "Call"
                        ],
                        [
                            "torch.tanh(energy)",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_220": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(encoder_outputs.data.shape[0], 1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.v.repeat(encoder_outputs.size(0), 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.attn(cat))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ],
                        [
                            "self.attn(torch.cat((h_t, encoder_outputs), 2))",
                            "Call"
                        ],
                        [
                            "torch.tanh(energy)",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_221": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.attn(cat))",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ],
                        [
                            "self.attn(torch.cat((h_t, encoder_outputs), 2))",
                            "Call"
                        ],
                        [
                            "torch.tanh(energy)",
                            "Call"
                        ],
                        [
                            "energy.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(v, energy)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_224": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(energy, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "encoder_outputs.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_228": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_233": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_243": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_255": {
                "variable": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "embedded.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "embedded[sort_idx].transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.embedding(input)",
                            "Call"
                        ],
                        [
                            "self.embedding(input).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(embedded, self.dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_263": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(output.squeeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_297": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_380": {
                "variable": {
                    "value": "proba",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_tensor.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_509": {
                "variable": {
                    "value": "decoded_words",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.max_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_grad_norm__530": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_69": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(H, encoder_outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_163": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_306": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_333": {
                "variable": {
                    "value": "self.gen_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_354": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_538": {
                "obj": {
                    "value": "self.encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + self.model_name + '-' + str(iter) + '.enc'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_539": {
                "obj": {
                    "value": "self.policy.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + self.model_name + '-' + str(iter) + '.pol'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_540": {
                "obj": {
                    "value": "self.decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_dir + self.model_name + '-' + str(iter) + '.dec'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTM_73": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_145": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_199": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_216": {
                "tensors": {
                    "value": "(h_t, encoder_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adadelta_356": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_551": {
                "f": {
                    "value": "model_file + '.enc'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_552": {
                "f": {
                    "value": "model_file + '.pol'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_553": {
                "f": {
                    "value": "model_file + '.dec'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GRU_77": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_358": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, self.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_458": {
                "variable": {
                    "value": "(log_prob, indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "self.args.beam_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_81": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/mdrg/model/policy.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.W_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size_pol",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.W_bs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bs_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size_pol",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.W_db",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "db_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size_pol",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_26": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_u(hidden[0]) + self.W_db(db_tensor) + self.W_bs(bs_tensor)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(output)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/mdrg/policy.py": {
        "torch": {
            "device_94": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_92": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_485": {
                "variable": {
                    "value": "bs_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bs_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(bs_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if args.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_486": {
                "variable": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(db_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if args.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/mdrg/test.py": {
        "torch": {
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_45": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "bs_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bs_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(bs_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(bs_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if args.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(db_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(db_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if args.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "bs_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bs_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(bs_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(bs_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if args.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(db_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(db_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if args.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/mdrg/train.py": {
        "torch": {
            "device_65": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "bs_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bs_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(bs_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(bs_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if args.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(db_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(db_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if args.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "model.sup_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_97": {
                "variable": {
                    "value": "model.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_98": {
                "variable": {
                    "value": "model.optimizer_policy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda x: x.requires_grad, model.policy.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.l2_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "bs_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bs_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(bs_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(bs_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if args.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(db_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(db_tensor, dtype=torch.float, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if args.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "convlab/modules/word_policy/multiwoz/mdrg/utils/util.py": {
        "torch": {}
    },
    "run.py": {
        "torch": {
            "set_num_threads_95": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}