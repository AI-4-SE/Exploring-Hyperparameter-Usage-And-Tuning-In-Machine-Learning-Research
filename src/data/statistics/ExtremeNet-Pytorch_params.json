{
    "demo.py": {
        "torch": {
            "from_numpy_175": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((1, 3, inp_height, inp_width), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((images, images[:, :, :, ::-1]), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dextr.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu_id) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_30": {
                "variable": {
                    "value": "state_dict_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('cache', 'dextr_pascal-sbd.pth')",
                            "Call"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_dextr.transpose((2, 0, 1))[np.newaxis, ...]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate([inputs, inputs[:, :, :, ::-1]], axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "upsample_67": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.net.forward(inputs)",
                            "Call"
                        ],
                        [
                            "upsample(outputs, size=(512, 512), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "outputs.to(torch.device('cpu'))",
                            "Call"
                        ],
                        [
                            "outputs.data.numpy()",
                            "Call"
                        ],
                        [
                            "(outputs[:1] + outputs[1:, :, :, ::-1]) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_68": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/CornerNet.py": {
        "torch": {
            "Conv2d_13": {
                "variable": {
                    "value": "self.p_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.p_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/ExtremeNet.py": {
        "torch": {
            "Sequential_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/py_utils/_cpools/__init__.py": {
        "torch": {}
    },
    "models/py_utils/_cpools/setup.py": {
        "torch": {}
    },
    "models/py_utils/data_parallel.py": {
        "torch": {
            "gather_116": {
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "parallel_apply(replicas, inputs, module_kwargs, used_device_ids)",
                            "Call"
                        ],
                        [
                            "self.parallel_apply(replicas, inputs, kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "output_device",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "device_ids[0]",
                            "Subscript"
                        ],
                        [
                            "device_ids[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "index": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_83": {
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "parallel_apply(replicas, inputs, module_kwargs, used_device_ids)",
                            "Call"
                        ],
                        [
                            "self.parallel_apply(replicas, inputs, kwargs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/py_utils/exkp.py": {
        "torch": {
            "sigmoid_333": {
                "variable": {
                    "value": "t_heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(t_heat)",
                            "Call"
                        ],
                        [
                            "_h_aggregate(t_heat, aggr_weight=aggr_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_334": {
                "variable": {
                    "value": "l_heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(l_heat)",
                            "Call"
                        ],
                        [
                            "_v_aggregate(l_heat, aggr_weight=aggr_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_335": {
                "variable": {
                    "value": "b_heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(b_heat)",
                            "Call"
                        ],
                        [
                            "_h_aggregate(b_heat, aggr_weight=aggr_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_336": {
                "variable": {
                    "value": "r_heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(r_heat)",
                            "Call"
                        ],
                        [
                            "_v_aggregate(r_heat, aggr_weight=aggr_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_350": {
                "variable": {
                    "value": "ct_heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ct_heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(ct_heat)",
                            "Call"
                        ],
                        [
                            "ct_heat_(cnv)",
                            "Call"
                        ],
                        [
                            "ct_heat_(cnv)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_99": {
                "variable": {
                    "value": "self.kps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[kp_module(n, dims, modules, layer=kp_layer, make_up_layer=make_up_layer, make_low_layer=make_low_layer, make_hg_layer=make_hg_layer, make_hg_layer_revr=make_hg_layer_revr, make_pool_layer=make_pool_layer, make_unpool_layer=make_unpool_layer, make_merge_layer=make_merge_layer) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "variable": {
                    "value": "self.cnvs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_cnv_layer(curr_dim, cnv_dim) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_116": {
                "variable": {
                    "value": "self.t_heats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_heat_layer(cnv_dim, curr_dim, out_dim) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_120": {
                "variable": {
                    "value": "self.l_heats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_heat_layer(cnv_dim, curr_dim, out_dim) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.b_heats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_heat_layer(cnv_dim, curr_dim, out_dim) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "self.r_heats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_heat_layer(cnv_dim, curr_dim, out_dim) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_132": {
                "variable": {
                    "value": "self.ct_heats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_heat_layer(cnv_dim, curr_dim, out_dim) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_145": {
                "variable": {
                    "value": "self.inters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_inter_layer(curr_dim) for _ in range(nstack - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_149": {
                "variable": {
                    "value": "self.inters_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(curr_dim, curr_dim, (1, 1), bias=False), nn.BatchNorm2d(curr_dim)) for _ in range(nstack - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_155": {
                "variable": {
                    "value": "self.cnvs_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(cnv_dim, curr_dim, (1, 1), bias=False), nn.BatchNorm2d(curr_dim)) for _ in range(nstack - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_162": {
                "variable": {
                    "value": "self.t_regrs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_regr_layer(cnv_dim, curr_dim, 2) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_165": {
                "variable": {
                    "value": "self.l_regrs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_regr_layer(cnv_dim, curr_dim, 2) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_168": {
                "variable": {
                    "value": "self.b_regrs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_regr_layer(cnv_dim, curr_dim, 2) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_171": {
                "variable": {
                    "value": "self.r_regrs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_regr_layer(cnv_dim, curr_dim, 2) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "convolution(7, 3, 128, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "nn.Conv2d(curr_dim, curr_dim, (1, 1), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "*args": {
                    "value": "nn.Conv2d(cnv_dim, curr_dim, (1, 1), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "dims[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "dims[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_152": {
                "num_features": {
                    "value": "curr_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "dims[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "cnv_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "dims[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_158": {
                "num_features": {
                    "value": "curr_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "dims[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/py_utils/kp.py": {
        "torch": {
            "ModuleList_97": {
                "variable": {
                    "value": "self.kps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[kp_module(n, dims, modules, layer=kp_layer, make_up_layer=make_up_layer, make_low_layer=make_low_layer, make_hg_layer=make_hg_layer, make_hg_layer_revr=make_hg_layer_revr, make_pool_layer=make_pool_layer, make_unpool_layer=make_unpool_layer, make_merge_layer=make_merge_layer) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_109": {
                "variable": {
                    "value": "self.cnvs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_cnv_layer(curr_dim, cnv_dim) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.tl_cnvs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_tl_layer(cnv_dim) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_116": {
                "variable": {
                    "value": "self.br_cnvs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_br_layer(cnv_dim) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.tl_heats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_heat_layer(cnv_dim, curr_dim, out_dim) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.br_heats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_heat_layer(cnv_dim, curr_dim, out_dim) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.tl_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_tag_layer(cnv_dim, curr_dim, 1) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_132": {
                "variable": {
                    "value": "self.br_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_tag_layer(cnv_dim, curr_dim, 1) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_140": {
                "variable": {
                    "value": "self.inters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_inter_layer(curr_dim) for _ in range(nstack - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_144": {
                "variable": {
                    "value": "self.inters_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(curr_dim, curr_dim, (1, 1), bias=False), nn.BatchNorm2d(curr_dim)) for _ in range(nstack - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_150": {
                "variable": {
                    "value": "self.cnvs_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(cnv_dim, curr_dim, (1, 1), bias=False), nn.BatchNorm2d(curr_dim)) for _ in range(nstack - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_157": {
                "variable": {
                    "value": "self.tl_regrs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_regr_layer(cnv_dim, curr_dim, 2) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_160": {
                "variable": {
                    "value": "self.br_regrs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[make_regr_layer(cnv_dim, curr_dim, 2) for _ in range(nstack)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_164": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "convolution(7, 3, 128, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "*args": {
                    "value": "nn.Conv2d(curr_dim, curr_dim, (1, 1), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "*args": {
                    "value": "nn.Conv2d(cnv_dim, curr_dim, (1, 1), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "dims[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "dims[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_147": {
                "num_features": {
                    "value": "curr_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "dims[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "cnv_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "curr_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "dims[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_153": {
                "num_features": {
                    "value": "curr_dim",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "dims[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/py_utils/kp_utils.py": {
        "torch": {
            "max_pool2d_50": {
                "variable": {
                    "value": "hmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "heat.reshape(-1, heat.shape[3])",
                            "Call"
                        ],
                        [
                            "heat.reshape(-1, heat.shape[3])",
                            "Call"
                        ],
                        [
                            "heat.transpose(3, 2)",
                            "Call"
                        ],
                        [
                            "heat.reshape(-1, heat.shape[3])",
                            "Call"
                        ],
                        [
                            "heat.transpose(3, 2)",
                            "Call"
                        ],
                        [
                            "heat.reshape(-1, heat.shape[3])",
                            "Call"
                        ],
                        [
                            "nn.functional.conv2d(heat, kernel.cuda(), padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kernel, kernel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(kernel - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_137": {
                "variable": {
                    "value": "heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "heat.reshape(-1, heat.shape[3])",
                            "Call"
                        ],
                        [
                            "heat.reshape(-1, heat.shape[3])",
                            "Call"
                        ],
                        [
                            "heat.transpose(3, 2)",
                            "Call"
                        ],
                        [
                            "heat.reshape(-1, heat.shape[3])",
                            "Call"
                        ],
                        [
                            "heat.transpose(3, 2)",
                            "Call"
                        ],
                        [
                            "heat.reshape(-1, heat.shape[3])",
                            "Call"
                        ],
                        [
                            "nn.functional.conv2d(heat, kernel.cuda(), padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(1, 0)",
                            "Tuple"
                        ],
                        [
                            "(0, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "topk_144": {
                "variable": {
                    "value": "(topk_scores, topk_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(batch, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "K",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_159": {
                "variable": {
                    "value": "tl_heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tl_heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(tl_heat)",
                            "Call"
                        ],
                        [
                            "_nms(tl_heat, kernel=kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_160": {
                "variable": {
                    "value": "br_heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "br_heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(br_heat)",
                            "Call"
                        ],
                        [
                            "_nms(br_heat, kernel=kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_186": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tl_xs, tl_ys, br_xs, br_ys)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_192": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tl_tag - br_tag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_216": {
                "variable": {
                    "value": "(scores, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(tl_scores + br_scores) / 2",
                            "BinOp"
                        ],
                        [
                            "scores.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "(t_scores + l_scores + b_scores + r_scores + 2 * ct_scores) / 6",
                            "BinOp"
                        ],
                        [
                            "scores - sc_inds.float()",
                            "BinOp"
                        ],
                        [
                            "scores - cls_inds.float()",
                            "BinOp"
                        ],
                        [
                            "scores - top_inds.float()",
                            "BinOp"
                        ],
                        [
                            "scores - left_inds.float()",
                            "BinOp"
                        ],
                        [
                            "scores - bottom_inds.float()",
                            "BinOp"
                        ],
                        [
                            "scores - right_inds.float()",
                            "BinOp"
                        ],
                        [
                            "scores.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "num_dets",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_230": {
                "variable": {
                    "value": "detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes, scores, tl_scores, br_scores, clses]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_249": {
                "variable": {
                    "value": "t_heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(t_heat)",
                            "Call"
                        ],
                        [
                            "_h_aggregate(t_heat, aggr_weight=aggr_weight)",
                            "Call"
                        ],
                        [
                            "_nms(t_heat, kernel=kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_250": {
                "variable": {
                    "value": "l_heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(l_heat)",
                            "Call"
                        ],
                        [
                            "_v_aggregate(l_heat, aggr_weight=aggr_weight)",
                            "Call"
                        ],
                        [
                            "_nms(l_heat, kernel=kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_251": {
                "variable": {
                    "value": "b_heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(b_heat)",
                            "Call"
                        ],
                        [
                            "_h_aggregate(b_heat, aggr_weight=aggr_weight)",
                            "Call"
                        ],
                        [
                            "_nms(b_heat, kernel=kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_252": {
                "variable": {
                    "value": "r_heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(r_heat)",
                            "Call"
                        ],
                        [
                            "_v_aggregate(r_heat, aggr_weight=aggr_weight)",
                            "Call"
                        ],
                        [
                            "_nms(r_heat, kernel=kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_253": {
                "variable": {
                    "value": "ct_heat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ct_heat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(ct_heat)",
                            "Call"
                        ],
                        [
                            "ct_heat.view(batch, -1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_341": {
                "variable": {
                    "value": "(scores, inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(tl_scores + br_scores) / 2",
                            "BinOp"
                        ],
                        [
                            "scores.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "(t_scores + l_scores + b_scores + r_scores + 2 * ct_scores) / 6",
                            "BinOp"
                        ],
                        [
                            "scores - sc_inds.float()",
                            "BinOp"
                        ],
                        [
                            "scores - cls_inds.float()",
                            "BinOp"
                        ],
                        [
                            "scores - top_inds.float()",
                            "BinOp"
                        ],
                        [
                            "scores - left_inds.float()",
                            "BinOp"
                        ],
                        [
                            "scores - bottom_inds.float()",
                            "BinOp"
                        ],
                        [
                            "scores - right_inds.float()",
                            "BinOp"
                        ],
                        [
                            "scores.view(batch, -1)",
                            "Call"
                        ],
                        [
                            "scores.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "num_dets",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_373": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_xs, t_ys, r_xs, b_ys)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "detections",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bboxes, scores, t_xs, t_ys, l_xs, l_ys, b_xs, b_ys, r_xs, r_ys, clses]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_432": {
                "variable": {
                    "value": "neg_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - gt[neg_inds]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_454": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.sigmoid_()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_476": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tag_mean.unsqueeze(1) - tag_mean.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "1 - torch.abs(dist)",
                            "BinOp"
                        ],
                        [
                            "nn.functional.relu(dist, inplace=True)",
                            "Call"
                        ],
                        [
                            "dist - 1 / (num + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "dist / (num2 + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "dist[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_503": {
                "variable": {
                    "value": "regr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "regr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "regr[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_regr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gt_regr[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_20": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_23": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "*args": {
                    "value": "convolution(3, cnv_dim, curr_dim, with_bn=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_channels, num_channels, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "curr_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_channels, num_channels, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_464": {
                "input": {
                    "value": "tag0 - tag_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_466": {
                "input": {
                    "value": "tag1 - tag_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_475": {
                "input": {
                    "value": "dist",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tag_mean.unsqueeze(1) - tag_mean.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "1 - torch.abs(dist)",
                            "BinOp"
                        ],
                        [
                            "nn.functional.relu(dist, inplace=True)",
                            "Call"
                        ],
                        [
                            "dist - 1 / (num + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "dist / (num2 + 0.0001)",
                            "BinOp"
                        ],
                        [
                            "dist[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_439": {
                "input": {
                    "value": "pos_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred[pos_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_439": {
                "input": {
                    "value": "1 - pos_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_440": {
                "input": {
                    "value": "1 - neg_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_440": {
                "input": {
                    "value": "neg_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred[neg_inds]",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/py_utils/scatter_gather.py": {
        "torch": {
            "is_tensor_16": {
                "obj": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/py_utils/utils.py": {
        "torch": {
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inp_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(k, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "not with_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inp_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inp_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "nn.Conv2d(inp_dim, out_dim, (1, 1), stride=(stride, stride), bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "inp_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "nnet/py_factory.py": {
        "torch": {
            "manual_seed_9": {
                "seed": {
                    "value": "317",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_59": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "system_configs.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_124": {
                "obj": {
                    "value": "params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "self.model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "sample/coco.py": {
        "torch": {
            "from_numpy_167": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, 3, input_size[0], input_size[1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "tl_heatmaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tl_heatmaps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, categories, output_size[0], output_size[1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tl_heatmaps)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "br_heatmaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "br_heatmaps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, categories, output_size[0], output_size[1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(br_heatmaps)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_170": {
                "variable": {
                    "value": "tl_regrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tl_regrs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len, 2), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tl_regrs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_171": {
                "variable": {
                    "value": "br_regrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "br_regrs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len, 2), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(br_regrs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "tl_tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tl_tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tl_tags)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "br_tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "br_tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(br_tags)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "tag_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tag_masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tag_masks)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sample/coco_extreme.py": {
        "torch": {
            "from_numpy_223": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, 3, input_size[0], input_size[1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_224": {
                "variable": {
                    "value": "t_heatmaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_heatmaps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, categories, output_size[0], output_size[1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(t_heatmaps)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "l_heatmaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "l_heatmaps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, categories, output_size[0], output_size[1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(l_heatmaps)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_226": {
                "variable": {
                    "value": "b_heatmaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "b_heatmaps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, categories, output_size[0], output_size[1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(b_heatmaps)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_227": {
                "variable": {
                    "value": "r_heatmaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "r_heatmaps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, categories, output_size[0], output_size[1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(r_heatmaps)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_228": {
                "variable": {
                    "value": "ct_heatmaps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ct_heatmaps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, categories, output_size[0], output_size[1]), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ct_heatmaps)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_229": {
                "variable": {
                    "value": "t_regrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_regrs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len, 2), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(t_regrs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_230": {
                "variable": {
                    "value": "l_regrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "l_regrs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len, 2), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(l_regrs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_231": {
                "variable": {
                    "value": "b_regrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "b_regrs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len, 2), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(b_regrs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_232": {
                "variable": {
                    "value": "r_regrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "r_regrs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len, 2), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(r_regrs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_233": {
                "variable": {
                    "value": "t_tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "t_tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(t_tags)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_234": {
                "variable": {
                    "value": "l_tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "l_tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(l_tags)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_235": {
                "variable": {
                    "value": "b_tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "b_tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(b_tags)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "r_tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "r_tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(r_tags)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_237": {
                "variable": {
                    "value": "ct_tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ct_tags",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ct_tags)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_238": {
                "variable": {
                    "value": "tag_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tag_masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, max_tag_len), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tag_masks)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test.py": {
        "torch": {}
    },
    "test/coco.py": {
        "torch": {
            "from_numpy_110": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((1, 3, inp_height, inp_width), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((images, images[:, :, :, ::-1]), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/coco_extreme.py": {
        "torch": {
            "from_numpy_129": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((1, 3, inp_height, inp_width), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((images, images[:, :, :, ::-1]), axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(images)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {}
    }
}