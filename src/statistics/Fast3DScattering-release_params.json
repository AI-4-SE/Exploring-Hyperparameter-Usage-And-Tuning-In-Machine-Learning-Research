{
    "dnn/module.py": {
        "tensorflow": {
            "matching_files_27": {
                "variable": {
                    "value": "files",
                    "type": "Name",
                    "possible_values": []
                },
                "pattern": {
                    "value": "file_pattern",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.handle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matching_files_50": {
                "variable": {
                    "value": "files",
                    "type": "Name",
                    "possible_values": []
                },
                "pattern": {
                    "value": "file_pattern",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.valid_handle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_78": {
                "variable": {
                    "value": "self.config.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.config.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_80": {
                "variable": {
                    "value": "input_image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "pc_feat1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pc_feat1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_util.max_pool2d(points_feat1, [num_point, 1], padding='VALID', scope='maxpool1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(pc_feat1, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_106": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "predict - target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "predict - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_108": {
                "variable": {
                    "value": "loss_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(predict - target, predict - target)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "variable": {
                    "value": "loss_cat",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(predict - target, predict - target)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_30": {
                "x": {
                    "value": "tf.shape(files)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_53": {
                "x": {
                    "value": "tf.shape(files)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "input_tensor": {
                    "value": "loss_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(loss, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_111": {
                "input_tensor": {
                    "value": "self.l2_weights * self.l2_weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_30": {
                "input": {
                    "value": "files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matching_files(file_pattern)",
                            "Call"
                        ],
                        [
                            "tf.matching_files(file_pattern)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_53": {
                "input": {
                    "value": "files",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matching_files(file_pattern)",
                            "Call"
                        ],
                        [
                            "tf.matching_files(file_pattern)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dnn/test_meshio.py": {
        "tensorflow": {
            "TFRecordDataset_4": {
                "variable": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "filenames": {
                    "value": "/home/zhy/Codes/Fast3DScattering/data/test/0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dnn/tf_util.py": {
        "tensorflow": {
            "get_variable_21": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float16 if use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_44": {
                "variable": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_47": {
                "variable": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_94": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ],
                        [
                            "[2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_99": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_156": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_161": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_235": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[batch_size, out_height, out_width, num_output_channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_240": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_296": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_301": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_337": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[num_input_units, num_outputs], use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_340": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_368": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_393": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool3d_419": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool3d_444": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_470": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[num_channels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_472": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[num_channels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_474": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "axes": {
                    "value": "moments_dims",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_476": {
                "variable": {
                    "value": "ema",
                    "type": "Name",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bn_decay if bn_decay is not None else 0.9",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cond_478": {
                "variable": {
                    "value": "ema_apply_op",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : ema.apply([batch_mean, batch_var])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.no_op()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_488": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "mean_var_with_update",
                    "type": "Name",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (ema.average(batch_mean), ema.average(batch_var))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_normalization_491": {
                "variable": {
                    "value": "normed",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.0, shape=[num_channels]), name='beta', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1.0, shape=[num_channels]), name='gamma', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_572": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(inputs, keep_prob, noise_shape)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_19": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_to_collection_48": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_285": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_330": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_390": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_416": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_441": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_468": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_571": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "l2_loss_47": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_98": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_160": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_239": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_300": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_339": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_470": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_472": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_op_480": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_484": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_573": {
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_485": {
                "input": {
                    "value": "batch_var",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "dnn/train.py": {
        "tensorflow": {
            "placeholder_21": {
                "variable": {
                    "value": "obj_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, point_num, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "coef_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, coef_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "is_training_ph",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_140": {
                "variable": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_165": {
                "variable": {
                    "value": "lr_op",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_166": {
                "variable": {
                    "value": "batch_op",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_number",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_167": {
                "variable": {
                    "value": "bn_decay_op",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "bn_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_bn_decay(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_195": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "module_config.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_197": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_202": {
                "variable": {
                    "value": "merged",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_gpu_available_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_180": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "scalar_181": {
                "name": {
                    "value": "log loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.math.log(loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_205": {
                "variable": {
                    "value": "train_writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(args.ckpt_dir, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_209": {
                "variable": {
                    "value": "valid_writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(args.ckpt_dir, 'valid')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_142": {
                "x": {
                    "value": "tf.train.exponential_decay(args.learning_rate, _batch * args.batch_size, module_config.decay_step, module_config.decay_rate, staircase=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "module_config.learning_rate_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_154": {
                "x": {
                    "value": "module_config.bn_decay_clip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - tf.train.exponential_decay(module_config.bn_init_decay, _batch * args.batch_size, module_config.bn_decay_step, module_config.bn_decay_rate, staircase=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_181": {
                "x": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "scalar_183": {
                "name": {
                    "value": "'coef_%d' % idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_cat[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AdamOptimizer_191": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_learning_rate(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_204": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Summary_278": {
                "variable": {
                    "value": "summary",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='epoch_loss', simple_value=epoch_loss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_333": {
                "variable": {
                    "value": "summary",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='epoch_loss', simple_value=epoch_loss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exponential_decay_143": {
                "learning_rate": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "_batch * args.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "module_config.decay_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "module_config.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exponential_decay_156": {
                "learning_rate": {
                    "value": "module_config.bn_init_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "_batch * args.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "module_config.bn_decay_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "module_config.bn_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dnn/util.py": {
        "tensorflow": {
            "parse_single_example_41": {
                "variable": {
                    "value": "proto_value",
                    "type": "Name",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_description",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'obj': tf.io.FixedLenFeature([obj_num * 3], tf.float32), 'coef125': tf.io.FixedLenFeature([coef_num], tf.float32), 'coef250': tf.io.FixedLenFeature([coef_num], tf.float32), 'coef500': tf.io.FixedLenFeature([coef_num], tf.float32), 'coef1000': tf.io.FixedLenFeature([coef_num], tf.float32)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "obj",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "proto_value['obj']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(obj, (obj_num, 3))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(obj_num, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "FixedLenFeature_35": {
                "shape": {
                    "value": "[obj_num * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_36": {
                "shape": {
                    "value": "[coef_num]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_37": {
                "shape": {
                    "value": "[coef_num]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_38": {
                "shape": {
                    "value": "[coef_num]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_39": {
                "shape": {
                    "value": "[coef_num]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}