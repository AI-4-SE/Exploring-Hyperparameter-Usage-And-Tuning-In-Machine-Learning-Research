{
    "fastonn/utils/utils.py": {
        "sklearn": {
            "StratifiedKFold_352": {
                "variable": {
                    "value": "kf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "num_folds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(1 / min(train_rate, val_rate))",
                            "Call"
                        ]
                    ]
                }
            },
            "KFold_356": {
                "variable": {
                    "value": "kf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "num_folds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(1 / min(train_rate, val_rate))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_172": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "xx[ii].data.flatten()",
                            "Call"
                        ],
                        [
                            "x.mul(factor[:, None, None, None])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float().sub_(127.5).div_(127.5).view(1, 60, 60)",
                            "Call"
                        ],
                        [
                            "transforms.ToTensor()(x)",
                            "Call"
                        ],
                        [
                            "transforms.Grayscale()(x)",
                            "Call"
                        ],
                        [
                            "transforms.Normalize([n[0] for _ in range(x.shape[0])], [n[1] for _ in range(x.shape[0])], inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [p for _ in range(4)])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_247": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(target[i].data - output[i].data).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "var_255": {
                "variable": {
                    "value": "denom",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[i].data - target[i].data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "var_256": {
                "variable": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.data[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_264": {
                "variable": {
                    "value": "mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(target[i].data - output[i].data).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_331": {
                "input": {
                    "value": "(input - target).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_30": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_200": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "xx[ii].data.flatten()",
                            "Call"
                        ],
                        [
                            "x.mul(factor[:, None, None, None])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float().sub_(127.5).div_(127.5).view(1, 60, 60)",
                            "Call"
                        ],
                        [
                            "transforms.ToTensor()(x)",
                            "Call"
                        ],
                        [
                            "transforms.Grayscale()(x)",
                            "Call"
                        ],
                        [
                            "transforms.Normalize([n[0] for _ in range(x.shape[0])], [n[1] for _ in range(x.shape[0])], inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [p for _ in range(4)])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[p for _ in range(4)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "xx[ii].data.flatten()",
                            "Call"
                        ],
                        [
                            "x.mul(factor[:, None, None, None])",
                            "Call"
                        ],
                        [
                            "torch.tensor(x).float().sub_(127.5).div_(127.5).view(1, 60, 60)",
                            "Call"
                        ],
                        [
                            "transforms.ToTensor()(x)",
                            "Call"
                        ],
                        [
                            "transforms.Grayscale()(x)",
                            "Call"
                        ],
                        [
                            "transforms.Normalize([n[0] for _ in range(x.shape[0])], [n[1] for _ in range(x.shape[0])], inplace=True)(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [p for _ in range(4)])",
                            "Call"
                        ]
                    ]
                }
            },
            "log10_248": {
                "input": {
                    "value": "torch.var(target.data[i], unbiased=False) / mse",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log10_257": {
                "input": {
                    "value": "num / denom",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log10_265": {
                "input": {
                    "value": "4.0 / mse",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "var_248": {
                "input": {
                    "value": "target.data[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_38": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_301": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output >= thresh",
                            "Compare"
                        ],
                        [
                            "output.flatten(1)",
                            "Call"
                        ],
                        [
                            "output.view(output.shape[0], output.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "(target == torch.argmax(output, dim=1)).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_40": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fastonn/OpBlock.py": {
        "torch": {
            "Parameter_26": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels, kernel_size * kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "fastonn/SelfONN.py": {
        "torch": {
            "eye_30": {
                "variable": {
                    "value": "aff_mtx",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_36": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "aff_mtx[..., :2, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(x, grid, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "randomshift(x, self.shifts, self.learnable, self.max_shift, self.rounded_shifts)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weights, bias=self.bias, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=0, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "cat([x ** (i + 1) for i in range(self.q)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, self.dropout, self.training, False)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=_pair(0), dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(orig_x, self.weights[:, :self.in_channels, :, :], bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "x + self.bias[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.affine_grid(aff_mtx[..., :2, :3], x.size(), align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(self.out_channels, self.q * self.in_channels, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x ** i for i in range(1, self.q + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_124": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(x, grid, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "randomshift(x, self.shifts, self.learnable, self.max_shift, self.rounded_shifts)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weights, bias=self.bias, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=0, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "cat([x ** (i + 1) for i in range(self.q)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, self.dropout, self.training, False)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=_pair(0), dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(orig_x, self.weights[:, :self.in_channels, :, :], bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "x + self.bias[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_199": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(out_channels, q * in_channels // groups, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x ** i for i in range(1, self.q + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x ** (i + 1) for i in range(self.q)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_349": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weights[:, :self.in_channels, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_19": {
                "input": {
                    "value": "shifts",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "-max_shift",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "max_shift",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.shifts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(self.in_channels, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_202": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_278": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(x, grid, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "randomshift(x, self.shifts, self.learnable, self.max_shift, self.rounded_shifts)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weights, bias=self.bias, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=0, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "cat([x ** (i + 1) for i in range(self.q)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, self.dropout, self.training, False)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=_pair(0), dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(orig_x, self.weights[:, :self.in_channels, :, :], bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "x + self.bias[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "self._reversed_padding_repeated_twice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_279": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(x, grid, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "randomshift(x, self.shifts, self.learnable, self.max_shift, self.rounded_shifts)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weights, bias=self.bias, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=0, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "cat([x ** (i + 1) for i in range(self.q)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, self.dropout, self.training, False)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=_pair(0), dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(orig_x, self.weights[:, :self.in_channels, :, :], bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "x + self.bias[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_287": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(x, grid, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "randomshift(x, self.shifts, self.learnable, self.max_shift, self.rounded_shifts)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weights, bias=self.bias, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=0, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "cat([x ** (i + 1) for i in range(self.q)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, self.dropout, self.training, False)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=_pair(0), dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(orig_x, self.weights[:, :self.in_channels, :, :], bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "x + self.bias[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout2d_327": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(x, grid, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "randomshift(x, self.shifts, self.learnable, self.max_shift, self.rounded_shifts)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weights, bias=self.bias, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=0, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "cat([x ** (i + 1) for i in range(self.q)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, self.dropout, self.training, False)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=_pair(0), dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(orig_x, self.weights[:, :self.in_channels, :, :], bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "x + self.bias[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_329": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(x, grid, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "randomshift(x, self.shifts, self.learnable, self.max_shift, self.rounded_shifts)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weights, bias=self.bias, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=0, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "cat([x ** (i + 1) for i in range(self.q)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, self.dropout, self.training, False)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=_pair(0), dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(orig_x, self.weights[:, :self.in_channels, :, :], bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "x + self.bias[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "self._reversed_padding_repeated_twice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_330": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(x, grid, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "randomshift(x, self.shifts, self.learnable, self.max_shift, self.rounded_shifts)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weights, bias=self.bias, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=0, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "cat([x ** (i + 1) for i in range(self.q)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, self.dropout, self.training, False)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=_pair(0), dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(orig_x, self.weights[:, :self.in_channels, :, :], bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "x + self.bias[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_338": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(x, grid, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "randomshift(x, self.shifts, self.learnable, self.max_shift, self.rounded_shifts)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weights, bias=self.bias, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=0, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "cat([x ** (i + 1) for i in range(self.q)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, self.dropout, self.training, False)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=_pair(0), dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(orig_x, self.weights[:, :self.in_channels, :, :], bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "x + self.bias[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_23": {
                "input": {
                    "value": "shifts",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout2d_88": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout2d_359": {
                "variable": {
                    "value": "x_to_power_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.grid_sample(x, grid, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "randomshift(x, self.shifts, self.learnable, self.max_shift, self.rounded_shifts)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weights, bias=self.bias, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "cat([x ** i for i in range(1, self.q + 1)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=0, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv1d(x, weight=self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "cat([x ** (i + 1) for i in range(self.q)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout2d(x, self.dropout, self.training, False)",
                            "Call"
                        ],
                        [
                            "F.pad(x, self._reversed_padding_repeated_twice, mode=self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=_pair(0), dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, bias=self.bias, stride=self.stride, padding=self.padding, dilation=self.dilation, groups=self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(orig_x, self.weights[:, :self.in_channels, :, :], bias=None, stride=self.stride, padding=self.padding, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "x + self.bias[None, :, None, None]",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_360": {
                "input": {
                    "value": "x_to_power_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "orig_x ** (q + 1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout2d(x, self.dropout, self.training, False)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight[:, q * inchannels_per_group:(q + 1) * inchannels_per_group, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fastonn/osl.py": {
        "torch": {
            "isnan_84": {
                "variable": {
                    "value": "idx_now",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "K_SINC1 * torch.sin(K_SINC * mul(y, w)) / y",
                            "BinOp"
                        ],
                        [
                            "K_SINC1 * torch.sin(K_SINC * mul(y, w)) / mul(y, torch.ones_like(w))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_12": {
                "input": {
                    "value": "K_SIN * mul(x, w)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sinh_16": {
                "input": {
                    "value": "K_SINH * mul(x, w)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_41": {
                "variable": {
                    "value": "idx_now",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "K_SINC1 * torch.sin(K_SINC * mul(y, w)) / y",
                            "BinOp"
                        ],
                        [
                            "K_SINC1 * torch.sin(K_SINC * mul(y, w)) / mul(y, torch.ones_like(w))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_57": {
                "input": {
                    "value": "grad_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_output * coef * torch.cos(K_SINC * mul(x, w))",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.sum(grad_w, dim=-1), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_62": {
                "variable": {
                    "value": "temp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_SINC * mul(x, w)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_89": {
                "input": {
                    "value": "K_CHIRP * mul(x.pow(2), w)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mul(x, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_104": {
                "input": {
                    "value": "x - b[None, :, None, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_111": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - b[None, :, None, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_122": {
                "input": {
                    "value": "(x - b[None, :, None, None]) / CUT",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_124": {
                "input": {
                    "value": "x - b[None, :, None, None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_14": {
                "input": {
                    "value": "mul(x, w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_26": {
                "input": {
                    "value": "AA + BB * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_21": {
                "input": {
                    "value": "K_SINC * (x + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_56": {
                "input": {
                    "value": "K_SINC * mul(x, w)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_83": {
                "input": {
                    "value": "K_SINC * mul(y, w)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "median_97": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mul(x, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_100": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mul(x, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_40": {
                "input": {
                    "value": "K_SINC * mul(y, w)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_40": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_63": {
                "input": {
                    "value": "K_SINC * mul(x, w)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_65": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "grad_x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "K_SINC1 * temp1 * temp2 / mul(x, torch.ones_like(w))",
                            "BinOp"
                        ],
                        [
                            "grad_x.squeeze(2)",
                            "Call"
                        ],
                        [
                            "grad_output * grad_x",
                            "BinOp"
                        ],
                        [
                            "grad_output * (1 - result.pow(2))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "fastonn/trainer.py": {
        "torch": {
            "zeros_74": {
                "variable": {
                    "value": "self.stats[train][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_runs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_epochs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "len(self.dl['train'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "{'last_known_state': self.get_model_state(include_model=include_model), 'best_states': self.best_states, 'best_metrics': self.best_metrics, 'metrics': self.metrics}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_name + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "self.stats[val][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_runs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_epochs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "len(self.dl['val'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "self.stats[test][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_runs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(self.dl['test'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "log[mode + _ + key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.stats[mode][key][idx[0]][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_132": {
                "variable": {
                    "value": "log[mode + _ + key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.stats[mode][key][idx[0]][idx[1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_92": {
                "input": {
                    "value": "self.stats[mode][key][r][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_95": {
                "input": {
                    "value": "self.stats[mode][key][r][e]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_174": {
                "input": {
                    "value": "self.stats[mode][key_item[0]][r][:e]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_230": {
                "input": {
                    "value": "self.stats['train']['loss'][r][e]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "fastonn/utils/adam.py": {
        "torch": {
            "zeros_like_77": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_173": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_175": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_82": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_100": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "fastonn/utils/cgd.py": {
        "torch": {
            "max_6": {
                "variable": {
                    "value": "maxx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs(x.data)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/fastonn_test.py": {
        "torch": {
            "randn_42": {
                "variable": {
                    "value": "inputt",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "SelfONNLayer(1, 16, 21, padding=0, q=3)",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "train_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[(torch.randn(in_channels, in_size, in_size), torch.randn(out_size[1], out_size[2], out_size[3])) for _ in range(train_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "val_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[(torch.randn(in_channels, in_size, in_size), torch.randn(out_size[1], out_size[2], out_size[3])) for _ in range(val_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "test_dl",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[(torch.randn(in_channels, in_size, in_size), torch.randn(out_size[1], out_size[2], out_size[3])) for _ in range(test_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_53": {
                "input": {
                    "value": "(output.cpu().flatten().data * 1000).round() == torch.tensor([153.0, -459.0, -108.0, -569.0])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_64": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randint(1, 6)",
                            "Call"
                        ],
                        [
                            "model.in_channels",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "in_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_65": {
                "*size": {
                    "value": "out_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "out_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_size[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_66": {
                "*size": {
                    "value": "out_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "out_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_size[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_67": {
                "*size": {
                    "value": "out_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "out_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_size[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tanh_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "[153.0, -459.0, -108.0, -569.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}