{
    "alig/test.py": {
        "tensorflow": {
            "get_collection_55": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, w1.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, w2.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_45": {
                "variable": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, tf.Variable(w1, name='W1'))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.Variable(b1, name='B1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(X, tf.Variable(w1, name='W1')), tf.Variable(b1, name='B1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(O)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(O, tf.Variable(w2, name='W2')), tf.Variable(b2, name='B2'))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=O, labels=Y))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_47": {
                "variable": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(O, tf.Variable(w2, name='W2'))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.Variable(b2, name='B2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=O, labels=Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_45": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float64', [None, w1.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.Variable(w1, name='W1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "initial_value": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1.weight.data.t().numpy()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "W1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "a": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(X, tf.Variable(w1, name='W1')), tf.Variable(b1, name='B1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(O)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(O, tf.Variable(w2, name='W2')), tf.Variable(b2, name='B2'))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=O, labels=Y))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.Variable(w2, name='W2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "initial_value": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear2.weight.data.t().numpy()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "W2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_48": {
                "logits": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(X, tf.Variable(w1, name='W1')), tf.Variable(b1, name='B1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(O)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(O, tf.Variable(w2, name='W2')), tf.Variable(b2, name='B2'))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=O, labels=Y))",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float64', [None, w2.shape[1]])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "w1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w1.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "w2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w2.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_16": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_dtype_63": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_dtype_86": {
                "d": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_20": {
                "ndarray": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1.weight.data.t().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear1.bias.data.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear2.weight.data.t().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear2.bias.data.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_88": {
                "ndarray": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alig/tf/__init__.py": {
        "tensorflow": {}
    },
    "alig/tf/alig_tf1.py": {
        "tensorflow": {
            "clip_by_value_30": {
                "variable": {
                    "value": "optimizer._learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "optimizer._learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "optimizer._max_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_27": {
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "alig/tf/alig_tf2.py": {
        "tensorflow": {
            "cond_30": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "max_lr > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.clip_by_value(learning_rate, clip_value_min=0, clip_value_max=max_lr)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : learning_rate",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "clip_by_value_32": {
                "t": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss / (grad_sqrd_norm + self._get_hyper('eps'))",
                            "BinOp"
                        ],
                        [
                            "tf.cond(max_lr > 0.0, lambda : tf.clip_by_value(learning_rate, clip_value_min=0, clip_value_max=max_lr), lambda : learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_hyper('max_lr')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_25": {
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "alig/th/adamw.py": {
        "torch": {
            "zeros_like_83": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_88": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_102": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "alig/th/alig.py": {
        "torch": {
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_49": {
                "variable": {
                    "value": "self.state[p][momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "alig/th/projection.py": {
        "torch": {
            "sqrt_8": {
                "variable": {
                    "value": "total_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sum((p.norm() ** 2 for p in parameters))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alig/th/yogi.py": {
        "torch": {
            "sign_85": {
                "variable": {
                    "value": "sign_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_avg_sq - grad_sqrd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_70": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/cuda.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/data/loaders.py": {
        "torch": {
            "DataLoader_43": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(dataset_train, train_indices)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=root, train=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "dataset(root=root, train=True, download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "dataset(root=root, split='train', download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "data.ConcatDataset((dataset_train_reduced, dataset(root=root, split='extra', transform=transform_train, download=True)))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(traindir, transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(dataset_val, val_indices)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=root, train=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "dataset(root=root, train=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "dataset(root=root, split='train', transform=transform_test)",
                            "Call"
                        ],
                        [
                            "Subset(dataset(root=root, split='train', transform=transform_test), val_indices)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(valdir, transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(dataset_test, test_indices)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=root, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "dataset(root=root, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "dataset(root=root, split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(testdir, transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConcatDataset_170": {
                "variable": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "(dataset_train_reduced, dataset(root=root, split='extra', transform=transform_train, download=True))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/data/utils.py": {
        "torch": {
            "is_tensor_25": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_27": {
                "tensors": {
                    "value": "[x[0] for x in res]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/epoch.py": {
        "torch": {
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_42": {
                "input": {
                    "value": "sum((p.norm() ** 2 for p in model.parameters()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/loss.py": {
        "torch": {
            "clamp_69": {
                "variable": {
                    "value": "safe_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_sorted_last - fy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_70": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 + torch.sum(safe_z.exp() * J, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_14": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "safe_z.exp() * J",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/models/__init__.py": {
        "torch": {
            "DataParallel_41": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DenseNet3(args.depth, args.n_classes, args.growth, bottleneck=bool(args.bottleneck), dropRate=args.dropout)",
                            "Call"
                        ],
                        [
                            "WideResNet(args.depth, args.n_classes, args.width, dropRate=args.dropout)",
                            "Call"
                        ],
                        [
                            "th_models.__dict__[args.model](pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_18": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DenseNet3(args.depth, args.n_classes, args.growth, bottleneck=bool(args.bottleneck), dropRate=args.dropout)",
                            "Call"
                        ],
                        [
                            "WideResNet(args.depth, args.n_classes, args.width, dropRate=args.dropout)",
                            "Call"
                        ],
                        [
                            "th_models.__dict__[args.model](pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_23": {
                "f": {
                    "value": "args.load_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_50": {
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/models/densenet.py": {
        "torch": {
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_62": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes * 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inter_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes * 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inter_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes * 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_86": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_150": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_151": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ],
                        [
                            "int(math.floor(in_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(in_planes + n * growth_rate)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_169": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_73": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_77": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_94": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_96": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, inplace=False, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.block1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.block2(out))",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.in_planes)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/models/wide_resnet.py": {
        "torch": {
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_93": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_36": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_49": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/optim.py": {
        "torch": {}
    },
    "experiments/utils.py": {
        "torch": {
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_87": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_94": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_95": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.eq(pred, targets).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eq_95": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}