{
    "pypi_packages/adabelief_tf0.0.1/adabelief_tf/AdaBelief_tf.py": {
        "tensorflow": {
            "convert_to_tensor_142": {
                "variable": {
                    "value": "self._lr_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._call_if_callable(self._lr)",
                            "Call"
                        ],
                        [
                            "lr_t * math_ops.sqrt(1 - beta2_power) / (1 - beta1_power)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_143": {
                "variable": {
                    "value": "self._beta1_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "beta1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._call_if_callable(self._beta1)",
                            "Call"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "beta1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_144": {
                "variable": {
                    "value": "self._beta2_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "beta2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._call_if_callable(self._beta2)",
                            "Call"
                        ],
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "beta2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_145": {
                "variable": {
                    "value": "self._epsilon_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._call_if_callable(self._epsilon)",
                            "Call"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_149": {
                "variable": {
                    "value": "beta1_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._get_non_slot_variable('beta1_power', graph=graph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_150": {
                "variable": {
                    "value": "beta2_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._get_non_slot_variable('beta2_power', graph=graph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_151": {
                "variable": {
                    "value": "lr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._lr_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_153": {
                "variable": {
                    "value": "beta1_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._beta1_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_154": {
                "variable": {
                    "value": "beta2_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._beta2_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_155": {
                "variable": {
                    "value": "epsilon_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._epsilon_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_162": {
                "variable": {
                    "value": "m_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "beta1_t * m + m_scaled_g_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_167": {
                "variable": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Name"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "beta2_t * v + v_scaled_g_values + epsilon_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_182": {
                "variable": {
                    "value": "var_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bounded_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m_t * step_size",
                            "BinOp"
                        ],
                        [
                            "m_t * step_size",
                            "BinOp"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_187": {
                "variable": {
                    "value": "beta1_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._get_non_slot_variable('beta1_power', graph=graph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_188": {
                "variable": {
                    "value": "beta2_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._get_non_slot_variable('beta2_power', graph=graph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_189": {
                "variable": {
                    "value": "lr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._lr_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_190": {
                "variable": {
                    "value": "beta1_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._beta1_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_191": {
                "variable": {
                    "value": "beta2_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._beta2_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_192": {
                "variable": {
                    "value": "epsilon_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._epsilon_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grad.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_199": {
                "variable": {
                    "value": "m_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "beta1_t * m + m_scaled_g_values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_204": {
                "variable": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Name"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "beta2_t * v + v_scaled_g_values + epsilon_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_219": {
                "variable": {
                    "value": "var_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bounded_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m_t * step_size",
                            "BinOp"
                        ],
                        [
                            "m_t * step_size",
                            "BinOp"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_225": {
                "variable": {
                    "value": "beta1_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta1_power",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.cast(self._get_non_slot_variable('beta1_power', graph=graph), var.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(self._get_non_slot_variable('beta1_power', graph=graph), grad.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(beta1_power, var.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_226": {
                "variable": {
                    "value": "beta2_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta2_power",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.cast(self._get_non_slot_variable('beta2_power', graph=graph), var.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(self._get_non_slot_variable('beta2_power', graph=graph), grad.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(beta2_power, var.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_227": {
                "variable": {
                    "value": "lr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._lr_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_228": {
                "variable": {
                    "value": "beta1_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._beta1_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_229": {
                "variable": {
                    "value": "beta2_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._beta2_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_230": {
                "variable": {
                    "value": "epsilon_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._epsilon_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_235": {
                "variable": {
                    "value": "m_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'm')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "m * beta1_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_241": {
                "variable": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Name"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v * beta2_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_254": {
                "variable": {
                    "value": "var_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "lr * m_t / (v_sqrt + epsilon_t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_172": {
                "variable": {
                    "value": "vhat_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "math_ops.maximum(v_t, vhat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_173": {
                "variable": {
                    "value": "v_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vhat_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_ops.assign(vhat, math_ops.maximum(v_t, vhat))",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, vhat)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, math_ops.maximum(v_t, vhat))",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, vhat)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, math_ops.maximum(v_t, vhat))",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, vhat)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_175": {
                "variable": {
                    "value": "vhat_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_176": {
                "variable": {
                    "value": "v_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_ops.assign(v, beta2_t * v + v_scaled_g_values + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(v, beta2_t * v + v_scaled_g_values + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(v, v * beta2_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "scatter_add(v, indices, v_scaled_g_values + epsilon_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_183": {
                "*inputs": {
                    "value": "*[var_update, m_t, v_t, vhat_t]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "assign_209": {
                "variable": {
                    "value": "vhat_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "math_ops.maximum(v_t, vhat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_210": {
                "variable": {
                    "value": "v_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vhat_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_ops.assign(vhat, math_ops.maximum(v_t, vhat))",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, vhat)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, math_ops.maximum(v_t, vhat))",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, vhat)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, math_ops.maximum(v_t, vhat))",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, vhat)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_212": {
                "variable": {
                    "value": "vhat_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_213": {
                "variable": {
                    "value": "v_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_ops.assign(v, beta2_t * v + v_scaled_g_values + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(v, beta2_t * v + v_scaled_g_values + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(v, v * beta2_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "scatter_add(v, indices, v_scaled_g_values + epsilon_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_221": {
                "*inputs": {
                    "value": "*[var_update, m_t, v_t, vhat_t]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "assign_248": {
                "variable": {
                    "value": "vhat_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "math_ops.maximum(v_t, vhat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_249": {
                "variable": {
                    "value": "v_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vhat_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_ops.assign(vhat, math_ops.maximum(v_t, vhat))",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, vhat)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, math_ops.maximum(v_t, vhat))",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, vhat)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, math_ops.maximum(v_t, vhat))",
                            "Call"
                        ],
                        [
                            "state_ops.assign(vhat, vhat)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_251": {
                "variable": {
                    "value": "vhat_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_252": {
                "variable": {
                    "value": "v_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_ops.assign(v, beta2_t * v + v_scaled_g_values + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(v, beta2_t * v + v_scaled_g_values + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(v, v * beta2_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "scatter_add(v, indices, v_scaled_g_values + epsilon_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_256": {
                "*inputs": {
                    "value": "*[var_update, m_t, v_t, vhat_t]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_287": {
                "*inputs": {
                    "value": "*update_ops + [update_beta1, update_beta2]",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name_scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "init_scope_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "executing_eagerly_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_115": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "executing_eagerly_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "executing_eagerly_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_236": {
                "control_inputs": {
                    "value": "[m_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_242": {
                "control_inputs": {
                    "value": "[v_t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_270": {
                "control_inputs": {
                    "value": "[resource_variable_ops.resource_scatter_add(x.handle, i, v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_280": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_157": {
                "x": {
                    "value": "1 - beta2_power",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_172": {
                "x": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_ops.assign(v, beta2_t * v + v_scaled_g_values + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(v, beta2_t * v + v_scaled_g_values + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(v, v * beta2_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "scatter_add(v, indices, v_scaled_g_values + epsilon_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_194": {
                "x": {
                    "value": "1 - beta2_power",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_209": {
                "x": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_ops.assign(v, beta2_t * v + v_scaled_g_values + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(v, beta2_t * v + v_scaled_g_values + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(v, v * beta2_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "scatter_add(v, indices, v_scaled_g_values + epsilon_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_231": {
                "x": {
                    "value": "1 - beta2_power",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_248": {
                "x": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_ops.assign(v, beta2_t * v + v_scaled_g_values + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(v, beta2_t * v + v_scaled_g_values + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "state_ops.assign(v, v * beta2_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "scatter_add(v, indices, v_scaled_g_values + epsilon_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_add_263": {
                "ref": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "updates": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Name"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'v')",
                            "Call"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "colocate_with_282": {
                "op": {
                    "value": "beta1_power",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.cast(self._get_non_slot_variable('beta1_power', graph=graph), var.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(self._get_non_slot_variable('beta1_power', graph=graph), grad.dtype.base_dtype)",
                            "Call"
                        ],
                        [
                            "math_ops.cast(beta1_power, var.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pypi_packages/adabelief_tf0.1.0/adabelief_tf/AdaBelief_test.py": {
        "tensorflow": {
            "set_intra_op_parallelism_threads_35": {
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_inter_op_parallelism_threads_36": {
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_167": {
                "variable": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "opt.iterations + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_dtypes_to_test(use_gpu=is_gpu_available())",
                            "Call"
                        ],
                        [
                            "_dtypes_to_test(use_gpu=is_gpu_available())",
                            "Call"
                        ],
                        [
                            "_dtypes_to_test(use_gpu=is_gpu_available())",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_168": {
                "variable": {
                    "value": "beta_1_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "opt._get_hyper('beta_1')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_dtypes_to_test(use_gpu=is_gpu_available())",
                            "Call"
                        ],
                        [
                            "_dtypes_to_test(use_gpu=is_gpu_available())",
                            "Call"
                        ],
                        [
                            "_dtypes_to_test(use_gpu=is_gpu_available())",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_169": {
                "variable": {
                    "value": "beta_1_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(opt._get_hyper('beta_1'), dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(opt.iterations + 1, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_170": {
                "variable": {
                    "value": "beta_2_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "opt._get_hyper('beta_2')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_dtypes_to_test(use_gpu=is_gpu_available())",
                            "Call"
                        ],
                        [
                            "_dtypes_to_test(use_gpu=is_gpu_available())",
                            "Call"
                        ],
                        [
                            "_dtypes_to_test(use_gpu=is_gpu_available())",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_171": {
                "variable": {
                    "value": "beta_2_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_2_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(opt._get_hyper('beta_2'), dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(opt.iterations + 1, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_404": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[0.1, -0.2, -0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_405": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.4, 0.2, -0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_458": {
                "variable": {
                    "value": "var_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_459": {
                "variable": {
                    "value": "var_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[3.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_461": {
                "variable": {
                    "value": "grad_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.1, 0.2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_462": {
                "variable": {
                    "value": "grad_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.03, 0.04]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_473": {
                "variable": {
                    "value": "var_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_474": {
                "variable": {
                    "value": "var_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[3.0, 4.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "IndexedSlices_476": {
                "variable": {
                    "value": "grad_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.constant([0.1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.constant([0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "tf.constant([2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "IndexedSlices_477": {
                "variable": {
                    "value": "grad_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.constant([0.04])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.constant([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "tf.constant([2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "serialize_592": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AdaBeliefOptimizer(epsilon=epsilon)",
                            "Call"
                        ],
                        [
                            "AdaBeliefOptimizer(lr=0.001, total_steps=10000, warmup_proportion=0.1, min_lr=1e-05)",
                            "Call"
                        ],
                        [
                            "AdaBeliefOptimizer(learning_rate=lr_scheduler, weight_decay=wd_scheduler)",
                            "Call"
                        ]
                    ]
                }
            },
            "deserialize_593": {
                "variable": {
                    "value": "new_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.get_config()",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.serialize(optimizer)",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.serialize(optimizer)",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'AdaBeliefOptimizer': AdaBeliefOptimizer}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ExponentialDecay_599": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InverseTimeDecay_600": {
                "variable": {
                    "value": "wd_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "0.002",
                    "type": "float",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialDecay_610": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InverseTimeDecay_611": {
                "variable": {
                    "value": "wd_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "0.002",
                    "type": "float",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "serialize_614": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AdaBeliefOptimizer(epsilon=epsilon)",
                            "Call"
                        ],
                        [
                            "AdaBeliefOptimizer(lr=0.001, total_steps=10000, warmup_proportion=0.1, min_lr=1e-05)",
                            "Call"
                        ],
                        [
                            "AdaBeliefOptimizer(learning_rate=lr_scheduler, weight_decay=wd_scheduler)",
                            "Call"
                        ]
                    ]
                }
            },
            "deserialize_615": {
                "variable": {
                    "value": "new_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.get_config()",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.serialize(optimizer)",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.serialize(optimizer)",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'AdaBeliefOptimizer': AdaBeliefOptimizer}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "set_logical_device_configuration_54": {
                "device": {
                    "value": "first_gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.config.list_physical_devices('GPU')[0]",
                            "Subscript"
                        ]
                    ]
                },
                "logical_devices": {
                    "value": "virtual_gpus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.config.LogicalDeviceConfiguration(memory_limit=100) for _ in range(2)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "run_functions_eagerly_94": {
                "run_eagerly": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_185": {
                "variable": {
                    "value": "var0",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var0_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([1.0, 1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_186": {
                "variable": {
                    "value": "var1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var1_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([3.0, 3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "IndexedSlices_188": {
                "variable": {
                    "value": "grads0",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.constant(grads0_np[grads0_np_indices])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.constant(grads0_np_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "tf.constant([3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "IndexedSlices_194": {
                "variable": {
                    "value": "grads1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.constant(grads1_np[grads1_np_indices])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.constant(grads1_np_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "tf.constant([3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_235": {
                "variable": {
                    "value": "var0",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var0_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([1.0, 1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'var0_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_236": {
                "variable": {
                    "value": "var1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var1_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([3.0, 3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'var1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_237": {
                "variable": {
                    "value": "grads0",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grads0_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.1, 0.0, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_238": {
                "variable": {
                    "value": "grads1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grads1_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.01, 0.0, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_288": {
                "variable": {
                    "value": "var0",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var0_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([1.0, 1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'var0_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_289": {
                "variable": {
                    "value": "var1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var1_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([3.0, 3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'var1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_290": {
                "variable": {
                    "value": "grads0",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grads0_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.1, 0.0, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_291": {
                "variable": {
                    "value": "grads1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grads1_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.01, 0.0, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "InverseTimeDecay_295": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ],
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Variable_338": {
                "variable": {
                    "value": "var0",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var0_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([1.0, 1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_339": {
                "variable": {
                    "value": "var1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var1_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([3.0, 3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_340": {
                "variable": {
                    "value": "grads0",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grads0_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.1, 0.0, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_341": {
                "variable": {
                    "value": "grads1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grads1_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.01, 0.0, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_377": {
                "variable": {
                    "value": "var0",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var0_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([1.0, 1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_378": {
                "variable": {
                    "value": "var1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var1_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([3.0, 3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_379": {
                "variable": {
                    "value": "grads0",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grads0_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.1, 0.0, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_380": {
                "variable": {
                    "value": "grads1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grads1_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.01, 0.0, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_431": {
                "variable": {
                    "value": "var0",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var0_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([1.0, 1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([1.0, 2.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'var0_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_432": {
                "variable": {
                    "value": "var1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "var1_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([3.0, 3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([3.0, 4.0], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'var1_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_433": {
                "variable": {
                    "value": "grads0",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grads0_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.1, 0.0, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.1, 0.1], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_434": {
                "variable": {
                    "value": "grads1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grads1_np",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0.01, 0.0, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "np.array([0.01, 0.01], dtype=dtype.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "list_physical_devices_49": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogicalDeviceConfiguration_51": {
                "memory_limit": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "run_functions_eagerly_100": {
                "run_eagerly": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_408": {
                "input_tensor": {
                    "value": "tf.square(x - w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_476": {
                "value": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_477": {
                "value": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "list_physical_devices_28": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_functions_eagerly_102": {
                "run_eagerly": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_189": {
                "value": {
                    "value": "grads0_np[grads0_np_indices]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_190": {
                "value": {
                    "value": "grads0_np_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0, 2], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_191": {
                "value": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_195": {
                "value": {
                    "value": "grads1_np[grads1_np_indices]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_196": {
                "value": {
                    "value": "grads1_np_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([0, 2], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_197": {
                "value": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_408": {
                "x": {
                    "value": "x - w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_342": {
                "value": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pypi_packages/adabelief_tf0.1.0/adabelief_tf/AdaBelief_tf.py": {
        "tensorflow": {
            "convert_to_tensor_183": {
                "variable": {
                    "value": "epsilon_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_184": {
                "variable": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterations + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pow_185": {
                "variable": {
                    "value": "beta_1_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_hyper('beta_1', var_dtype)",
                            "Call"
                        ],
                        [
                            "self._get_hyper('beta_1', var_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_186": {
                "variable": {
                    "value": "beta_2_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_2_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_hyper('beta_2', var_dtype)",
                            "Call"
                        ],
                        [
                            "self._get_hyper('beta_2', var_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_223": {
                "variable": {
                    "value": "r_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(sma_t - 4.0) / (sma_inf - 4.0) * (sma_t - 2.0) / (sma_inf - 2.0) * sma_inf / sma_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_258": {
                "variable": {
                    "value": "epsilon_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_259": {
                "variable": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterations + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pow_260": {
                "variable": {
                    "value": "beta_1_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_hyper('beta_1', var_dtype)",
                            "Call"
                        ],
                        [
                            "self._get_hyper('beta_1', var_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_261": {
                "variable": {
                    "value": "beta_2_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_2_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_hyper('beta_2', var_dtype)",
                            "Call"
                        ],
                        [
                            "self._get_hyper('beta_2', var_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_289": {
                "variable": {
                    "value": "m_t_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "m_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.assign(beta_1_t * m + (1.0 - beta_1_t) * grad, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "m.assign(m * beta_1_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "self._resource_scatter_add(m, indices, m_scaled_g_values)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_302": {
                "variable": {
                    "value": "r_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(sma_t - 4.0) / (sma_inf - 4.0) * (sma_t - 2.0) / (sma_inf - 2.0) * sma_inf / sma_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_172": {
                "variable": {
                    "value": "wd_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wd_t(self.iterations)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "maximum_192": {
                "variable": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_steps - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_194": {
                "variable": {
                    "value": "lr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "local_step <= warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "lr_t * (local_step / warmup_steps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "lr_t + decay_rate * tf.minimum(local_step - warmup_steps, decay_steps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_218": {
                "variable": {
                    "value": "v_corr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vhat_t / (1.0 - beta_2_power)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_221": {
                "variable": {
                    "value": "v_corr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_t / (1.0 - beta_2_power)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_234": {
                "variable": {
                    "value": "var_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sma_t >= sma_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "r_t * m_corr_t / (v_corr_t + epsilon_t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "m_corr_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m_t / (1.0 - beta_1_power)",
                            "BinOp"
                        ],
                        [
                            "m_t / (1.0 - beta_1_power)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "group_250": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "maximum_267": {
                "variable": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_steps - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_269": {
                "variable": {
                    "value": "lr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "local_step <= warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "lr_t * (local_step / warmup_steps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "lr_t + decay_rate * tf.minimum(local_step - warmup_steps, decay_steps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_297": {
                "variable": {
                    "value": "v_corr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vhat_t / (1.0 - beta_2_power)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_300": {
                "variable": {
                    "value": "v_corr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_t / (1.0 - beta_2_power)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_313": {
                "variable": {
                    "value": "var_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sma_t >= sma_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "r_t * m_corr_t / (v_corr_t + epsilon_t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "m_corr_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m_t / (1.0 - beta_1_power)",
                            "BinOp"
                        ],
                        [
                            "m_t / (1.0 - beta_1_power)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "group_331": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "epsilon_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_290": {
                "x": {
                    "value": "grad - m_t_indices",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_325": {
                "params": {
                    "value": "-lr_t * var_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_217": {
                "x": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v.assign(beta_2_t * v + (1.0 - beta_2_t) * tf.math.square(grad - m_t) + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "v.assign(v * beta_2_t + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "self._resource_scatter_add(v, indices, v_scaled_g_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_296": {
                "x": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v.assign(beta_2_t * v + (1.0 - beta_2_t) * tf.math.square(grad - m_t) + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "v.assign(v * beta_2_t + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "self._resource_scatter_add(v, indices, v_scaled_g_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_197": {
                "x": {
                    "value": "local_step - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(total_steps - warmup_steps, 1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(total_steps - warmup_steps, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_211": {
                "x": {
                    "value": "grad - m_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_272": {
                "x": {
                    "value": "local_step - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(total_steps - warmup_steps, 1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(total_steps - warmup_steps, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pypi_packages/adabelief_tf0.2.0/adabelief_tf/AdaBelief_tf.py": {
        "tensorflow": {
            "convert_to_tensor_191": {
                "variable": {
                    "value": "epsilon_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_192": {
                "variable": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterations + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pow_193": {
                "variable": {
                    "value": "beta_1_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_hyper('beta_1', var_dtype)",
                            "Call"
                        ],
                        [
                            "self._get_hyper('beta_1', var_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_194": {
                "variable": {
                    "value": "beta_2_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_2_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_hyper('beta_2', var_dtype)",
                            "Call"
                        ],
                        [
                            "self._get_hyper('beta_2', var_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_229": {
                "variable": {
                    "value": "r_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(sma_t - 4.0) / (sma_inf - 4.0) * (sma_t - 2.0) / (sma_inf - 2.0) * sma_inf / sma_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_264": {
                "variable": {
                    "value": "epsilon_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_265": {
                "variable": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterations + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pow_266": {
                "variable": {
                    "value": "beta_1_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_hyper('beta_1', var_dtype)",
                            "Call"
                        ],
                        [
                            "self._get_hyper('beta_1', var_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_267": {
                "variable": {
                    "value": "beta_2_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_2_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_hyper('beta_2', var_dtype)",
                            "Call"
                        ],
                        [
                            "self._get_hyper('beta_2', var_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_291": {
                "variable": {
                    "value": "m_t_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "m_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.assign(beta_1_t * m + (1.0 - beta_1_t) * grad, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "m.assign(m * beta_1_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "self._resource_scatter_add(m, indices, m_scaled_g_values)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_304": {
                "variable": {
                    "value": "r_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(sma_t - 4.0) / (sma_inf - 4.0) * (sma_t - 2.0) / (sma_inf - 2.0) * sma_inf / sma_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_180": {
                "variable": {
                    "value": "wd_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wd_t(self.iterations)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "maximum_200": {
                "variable": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_steps - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_202": {
                "variable": {
                    "value": "lr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "local_step <= warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "lr_t * (local_step / warmup_steps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "lr_t + decay_rate * tf.minimum(local_step - warmup_steps, decay_steps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_224": {
                "variable": {
                    "value": "v_corr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vhat_t / (1.0 - beta_2_power)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_227": {
                "variable": {
                    "value": "v_corr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_t / (1.0 - beta_2_power)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_240": {
                "variable": {
                    "value": "var_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sma_t >= sma_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "r_t * m_corr_t / (v_corr_t + epsilon_t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "m_corr_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m_t / (1.0 - beta_1_power)",
                            "BinOp"
                        ],
                        [
                            "m_t / (1.0 - beta_1_power)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "group_256": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "maximum_273": {
                "variable": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_steps - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_275": {
                "variable": {
                    "value": "lr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "local_step <= warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "lr_t * (local_step / warmup_steps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "lr_t + decay_rate * tf.minimum(local_step - warmup_steps, decay_steps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_299": {
                "variable": {
                    "value": "v_corr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vhat_t / (1.0 - beta_2_power)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_302": {
                "variable": {
                    "value": "v_corr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_t / (1.0 - beta_2_power)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_315": {
                "variable": {
                    "value": "var_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sma_t >= sma_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "r_t * m_corr_t / (v_corr_t + epsilon_t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "m_corr_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m_t / (1.0 - beta_1_power)",
                            "BinOp"
                        ],
                        [
                            "m_t / (1.0 - beta_1_power)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "group_333": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "epsilon_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_292": {
                "x": {
                    "value": "grad - m_t_indices",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_327": {
                "params": {
                    "value": "-lr_t * var_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_223": {
                "x": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v.assign(beta_2_t * v + (1.0 - beta_2_t) * tf.math.square(grad - m_t) + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "v.assign(v * beta_2_t + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "self._resource_scatter_add(v, indices, v_scaled_g_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_298": {
                "x": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v.assign(beta_2_t * v + (1.0 - beta_2_t) * tf.math.square(grad - m_t) + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "v.assign(v * beta_2_t + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "self._resource_scatter_add(v, indices, v_scaled_g_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_205": {
                "x": {
                    "value": "local_step - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(total_steps - warmup_steps, 1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(total_steps - warmup_steps, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_217": {
                "x": {
                    "value": "grad - m_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_278": {
                "x": {
                    "value": "local_step - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(total_steps - warmup_steps, 1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(total_steps - warmup_steps, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pypi_packages/adabelief_tf0.2.1/adabelief_tf/AdaBelief_tf.py": {
        "tensorflow": {
            "convert_to_tensor_193": {
                "variable": {
                    "value": "epsilon_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_194": {
                "variable": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterations + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pow_195": {
                "variable": {
                    "value": "beta_1_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_hyper('beta_1', var_dtype)",
                            "Call"
                        ],
                        [
                            "self._get_hyper('beta_1', var_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_196": {
                "variable": {
                    "value": "beta_2_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_2_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_hyper('beta_2', var_dtype)",
                            "Call"
                        ],
                        [
                            "self._get_hyper('beta_2', var_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_231": {
                "variable": {
                    "value": "r_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(sma_t - 4.0) / (sma_inf - 4.0) * (sma_t - 2.0) / (sma_inf - 2.0) * sma_inf / sma_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_266": {
                "variable": {
                    "value": "epsilon_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_267": {
                "variable": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.iterations + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pow_268": {
                "variable": {
                    "value": "beta_1_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_hyper('beta_1', var_dtype)",
                            "Call"
                        ],
                        [
                            "self._get_hyper('beta_1', var_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_269": {
                "variable": {
                    "value": "beta_2_power",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta_2_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_hyper('beta_2', var_dtype)",
                            "Call"
                        ],
                        [
                            "self._get_hyper('beta_2', var_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "local_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.iterations + 1, var_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_293": {
                "variable": {
                    "value": "m_t_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "m_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.assign(beta_1_t * m + (1.0 - beta_1_t) * grad, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "m.assign(m * beta_1_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "self._resource_scatter_add(m, indices, m_scaled_g_values)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_306": {
                "variable": {
                    "value": "r_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(sma_t - 4.0) / (sma_inf - 4.0) * (sma_t - 2.0) / (sma_inf - 2.0) * sma_inf / sma_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_182": {
                "variable": {
                    "value": "wd_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wd_t(self.iterations)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ],
                        [
                            "var.dtype.base_dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "maximum_202": {
                "variable": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_steps - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_204": {
                "variable": {
                    "value": "lr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "local_step <= warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "lr_t * (local_step / warmup_steps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "lr_t + decay_rate * tf.minimum(local_step - warmup_steps, decay_steps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_226": {
                "variable": {
                    "value": "v_corr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vhat_t / (1.0 - beta_2_power)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_229": {
                "variable": {
                    "value": "v_corr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_t / (1.0 - beta_2_power)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_242": {
                "variable": {
                    "value": "var_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sma_t >= sma_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "r_t * m_corr_t / (v_corr_t + epsilon_t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "m_corr_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m_t / (1.0 - beta_1_power)",
                            "BinOp"
                        ],
                        [
                            "m_t / (1.0 - beta_1_power)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "group_258": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "maximum_275": {
                "variable": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "total_steps - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_277": {
                "variable": {
                    "value": "lr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "local_step <= warmup_steps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "lr_t * (local_step / warmup_steps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "lr_t + decay_rate * tf.minimum(local_step - warmup_steps, decay_steps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_301": {
                "variable": {
                    "value": "v_corr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vhat_t / (1.0 - beta_2_power)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_304": {
                "variable": {
                    "value": "v_corr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_t / (1.0 - beta_2_power)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_317": {
                "variable": {
                    "value": "var_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sma_t >= sma_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "r_t * m_corr_t / (v_corr_t + epsilon_t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "m_corr_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m_t / (1.0 - beta_1_power)",
                            "BinOp"
                        ],
                        [
                            "m_t / (1.0 - beta_1_power)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "group_335": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "epsilon_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_294": {
                "x": {
                    "value": "grad - m_t_indices",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_329": {
                "params": {
                    "value": "-lr_t * var_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_225": {
                "x": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v.assign(beta_2_t * v + (1.0 - beta_2_t) * tf.math.square(grad - m_t) + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "v.assign(v * beta_2_t + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "self._resource_scatter_add(v, indices, v_scaled_g_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_300": {
                "x": {
                    "value": "vhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ],
                        [
                            "self.get_slot(var, 'vhat')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v.assign(beta_2_t * v + (1.0 - beta_2_t) * tf.math.square(grad - m_t) + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "v.assign(v * beta_2_t + epsilon_t, use_locking=self._use_locking)",
                            "Call"
                        ],
                        [
                            "self._resource_scatter_add(v, indices, v_scaled_g_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_207": {
                "x": {
                    "value": "local_step - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(total_steps - warmup_steps, 1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(total_steps - warmup_steps, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_219": {
                "x": {
                    "value": "grad - m_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_280": {
                "x": {
                    "value": "local_step - warmup_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "decay_steps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.maximum(total_steps - warmup_steps, 1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(total_steps - warmup_steps, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/LSTM/AdamW.py": {
        "torch": {
            "enable_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_90": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_106": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/LSTM/MSVAG.py": {
        "torch": {
            "zeros_like_78": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/LSTM/RAdam.py": {
        "torch": {
            "zeros_like_49": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_50": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_137": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_138": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_212": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_213": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/LSTM/Types.py": {
        "torch": {}
    },
    "PyTorch_Experiments/LSTM/data.py": {
        "torch": {}
    },
    "PyTorch_Experiments/LSTM/embed_regularize.py": {
        "torch": {
            "embedding_18": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.random_integers(low=0, high=V - 1, size=(batch_size, bptt))",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(words)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "masked_embed_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask * embed.weight",
                            "BinOp"
                        ],
                        [
                            "embed.weight",
                            "Attribute"
                        ],
                        [
                            "scale.expand_as(masked_embed_weight) * masked_embed_weight",
                            "BinOp"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed.padding_idx",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "embed.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "embed.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "embed.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "embed.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/LSTM/finetune.py": {
        "torch": {
            "CrossEntropyLoss_98": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_177": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ASGD_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_227": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ASGD_217": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.RNNModel(args.model, ntokens, args.emsize, args.nhid, args.nlayers, args.dropout, args.dropouth, args.dropouti, args.dropoute, args.wdrop, args.tied)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/LSTM/fromage.py": {
        "torch": {}
    },
    "PyTorch_Experiments/LSTM/generate.py": {
        "torch": {
            "manual_seed_39": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_63": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_63": {
                "input": {
                    "value": "ntokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(corpus.dictionary)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_71": {
                "input": {
                    "value": "word_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.squeeze().data.div(args.temperature).exp().cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/LSTM/locked_dropout.py": {
        "torch": {}
    },
    "PyTorch_Experiments/LSTM/main.py": {
        "torch": {
            "manual_seed_95": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_120": {
                "variable": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'corpus.{}.data'.format(hashlib.md5(args.data.encode()).hexdigest())",
                            "Call"
                        ]
                    ]
                }
            },
            "load_113": {
                "variable": {
                    "value": "(model, criterion, optimizer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_124": {
                "obj": {
                    "value": "corpus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(fn)",
                            "Call"
                        ],
                        [
                            "data.Corpus(args.data)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'corpus.{}.data'.format(hashlib.md5(args.data.encode()).hexdigest())",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_261": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_263": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_108": {
                "obj": {
                    "value": "[model, criterion, optimizer]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_343": {
                "obj": {
                    "value": "{'train_loss': train_losses, 'test_loss': val_losses}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('curve', args.save)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__231": {
                "parameters": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ASGD_328": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/LSTM/model.py": {
        "torch": {
            "Dropout_14": {
                "variable": {
                    "value": "self.idrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropouti",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.hdrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropouth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_20": {
                "*args": {
                    "value": "ninp if l == 0 else nhid",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_24": {
                "*args": {
                    "value": "ninp if l == 0 else nhid",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/LSTM/pointer.py": {
        "torch": {
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "softmax_output_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.view(-1, ntokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_118": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_120": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((1, size), np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[one_hot(t.data[0], ntokens) for t in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "[pointer_history, Variable(rnn_out.data)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mv_99": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_pointer_history",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pointer_history[start_idx + idx - window:start_idx + idx]",
                            "Subscript"
                        ]
                    ]
                },
                "vec": {
                    "value": "rnn_out[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_101": {
                "variable": {
                    "value": "ptr_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta * logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_107": {
                "input": {
                    "value": "target_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p[targets[idx].data]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/LSTM/splitcross.py": {
        "torch": {
            "Embedding_183": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_186": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(embed.parameters()) + list(crit.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "combo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[split_hiddens[i] for i in range(self.nsplits) if len(split_hiddens[i])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "linear_131": {
                "variable": {
                    "value": "all_head_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([split_hiddens[i] for i in range(self.nsplits) if len(split_hiddens[i])])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "head_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_132": {
                "variable": {
                    "value": "softmaxed_all_head_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_head_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(combo, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_174": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.tail_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nsplits - 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.tail_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nsplits - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_39": {
                "variable": {
                    "value": "head_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddens.view(-1, hiddens.size(2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "head_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "softmaxed_head_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_176": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_185": {
                "*size": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "linear_60": {
                "variable": {
                    "value": "tail_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddens.view(-1, hiddens.size(2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "tail_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight[start:end]",
                            "Subscript"
                        ],
                        [
                            "weight[start:end]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "tail_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias[start:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_65": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, tail_weight, bias=tail_bias)",
                            "Call"
                        ],
                        [
                            "self.logprob(weight, bias, split_hiddens[idx], splits=[idx], softmaxed_head_res=softmaxed_head_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_163": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.log_softmax(tail_res, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(split_targets[idx] - self.splits[idx]).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_163": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "self.nsplits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "self.nsplits - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "masked_select_102": {
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "tmp_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask == idx",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "[head_weight, self.tail_vectors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "[head_bias, self.tail_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "[head_weight, self.tail_vectors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "[head_bias, self.tail_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_144": {
                "input": {
                    "value": "softmaxed_head_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(head_res, dim=-1)",
                            "Call"
                        ],
                        [
                            "softmaxed_all_head_res[running_offset:running_offset + len(split_hiddens[idx])]",
                            "Subscript"
                        ],
                        [
                            "softmaxed_all_head_res[running_offset:running_offset + len(split_hiddens[idx])]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "split_targets[idx].view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_163": {
                "input": {
                    "value": "tail_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, tail_weight, bias=tail_bias)",
                            "Call"
                        ],
                        [
                            "self.logprob(weight, bias, split_hiddens[idx], splits=[idx], softmaxed_head_res=softmaxed_head_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_189": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_190": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/LSTM/utils.py": {
        "torch": {}
    },
    "PyTorch_Experiments/LSTM/weight_drop.py": {
        "torch": {
            "Linear_66": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_84": {
                "*args": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_39": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.ones(raw_w.size(0), 1))",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.dropout(mask, p=self.dropout, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask.expand_as(raw_w) * raw_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.nn.functional.dropout(raw_w, p=self.dropout, training=self.training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_54": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "raw_w.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_42": {
                "input": {
                    "value": "raw_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self.module, name_w + '_raw')",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/LSTM/yogi.py": {
        "torch": {
            "sign_130": {
                "input": {
                    "value": "exp_avg_sq - grad_squared",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_like_98": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_106": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/classification_cifar10/main.py": {
        "torch": {
            "SGD_123": {
                "params": {
                    "value": "model_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_126": {
                "params": {
                    "value": "model_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/classification_cifar10/models/densenet.py": {
        "torch": {
            "randn_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_35": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "torch.cat([out, x], 1)",
                            "Call"
                        ],
                        [
                            "self.conv(F.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.trans3(self.dense3(out))",
                            "Call"
                        ],
                        [
                            "self.dense4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(F.relu(self.bn(out)), 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_84": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(self.bn(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_21": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "input": {
                    "value": "self.bn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "input": {
                    "value": "self.bn(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/classification_cifar10/models/resnet.py": {
        "torch": {
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_88": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_93": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_121": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/classification_cifar10/models/vgg.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_51": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/classification_cifar10/optimizers/AdamW.py": {
        "torch": {
            "enable_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_91": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_94": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_110": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/classification_cifar10/optimizers/Fromage.py": {
        "torch": {}
    },
    "PyTorch_Experiments/classification_cifar10/optimizers/MSVAG.py": {
        "torch": {
            "zeros_like_78": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/classification_cifar10/optimizers/RAdam.py": {
        "torch": {
            "zeros_like_52": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_140": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_141": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_215": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_216": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/classification_cifar10/optimizers/Types.py": {
        "torch": {}
    },
    "PyTorch_Experiments/classification_cifar10/optimizers/Yogi.py": {
        "torch": {
            "sign_131": {
                "input": {
                    "value": "exp_avg_sq - grad_squared",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_like_99": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_107": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/imagenet/AdamW.py": {
        "torch": {
            "enable_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_90": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_106": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/imagenet/RAdam.py": {
        "torch": {
            "zeros_like_49": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_50": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_137": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_138": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_212": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_213": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/imagenet/SGD_GC.py": {
        "torch": {
            "clone_57": {
                "variable": {
                    "value": "buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/imagenet/dataloader.py": {
        "torch": {
            "is_tensor_98": {
                "obj": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_106": {
                "tensors": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ],
                        [
                            "imgaug.ResizeShortestEdge(self.target_shape, interp=cv2.INTER_CUBIC).augment(img)",
                            "Call"
                        ],
                        [
                            "imgaug.CenterCrop(self.target_shape).augment(out)",
                            "Call"
                        ],
                        [
                            "img[y1:y1 + hh, x1:x1 + ww]",
                            "Subscript"
                        ],
                        [
                            "cv2.resize(out, (self.target_shape, self.target_shape), interpolation=cv2.INTER_CUBIC)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_115": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "ndarray": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/imagenet/main_when.py": {
        "torch": {
            "device_count_124": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_244": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_322": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_326": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Stream_141": {
                "variable": {
                    "value": "self.stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_247": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_318": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_486": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'model-{}-optimizer-{}-lr-{}-epochs-{}-decay-epoch-{}-eps{}-beta1{}-beta2{}-centralize-{}-reset{}-start-epoch-{}-l2-decay{}-l1-decay{}-batch-{}-warmup-{}-fixed-decay-{}'.format(args.arch, args.optimizer, args.lr, args.epochs, args.when, args.eps, args.beta1, args.beta2, args.centralize, args.reset, args.start_epoch, args.weight_decay, args.l1_decay, args.batch_size, args.warmup, args.fixed_decay)",
                            "Call"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_107": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_225": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "shufflenet_v2_x0_5(pretrained=False)",
                            "Call"
                        ],
                        [
                            "se_resnet18()",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_230": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "shufflenet_v2_x0_5(pretrained=False)",
                            "Call"
                        ],
                        [
                            "se_resnet18()",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_490": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}-epoch-{}'.format(filename, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_553": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_218": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_232": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_237": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_240": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "shufflenet_v2_x0_5(pretrained=False)",
                            "Call"
                        ],
                        [
                            "se_resnet18()",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_271": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_275": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/imagenet/senet.py": {
        "torch": {
            "AdaptiveAvgPool2d_110": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_120": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_130": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_143": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_153": {
                "variable": {
                    "value": "model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_8": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_9": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_161": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_162": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplane",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_195": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplane",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_203": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_244": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplane",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "in_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_168": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/imagenet/shufflenet.py": {
        "torch": {
            "transpose_28": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batchsize, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "x.mean([2, 3])",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp if self.stride > 1 else branch_features, branch_features, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, output_channels, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_105": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, output_channels, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.depthwise_conv(inp, inp, kernel_size=3, stride=self.stride, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(repeats - 1)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(repeats - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_77": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, self.branch2(x2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.branch1(x), self.branch2(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "inp if self.stride > 1 else branch_features",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "branch_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "branch_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "branch_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "branch_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "branch_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "branch_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "output_channels",
                            "Name"
                        ],
                        [
                            "output_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "num_features": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "output_channels",
                            "Name"
                        ],
                        [
                            "output_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "num_features": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "branch_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "branch_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/imagenet/xception.py": {
        "torch": {
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*rep",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_153": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1536",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_158": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_205": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise(x)",
                            "Call"
                        ],
                        [
                            "self.rep(inp)",
                            "Call"
                        ],
                        [
                            "x + skip",
                            "BinOp"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu2(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.block8(x)",
                            "Call"
                        ],
                        [
                            "self.block9(x)",
                            "Call"
                        ],
                        [
                            "self.block10(x)",
                            "Call"
                        ],
                        [
                            "self.block11(x)",
                            "Call"
                        ],
                        [
                            "self.block12(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.relu3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ],
                        [
                            "nn.ReLU(inplace=True)(features)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.last_linear(x)",
                            "Call"
                        ],
                        [
                            "self.features(input)",
                            "Call"
                        ],
                        [
                            "self.logits(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.skipbn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_filters",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "variable": {
                    "value": "rep[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_203": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "out_filters",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_filters",
                            "Name"
                        ],
                        [
                            "out_filters",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "out_filters",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/wgan-gp/fid_score.py": {
        "torch": {
            "from_numpy_73": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([imread(str(f)).astype(np.float32) for f in files[start:end]])",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_82": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/wgan-gp/inception.py": {
        "torch": {
            "ModuleList_79": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_208": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_236": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_269": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_304": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_213": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_308": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_91": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_100": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_124": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/wgan-gp/main.py": {
        "torch": {
            "DataLoader_118": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(root=opt.dataroot, transform=transforms.Compose([transforms.Resize(opt.imageSize), transforms.CenterCrop(opt.imageSize), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "dset.LSUN(root=opt.dataroot, classes=classes, transform=transforms.Compose([transforms.Resize(opt.imageSize), transforms.CenterCrop(opt.imageSize), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "dset.CIFAR10(root=opt.dataroot, download=True, transform=transforms.Compose([transforms.Resize(opt.imageSize), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "dset.MNIST(root=opt.dataroot, download=True, transform=transforms.Compose([transforms.Resize(opt.imageSize), transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]))",
                            "Call"
                        ],
                        [
                            "dset.FakeData(image_size=(3, opt.imageSize, opt.imageSize), transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_244": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_246": {
                "variable": {
                    "value": "fixed_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_140": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_254": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_255": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, ngf * 8, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_206": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, ndf, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_226": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 8 * ndf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_376": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.batchSize",
                            "Attribute"
                        ],
                        [
                            "real_cpu.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_152": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "netD(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ],
                        [
                            "interpolates.cuda()",
                            "Call"
                        ],
                        [
                            "autograd.Variable(interpolates, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_198": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_241": {
                "f": {
                    "value": "opt.netD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_321": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.batchSize",
                            "Attribute"
                        ],
                        [
                            "real_cpu.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_366": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netG_epoch_%d.pth' % (opt.outf, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_367": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netD_epoch_%d.pth' % (opt.outf, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_371": {
                "f": {
                    "value": "'%s/netG_epoch_%d.pth' % (opt.outf, opt.niter - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_166": {
                "in_channels": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "num_features": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_170": {
                "in_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_171": {
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_174": {
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_176": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_178": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.ngf)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_179": {
                "num_features": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.ngf)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_180": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_182": {
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.ngf)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.ndf)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_209": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "ndf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.ndf)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_212": {
                "num_features": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_213": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_216": {
                "num_features": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_217": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_219": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_220": {
                "num_features": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_221": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_153": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_266": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_267": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_326": {
                "input": {
                    "value": "netD(real_imgs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSprop_269": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_270": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_351": {
                "input": {
                    "value": "netD(gen_imgs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/wgan-gp/optimizers/AdamW.py": {
        "torch": {
            "enable_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_91": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_94": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_110": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/wgan-gp/optimizers/Fromage.py": {
        "torch": {}
    },
    "PyTorch_Experiments/wgan-gp/optimizers/MSVAG.py": {
        "torch": {
            "zeros_like_78": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/wgan-gp/optimizers/RAdam.py": {
        "torch": {
            "zeros_like_52": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_140": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_141": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_215": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_216": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/wgan-gp/optimizers/Types.py": {
        "torch": {}
    },
    "PyTorch_Experiments/wgan-gp/optimizers/Yogi.py": {
        "torch": {
            "sign_131": {
                "input": {
                    "value": "exp_avg_sq - grad_squared",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_like_99": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_107": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/wgan/fid_score.py": {
        "torch": {
            "from_numpy_73": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([imread(str(f)).astype(np.float32) for f in files[start:end]])",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_82": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/wgan/inception.py": {
        "torch": {
            "ModuleList_79": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_208": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_236": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_269": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_304": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_213": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_308": {
                "tensors": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_91": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_100": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_124": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/wgan/main.py": {
        "torch": {
            "DataLoader_114": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dset.ImageFolder(root=opt.dataroot, transform=transforms.Compose([transforms.Resize(opt.imageSize), transforms.CenterCrop(opt.imageSize), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "dset.LSUN(root=opt.dataroot, classes=classes, transform=transforms.Compose([transforms.Resize(opt.imageSize), transforms.CenterCrop(opt.imageSize), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "dset.CIFAR10(root=opt.dataroot, download=True, transform=transforms.Compose([transforms.Resize(opt.imageSize), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "dset.MNIST(root=opt.dataroot, download=True, transform=transforms.Compose([transforms.Resize(opt.imageSize), transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]))",
                            "Call"
                        ],
                        [
                            "dset.FakeData(image_size=(3, opt.imageSize, opt.imageSize), transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_216": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_218": {
                "variable": {
                    "value": "fixed_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_63": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_226": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_227": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, opt.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, ngf * 8, 4, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, ndf, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_343": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.batchSize",
                            "Attribute"
                        ],
                        [
                            "real_cpu.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_172": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_213": {
                "f": {
                    "value": "opt.netD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_293": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.batchSize",
                            "Attribute"
                        ],
                        [
                            "real_cpu.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_333": {
                "obj": {
                    "value": "netG.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netG_epoch_%d.pth' % (opt.outf, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_334": {
                "obj": {
                    "value": "netD.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netD_epoch_%d.pth' % (opt.outf, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_338": {
                "f": {
                    "value": "'%s/netG_epoch_%d.pth' % (opt.outf, opt.niter - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_140": {
                "in_channels": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.nz)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_141": {
                "num_features": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_144": {
                "in_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_145": {
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_148": {
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_152": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.ngf)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_153": {
                "num_features": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.ngf)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_154": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_156": {
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.ngf)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.ndf)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_183": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "ndf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(opt.ndf)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_186": {
                "num_features": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_187": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_190": {
                "num_features": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_191": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_194": {
                "num_features": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_195": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_238": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_239": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_298": {
                "input": {
                    "value": "netD(real_imgs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSprop_241": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_242": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_318": {
                "input": {
                    "value": "netD(gen_imgs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/wgan/optimizers/AdamW.py": {
        "torch": {
            "enable_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_89": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_91": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_94": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_110": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/wgan/optimizers/Fromage.py": {
        "torch": {}
    },
    "PyTorch_Experiments/wgan/optimizers/MSVAG.py": {
        "torch": {
            "zeros_like_78": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_80": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_83": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PyTorch_Experiments/wgan/optimizers/RAdam.py": {
        "torch": {
            "zeros_like_52": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_140": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_141": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_215": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_216": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ],
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "PyTorch_Experiments/wgan/optimizers/Types.py": {
        "torch": {}
    },
    "PyTorch_Experiments/wgan/optimizers/Yogi.py": {
        "torch": {
            "sign_131": {
                "input": {
                    "value": "exp_avg_sq - grad_squared",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_like_99": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_107": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pypi_packages/adabelief_pytorch0.0.5/adabelief_pytorch/AdaBelief.py": {
        "torch": {
            "zeros_like_77": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_78": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_81": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_82": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_152": {
                "input": {
                    "value": "max_exp_avg_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_var']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_var']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_85": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_118": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_121": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_124": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_125": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pypi_packages/adabelief_pytorch0.1.0/adabelief_pytorch/AdaBelief.py": {
        "torch": {
            "zeros_like_105": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_106": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_109": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_110": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_170": {
                "input": {
                    "value": "max_exp_avg_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_var']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_var']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_114": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_115": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_148": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_149": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_152": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_153": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pypi_packages/adabelief_pytorch0.2.0/adabelief_pytorch/AdaBelief.py": {
        "torch": {
            "zeros_like_116": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_121": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_191": {
                "input": {
                    "value": "max_exp_avg_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_var']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_var']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_125": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_126": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_156": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_159": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_160": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_163": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_164": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pypi_packages/adabelief_pytorch0.2.1/adabelief_pytorch/AdaBelief.py": {
        "torch": {
            "zeros_like_116": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_121": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_199": {
                "input": {
                    "value": "max_exp_avg_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_var']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_var']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_125": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_126": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_164": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_165": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_167": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_168": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_171": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_172": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pypi_packages/ranger_adabelief_0.0.9/ranger_adabelief/ranger_adabelief.py": {
        "torch": {
            "zeros_like_135": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_136": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_139": {
                "variable": {
                    "value": "state[slow_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pypi_packages/ranger_adabelief_0.1.0/ranger_adabelief/ranger_adabelief.py": {
        "torch": {
            "zeros_like_136": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_137": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_140": {
                "variable": {
                    "value": "state[slow_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}