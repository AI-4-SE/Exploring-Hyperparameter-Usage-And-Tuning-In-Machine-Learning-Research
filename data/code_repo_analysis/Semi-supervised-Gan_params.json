{
    "Datasets.py": {
        "torch": {
            "TensorDataset_29": {
                "*tensors": {
                    "value": "tensor_data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "ImprovedGAN.py": {
        "torch": {
            "Adam_38": {
                "variable": {
                    "value": "self.Doptim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.momentum, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "self.Goptim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.momentum, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_51": {
                "variable": {
                    "value": "prob_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D(x_label, cuda=self.args.cuda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_57": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(output_label.max(1)[1] == y).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_67": {
                "variable": {
                    "value": "mom_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mom_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D(fake, feature=True, cuda=self.args.cuda)",
                            "Call"
                        ],
                        [
                            "torch.mean(mom_gen, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_68": {
                "variable": {
                    "value": "mom_unlabel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mom_unlabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D(Variable(x_unlabel), feature=True, cuda=self.args.cuda)",
                            "Call"
                        ],
                        [
                            "torch.mean(mom_unlabel, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "loss_fm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(mom_gen - mom_unlabel) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorDataset_83": {
                "variable": {
                    "value": "tile_labeled",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "t1.repeat(times, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.savedir, 'G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_24": {
                "variable": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.savedir, 'D.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "unlabel_loader1",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.unlabeled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "unlabel_loader2",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.unlabeled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "label_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tile_labeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(t1.repeat(times, 1, 1, 1), t2.repeat(times))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_153": {
                "input": {
                    "value": "pred == y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_29": {
                "obj": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.savedir, 'G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.savedir, 'D.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_52": {
                "input": {
                    "value": "prob_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(output_label, 1, y.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_149": {
                "tensors": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_55": {
                "input": {
                    "value": "F.softplus(logz_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_134": {
                "obj": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.savedir, 'G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.savedir, 'D.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_54": {
                "input": {
                    "value": "logz_unlabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_sum_exp(output_unlabel)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_55": {
                "input": {
                    "value": "logz_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_sum_exp(output_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_139": {
                "input": {
                    "value": "self.D(Variable(x), cuda=self.args.cuda)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_54": {
                "input": {
                    "value": "logz_unlabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_sum_exp(output_unlabel)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Nets.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LinearWeightNorm(input_dim, 1000), LinearWeightNorm(1000, 500), LinearWeightNorm(500, 250), LinearWeightNorm(250, 250), LinearWeightNorm(250, 250)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_46": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_48": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.bn1_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.bn2_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.fc1(x)) + self.bn1_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.fc2(x)) + self.bn2_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_56": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_25": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_32": {
                "*size": {
                    "value": "x_f.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "functional.py": {
        "torch": {
            "normal_15": {
                "mean": {
                    "value": "L.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "weight_scale / math.sqrt(L.weight.size()[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_features, in_features) * weight_init_stdv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_9": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_10": {
                "input": {
                    "value": "torch.sum(torch.exp(x - m.unsqueeze(1)), dim=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.weight_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(out_features, 1) * weight_scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_36": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.weight_scale / torch.sqrt(torch.sum(self.weight ** 2, dim=1, keepdim=True))",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_10": {
                "input": {
                    "value": "torch.exp(x - m.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_35": {
                "input": {
                    "value": "torch.sum(self.weight ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_10": {
                "input": {
                    "value": "x - m.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_23": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_35": {
                "input": {
                    "value": "self.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_30": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}