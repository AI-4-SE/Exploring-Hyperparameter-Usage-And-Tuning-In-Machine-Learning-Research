{
    "rl_toolkit/core/agent.py": {
        "tensorflow": {
            "Variable_63": {
                "variable": {
                    "value": "self._train_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.ONLY_FIRST_REPLICA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "self._stop_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.ONLY_FIRST_REPLICA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "function_109": {
                "jit_compile": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_116": {
                "input": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._env.action_space.sample()",
                            "Call"
                        ],
                        [
                            "self.actor(tf.expand_dims(input, axis=0), with_log_prob=False, deterministic=False)",
                            "Call"
                        ],
                        [
                            "policy(self._last_obs)",
                            "Call"
                        ],
                        [
                            "np.array(action, copy=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_112": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rl_toolkit/core/learner.py": {
        "tensorflow": {
            "Adam_101": {
                "learning_rate": {
                    "value": "actor_learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "global_clipnorm": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_104": {
                "learning_rate": {
                    "value": "critic_learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "global_clipnorm": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_107": {
                "learning_rate": {
                    "value": "alpha_learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rl_toolkit/core/server.py": {
        "tensorflow": {
            "Variable_63": {
                "variable": {
                    "value": "self._train_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.ONLY_FIRST_REPLICA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "self._stop_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.ONLY_FIRST_REPLICA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorSpec_118": {
                "shape": {
                    "value": "[*self._env.observation_space.shape]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._env.observation_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_122": {
                "shape": {
                    "value": "[*self._env.action_space.shape]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._env.action_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_126": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_127": {
                "shape": {
                    "value": "[*self._env.observation_space.shape]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._env.observation_space.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_131": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rl_toolkit/core/tester.py": {
        "tensorflow": {
            "function_64": {
                "jit_compile": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "input": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor(tf.expand_dims(state, axis=0), with_log_prob=False, deterministic=True)",
                            "Call"
                        ],
                        [
                            "self.policy(self._last_obs)",
                            "Call"
                        ],
                        [
                            "np.array(action, copy=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rl_toolkit/networks/callbacks/agent.py": {
        "tensorflow": {
            "Variable_15": {
                "variable": {
                    "value": "self._train_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.ONLY_FIRST_REPLICA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_22": {
                "variable": {
                    "value": "self._stop_agents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.ONLY_FIRST_REPLICA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "rl_toolkit/networks/layers/noise.py": {
        "tensorflow": {
            "get_32": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_initializer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_33": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_34": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_58": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_75": {
                "features": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Zeros_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "serialize_65": {
                "activation": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_66": {
                "activation": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "serialize_67": {
                "activation": {
                    "value": "self.kernel_constraint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "input": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rl_toolkit/networks/models/actor.py": {
        "tensorflow": {
            "VarianceScaling_9": {
                "variable": {
                    "value": "uniform_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "distribution": {
                    "value": "uniform",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "fan_in",
                    "type": "str",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_40": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "uniform_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VarianceScaling(distribution='uniform', mode='fan_in', scale=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_47": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "uniform_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VarianceScaling(distribution='uniform', mode='fan_in', scale=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_54": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "uniform_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VarianceScaling(distribution='uniform', mode='fan_in', scale=1.0)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_60": {
                "variable": {
                    "value": "self.clip_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "function": {
                    "value": "lambda x: tf.clip_by_value(x, clip_mean_min, clip_mean_max)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "clip_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.square(latent_sde)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.square(self.noise.scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_61": {
                "t": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_0(inputs)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "clip_mean_min",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_mean_max",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Constant_68": {
                "value": {
                    "value": "init_noise",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_97": {
                "x": {
                    "value": "self.noise.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "x": {
                    "value": "variance + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rl_toolkit/networks/models/actor_critic.py": {
        "tensorflow": {
            "constant_50": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "log_alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_58": {
                "variable": {
                    "value": "self.target_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "-n_outputs",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_95": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_111": {
                "variable": {
                    "value": "next_quantiles",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.reshape(next_quantiles, [next_quantiles.shape[0], -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_121": {
                "variable": {
                    "value": "target_quantiles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample.data['reward'] + (1.0 - tf.cast(sample.data['terminal'], dtype=tf.float32)) * self.gamma * (next_quantiles - alpha * next_log_pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "compute_average_loss_136": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "per_example_loss": {
                    "value": "tf.reduce_mean(tf.math.abs(self.cum_prob - tf.cast(pairwise_delta < 0.0, dtype=tf.float32)) * (pairwise_delta + tf.math.softplus(-2.0 * pairwise_delta) - tf.math.log(2.0)), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "compute_average_loss_161": {
                "variable": {
                    "value": "actor_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "per_example_loss": {
                    "value": "alpha * log_pi - tf.reduce_mean(tf.reduce_mean(quantiles, axis=2), axis=1, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "compute_average_loss_169": {
                "variable": {
                    "value": "alpha_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "per_example_loss": {
                    "value": "-self.log_alpha * tf.stop_gradient(log_pi + self.target_entropy)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "tensor": {
                    "value": "next_quantiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_target([sample.data['next_observation'], next_action])",
                            "Call"
                        ],
                        [
                            "tf.sort(tf.reshape(next_quantiles, [next_quantiles.shape[0], -1]))",
                            "Call"
                        ],
                        [
                            "next_quantiles[:, :self.critic_target.quantiles_total - self.critic_target.top_quantiles_to_drop]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[next_quantiles.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_157": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_137": {
                "input_tensor": {
                    "value": "tf.math.abs(self.cum_prob - tf.cast(pairwise_delta < 0.0, dtype=tf.float32)) * (pairwise_delta + tf.math.softplus(-2.0 * pairwise_delta) - tf.math.log(2.0))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_52": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "input_tensor": {
                    "value": "tf.reduce_mean(quantiles, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_170": {
                "input": {
                    "value": "log_pi + self.target_entropy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_138": {
                "x": {
                    "value": "self.cum_prob - tf.cast(pairwise_delta < 0.0, dtype=tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_164": {
                "input_tensor": {
                    "value": "quantiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic([sample.data['observation'], sample.data['action']])",
                            "Call"
                        ],
                        [
                            "self(sample.data['observation'])",
                            "Call"
                        ],
                        [
                            "self.critic([inputs, action])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_123": {
                "x": {
                    "value": "sample.data['terminal']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_144": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_139": {
                "x": {
                    "value": "pairwise_delta < 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_143": {
                "features": {
                    "value": "-2.0 * pairwise_delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rl_toolkit/networks/models/critic.py": {
        "tensorflow": {
            "VarianceScaling_6": {
                "variable": {
                    "value": "uniform_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "distribution": {
                    "value": "uniform",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "fan_in",
                    "type": "str",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_26": {
                "variable": {
                    "value": "self.fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "uniform_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VarianceScaling(distribution='uniform', mode='fan_in', scale=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_33": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "uniform_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VarianceScaling(distribution='uniform', mode='fan_in', scale=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_37": {
                "variable": {
                    "value": "self.fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "uniform_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VarianceScaling(distribution='uniform', mode='fan_in', scale=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Add_41": {
                "variable": {
                    "value": "self.add_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_42": {
                "variable": {
                    "value": "self.activ_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_45": {
                "variable": {
                    "value": "self.quantiles",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_quantiles",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "uniform_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VarianceScaling(distribution='uniform', mode='fan_in', scale=1.0)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "quantiles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "quantiles",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[model(inputs) for model in self.models]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rl_toolkit/utils/replay_buffer.py": {
        "tensorflow": {
            "range_15": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "repeat_15": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl_toolkit/utils/variable_container.py": {
        "tensorflow": {
            "map_structure_21": {
                "variable": {
                    "value": "self.signature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda variable: tf.TensorSpec(variable.shape, dtype=variable.dtype)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self._variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_25": {
                "variable": {
                    "value": "self.dtypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda spec: spec.dtype",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self.signature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_30": {
                "structure": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tf_client.sample(self._table, data_dtypes=[self.dtypes]).data[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorSpec_22": {
                "shape": {
                    "value": "variable.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "variable.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_36": {
                "structure": {
                    "value": "self._variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_37": {
                "value": {
                    "value": "[self._table]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_38": {
                "value": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}