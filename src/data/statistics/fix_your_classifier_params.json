{
    "fixed_proj.py": {
        "torch": {
            "from_numpy_14": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hadamard(sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / (x.norm(2, -1, keepdim=True) + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x / x.norm(2, -1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj.type_as(x)",
                            "Call"
                        ],
                        [
                            "self.proj.type_as(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(hadamard(sz))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([init_scale])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(output_size).uniform_(-init_scale, init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1).fill_(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(output_size).fill_(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_59": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "orthogonal_60": {
                "module": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / (x.norm(2, -1, keepdim=True) + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x / x.norm(2, -1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w[:self.output_size, :self.input_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}