{
    "RBM/rbm.py": {
        "tensorflow": {
            "zeros_17": {
                "variable": {
                    "value": "default",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.num_visible, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "default",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.num_hidden, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_25": {
                "variable": {
                    "value": "default",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.num_visible, self.num_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_29": {
                "variable": {
                    "value": "self.hidden_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.sample_binary_tensor(tf.constant(0.5), num_samples, self.num_hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_samples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_54": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(v, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(v, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_68": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(v, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(v, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_110": {
                "variable": {
                    "value": "start_config",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "start_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(start_config, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(start_config, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "start_config",
                            "Method Argument"
                        ],
                        [
                            "start_config",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_130": {
                "variable": {
                    "value": "start_config",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "start_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(start_config, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(start_config, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "start_config",
                            "Method Argument"
                        ],
                        [
                            "start_config",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_168": {
                "variable": {
                    "value": "expectation_from_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.energy(hidden_samples, visible_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_171": {
                "variable": {
                    "value": "expectation_from_model",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.energy(model_hidden, model_visible)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "initial_value": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_186": {
                "condition": {
                    "value": "tf.less(tf.random.uniform(shape=(m, n)), prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones(shape=(m, n))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-1 * tf.ones(shape=(m, n))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(v, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(v, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_71": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(v, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(v, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_83": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_161": {
                "input_tensor": {
                    "value": "tf.matmul(visible_samples, self.weights) * hidden_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_187": {
                "x": {
                    "value": "tf.random.uniform(shape=(m, n))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_188": {
                "shape": {
                    "value": "(m, n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_30": {
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_45": {
                "x": {
                    "value": "tf.matmul(v, self.weights) + tf.transpose(self.hidden_bias)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "x": {
                    "value": "tf.matmul(h, self.weights, transpose_b=True) + tf.transpose(self.visible_bias)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "a": {
                    "value": "visible_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "visible_samples",
                            "Method Argument"
                        ],
                        [
                            "visible_samples",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.visible_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_187": {
                "shape": {
                    "value": "(m, n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_189": {
                "shape": {
                    "value": "(m, n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "a": {
                    "value": "hidden_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_h_given(visible_samples)",
                            "Call"
                        ],
                        [
                            "hidden_samples",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.hidden_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "a": {
                    "value": "visible_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "visible_samples",
                            "Method Argument"
                        ],
                        [
                            "visible_samples",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(v, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(v, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "a": {
                    "value": "self.hidden_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_50": {
                "a": {
                    "value": "self.visible_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "RBM/sample_RBM.py": {
        "tensorflow": {}
    },
    "RBM/train_RBM.py": {
        "tensorflow": {
            "placeholder_86": {
                "variable": {
                    "value": "placeholders.visible_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_visible)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "ops.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "total_iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "global_step_count",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_92": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_95": {
                "variable": {
                    "value": "ops.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.initialize_all_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.initialize_local_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_local_variables_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}