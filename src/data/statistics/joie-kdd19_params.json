{
    "run/training_model2_scai2.py": {
        "tensorflow": {}
    },
    "src/model2.py": {
        "tensorflow": {
            "constant_25": {
                "value": {
                    "value": "orthogonal(shape) * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reset_default_graph_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "self._ht1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ht1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_entsA, self._dim1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "self._r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "r1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_relsA, self._dim1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "self._ht2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ht2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_entsB, self._dim2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "self._r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "r2",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_relsB, self._dim2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_90": {
                "variable": {
                    "value": "self._ht1_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "ht1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_91": {
                "variable": {
                    "value": "self._ht2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "ht2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "self._A_h_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "A_h_index",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "self._A_r_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "A_r_index",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "self._A_t_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "A_t_index",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "self._A_hn_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "A_hn_index",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "self._A_tn_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "A_tn_index",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_123": {
                "variable": {
                    "value": "A_h_ent_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht1, A_h_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_124": {
                "variable": {
                    "value": "A_t_ent_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht1, A_t_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_125": {
                "variable": {
                    "value": "A_rel_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "A_r_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l2_normalize_127": {
                "variable": {
                    "value": "A_hn_ent_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht1, A_hn_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_128": {
                "variable": {
                    "value": "A_tn_ent_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht1, A_tn_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "self._B_h_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "B_h_index",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_175": {
                "variable": {
                    "value": "self._B_r_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "B_r_index",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_179": {
                "variable": {
                    "value": "self._B_t_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "B_t_index",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_183": {
                "variable": {
                    "value": "self._B_hn_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "B_hn_index",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_187": {
                "variable": {
                    "value": "self._B_tn_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "B_tn_index",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_192": {
                "variable": {
                    "value": "B_h_ent_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht2, B_h_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_193": {
                "variable": {
                    "value": "B_t_ent_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht2, B_t_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_194": {
                "variable": {
                    "value": "B_rel_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "B_r_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l2_normalize_196": {
                "variable": {
                    "value": "B_hn_ent_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht2, B_hn_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_197": {
                "variable": {
                    "value": "B_tn_ent_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht2, B_tn_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_238": {
                "variable": {
                    "value": "self._AM_index1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeA]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "AM_index1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_242": {
                "variable": {
                    "value": "self._AM_index2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeA]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "AM_index2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_247": {
                "variable": {
                    "value": "self._AM_nindex1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeA]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "AM_nindex1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_251": {
                "variable": {
                    "value": "self._AM_nindex2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeA]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "AM_nindex2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_256": {
                "variable": {
                    "value": "AM_ent1_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht1, AM_index1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_257": {
                "variable": {
                    "value": "AM_ent2_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht2, AM_index2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_258": {
                "variable": {
                    "value": "AM_ent1_nbatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht1, AM_nindex1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_259": {
                "variable": {
                    "value": "AM_ent2_nbatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht2, AM_nindex2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_262": {
                "variable": {
                    "value": "self._M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "M",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._dim1, self._dim2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "orthogonal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_263": {
                "variable": {
                    "value": "self._b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._dim2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_264": {
                "variable": {
                    "value": "self._Mc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Mc",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._dim2, self._hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "orthogonal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_265": {
                "variable": {
                    "value": "self._bc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bc",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_266": {
                "variable": {
                    "value": "self._Me",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Me",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._dim1, self._hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "orthogonal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_267": {
                "variable": {
                    "value": "self._be",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "be",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_323": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_324": {
                "variable": {
                    "value": "self._opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "merge_all_330": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_331": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "graph",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_85": {
                "name": {
                    "value": "ht1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "ht1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histogram_86": {
                "name": {
                    "value": "ht2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "ht2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histogram_87": {
                "name": {
                    "value": "r1",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histogram_88": {
                "name": {
                    "value": "r2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "subtract_133": {
                "variable": {
                    "value": "A_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(A_h_ent_batch, A_rel_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "A_t_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, A_t_index), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_135": {
                "variable": {
                    "value": "A_neg_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(A_hn_ent_batch, A_rel_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "A_tn_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, A_tn_index), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_203": {
                "variable": {
                    "value": "B_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(B_h_ent_batch, B_rel_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "B_t_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, B_t_index), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_205": {
                "variable": {
                    "value": "B_neg_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(B_hn_ent_batch, B_rel_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "B_tn_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, B_tn_index), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_270": {
                "variable": {
                    "value": "AM_pos_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "AM_ent1_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, AM_index1), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "AM_ent2_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, AM_index2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_271": {
                "variable": {
                    "value": "AM_neg_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "AM_ent1_nbatch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, AM_nindex1), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "AM_ent2_nbatch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, AM_nindex2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_318": {
                "name": {
                    "value": "A_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "A_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_319": {
                "name": {
                    "value": "B_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "B_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_320": {
                "name": {
                    "value": "AM_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "AM_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_123": {
                "params": {
                    "value": "ht1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "A_h_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_124": {
                "params": {
                    "value": "ht1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "A_t_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_127": {
                "params": {
                    "value": "ht1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "A_hn_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_128": {
                "params": {
                    "value": "ht1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "A_tn_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_153": {
                "variable": {
                    "value": "A_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(A_rel_batch, tf.multiply(A_h_ent_batch, A_t_ent_batch))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_154": {
                "variable": {
                    "value": "A_neg_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(A_rel_batch, tf.multiply(A_hn_ent_batch, A_tn_ent_batch))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_192": {
                "params": {
                    "value": "ht2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "B_h_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_193": {
                "params": {
                    "value": "ht2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "B_t_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_196": {
                "params": {
                    "value": "ht2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "B_hn_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_197": {
                "params": {
                    "value": "ht2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "B_tn_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_223": {
                "variable": {
                    "value": "B_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(B_rel_batch, tf.multiply(B_h_ent_batch, B_t_ent_batch))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_224": {
                "variable": {
                    "value": "B_neg_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(B_rel_batch, tf.multiply(B_hn_ent_batch, B_tn_ent_batch))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_256": {
                "params": {
                    "value": "ht1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "AM_index1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_257": {
                "params": {
                    "value": "ht2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "AM_index2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_258": {
                "params": {
                    "value": "ht1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "AM_nindex1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_259": {
                "params": {
                    "value": "ht2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "AM_nindex2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "subtract_275": {
                "variable": {
                    "value": "AM_pos_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_normalize(tf.add(tf.matmul(AM_ent1_batch, M), bias), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "AM_ent2_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, AM_index2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_276": {
                "variable": {
                    "value": "AM_neg_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_normalize(tf.add(tf.matmul(AM_ent1_nbatch, M), bias), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "AM_ent2_nbatch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, AM_nindex2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_133": {
                "x": {
                    "value": "A_h_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, A_h_index), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "A_rel_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(r1, A_r_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_135": {
                "x": {
                    "value": "A_hn_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, A_hn_index), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "A_rel_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(r1, A_r_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_160": {
                "variable": {
                    "value": "A_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(A_rel_batch, circular_correlation(A_h_ent_batch, A_t_ent_batch))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_161": {
                "variable": {
                    "value": "A_neg_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(A_rel_batch, circular_correlation(A_hn_ent_batch, A_tn_ent_batch))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_203": {
                "x": {
                    "value": "B_h_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, B_h_index), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "B_rel_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(r2, B_r_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_205": {
                "x": {
                    "value": "B_hn_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, B_hn_index), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "B_rel_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(r2, B_r_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_229": {
                "variable": {
                    "value": "B_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(B_rel_batch, circular_correlation(B_h_ent_batch, B_t_ent_batch))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_230": {
                "variable": {
                    "value": "B_neg_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(B_rel_batch, circular_correlation(B_hn_ent_batch, B_tn_ent_batch))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_280": {
                "variable": {
                    "value": "AM_pos_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent1_batch, M), bias)), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "AM_ent2_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, AM_index2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_281": {
                "variable": {
                    "value": "AM_neg_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent1_nbatch, M), bias)), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "AM_ent2_nbatch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, AM_nindex2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_306": {
                "input_tensor": {
                    "value": "tf.maximum(tf.subtract(tf.add(tf.reduce_sum(tf.abs(AM_pos_loss_matrix), 1), self._mA), tf.reduce_sum(tf.abs(AM_neg_loss_matrix), 1)), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_312": {
                "input_tensor": {
                    "value": "tf.maximum(tf.subtract(tf.add(tf.sqrt(tf.reduce_sum(tf.square(AM_pos_loss_matrix), 1)), self._mA), tf.sqrt(tf.reduce_sum(tf.square(AM_neg_loss_matrix), 1))), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_137": {
                "input_tensor": {
                    "value": "tf.maximum(tf.subtract(tf.add(tf.reduce_sum(tf.abs(A_loss_matrix), 1), self._m1), tf.reduce_sum(tf.abs(A_neg_matrix), 1)), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "input_tensor": {
                    "value": "tf.maximum(tf.subtract(tf.add(tf.sqrt(tf.reduce_sum(tf.square(A_loss_matrix), 1)), self._m1), tf.sqrt(tf.reduce_sum(tf.square(A_neg_matrix), 1))), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_153": {
                "x": {
                    "value": "A_h_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, A_h_index), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "A_t_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, A_t_index), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_154": {
                "x": {
                    "value": "A_hn_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, A_hn_index), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "A_tn_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, A_tn_index), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_156": {
                "input_tensor": {
                    "value": "tf.maximum(tf.add(tf.subtract(A_neg_matrix, A_loss_matrix), self._m1), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_207": {
                "input_tensor": {
                    "value": "tf.maximum(tf.subtract(tf.add(tf.reduce_sum(tf.abs(B_loss_matrix), 1), self._m2), tf.reduce_sum(tf.abs(B_neg_matrix), 1)), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_214": {
                "input_tensor": {
                    "value": "tf.maximum(tf.subtract(tf.add(tf.sqrt(tf.reduce_sum(tf.square(B_loss_matrix), 1)), self._m2), tf.sqrt(tf.reduce_sum(tf.square(B_neg_matrix), 1))), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_223": {
                "x": {
                    "value": "B_h_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, B_h_index), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "B_t_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, B_t_index), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_224": {
                "x": {
                    "value": "B_hn_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, B_hn_index), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "B_tn_ent_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, B_tn_index), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_226": {
                "input_tensor": {
                    "value": "tf.maximum(tf.add(tf.subtract(B_neg_matrix, B_loss_matrix), self._m2), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_275": {
                "x": {
                    "value": "tf.add(tf.matmul(AM_ent1_batch, M), bias)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_276": {
                "x": {
                    "value": "tf.add(tf.matmul(AM_ent1_nbatch, M), bias)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_286": {
                "variable": {
                    "value": "AM_pos_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent1_batch, Me), b_e)), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent2_batch, Mc), b_c)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_287": {
                "variable": {
                    "value": "AM_neg_loss_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent1_nbatch, Me), b_e)), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent2_nbatch, Mc), b_c)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_307": {
                "x": {
                    "value": "tf.subtract(tf.add(tf.reduce_sum(tf.abs(AM_pos_loss_matrix), 1), self._mA), tf.reduce_sum(tf.abs(AM_neg_loss_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_313": {
                "x": {
                    "value": "tf.subtract(tf.add(tf.sqrt(tf.reduce_sum(tf.square(AM_pos_loss_matrix), 1)), self._mA), tf.sqrt(tf.reduce_sum(tf.square(AM_neg_loss_matrix), 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_138": {
                "x": {
                    "value": "tf.subtract(tf.add(tf.reduce_sum(tf.abs(A_loss_matrix), 1), self._m1), tf.reduce_sum(tf.abs(A_neg_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_145": {
                "x": {
                    "value": "tf.subtract(tf.add(tf.sqrt(tf.reduce_sum(tf.square(A_loss_matrix), 1)), self._m1), tf.sqrt(tf.reduce_sum(tf.square(A_neg_matrix), 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_156": {
                "x": {
                    "value": "tf.add(tf.subtract(A_neg_matrix, A_loss_matrix), self._m1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_160": {
                "x": {
                    "value": "A_rel_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(r1, A_r_index)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "circular_correlation(A_h_ent_batch, A_t_ent_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_161": {
                "x": {
                    "value": "A_rel_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(r1, A_r_index)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "circular_correlation(A_hn_ent_batch, A_tn_ent_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_163": {
                "input_tensor": {
                    "value": "tf.maximum(tf.add(tf.subtract(A_neg_matrix, A_loss_matrix), self._m1), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_208": {
                "x": {
                    "value": "tf.subtract(tf.add(tf.reduce_sum(tf.abs(B_loss_matrix), 1), self._m2), tf.reduce_sum(tf.abs(B_neg_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_215": {
                "x": {
                    "value": "tf.subtract(tf.add(tf.sqrt(tf.reduce_sum(tf.square(B_loss_matrix), 1)), self._m2), tf.sqrt(tf.reduce_sum(tf.square(B_neg_matrix), 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_226": {
                "x": {
                    "value": "tf.add(tf.subtract(B_neg_matrix, B_loss_matrix), self._m2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_229": {
                "x": {
                    "value": "B_rel_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(r2, B_r_index)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "circular_correlation(B_h_ent_batch, B_t_ent_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_230": {
                "x": {
                    "value": "B_rel_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(r2, B_r_index)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "circular_correlation(B_hn_ent_batch, B_tn_ent_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_232": {
                "input_tensor": {
                    "value": "tf.maximum(tf.add(tf.subtract(B_neg_matrix, B_loss_matrix), self._m2), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_275": {
                "x": {
                    "value": "tf.matmul(AM_ent1_batch, M)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_276": {
                "x": {
                    "value": "tf.matmul(AM_ent1_nbatch, M)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l2_normalize_280": {
                "x": {
                    "value": "tf.tanh(tf.add(tf.matmul(AM_ent1_batch, M), bias))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_281": {
                "x": {
                    "value": "tf.tanh(tf.add(tf.matmul(AM_ent1_nbatch, M), bias))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_308": {
                "x": {
                    "value": "tf.add(tf.reduce_sum(tf.abs(AM_pos_loss_matrix), 1), self._mA)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(tf.abs(AM_neg_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_314": {
                "x": {
                    "value": "tf.add(tf.sqrt(tf.reduce_sum(tf.square(AM_pos_loss_matrix), 1)), self._mA)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(AM_neg_loss_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_139": {
                "x": {
                    "value": "tf.add(tf.reduce_sum(tf.abs(A_loss_matrix), 1), self._m1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(tf.abs(A_neg_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_146": {
                "x": {
                    "value": "tf.add(tf.sqrt(tf.reduce_sum(tf.square(A_loss_matrix), 1)), self._m1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(A_neg_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_156": {
                "x": {
                    "value": "tf.subtract(A_neg_matrix, A_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._m1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_163": {
                "x": {
                    "value": "tf.add(tf.subtract(A_neg_matrix, A_loss_matrix), self._m1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_209": {
                "x": {
                    "value": "tf.add(tf.reduce_sum(tf.abs(B_loss_matrix), 1), self._m2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(tf.abs(B_neg_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_216": {
                "x": {
                    "value": "tf.add(tf.sqrt(tf.reduce_sum(tf.square(B_loss_matrix), 1)), self._m2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(B_neg_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_226": {
                "x": {
                    "value": "tf.subtract(B_neg_matrix, B_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._m2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_232": {
                "x": {
                    "value": "tf.add(tf.subtract(B_neg_matrix, B_loss_matrix), self._m2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_275": {
                "a": {
                    "value": "AM_ent1_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, AM_index1), 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_276": {
                "a": {
                    "value": "AM_ent1_nbatch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, AM_nindex1), 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_280": {
                "x": {
                    "value": "tf.add(tf.matmul(AM_ent1_batch, M), bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_281": {
                "x": {
                    "value": "tf.add(tf.matmul(AM_ent1_nbatch, M), bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_286": {
                "x": {
                    "value": "tf.tanh(tf.add(tf.matmul(AM_ent2_batch, Mc), b_c))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_287": {
                "x": {
                    "value": "tf.tanh(tf.add(tf.matmul(AM_ent2_nbatch, Mc), b_c))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_308": {
                "x": {
                    "value": "tf.reduce_sum(tf.abs(AM_pos_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._mA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_309": {
                "input_tensor": {
                    "value": "tf.abs(AM_neg_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_314": {
                "x": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(AM_pos_loss_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._mA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_315": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(AM_neg_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_139": {
                "x": {
                    "value": "tf.reduce_sum(tf.abs(A_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._m1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_140": {
                "input_tensor": {
                    "value": "tf.abs(A_neg_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_146": {
                "x": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(A_loss_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._m1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_147": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(A_neg_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_156": {
                "x": {
                    "value": "A_neg_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(A_hn_ent_batch, A_rel_batch), A_tn_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, tf.multiply(A_hn_ent_batch, A_tn_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, circular_correlation(A_hn_ent_batch, A_tn_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "A_loss_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(A_h_ent_batch, A_rel_batch), A_t_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, tf.multiply(A_h_ent_batch, A_t_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, circular_correlation(A_h_ent_batch, A_t_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_163": {
                "x": {
                    "value": "tf.subtract(A_neg_matrix, A_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._m1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_209": {
                "x": {
                    "value": "tf.reduce_sum(tf.abs(B_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._m2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_210": {
                "input_tensor": {
                    "value": "tf.abs(B_neg_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_216": {
                "x": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(B_loss_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._m2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_217": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(B_neg_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_226": {
                "x": {
                    "value": "B_neg_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(B_hn_ent_batch, B_rel_batch), B_tn_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, tf.multiply(B_hn_ent_batch, B_tn_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, circular_correlation(B_hn_ent_batch, B_tn_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "B_loss_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(B_h_ent_batch, B_rel_batch), B_t_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, tf.multiply(B_h_ent_batch, B_t_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, circular_correlation(B_h_ent_batch, B_t_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_232": {
                "x": {
                    "value": "tf.subtract(B_neg_matrix, B_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._m2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_280": {
                "x": {
                    "value": "tf.matmul(AM_ent1_batch, M)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_281": {
                "x": {
                    "value": "tf.matmul(AM_ent1_nbatch, M)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_286": {
                "x": {
                    "value": "tf.add(tf.matmul(AM_ent2_batch, Mc), b_c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_287": {
                "x": {
                    "value": "tf.add(tf.matmul(AM_ent2_nbatch, Mc), b_c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_308": {
                "input_tensor": {
                    "value": "tf.abs(AM_pos_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_309": {
                "x": {
                    "value": "AM_neg_loss_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(AM_ent1_nbatch, AM_ent2_nbatch)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.nn.l2_normalize(tf.add(tf.matmul(AM_ent1_nbatch, M), bias), 1), AM_ent2_nbatch)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent1_nbatch, M), bias)), 1), AM_ent2_nbatch)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent1_nbatch, Me), b_e)), 1), tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent2_nbatch, Mc), b_c)), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_314": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(AM_pos_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_315": {
                "input_tensor": {
                    "value": "tf.square(AM_neg_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "input_tensor": {
                    "value": "tf.abs(A_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_140": {
                "x": {
                    "value": "A_neg_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(A_hn_ent_batch, A_rel_batch), A_tn_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, tf.multiply(A_hn_ent_batch, A_tn_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, circular_correlation(A_hn_ent_batch, A_tn_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_146": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(A_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_147": {
                "input_tensor": {
                    "value": "tf.square(A_neg_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_163": {
                "x": {
                    "value": "A_neg_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(A_hn_ent_batch, A_rel_batch), A_tn_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, tf.multiply(A_hn_ent_batch, A_tn_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, circular_correlation(A_hn_ent_batch, A_tn_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "A_loss_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(A_h_ent_batch, A_rel_batch), A_t_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, tf.multiply(A_h_ent_batch, A_t_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, circular_correlation(A_h_ent_batch, A_t_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_209": {
                "input_tensor": {
                    "value": "tf.abs(B_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_210": {
                "x": {
                    "value": "B_neg_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(B_hn_ent_batch, B_rel_batch), B_tn_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, tf.multiply(B_hn_ent_batch, B_tn_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, circular_correlation(B_hn_ent_batch, B_tn_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_216": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(B_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_217": {
                "input_tensor": {
                    "value": "tf.square(B_neg_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_232": {
                "x": {
                    "value": "B_neg_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(B_hn_ent_batch, B_rel_batch), B_tn_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, tf.multiply(B_hn_ent_batch, B_tn_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, circular_correlation(B_hn_ent_batch, B_tn_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "B_loss_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(B_h_ent_batch, B_rel_batch), B_t_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, tf.multiply(B_h_ent_batch, B_t_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, circular_correlation(B_h_ent_batch, B_t_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_280": {
                "a": {
                    "value": "AM_ent1_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, AM_index1), 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_281": {
                "a": {
                    "value": "AM_ent1_nbatch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, AM_nindex1), 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_286": {
                "x": {
                    "value": "tf.matmul(AM_ent2_batch, Mc)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "add_287": {
                "x": {
                    "value": "tf.matmul(AM_ent2_nbatch, Mc)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_308": {
                "x": {
                    "value": "AM_pos_loss_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(AM_ent1_batch, AM_ent2_batch)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.nn.l2_normalize(tf.add(tf.matmul(AM_ent1_batch, M), bias), 1), AM_ent2_batch)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent1_batch, M), bias)), 1), AM_ent2_batch)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent1_batch, Me), b_e)), 1), tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent2_batch, Mc), b_c)), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_314": {
                "input_tensor": {
                    "value": "tf.square(AM_pos_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_315": {
                "x": {
                    "value": "AM_neg_loss_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(AM_ent1_nbatch, AM_ent2_nbatch)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.nn.l2_normalize(tf.add(tf.matmul(AM_ent1_nbatch, M), bias), 1), AM_ent2_nbatch)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent1_nbatch, M), bias)), 1), AM_ent2_nbatch)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent1_nbatch, Me), b_e)), 1), tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent2_nbatch, Mc), b_c)), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_139": {
                "x": {
                    "value": "A_loss_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(A_h_ent_batch, A_rel_batch), A_t_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, tf.multiply(A_h_ent_batch, A_t_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, circular_correlation(A_h_ent_batch, A_t_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_146": {
                "input_tensor": {
                    "value": "tf.square(A_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_147": {
                "x": {
                    "value": "A_neg_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(A_hn_ent_batch, A_rel_batch), A_tn_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, tf.multiply(A_hn_ent_batch, A_tn_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, circular_correlation(A_hn_ent_batch, A_tn_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_209": {
                "x": {
                    "value": "B_loss_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(B_h_ent_batch, B_rel_batch), B_t_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, tf.multiply(B_h_ent_batch, B_t_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, circular_correlation(B_h_ent_batch, B_t_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_216": {
                "input_tensor": {
                    "value": "tf.square(B_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_217": {
                "x": {
                    "value": "B_neg_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(B_hn_ent_batch, B_rel_batch), B_tn_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, tf.multiply(B_hn_ent_batch, B_tn_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, circular_correlation(B_hn_ent_batch, B_tn_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_286": {
                "a": {
                    "value": "AM_ent2_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, AM_index2), 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Mc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_287": {
                "a": {
                    "value": "AM_ent2_nbatch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, AM_nindex2), 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Mc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_314": {
                "x": {
                    "value": "AM_pos_loss_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(AM_ent1_batch, AM_ent2_batch)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.nn.l2_normalize(tf.add(tf.matmul(AM_ent1_batch, M), bias), 1), AM_ent2_batch)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent1_batch, M), bias)), 1), AM_ent2_batch)",
                            "Call"
                        ],
                        [
                            "tf.subtract(tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent1_batch, Me), b_e)), 1), tf.nn.l2_normalize(tf.tanh(tf.add(tf.matmul(AM_ent2_batch, Mc), b_c)), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_146": {
                "x": {
                    "value": "A_loss_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(A_h_ent_batch, A_rel_batch), A_t_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, tf.multiply(A_h_ent_batch, A_t_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(A_rel_batch, circular_correlation(A_h_ent_batch, A_t_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_216": {
                "x": {
                    "value": "B_loss_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(B_h_ent_batch, B_rel_batch), B_t_ent_batch)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, tf.multiply(B_h_ent_batch, B_t_ent_batch)), 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.multiply(B_rel_batch, circular_correlation(B_h_ent_batch, B_t_ent_batch)), 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/trainer2.py": {
        "tensorflow": {
            "Session_270": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_62": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_64": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_66": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'tf_log'",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "tensorflow": {
            "real_7": {
                "input": {
                    "value": "tf.spectral.ifft(tf.multiply(tf.conj(tf.spectral.fft(tf.complex(h, 0.0))), tf.spectral.fft(tf.complex(t, 0.0))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifft_7": {
                "input": {
                    "value": "tf.multiply(tf.conj(tf.spectral.fft(tf.complex(h, 0.0))), tf.spectral.fft(tf.complex(t, 0.0)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_7": {
                "x": {
                    "value": "tf.conj(tf.spectral.fft(tf.complex(h, 0.0)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.spectral.fft(tf.complex(t, 0.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conj_7": {
                "x": {
                    "value": "tf.spectral.fft(tf.complex(h, 0.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fft_7": {
                "input": {
                    "value": "tf.complex(h, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "complex_7": {
                "real": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "imag": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}