{
    "src/model.py": {
        "sklearn": {
            "roc_auc_score_176": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([self.labels, self.scores_normalized], feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([self.labels, self.scores_normalized], feed_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_179": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([self.labels, self.scores_normalized], feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([self.labels, self.scores_normalized], feed_dict)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "self.user_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "user_indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.item_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "item_indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_40": {
                "variable": {
                    "value": "self.user_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_user, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "KGNN_LS.get_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "user_emb_matrix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "self.entity_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_entity, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "KGNN_LS.get_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "entity_emb_matrix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "self.relation_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_relation, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "KGNN_LS.get_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relation_emb_matrix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "self.user_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.user_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.user_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.user_embeddings * self.item_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_63": {
                "variable": {
                    "value": "self.scores_normalized",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "variable": {
                    "value": "seeds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seeds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(seeds, axis=1)",
                            "Call"
                        ],
                        [
                            "seeds",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "entity_vectors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_150": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_labels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "self.base_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=self.labels, logits=self.scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "variable": {
                    "value": "self.ls_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=self.labels, logits=self.predicted_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_169": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "neighbor_entities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(self.adj_entity, entities[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "neighbor_relations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(self.adj_relation, entities[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_114": {
                "variable": {
                    "value": "users",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.user_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_124": {
                "variable": {
                    "value": "holdout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "holdout_item_for_user - user_entity_concat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_125": {
                "variable": {
                    "value": "reset_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "initial_label - tf.constant(0.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_126": {
                "variable": {
                    "value": "reset_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reset_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(initial_label - tf.constant(0.5), tf.bool)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(reset_mask, holdout_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "holdout_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(holdout_item_for_user - user_entity_concat, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_79": {
                "params": {
                    "value": "self.entity_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(self.n_iter)",
                            "Call"
                        ],
                        [
                            "i in range(self.n_iter)",
                            "Call"
                        ],
                        [
                            "i in range(self.n_iter)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_80": {
                "params": {
                    "value": "self.relation_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(self.n_iter)",
                            "Call"
                        ],
                        [
                            "i in range(self.n_iter)",
                            "Call"
                        ],
                        [
                            "i in range(self.n_iter)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_135": {
                "params": {
                    "value": "self.relation_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(self.n_iter)",
                            "Call"
                        ],
                        [
                            "i in range(self.n_iter)",
                            "Call"
                        ],
                        [
                            "i in range(self.n_iter)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_154": {
                "labels": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_159": {
                "t": {
                    "value": "self.relation_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_165": {
                "labels": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_70": {
                "params": {
                    "value": "self.adj_entity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "entities[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_71": {
                "params": {
                    "value": "self.adj_relation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "entities[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "l2_loss_158": {
                "t": {
                    "value": "self.entity_emb_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_161": {
                "t": {
                    "value": "aggregator.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_125": {
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_127": {
                "x": {
                    "value": "tf.logical_not(holdout_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_128": {
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "entity_vectors[hop + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, -1, self.n_neighbor, self.dim]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_94": {
                "tensor": {
                    "value": "relation_vectors[hop]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, -1, self.n_neighbor, self.dim]",
                            "List"
                        ]
                    ]
                }
            },
            "logical_not_128": {
                "x": {
                    "value": "holdout_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(holdout_item_for_user - user_entity_concat, tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_141": {
                "tensor": {
                    "value": "entity_labels[hop + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, -1, self.n_neighbor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "tensor": {
                    "value": "relation_vectors[hop]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, -1, self.n_neighbor, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/aggregators.py": {
        "tensorflow": {
            "reshape_77": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self_vectors + neighbors_agg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_78": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self_vectors + neighbors_agg, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output, self.weights) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(output, [self.batch_size, -1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.cast(masks, tf.float32) * self_labels + tf.cast(tf.logical_not(masks), tf.float32) * neighbors_aggregated",
                            "BinOp"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self_vectors + neighbors_agg, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output, self.weights) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(output, [self.batch_size, -1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.cast(masks, tf.float32) * self_labels + tf.cast(tf.logical_not(masks), tf.float32) * neighbors_aggregated",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "user_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "user_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(user_embeddings, [self.batch_size, 1, 1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(user_embeddings, [self.batch_size, 1, 1, self.dim])",
                            "Call"
                        ],
                        [
                            "user_embeddings",
                            "Method Argument"
                        ],
                        [
                            "user_embeddings",
                            "Method Argument"
                        ],
                        [
                            "user_embeddings",
                            "Method Argument"
                        ],
                        [
                            "user_embeddings",
                            "Method Argument"
                        ],
                        [
                            "user_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_96": {
                "variable": {
                    "value": "user_relation_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "user_embeddings * neighbor_relations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "user_relation_scores_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "user_relation_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(user_embeddings * neighbor_relations, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(user_embeddings * neighbor_relations, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_100": {
                "variable": {
                    "value": "neighbors_aggregated",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "user_relation_scores_normalized * neighbor_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "user_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "user_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(user_embeddings, [self.batch_size, 1, 1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(user_embeddings, [self.batch_size, 1, 1, self.dim])",
                            "Call"
                        ],
                        [
                            "user_embeddings",
                            "Method Argument"
                        ],
                        [
                            "user_embeddings",
                            "Method Argument"
                        ],
                        [
                            "user_embeddings",
                            "Method Argument"
                        ],
                        [
                            "user_embeddings",
                            "Method Argument"
                        ],
                        [
                            "user_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "user_relation_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "user_embeddings * neighbor_relations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "user_relation_scores_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "user_relation_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(user_embeddings * neighbor_relations, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(user_embeddings * neighbor_relations, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "variable": {
                    "value": "user_relation_scores_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_relation_scores_normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(user_relation_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(user_relation_scores_normalized, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(user_relation_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_55": {
                "variable": {
                    "value": "neighbors_aggregated",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "user_relation_scores_normalized * neighbor_vectors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "variable": {
                    "value": "neighbors_aggregated",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "neighbor_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "neighbor_vectors",
                            "Method Argument"
                        ],
                        [
                            "neighbor_vectors",
                            "Method Argument"
                        ],
                        [
                            "neighbor_vectors",
                            "Method Argument"
                        ],
                        [
                            "neighbor_vectors",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_68": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.dim, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_70": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self_vectors + neighbors_agg, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(output, self.weights) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(output, [self.batch_size, -1, self.dim])",
                            "Call"
                        ],
                        [
                            "tf.cast(masks, tf.float32) * self_labels + tf.cast(tf.logical_not(masks), tf.float32) * neighbors_aggregated",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_101": {
                "x": {
                    "value": "tf.logical_not(masks)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logical_not_102": {
                "x": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks",
                            "Method Argument"
                        ],
                        [
                            "masks",
                            "Method Argument"
                        ],
                        [
                            "masks",
                            "Method Argument"
                        ],
                        [
                            "masks",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/train.py": {
        "tensorflow": {
            "HashTable_64": {
                "variable": {
                    "value": "interaction_table",
                    "type": "variable",
                    "possible_values": []
                },
                "key_dtype": {
                    "value": "tf.contrib.lookup.KeyValueTensorInitializer(keys=keys, values=values)",
                    "type": "Call",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KeyValueTensorInitializer_65": {
                "keys": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data[:, 0] * offset + train_data[:, 1]",
                            "BinOp"
                        ],
                        [
                            "keys.astype(np.int64)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data[:, 2].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}