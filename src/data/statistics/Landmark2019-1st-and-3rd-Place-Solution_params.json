{
    "exp/v1only.py": {
        "sklearn": {
            "ParameterGrid_222": {
                "param_grid": {
                    "value": "space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'loss': ['arcface', 'cosface', 'softmax'], 'epochs': [5], 'augmentation': ['soft']}]",
                            "List"
                        ]
                    ]
                }
            },
            "ParameterSampler_224": {
                "param_distributions": {
                    "value": "space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'loss': ['arcface', 'cosface', 'softmax'], 'epochs': [5], 'augmentation': ['soft']}]",
                            "List"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "n_iter",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'ex_name': __file__.replace('.py', ''), 'seed': 123456789, 'lr': 0.001, 'batch_size': 32, 'test_batch_size': 64, 'optimizer': 'momentum', 'epochs': 5, 'wd': 1e-05, 'model_name': 'resnet101', 'pooling': 'GeM', 'class_topk': 14950, 'use_fc': True, 'loss': 'arcface', 'margin': 0.3, 's': 30, 'theta_zero': 1.25, 'fc_dim': 512, 'scale_limit': 0.2, 'shear_limit': 0, 'brightness_limit': 0.0, 'contrast_limit': 0.0, 'augmentation': 'soft', 'train_data': 'gld_v1'}",
                            "Dict"
                        ],
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_129": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_130": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_optim(params, model)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "params['epochs'] * len(data_loaders['train'])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "3e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_249": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_all_63": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_135": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.LandmarkNet(n_classes=params['class_topk'], model_name=params['model_name'], pooling=params['pooling'], loss_module=params['loss'], s=params['s'], margin=params['margin'], theta_zero=params['theta_zero'], use_fc=params['use_fc'], fc_dim=params['fc_dim']).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "models.LandmarkNet(n_classes=params['class_topk'], model_name=params['model_name'], pooling=params['pooling'], loss_module=params['loss'], s=params['s'], margin=params['margin'], theta_zero=params['theta_zero'], use_fc=params['use_fc'], fc_dim=params['fc_dim'])",
                            "Call"
                        ],
                        [
                            "model.to('cuda').eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_303": {
                "variable": {
                    "value": "scaled_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.to('cuda')",
                            "Call"
                        ],
                        [
                            "x.to('cuda')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(th, tw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "exp/v2clean.py": {
        "sklearn": {
            "ParameterGrid_232": {
                "param_grid": {
                    "value": "space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'loss': ['arcface']}]",
                            "List"
                        ]
                    ]
                }
            },
            "ParameterSampler_234": {
                "param_distributions": {
                    "value": "space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'loss': ['arcface']}]",
                            "List"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "n_iter",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'ex_name': __file__.replace('.py', ''), 'seed': 123456789, 'lr': 0.001, 'batch_size': 32, 'test_batch_size': 64, 'optimizer': 'momentum', 'epochs': 5, 'scaleup_epochs': 0, 'wd': 1e-05, 'model_name': 'resnet101', 'pooling': 'GeM', 'use_fc': True, 'loss': 'arcface', 'margin': 0.3, 's': 30, 'theta_zero': 1.25, 'fc_dim': 512, 'scale_limit': 0.2, 'shear_limit': 0, 'brightness_limit': 0.0, 'contrast_limit': 0.0, 'augmentation': 'soft', 'train_data': 'gld_v2', 'freeze_bn': True, 'verifythresh': 30, 'freqthresh': 3, 'base_ckpt_path': 'exp/v1only/ep4_augmentation-soft_epochs-5_loss-arcface.pth', 'clean_path': ROOT + 'input/gld_v2/clean_train.csv'}",
                            "Dict"
                        ],
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_135": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_142": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_optim(params, model)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "params['epochs'] * len(data_loaders['train'])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "3e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_259": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_all_69": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_147": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.LandmarkNet(n_classes=params['class_topk'], model_name=params['model_name'], pooling=params['pooling'], loss_module=params['loss'], s=params['s'], margin=params['margin'], theta_zero=params['theta_zero'], use_fc=params['use_fc'], fc_dim=params['fc_dim']).cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "models.LandmarkNet(n_classes=params['class_topk'], model_name=params['model_name'], pooling=params['pooling'], loss_module=params['loss'], s=params['s'], margin=params['margin'], theta_zero=params['theta_zero'], use_fc=params['use_fc'], fc_dim=params['fc_dim'])",
                            "Call"
                        ],
                        [
                            "model.to('cuda').eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_138": {
                "f": {
                    "value": "ROOT + params['base_ckpt_path']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_313": {
                "variable": {
                    "value": "scaled_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.to('cuda')",
                            "Call"
                        ],
                        [
                            "x.to('cuda')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(th, tw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/data_utils.py": {
        "sklearn": {
            "train_test_split_259": {
                "variable": {
                    "value": "(train_split, val_split)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7777777",
                            "Method Argument"
                        ],
                        [
                            "77777",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_171": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LandmarkDataset(paths=df['path'].values, class_ids=class_ids, aspect_gids=df['aspect_gid'].values, transform=transform, scale=scale)",
                            "Call"
                        ],
                        [
                            "LandmarkDataset(paths=df['path'].values, transform=eval_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "gb_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch_custom.GroupedBatchSampler(sampler=sampler, group_ids=df['aspect_gid'].values, batch_size=batch_size, drop_uneven=is_train)",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_163": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LandmarkDataset(paths=df['path'].values, class_ids=class_ids, aspect_gids=df['aspect_gid'].values, transform=transform, scale=scale)",
                            "Call"
                        ],
                        [
                            "LandmarkDataset(paths=df['path'].values, transform=eval_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_165": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LandmarkDataset(paths=df['path'].values, class_ids=class_ids, aspect_gids=df['aspect_gid'].values, transform=transform, scale=scale)",
                            "Call"
                        ],
                        [
                            "LandmarkDataset(paths=df['path'].values, transform=eval_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.class_ids[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_305": {
                "variable": {
                    "value": "data_loaders[split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LandmarkDataset(paths=df['path'].values, class_ids=class_ids, aspect_gids=df['aspect_gid'].values, transform=transform, scale=scale)",
                            "Call"
                        ],
                        [
                            "LandmarkDataset(paths=df['path'].values, transform=eval_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_44": {
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[img[None] for img in imgs]",
                            "ListComp"
                        ],
                        [
                            "[torch.cat(imgs, dim=0)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "sklearn": {
            "ParameterGrid_296": {
                "param_grid": {
                    "value": "space",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ParameterSampler_298": {
                "param_distributions": {
                    "value": "space",
                    "type": "variable",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "n_iter",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_79": {
                "variable": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_102": {
                "variable": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_223": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params['wd']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_70": {
                "obj": {
                    "value": "attributes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': remove_redundant_keys(model.state_dict())}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_225": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params['wd']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_227": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params['wd']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_75": {
                "obj": {
                    "value": "attributes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': remove_redundant_keys(model.state_dict())}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_230": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params['wd']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_232": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params['wd']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_234": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params['wd']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "exp/delf/extract_delf_features.py": {
        "tensorflow": {
            "reshape_42": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_with_extra_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('%sscores:0' % import_scope_prefix)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(attention_with_extra_dim)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_20": {
                "export_dir": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "[tf.saved_model.tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "config.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "import_scope": {
                    "value": "import_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_verbosity_73": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_74": {
                "msg": {
                    "value": "done! Found %d images",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(image_paths)",
                            "Call"
                        ]
                    ]
                }
            },
            "string_input_producer_88": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "image_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "WholeFileReader_90": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_jpeg_92": {
                "variable": {
                    "value": "image_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FastGFile_78": {
                "name": {
                    "value": "CONFIG_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'exp/delf/pretrained/delf_config_example.pbtxt'",
                            "str"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_95": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_101": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_102": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_43": {
                "input": {
                    "value": "attention_with_extra_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('%sscores:0' % import_scope_prefix)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_126": {
                "filename": {
                    "value": "out_desc_fullpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_path, out_desc_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_107": {
                "msg": {
                    "value": "Starting to extract DELF features from images...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_127": {
                "msg": {
                    "value": "Skipping %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "image_paths[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "info_111": {
                "msg": {
                    "value": "Processing image %d out of %d, last %d images took %f seconds",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm.tqdm(range(num_images))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "num_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(image_paths)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cirtorch/datasets/datahelpers.py": {
        "torch": {
            "arange_50": {
                "start": {
                    "value": "x.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cirtorch/datasets/genericdataset.py": {
        "torch": {}
    },
    "cirtorch/datasets/traindataset.py": {
        "torch": {
            "Tensor_131": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_190": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImagesFromList(root='', images=[self.images[i] for i in self.qidxs], imsize=self.imsize, transform=self.transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "qvecs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "net.meta['outputdim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.qidxs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImagesFromList(root='', images=[self.images[i] for i in idxs2images], imsize=self.imsize, transform=self.transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "poolvecs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "net.meta['outputdim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "len(idxs2images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_218": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "poolvecs.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "qvecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(net.meta['outputdim'], len(self.qidxs)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_219": {
                "variable": {
                    "value": "(scores, ranks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(poolvecs.t(), qvecs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "avg_ndist",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_221": {
                "variable": {
                    "value": "n_ndist",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_164": {
                "n": {
                    "value": "len(self.qpool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_179": {
                "n": {
                    "value": "len(self.images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_237": {
                "input": {
                    "value": "qvecs[:, q] - poolvecs[:, ranks[r, q]] + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_237": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cirtorch/examples/test.py": {
        "torch": {
            "load_90": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.network_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_186": {
                "variable": {
                    "value": "Lw",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "whiten_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.network_path + '_{}_whiten'.format(args.whitening)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "whiten_fn + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_212": {
                "obj": {
                    "value": "Lw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "net.meta['Lw'][args.whitening]['ms']",
                            "Subscript"
                        ],
                        [
                            "net.meta['Lw'][args.whitening]['ss']",
                            "Subscript"
                        ],
                        [
                            "torch.load(whiten_fn)",
                            "Call"
                        ],
                        [
                            "{'m': m, 'P': P}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "whiten_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.network_path + '_{}_whiten'.format(args.whitening)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "whiten_fn + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cirtorch/examples/test_e2e.py": {
        "torch": {}
    },
    "cirtorch/examples/train.py": {
        "torch": {
            "ExponentialLR_236": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(parameters, args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(parameters, args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "exp_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.exp(-0.01)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_272": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TuplesDataset(name=args.training_dataset, mode='train', imsize=args.image_size, nnum=args.neg_num, qsize=args.query_size, poolsize=args.pool_size, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_tuples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_168": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_169": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_229": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_287": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TuplesDataset(name=args.training_dataset, mode='val', imsize=args.image_size, nnum=args.neg_num, qsize=float('Inf'), poolsize=float('Inf'), transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_tuples",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_417": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "model.meta['outputdim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "nq * ni",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_537": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(directory, 'model_epoch%d.pth.tar' % state['epoch'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_231": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_245": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_253": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(parameters, args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(parameters, args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "exp_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.exp(-0.01)",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "checkpoint['epoch'] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_301": {
                "seed": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(start_epoch, args.epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_302": {
                "seed": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(start_epoch, args.epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_361": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "model.meta['outputdim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(input[0])",
                            "Call"
                        ],
                        [
                            "len(input[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_427": {
                "tensors": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cirtorch/layers/functional.py": {
        "torch": {
            "min_37": {
                "variable": {
                    "value": "(tmp, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs((w ** 2 - w * b) / w ** 2 - ovr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_47": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + self.eps",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(-2), x.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_89": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs((w ** 2 - w * b) / w ** 2 - ovr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_144": {
                "variable": {
                    "value": "nq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label.data == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "pow_153": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dif + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_153": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_153": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_156": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * lbl * torch.pow(D, 2) + 0.5 * (1 - lbl) * torch.pow(torch.clamp(margin - D, min=0), 2)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_162": {
                "variable": {
                    "value": "nq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label.data == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_169": {
                "variable": {
                    "value": "dist_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(xa - xp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_170": {
                "variable": {
                    "value": "dist_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(xa - xn, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_12": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + self.eps",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(-2), x.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_17": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + self.eps",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(x.size(-2), x.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_22": {
                "input": {
                    "value": "x.clamp(min=eps).pow(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x.size(-2), x.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_22": {
                "input": {
                    "value": "1.0 / p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_172": {
                "input": {
                    "value": "torch.clamp(dist_pos - dist_neg + margin, min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_37": {
                "input": {
                    "value": "(w ** 2 - w * b) / w ** 2 - ovr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_89": {
                "input": {
                    "value": "(w ** 2 - w * b) / w ** 2 - ovr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_169": {
                "input": {
                    "value": "xa - xp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_170": {
                "input": {
                    "value": "xa - xn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_172": {
                "input": {
                    "value": "dist_pos - dist_neg + margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_58": {
                "input": {
                    "value": "wl2 + torch.Tensor(range(l - 1 + Wd + 1)) * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_63": {
                "input": {
                    "value": "wl2 + torch.Tensor(range(l - 1 + Hd + 1)) * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_71": {
                "variable": {
                    "value": "vt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, (int(i_) + torch.Tensor(range(wl)).long()).tolist(), :]",
                            "Subscript"
                        ],
                        [
                            "R[:, :, :, (int(j_) + torch.Tensor(range(wl)).long()).tolist()]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(R.size(-2), R.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "floor_110": {
                "input": {
                    "value": "wl2 + torch.Tensor(range(l - 1 + Wd + 1)) * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_115": {
                "input": {
                    "value": "wl2 + torch.Tensor(range(l - 1 + Hd + 1)) * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_155": {
                "input": {
                    "value": "torch.clamp(margin - D, min=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_155": {
                "input": {
                    "value": "margin - D",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_48": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, (x.size(-2), x.size(-1)))",
                            "Call"
                        ],
                        [
                            "v / (torch.norm(v, p=2, dim=1, keepdim=True) + eps).expand_as(v)",
                            "BinOp"
                        ],
                        [
                            "v + vt",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_131": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + self.eps",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_72": {
                "input": {
                    "value": "vt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(R, (R.size(-2), R.size(-1)))",
                            "Call"
                        ],
                        [
                            "vt / (torch.norm(vt, p=2, dim=1, keepdim=True) + eps).expand_as(vt)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_69": {},
            "Tensor_70": {}
        }
    },
    "cirtorch/layers/loss.py": {
        "torch": {}
    },
    "cirtorch/layers/normalization.py": {
        "torch": {}
    },
    "cirtorch/layers/pooling.py": {
        "torch": {
            "Parameter_40": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1) * p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(mp) * p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cirtorch/networks/imageretrievalnet.py": {
        "torch": {
            "DataLoader_284": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImagesFromList(root='', images=images, imsize=image_size, bbxs=bbxs, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_311": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "net.meta['outputdim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_333": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImagesFromList(root='', images=images, imsize=image_size, bbxs=bbxs, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_367": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImagesFromList(root='', images=images, imsize=image_size, bbxs=bbxs, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "lwhiten",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OUTPUT_DIM[architecture]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OUTPUT_DIM[architecture]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_214": {
                "variable": {
                    "value": "rwhiten",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OUTPUT_DIM[architecture]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OUTPUT_DIM[architecture]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "whiten",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OUTPUT_DIM[architecture]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OUTPUT_DIM[architecture]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_291": {
                "variable": {
                    "value": "vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "net.meta['outputdim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "len(images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_317": {
                "variable": {
                    "value": "input_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.cuda()",
                            "Call"
                        ],
                        [
                            "input.cuda()",
                            "Call"
                        ],
                        [
                            "input.cuda()",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ms",
                            "variable"
                        ],
                        [
                            "o.size()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_180": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/eval_retrieval.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "local_eval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImagesFromList(root='', images=images, imsize=image_size, bbxs=bbxs, transform=eval_transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_53": {
                "variable": {
                    "value": "scaled_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.to('cuda')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h * s // model.DIVIDABLE_BY * model.DIVIDABLE_BY), int(w * s // model.DIVIDABLE_BY * model.DIVIDABLE_BY))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/metrics.py": {
        "torch": {
            "matmul_20": {
                "variable": {
                    "value": "inner_dot_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "target_mat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_22": {
                "variable": {
                    "value": "norm_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(query_mat, p=2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.norm(target_mat, p=2, dim=1, keepdim=True).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "inner_dot_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "target_mat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_23": {
                "input": {
                    "value": "query_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_24": {
                "input": {
                    "value": "target_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/batch_norm.py": {
        "torch": {
            "ones_14": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_42": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/metric_learning.py": {
        "torch": {
            "matmul_322": {
                "variable": {
                    "value": "cor_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(input)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_325": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_mat.unsqueeze(1) - 2 * cor_mat + norm_mat.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ],
                        [
                            "distances + mask * eps",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(distances)",
                            "Call"
                        ],
                        [
                            "distances * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_339": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_367": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "unsqueeze_371": {
                "variable": {
                    "value": "i_not_equal_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices_not_same",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(labels.shape[0]).to(device).byte() ^ 1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_372": {
                "variable": {
                    "value": "i_not_equal_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices_not_same",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(labels.shape[0]).to(device).byte() ^ 1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_373": {
                "variable": {
                    "value": "j_not_equal_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices_not_same",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(labels.shape[0]).to(device).byte() ^ 1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_377": {
                "variable": {
                    "value": "label_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.unsqueeze(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_378": {
                "variable": {
                    "value": "i_equal_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(torch.unsqueeze(labels, 0), torch.unsqueeze(labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_379": {
                "variable": {
                    "value": "i_equal_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(torch.unsqueeze(labels, 0), torch.unsqueeze(labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_29": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_31": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(input)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_33": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(logits, -1.0 + 1e-07, 1.0 - 1e-07)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_34": {
                "variable": {
                    "value": "target_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta + self.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_35": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_68": {
                "variable": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_hat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input.shape[0], weight.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_125": {
                "variable": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "F.normalize(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_126": {
                "variable": {
                    "value": "sine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - torch.pow(cosine, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cosine.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_166": {
                "variable": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "F.normalize(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cosine.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_205": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_224": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "F.normalize(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_230": {
                "variable": {
                    "value": "NormOfFeature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cos_theta.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_328": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_mat.unsqueeze(1) - 2 * cor_mat + norm_mat.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ],
                        [
                            "distances + mask * eps",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(distances)",
                            "Call"
                        ],
                        [
                            "distances * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_330": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_mat.unsqueeze(1) - 2 * cor_mat + norm_mat.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "F.relu(distances)",
                            "Call"
                        ],
                        [
                            "distances + mask * eps",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(distances)",
                            "Call"
                        ],
                        [
                            "distances * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_42": {
                "variable": {
                    "value": "B_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "one_hot < 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.exp(self.s * logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "median_44": {
                "variable": {
                    "value": "theta_med",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp(logits, -1.0 + 1e-07, 1.0 - 1e-07))",
                            "Call"
                        ],
                        [
                            "cos_theta.data.acos()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_129": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cosine > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cosine * self.cos_m - sine * self.sin_m",
                            "BinOp"
                        ],
                        [
                            "torch.where(cosine > 0, phi, cosine)",
                            "Call"
                        ],
                        [
                            "torch.where(cosine > self.th, phi, cosine - self.mm)",
                            "Call"
                        ],
                        [
                            "cosine - self.m",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(input_hat, weight_hat)",
                            "Call"
                        ],
                        [
                            "F.linear(F.normalize(input), F.normalize(self.weight))",
                            "Call"
                        ],
                        [
                            "F.linear(F.normalize(input), F.normalize(self.weight))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_131": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cosine > self.th",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cosine * self.cos_m - sine * self.sin_m",
                            "BinOp"
                        ],
                        [
                            "torch.where(cosine > 0, phi, cosine)",
                            "Call"
                        ],
                        [
                            "torch.where(cosine > self.th, phi, cosine - self.mm)",
                            "Call"
                        ],
                        [
                            "cosine - self.m",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "cosine - self.mm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_282": {
                "variable": {
                    "value": "(hardest_positive_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_positive_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_dist * mask_anchor_positive",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_286": {
                "variable": {
                    "value": "(max_anchor_negative_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pairwise_distance(embeddings, squared=self.squared)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_289": {
                "variable": {
                    "value": "(hardest_negative_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_negative_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_dist + max_anchor_negative_dist * (1.0 - mask_anchor_negative)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_292": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hardest_positive_dist - hardest_negative_dist + 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_293": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(hardest_positive_dist - hardest_negative_dist + 0.1)",
                            "Call"
                        ],
                        [
                            "torch.mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "F.relu(triplet_loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(triplet_loss) / (num_hard_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_308": {
                "variable": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(hardest_positive_dist - hardest_negative_dist + 0.1)",
                            "Call"
                        ],
                        [
                            "torch.mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "F.relu(triplet_loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(triplet_loss) / (num_hard_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gt_311": {
                "variable": {
                    "value": "hard_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(hardest_positive_dist - hardest_negative_dist + 0.1)",
                            "Call"
                        ],
                        [
                            "torch.mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "F.relu(triplet_loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(triplet_loss) / (num_hard_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "1e-16",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_312": {
                "variable": {
                    "value": "num_hard_triplets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hard_triplets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(triplet_loss, 1e-16).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_341": {
                "n": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_344": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_355": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_370": {
                "n": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_377": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_33": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, W)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0 + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_125": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_166": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_224": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_42": {
                "input": {
                    "value": "self.s * logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_42": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_43": {
                "input": {
                    "value": "B_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(one_hot < 1, torch.exp(self.s * logits), torch.zeros_like(logits))",
                            "Call"
                        ],
                        [
                            "torch.sum(B_avg) / input.size(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_45": {
                "input": {
                    "value": "B_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(one_hot < 1, torch.exp(self.s * logits), torch.zeros_like(logits))",
                            "Call"
                        ],
                        [
                            "torch.sum(B_avg) / input.size(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_45": {
                "input": {
                    "value": "torch.min(self.theta_zero * torch.ones_like(theta_med), theta_med)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_126": {
                "input": {
                    "value": "cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(input_hat, weight_hat)",
                            "Call"
                        ],
                        [
                            "F.linear(F.normalize(input), F.normalize(self.weight))",
                            "Call"
                        ],
                        [
                            "F.linear(F.normalize(input), F.normalize(self.weight))",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_314": {
                "input": {
                    "value": "triplet_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(hardest_positive_dist - hardest_negative_dist + 0.1)",
                            "Call"
                        ],
                        [
                            "torch.mean(triplet_loss)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ],
                        [
                            "F.relu(triplet_loss)",
                            "Call"
                        ],
                        [
                            "torch.sum(triplet_loss) / (num_hard_triplets + 1e-16)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_45": {
                "input": {
                    "value": "self.theta_zero * torch.ones_like(theta_med)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_76": {
                "input": {
                    "value": "cosine - one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_45": {
                "input": {
                    "value": "theta_med",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.median(theta)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/modeling/models.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.backbone.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "final_in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "fc_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_50": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "final_in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone.last_linear.in_features",
                            "Attribute"
                        ],
                        [
                            "fc_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/pooling.py": {
        "torch": {
            "randn_130": {
                "variable": {
                    "value": "bottom1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_131": {
                "variable": {
                    "value": "bottom2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "im_zeros_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sketch_1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "im_zeros_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sketch_2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fft_80": {
                "variable": {
                    "value": "fft1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([sketch_1.unsqueeze(-1), im_zeros_1.unsqueeze(-1)], dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_81": {
                "variable": {
                    "value": "fft2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([sketch_2.unsqueeze(-1), im_zeros_2.unsqueeze(-1)], dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.arange(input_dim)[..., np.newaxis], rand_h[..., np.newaxis]), axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "rand_s",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rand_s.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "[sketch_1.unsqueeze(-1), im_zeros_1.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_81": {
                "tensors": {
                    "value": "[sketch_2.unsqueeze(-1), im_zeros_2.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ifft_86": {
                "input": {
                    "value": "torch.cat([fft_product_real.unsqueeze(-1), fft_product_imag.unsqueeze(-1)], dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "tensors": {
                    "value": "[fft_product_real.unsqueeze(-1), fft_product_imag.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/resnet_csail.py": {
        "torch": {
            "load_48": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_65": {
                "variable": {
                    "value": "self.relu_inplace",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation * multi_grid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation * multi_grid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu_inplace",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_149": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_153": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_159": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/torch_custom.py": {
        "torch": {
            "as_tensor_256": {
                "variable": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "group_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_268": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.sampler)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_276": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_277": {
                "variable": {
                    "value": "order[sampled_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(sampled_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_309": {
                "variable": {
                    "value": "first_index_of_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inv_sampled_ids_map[s] for s in first_element_of_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unique_261": {
                "input": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_261": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_modeling.py": {
        "torch": {
            "rand_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_20": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_8": {
                "seed": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_15": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 64, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_9": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}