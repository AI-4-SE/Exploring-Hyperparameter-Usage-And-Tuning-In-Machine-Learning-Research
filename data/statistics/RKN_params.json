{
    "rkn/data/loader.py": {
        "sklearn": {
            "train_test_split_97": {
                "variable": {
                    "value": "(X, _, y, _, lengths, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['y'].values",
                            "Attribute"
                        ],
                        [
                            "train_test_split(X, y, lengths, stratify=y, train_size=n_top, random_state=1)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, lengths, test_size=val_split, stratify=y, random_state=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y in enumerate([neg, pos])",
                            "Call"
                        ]
                    ]
                },
                "train_size": {
                    "value": "n_top",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_100": {
                "variable": {
                    "value": "(X, X_val, y, y_val, lengths, lengths_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "Method Argument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['y'].values",
                            "Attribute"
                        ],
                        [
                            "train_test_split(X, y, lengths, stratify=y, train_size=n_top, random_state=1)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, lengths, test_size=val_split, stratify=y, random_state=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y in enumerate([neg, pos])",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_112": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([np.clip(len(s) + 2 * self.pre_padding, a_min=0, a_max=self.maxlen) for s in X])",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, lengths, stratify=y, train_size=n_top, random_state=1)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, lengths, test_size=val_split, stratify=y, random_state=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([np.clip(len(s) + 2 * self.pre_padding, a_min=0, a_max=self.maxlen) for s in X])",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, lengths, stratify=y, train_size=n_top, random_state=1)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, lengths, test_size=val_split, stratify=y, random_state=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "lengths_val",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lengths_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, lengths, test_size=val_split, stratify=y, random_state=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths_val)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_111": {
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['y'].values",
                            "Attribute"
                        ],
                        [
                            "train_test_split(X, y, lengths, stratify=y, train_size=n_top, random_state=1)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, lengths, test_size=val_split, stratify=y, random_state=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y in enumerate([neg, pos])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['y'].values",
                            "Attribute"
                        ],
                        [
                            "train_test_split(X, y, lengths, stratify=y, train_size=n_top, random_state=1)",
                            "Call"
                        ],
                        [
                            "train_test_split(X, y, lengths, test_size=val_split, stratify=y, random_state=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y in enumerate([neg, pos])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y, lengths, test_size=val_split, stratify=y, random_state=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_val)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rkn/data/loader_scop.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_143": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([np.clip(len(f) + 2 * pre_padding, a_min=0, a_max=maxlen) for f in features])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_142": {
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(datadir + '/{}.labels.npz'.format(seq_list))",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "load_features_labels(datadir, seq_list, label_file)",
                            "Call"
                        ],
                        [
                            "np.asarray([labels[seq] for seq in sequence_name])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rkn/data/scores.py": {
        "sklearn": {
            "precision_recall_curve_25": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_true)",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_score",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_loss_82": {
                "variable": {
                    "value": "metric[log.loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_true)",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_pred)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "accuracy_score_83": {
                "variable": {
                    "value": "metric[accuracy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_true)",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "roc_auc_score_84": {
                "variable": {
                    "value": "metric[auROC]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_true)",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_pred)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "average_precision_score_86": {
                "variable": {
                    "value": "metric[auPRC]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_true)",
                            "Call"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(y_pred)",
                            "Call"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ],
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roc_auc_score_16": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true[sample]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred[sample]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rkn/layers.py": {
        "sklearn": {},
        "torch": {
            "bmm_447": {
                "variable": {
                    "value": "xxt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, xxt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_451": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, xxt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "xxt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(x.transpose(1, 2), x)",
                            "Call"
                        ],
                        [
                            "torch.gesv(eye, xxt)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, kmer_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_330": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_embeddings + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_332": {
                "variable": {
                    "value": "weight[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(self.num_embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_427": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, xxt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.gap_penalty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([gap_penalty])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ParameterList_63": {
                "variable": {
                    "value": "self.kernel_args",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.Tensor([kernel_arg])) for kernel_arg in kernel_args]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "bmm_110": {
                "variable": {
                    "value": "lintrans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight.permute(1, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_114": {
                "variable": {
                    "value": "lintrans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weight.permute(1, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_151": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv_layer(input)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "([-1], [-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_155": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv_layer(input)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "([-1], [-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "PackedSequence_239": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ForgetRKNMaxPost.apply(input, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPackedMaxPost.apply(input, batch_sizes, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "rkn_forward_max_lintrans(input, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "rkn_packed_max_lintrans(input, batch_sizes, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "ForgetRKN.apply(input, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKN.apply(input, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPacked.apply(input, batch_sizes, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPacked.apply(input, batch_sizes, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_forward(input, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_forward(input, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_packed(input, batch_sizes, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_packed(input, batch_sizes, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "outputs.select(dim=-1, index=-1)",
                            "Call"
                        ],
                        [
                            "F.linear(outputs.transpose(-1, -2), lintrans)",
                            "Call"
                        ],
                        [
                            "outputs * self.agg_weight.view(1, 1, -1, 1)",
                            "BinOp"
                        ],
                        [
                            "outputs * self.agg_weight.view(1, 1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "F.linear(outputs, lintrans)",
                            "Call"
                        ],
                        [
                            "outputs.view(list(outputs.shape[:-2]) + [-1])",
                            "Call"
                        ],
                        [
                            "PackedSequence(outputs, batch_sizes)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(outputs)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "batch_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_242": {
                "variable": {
                    "value": "(outputs, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ForgetRKNMaxPost.apply(input, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPackedMaxPost.apply(input, batch_sizes, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "rkn_forward_max_lintrans(input, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "rkn_packed_max_lintrans(input, batch_sizes, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "ForgetRKN.apply(input, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKN.apply(input, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPacked.apply(input, batch_sizes, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPacked.apply(input, batch_sizes, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_forward(input, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_forward(input, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_packed(input, batch_sizes, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_packed(input, batch_sizes, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "outputs.select(dim=-1, index=-1)",
                            "Call"
                        ],
                        [
                            "F.linear(outputs.transpose(-1, -2), lintrans)",
                            "Call"
                        ],
                        [
                            "outputs * self.agg_weight.view(1, 1, -1, 1)",
                            "BinOp"
                        ],
                        [
                            "outputs * self.agg_weight.view(1, 1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "F.linear(outputs, lintrans)",
                            "Call"
                        ],
                        [
                            "outputs.view(list(outputs.shape[:-2]) + [-1])",
                            "Call"
                        ],
                        [
                            "PackedSequence(outputs, batch_sizes)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_250": {
                "variable": {
                    "value": "(input, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv_layer(input)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_324": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_343": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ForgetRKNMaxPost.apply(input, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPackedMaxPost.apply(input, batch_sizes, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "rkn_forward_max_lintrans(input, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "rkn_packed_max_lintrans(input, batch_sizes, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "ForgetRKN.apply(input, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKN.apply(input, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPacked.apply(input, batch_sizes, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPacked.apply(input, batch_sizes, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_forward(input, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_forward(input, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_packed(input, batch_sizes, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_packed(input, batch_sizes, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "output.select(dim=-1, index=-1)",
                            "Call"
                        ],
                        [
                            "F.linear(output.transpose(-1, -2), lintrans)",
                            "Call"
                        ],
                        [
                            "output * self.agg_weight.view(1, -1, 1)",
                            "BinOp"
                        ],
                        [
                            "output * self.agg_weight.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(output, lintrans)",
                            "Call"
                        ],
                        [
                            "output.view(list(output.shape[:-2]) + [-1])",
                            "Call"
                        ],
                        [
                            "gmp_pooling(outputs, lengths, alpha=self.pooling_arg)",
                            "Call"
                        ],
                        [
                            "input.unfold(0, self.kmer_size, 1).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "output.contiguous()",
                            "Call"
                        ],
                        [
                            "output.view(-1, self.kmer_size, self.input_size)",
                            "Call"
                        ],
                        [
                            "output[mask]",
                            "Subscript"
                        ],
                        [
                            "self.embedding(input, self.weight)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(outputs)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(input)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_363": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_367": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, xxt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_368": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y.cuda()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_408": {
                "variable": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w_init, self.bias.data.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_76": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "kmer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_222": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "lintrans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(self.weight.permute(1, 0, 2), self.weight.permute(1, 2, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight.permute(1, 0, 2), weight.permute(1, 2, 0))",
                            "Call"
                        ],
                        [
                            "self.kappa(lintrans)",
                            "Call"
                        ],
                        [
                            "lintrans.log()",
                            "Call"
                        ],
                        [
                            "lintrans.cumsum(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.sum(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "lintrans.logsumexp(dim=0) / self.kernel_args[0]",
                            "BinOp"
                        ],
                        [
                            "lintrans.exp()",
                            "Call"
                        ],
                        [
                            "lintrans.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.prod(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.prod(dim=0)",
                            "Call"
                        ],
                        [
                            "ops.matrix_inverse_sqrt(lintrans)",
                            "Call"
                        ],
                        [
                            "self._compute_lintrans()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_223": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "lintrans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(self.weight.permute(1, 0, 2), self.weight.permute(1, 2, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight.permute(1, 0, 2), weight.permute(1, 2, 0))",
                            "Call"
                        ],
                        [
                            "self.kappa(lintrans)",
                            "Call"
                        ],
                        [
                            "lintrans.log()",
                            "Call"
                        ],
                        [
                            "lintrans.cumsum(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.sum(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "lintrans.logsumexp(dim=0) / self.kernel_args[0]",
                            "BinOp"
                        ],
                        [
                            "lintrans.exp()",
                            "Call"
                        ],
                        [
                            "lintrans.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.prod(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.prod(dim=0)",
                            "Call"
                        ],
                        [
                            "ops.matrix_inverse_sqrt(lintrans)",
                            "Call"
                        ],
                        [
                            "self._compute_lintrans()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_235": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ForgetRKNMaxPost.apply(input, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPackedMaxPost.apply(input, batch_sizes, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "rkn_forward_max_lintrans(input, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "rkn_packed_max_lintrans(input, batch_sizes, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "ForgetRKN.apply(input, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKN.apply(input, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPacked.apply(input, batch_sizes, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPacked.apply(input, batch_sizes, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_forward(input, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_forward(input, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_packed(input, batch_sizes, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_packed(input, batch_sizes, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "output.select(dim=-1, index=-1)",
                            "Call"
                        ],
                        [
                            "F.linear(output.transpose(-1, -2), lintrans)",
                            "Call"
                        ],
                        [
                            "output * self.agg_weight.view(1, -1, 1)",
                            "BinOp"
                        ],
                        [
                            "output * self.agg_weight.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(output, lintrans)",
                            "Call"
                        ],
                        [
                            "output.view(list(output.shape[:-2]) + [-1])",
                            "Call"
                        ],
                        [
                            "gmp_pooling(outputs, lengths, alpha=self.pooling_arg)",
                            "Call"
                        ],
                        [
                            "input.unfold(0, self.kmer_size, 1).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "output.contiguous()",
                            "Call"
                        ],
                        [
                            "output.view(-1, self.kmer_size, self.input_size)",
                            "Call"
                        ],
                        [
                            "output[mask]",
                            "Subscript"
                        ],
                        [
                            "self.embedding(input, self.weight)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "lintrans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(self.weight.permute(1, 0, 2), self.weight.permute(1, 2, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight.permute(1, 0, 2), weight.permute(1, 2, 0))",
                            "Call"
                        ],
                        [
                            "self.kappa(lintrans)",
                            "Call"
                        ],
                        [
                            "lintrans.log()",
                            "Call"
                        ],
                        [
                            "lintrans.cumsum(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.sum(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "lintrans.logsumexp(dim=0) / self.kernel_args[0]",
                            "BinOp"
                        ],
                        [
                            "lintrans.exp()",
                            "Call"
                        ],
                        [
                            "lintrans.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.prod(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.prod(dim=0)",
                            "Call"
                        ],
                        [
                            "ops.matrix_inverse_sqrt(lintrans)",
                            "Call"
                        ],
                        [
                            "self._compute_lintrans()",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_236": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ForgetRKNMaxPost.apply(input, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPackedMaxPost.apply(input, batch_sizes, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "rkn_forward_max_lintrans(input, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "rkn_packed_max_lintrans(input, batch_sizes, forget, hx, self.la_feature, self.additive, lintrans)",
                            "Call"
                        ],
                        [
                            "ForgetRKN.apply(input, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKN.apply(input, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPacked.apply(input, batch_sizes, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "ForgetRKNPacked.apply(input, batch_sizes, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_forward(input, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_forward(input, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_packed(input, batch_sizes, forget, hx, self.la_feature, self.additive)",
                            "Call"
                        ],
                        [
                            "rkn_packed(input, batch_sizes, forget, hx, False, self.additive)",
                            "Call"
                        ],
                        [
                            "outputs.select(dim=-1, index=-1)",
                            "Call"
                        ],
                        [
                            "F.linear(outputs.transpose(-1, -2), lintrans)",
                            "Call"
                        ],
                        [
                            "outputs * self.agg_weight.view(1, 1, -1, 1)",
                            "BinOp"
                        ],
                        [
                            "outputs * self.agg_weight.view(1, 1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "F.linear(outputs, lintrans)",
                            "Call"
                        ],
                        [
                            "outputs.view(list(outputs.shape[:-2]) + [-1])",
                            "Call"
                        ],
                        [
                            "PackedSequence(outputs, batch_sizes)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(outputs)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "lintrans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(self.weight.permute(1, 0, 2), self.weight.permute(1, 2, 0))",
                            "Call"
                        ],
                        [
                            "torch.bmm(weight.permute(1, 0, 2), weight.permute(1, 2, 0))",
                            "Call"
                        ],
                        [
                            "self.kappa(lintrans)",
                            "Call"
                        ],
                        [
                            "lintrans.log()",
                            "Call"
                        ],
                        [
                            "lintrans.cumsum(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.sum(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "lintrans.logsumexp(dim=0) / self.kernel_args[0]",
                            "BinOp"
                        ],
                        [
                            "lintrans.exp()",
                            "Call"
                        ],
                        [
                            "lintrans.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.prod(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "lintrans.prod(dim=0)",
                            "Call"
                        ],
                        [
                            "ops.matrix_inverse_sqrt(lintrans)",
                            "Call"
                        ],
                        [
                            "self._compute_lintrans()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_280": {
                "n": {
                    "value": "patches.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_316": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, xxt)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.parameters()",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "spherical_kmeans(patches, self.hidden_size, init=init)",
                            "Call"
                        ],
                        [
                            "spherical_kmeans2(patches, self.hidden_size, init=init)",
                            "Call"
                        ],
                        [
                            "weight.view_as(self.weight)",
                            "Call"
                        ],
                        [
                            "self._make_weight()",
                            "Call"
                        ],
                        [
                            "np.sqrt(BLOSUM62)",
                            "Call"
                        ],
                        [
                            "BLOSUM62 - BLOSUM62.mean(axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "weight / np.linalg.norm(weight, axis=1, keepdims=True).clip(1e-06)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(weight.astype(np.float32))",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.num_embeddings + 1, self.num_embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_332": {
                "*size": {
                    "value": "self.num_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_403": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dw, db.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_419": {
                "ndarray": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimize.fmin_l_bfgs_b(eval_loss, w_init, fprime=eval_grad, maxiter=100, disp=0)",
                            "Call"
                        ],
                        [
                            "w[0]",
                            "Subscript"
                        ],
                        [
                            "w.reshape((self.out_features, -1))",
                            "Call"
                        ],
                        [
                            "w.reshape((self.out_features, -1))",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_422": {
                "ndarray": {
                    "value": "w[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_423": {
                "ndarray": {
                    "value": "w[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "data": {
                    "value": "torch.Tensor([kernel_arg])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_378": {
                "ndarray": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimize.fmin_l_bfgs_b(eval_loss, w_init, fprime=eval_grad, maxiter=100, disp=0)",
                            "Call"
                        ],
                        [
                            "w[0]",
                            "Subscript"
                        ],
                        [
                            "w.reshape((self.out_features, -1))",
                            "Call"
                        ],
                        [
                            "w.reshape((self.out_features, -1))",
                            "Call"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_382": {
                "ndarray": {
                    "value": "w[:, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_383": {
                "ndarray": {
                    "value": "w[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_389": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_391": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train_scop.py": {
        "torch": {
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_221": {
                "variable": {
                    "value": "target_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_359": {
                "variable": {
                    "value": "init_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "init_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.get_tensor(tfid, val_split=0, generate_neg=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_363": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.get_tensor(tfid, val_split=0.25)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_365": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.get_tensor(tfid, val_split=0.25)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_377": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_378": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.rkn.rkn_model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.Adam([{'params': model.rkn.rkn_model.parameters()}, {'params': model.rkn.classifier.parameters(), 'weight_decay': args.regularization}], lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_389": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.get_tensor(tfid, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_183": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_351": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_371": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.rkn.rkn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_373": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.rkn.rkn_model.parameters()}, {'params': model.rkn.classifier.parameters(), 'weight_decay': args.regularization}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_238": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_406": {
                "obj": {
                    "value": "{'args': args, 'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "tfid_outdir + '/model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_318": {
                "input": {
                    "value": "pred == target.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/train_scop175.py": {
        "torch": {
            "DataLoader_405": {
                "variable": {
                    "value": "init_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_data(traindir, train_list, maxlen=maxlen, pre_padding=pre_padding)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_407": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_data(traindir, train_list, maxlen=maxlen, pre_padding=pre_padding)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_429": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_430": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.rkn.rkn_model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.Adam([{'params': model.rkn.rkn_model.parameters()}, {'params': model.rkn.classifier.parameters(), 'weight_decay': args.regularization}], lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_445": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_data(testdir, test_list, maxlen=maxlen, pre_padding=pre_padding, label_file='fold_label_relation2.txt')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_391": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_392": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_414": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[load_data(traindir, val_ref.format(val_l), maxlen=maxlen, pre_padding=pre_padding) for val_l in val_list]",
                            "ListComp"
                        ],
                        [
                            "load_data(traindir, val_list, maxlen=maxlen, pre_padding=pre_padding)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_422": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.rkn.rkn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_424": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.rkn.rkn_model.parameters()}, {'params': model.rkn.classifier.parameters(), 'weight_decay': args.regularization}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_143": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.embed_layer(input, lengths)",
                            "Call"
                        ],
                        [
                            "self.embed_layer(input, lengths)",
                            "Call"
                        ],
                        [
                            "self.embed_layer(input, lengths)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(n_samples, batch_out.shape[-1])",
                            "Call"
                        ],
                        [
                            "self.forward(data, lengths)",
                            "Call"
                        ],
                        [
                            "self.forward(data, lengths)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader",
                            "variable"
                        ],
                        [
                            "lengths.sort(descending=True)",
                            "Call"
                        ],
                        [
                            "lengths.cuda()",
                            "Call"
                        ],
                        [
                            "lengths.sort(descending=True)",
                            "Call"
                        ],
                        [
                            "lengths.cuda()",
                            "Call"
                        ],
                        [
                            "train_loader",
                            "variable"
                        ],
                        [
                            "lengths.sort(descending=True)",
                            "Call"
                        ],
                        [
                            "lengths.cuda()",
                            "Call"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_185": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_482": {
                "obj": {
                    "value": "{'args': args, 'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.outdir + '/model.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_239": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_358": {
                "input": {
                    "value": "pred == target.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_411": {
                "dataset": {
                    "value": "val_d",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rkn/data/data_helper.py": {
        "torch": {
            "cat_129": {
                "variable": {
                    "value": "self.data_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.data_tensor]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_like_110": {
                "input": {
                    "value": "data_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_tensor[index].clone()",
                            "Call"
                        ],
                        [
                            "data_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_126": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_tensor.clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rkn/forget_rkn/rkn_cuda.py": {
        "torch": {
            "load_7": {
                "variable": {
                    "value": "forget_rkn",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "forget_rkn",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "['/'.join([curr_folder, 'forget_rkn_cuda.cpp']), '/'.join([curr_folder, 'forget_rkn_cuda_kernel.cu'])]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_14": {
                "variable": {
                    "value": "forget_rkn_max",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "forget_rkn_max",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "['/'.join([curr_folder, 'forget_rkn_max_cuda.cpp']), '/'.join([curr_folder, 'forget_rkn_max_cuda_kernel.cu'])]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "forget_rkn.packed_forward(inputs, batch_sizes, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.packed_max_forward(inputs, batch_sizes, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "forget_rkn.packed_forward(inputs, batch_sizes, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn.forward(inputs, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.max_forward(inputs, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.packed_max_forward(inputs, batch_sizes, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, 0)",
                            "Call"
                        ],
                        [
                            "forget_rkn.packed_forward(inputs, batch_sizes, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn.forward(inputs, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.max_forward(inputs, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.packed_max_forward(inputs, batch_sizes, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "forget_rkn.packed_forward(inputs, batch_sizes, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.packed_max_forward(inputs, batch_sizes, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_224": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "forget_rkn.packed_forward(inputs, batch_sizes, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.packed_max_forward(inputs, batch_sizes, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "forget_rkn.packed_forward(inputs, batch_sizes, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn.forward(inputs, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.max_forward(inputs, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.packed_max_forward(inputs, batch_sizes, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, 0)",
                            "Call"
                        ],
                        [
                            "forget_rkn.packed_forward(inputs, batch_sizes, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn.forward(inputs, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.max_forward(inputs, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.packed_max_forward(inputs, batch_sizes, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "forget_rkn.packed_forward(inputs, batch_sizes, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.packed_max_forward(inputs, batch_sizes, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_325": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "forget_rkn.packed_forward(inputs, batch_sizes, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.packed_max_forward(inputs, batch_sizes, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_393": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "forget_rkn.packed_forward(inputs, batch_sizes, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn.forward(inputs, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.max_forward(inputs, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.packed_max_forward(inputs, batch_sizes, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_394": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(outputs, 0)",
                            "Call"
                        ],
                        [
                            "forget_rkn.packed_forward(inputs, batch_sizes, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn.forward(inputs, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.max_forward(inputs, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.packed_max_forward(inputs, batch_sizes, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_395": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(output, 0)",
                            "Call"
                        ],
                        [
                            "forget_rkn.packed_forward(inputs, batch_sizes, forget, hidden, compute_la, additive)",
                            "Call"
                        ],
                        [
                            "forget_rkn_max.packed_max_forward(inputs, batch_sizes, forget, hidden, compute_la, additive, lintrans)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_122": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget * hx + (1.0 - forget) * hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "forget * hx + (1.0 - forget) * (hx_low + step_input)",
                            "BinOp"
                        ],
                        [
                            "forget * hx + (1.0 - forget) * hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(forget * hx, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, aux)",
                            "Call"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(forget * hx, aux)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "hx_low",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, hx[:, :, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget * hx + (1.0 - forget) * hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "forget * hx + (1.0 - forget) * (hx_low + step_input)",
                            "BinOp"
                        ],
                        [
                            "forget * hx + (1.0 - forget) * hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(forget * hx, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, aux)",
                            "Call"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(forget * hx, aux)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "hx_low",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, hx[:, :, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_213": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget * hx + (1.0 - forget) * hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "forget * hx + (1.0 - forget) * (hx_low + step_input)",
                            "BinOp"
                        ],
                        [
                            "forget * hx + (1.0 - forget) * hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(forget * hx, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, aux)",
                            "Call"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(forget * hx, aux)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "hx_low",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, hx[:, :, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_216": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forget * hx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_243": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget * hx + (1.0 - forget) * hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "forget * hx + (1.0 - forget) * (hx_low + step_input)",
                            "BinOp"
                        ],
                        [
                            "forget * hx + (1.0 - forget) * hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(forget * hx, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, aux)",
                            "Call"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(forget * hx, aux)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "hx_low",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, hx[:, :, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_305": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget * hx + (1.0 - forget) * hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "forget * hx + (1.0 - forget) * (hx_low + step_input)",
                            "BinOp"
                        ],
                        [
                            "forget * hx + (1.0 - forget) * hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(forget * hx, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, aux)",
                            "Call"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(forget * hx, aux)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "hx_low",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, hx[:, :, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_344": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forget * hx + (1.0 - forget) * hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "forget * hx + (1.0 - forget) * (hx_low + step_input)",
                            "BinOp"
                        ],
                        [
                            "forget * hx + (1.0 - forget) * hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(forget * hx, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.max(forget * hx, aux)",
                            "Call"
                        ],
                        [
                            "hx[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(forget * hx, aux)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ],
                        [
                            "hx",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "hx_low",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, hx[:, :, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_219": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh + hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "hh + hx_low + step_input",
                            "BinOp"
                        ],
                        [
                            "hh + hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_264": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forget * hx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_266": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forget * hx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_311": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh + hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "hh + hx_low + step_input",
                            "BinOp"
                        ],
                        [
                            "hh + hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_313": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forget * hx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensordot_316": {
                "variable": {
                    "value": "aux",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "torch.tensordot(aux, lintrans, dims=[[1], [0]])",
                            "Call"
                        ],
                        [
                            "aux.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "hx_low + step_input",
                            "BinOp"
                        ],
                        [
                            "hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "torch.tensordot(aux, lintrans, dims=[[1], [0]])",
                            "Call"
                        ],
                        [
                            "aux.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "lintrans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(0) if lintrans is None else lintrans",
                            "IfExp"
                        ],
                        [
                            "torch.empty(0) if lintrans is None else lintrans",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[[1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_320": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh + hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "hh + hx_low + step_input",
                            "BinOp"
                        ],
                        [
                            "hh + hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_370": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forget * hx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_373": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh + hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "hh + hx_low + step_input",
                            "BinOp"
                        ],
                        [
                            "hh + hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensordot_376": {
                "variable": {
                    "value": "aux",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "torch.tensordot(aux, lintrans, dims=[[1], [0]])",
                            "Call"
                        ],
                        [
                            "aux.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "hx_low + step_input",
                            "BinOp"
                        ],
                        [
                            "hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "torch.tensordot(aux, lintrans, dims=[[1], [0]])",
                            "Call"
                        ],
                        [
                            "aux.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "lintrans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(0) if lintrans is None else lintrans",
                            "IfExp"
                        ],
                        [
                            "torch.empty(0) if lintrans is None else lintrans",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[[1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_380": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh + hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "hh + hx_low + step_input",
                            "BinOp"
                        ],
                        [
                            "hh + hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_65": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_89": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_271": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh + hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "hh + hx_low + step_input",
                            "BinOp"
                        ],
                        [
                            "hh + hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_273": {
                "variable": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh + hx_low * input[i]",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "hh + hx_low + step_input",
                            "BinOp"
                        ],
                        [
                            "hh + hx_low * step_input",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * input[i])",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "torch.max(hh, hx_low + step_input)",
                            "Call"
                        ],
                        [
                            "torch.max(hh, hx_low * step_input)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(hx, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "hh[:-dec]",
                            "Subscript"
                        ],
                        [
                            "forget * hx",
                            "BinOp"
                        ],
                        [
                            "torch.max(hh, aux)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rkn/kernels.py": {
        "torch": {
            "exp_11": {
                "input": {
                    "value": "alpha * (x - 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rkn/models.py": {
        "torch": {
            "ModuleList_65": {
                "variable": {
                    "value": "self.rkn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rkn_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "rkn/ops.py": {
        "torch": {
            "symeig_14": {
                "variable": {
                    "value": "(e, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.cpu()",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reciprocal_31": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ei + ej) * ei * ej",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_23": {
                "input": {
                    "value": "e_rsqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_sqrt.reciprocal()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_23": {
                "input": {
                    "value": "v.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rkn/utils.py": {
        "torch": {
            "Tensor_11": {
                "variable": {
                    "value": "clusters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_157": {
                "variable": {
                    "value": "reverse_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_length",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "len(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_33": {
                "variable": {
                    "value": "new_dist_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "closest_dist_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * (norm - clusters[[0]].mm(x.t()))",
                            "BinOp"
                        ],
                        [
                            "closest_dist_sq.view(-1)",
                            "Call"
                        ],
                        [
                            "best_dist_sq",
                            "variable"
                        ]
                    ]
                }
            },
            "randperm_63": {
                "n": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_112": {
                "n": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_92": {
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp.mean()",
                            "Call"
                        ],
                        [
                            "tmp.mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_141": {
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp.mean()",
                            "Call"
                        ],
                        [
                            "tmp.mean()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}